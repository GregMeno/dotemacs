((tags "manual") (section 2 "Foreign type specifiers" (p "Here is a list of valid foreign type specifiers:") (section 3 "scheme-object" (p "An arbitrary Scheme data object (immediate or non-immediate).")) (section 3 "bool" (p "As argument: any value (" (tt "#f") " is false, anything else is true).") (p "As result: anything different from 0 and the " (tt "NULL") " pointer is " (tt "#t") ".")) (section 3 "byte unsigned-byte" (p "A byte.")) (section 3 "char unsigned-char" (p "A character.")) (section 3 "short unsigned-short" (p "A short integer number.")) (section 3 "int unsigned-int int32 unsigned-int32" (p "An small integer number in fixnum range (at least 30 bit).")) (section 3 "integer unsigned-integer integer32 unsigned-integer32 integer64" (p "Either a fixnum or a flonum in the range of a (unsigned) machine " (i "int") " or with 32/64 bit width.")) (section 3 "long unsigned-long" (p "Either a fixnum or a flonum in the range of a (unsigned) machine " (i "long") " or with 32 bit width.")) (section 3 "float double" (p "A floating-point number. If an exact integer is passed as an argument, then it is automatically converted to a float.")) (section 3 "number" (p "A floating-point number. Similar to " (tt "double") ", but when used as a result type, then either an exact integer or a floating-point number is returned, depending on whether the result fits into an exact integer or not.")) (section 3 "symbol" (p "A symbol, which will be passed to foreign code as a zero-terminated string.") (p "When declared as the result of foreign code, the result should be a string and a symbol with the same name will be interned in the symbol table (and returned to the caller).")) (section 3 "scheme-pointer" (p "An untyped pointer to the contents of a non-immediate Scheme object (not allowed as return type). The value " (tt "#f") " is also allowed and is passed as a " (tt "NULL") " pointer.") (p "Don't confuse this type with " (tt "(c-pointer ...)") " which means something different (a machine-pointer object).")) (section 3 "nonnull-scheme-pointer" (p "As " (tt "scheme-pointer") ", but guaranteed not to be " (tt "#f") ".") (p "Don't confuse this type with " (tt "(nonnull-c-pointer ...)") " which means something different (a machine-pointer object).")) (section 3 "c-pointer" (p "An untyped operating-system pointer or a locative. The value " (tt "#f") " is also allowed and is passed as a " (tt "NULL") " pointer. If uses as the type of a return value, a " (tt "NULL") " pointer will be returned as " (tt "#f") ".")) (section 3 "nonnull-c-pointer" (p "As " (tt "c-pointer") ", but guaranteed not to be " (tt "#f/NULL") ".")) (section 3 "blob" (p "A blob object, passed as a pointer to its contents. Arguments of type " (tt "blob") " may optionally be " (tt "#f") ", which is passed as a NULL pointer.") (p "This is not allowed as a return type.")) (section 3 "nonnull-blob" (p "As " (tt "blob") ", but guaranteed not to be " (tt "#f") ".")) (section 3 "u8vector") (section 3 "u16vector") (section 3 "u32vector") (section 3 "s8vector") (section 3 "s16vector") (section 3 "s32vector") (section 3 "f32vector") (section 3 "f64vector" (p "A SRFI-4 number-vector object, passed as a pointer to its contents.") (p "These type specifiers are not allowed as return types.")) (section 3 "nonnull-u8vector ") (section 3 "nonnull-u16vector ") (section 3 "nonnull-u32vector ") (section 3 "nonnull-s8vector ") (section 3 "nonnull-s16vector") (section 3 "nonnull-s32vector") (section 3 "nonnull-f32vector") (section 3 "nonnull-f64vector" (p "As " (tt "u8vector ...") ", but guaranteed not to be " (tt "#f") ".")) (section 3 "c-string" (p "A C string (zero-terminated). The value " (tt "#f") " is also allowed and is passed as a " (tt "NULL") " pointer. If uses as the type of a return value, a " (tt "NULL") " pointer will be returned as " (tt "#f") ". Note that the string is copied (with a zero-byte appended) when passed as an argument to a foreign function. Also a return value of this type is copied into garbage collected memory.")) (section 3 "nonnull-c-string" (p "As " (tt "c-string") ", but guaranteed not to be " (tt "#f/NULL") ".")) (section 3 "[nonnull-] c-string*" (p "Similar to " (tt "[nonnull-] c-string") ", but if used as a result-type, the pointer returned by the foreign code will be freed (using the C-libraries " (tt "free(1)") ") after copying. This type specifier is not valid as a result type for callbacks defined with " (tt "define-external") ".")) (section 3 "[nonnull-] unsigned-c-string[*]" (p "Same as " (tt "c-string") ", but maps to the " (tt "unsigned char *") " C type.")) (section 3 "c-string-list" (p "Expects a pointer to a list of C strings teminated by a " (tt "NULL") " pointer and returns a list of strings.") (p "Only valid as a result type of non-callback functions.")) (section 3 "c-string-list*" (p "Similar to " (tt "c-string-list") " but releases the storage of each string and the pointer array using " (tt "free(1)") ".")) (section 3 "void" (p "Specifies an undefined return value.") (p "Not allowed as argument type.")) (section 3 "(const TYPE)" (p "The foreign type " (tt "TYPE") " with an additional " (tt "const") " specifier.")) (section 3 "(enum NAME)" (p "An enumeration type. Handled internally as an " (tt "integer") ".")) (section 3 "(c-pointer TYPE)" (p "An operating-system pointer or a locative to an object of " (tt "TYPE") ".")) (section 3 "(nonnull-c-pointer TYPE)" (p "As " (tt "(c-pointer TYPE)") ", but guaranteed not to be " (tt "#f/NULL") ".")) (section 3 "(ref TYPE)" (p "A C++ reference type. Reference types are handled the same way as pointers inside Scheme code.")) (section 3 "(struct NAME)" (p "A struct of the name " (tt "NAME") ", which should be a string.") (p "Structs cannot be directly passed as arguments to foreign function, neither can they be result values. Pointers to structs are allowed, though.")) (section 3 "(template TYPE ARGTYPE ...)" (p "A C++ template type. For example " (tt "vector<int>") " would be specified as " (tt "(template \"vector\" int)") ".") (p "Template types cannot be directly passed as arguments or returned as results.")) (section 3 "(union NAME)" (p "A union of the name " (tt "NAME") ", which should be a string.") (p "Unions cannot be directly passed as arguments to foreign function, neither can they be result values. Pointers to unions are allowed, though.")) (section 3 "(instance CNAME SCHEMECLASS)" (p "A pointer to a C++ class instance wrapped into a Scheme object instance. " (tt "CNAME") " should designate the name of the C++ class, and " (tt "SCHEMECLASS") " should be the class that wraps the instance pointer.") (p "To use this, an extension will be required that provides an object-creation- and access-interface compatible to " (int-link "/eggref/4/coops" "coops") " or " (int-link "/eggref/4/tinyclos" "tinyclos") ". Speecifically, it should provide the following operations:") (pre " (make SCHEMECLASS 'this POINTER)\n (slot-ref INSTANCE 'this)")) (section 3 "(instance-ref CNAME SCHEMECLASS)" (p "A reference to a C++ class instance.")) (section 3 "(function RESULTTYPE (ARGUMENTTYPE1 ... [...]) [CALLCONV])" (p "A function pointer. " (tt "CALLCONV") " specifies an optional calling convention and should be a string. The meaning of this string is entirely platform dependent. The value " (tt "#f") " is also allowed and is passed as a " (tt "NULL") " pointer.")) (section 3 "Mappings" (p "Foreign types are mapped to C types in the following manner:") (table (tr (td "bool") (td "\nint\n")) (tr (td "[unsigned-]char") (td "\n[unsigned] char\n")) (tr (td "[unsigned-]byte") (td "\n[unsigned] char\n")) (tr (td "[unsigned-]short") (td "\n[unsigned] short\n")) (tr (td "[unsigned-]int") (td "\n[unsigned] int\n")) (tr (td "[unsigned-]integer") (td "\n[unsigned] int\n")) (tr (td "[unsigned-]long") (td "\n[unsigned] long\n")) (tr (td "float") (td "\nfloat\n")) (tr (td "double") (td "\ndouble\n")) (tr (td "number") (td "\ndouble\n")) (tr (td "[nonnull-]c-pointer") (td "\nvoid *\n")) (tr (td "[nonnull-]blob") (td "\nunsigned char *\n")) (tr (td "[nonnull-]u8vector") (td "\nunsigned char *\n")) (tr (td "[nonnull-]s8vector") (td "\nchar *\n")) (tr (td "[nonnull-]u16vector") (td "\nunsigned short *\n")) (tr (td "[nonnull-]s16vector") (td "\nshort *\n")) (tr (td "[nonnull-]u32vector") (td "\nuint32_t *\n")) (tr (td "[nonnull-]s32vector") (td "\nint32_t *\n")) (tr (td "[nonnull-]f32vector") (td "\nfloat *\n")) (tr (td "[nonnull-]f64vector") (td "\ndouble *\n")) (tr (td "[nonnull-]c-string") (td "\nchar *\n")) (tr (td "[nonnull-]unsigned-c-string") (td "\nunsigned char *\n")) "\n" (tr (td "c-string-list") (td "char **")) "\n" (tr (td "symbol") (td "\nchar *\n")) (tr (td "void") (td "\nvoid\n")) (tr (td "([nonnull-]c-pointer TYPE)") (td "\nTYPE *\n")) (tr (td "(enum NAME)") (td "\nenum NAME\n")) (tr (td "(struct NAME)") (td "\nstruct NAME\n")) (tr (td "(ref TYPE)") (td "\nTYPE &\n")) (tr (td "(template T1 T2 ...)") (td "\nT1<T2, ...>\n")) (tr (td "(union NAME)") (td "\nunion NAME\n")) (tr (td "(function RTYPE (ATYPE ...) [CALLCONV])") (td "\n[CALLCONV] RTYPE (*)(ATYPE, ...)\n")) (tr (td "(instance CNAME SNAME)") (td "\nCNAME *\n")) (tr (td "(instance-ref CNAME SNAME)") (td "\nCNAME &\n"))) (hr) (p "Previous: " (int-link "Accessing external objects")) (p "Next: " (int-link "Embedding")))))
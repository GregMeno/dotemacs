(index ("undefined-condition?" 0) ("unbound-variable-condition?" 270) ("current-language" 559) ("current-country" 688) ("current-locale-details" 813) ("current-locale-format-function" 964) ("reset-locale-parameters" 1410) ("declare-bundle!" 1759) ("undeclare-bundle!" 1878) ("store-bundle!" 2055) ("load-bundle!" 2207) ("load-best-available-bundle!" 2355) ("remove-bundle!" 2626) ("remove-bundle-directory!" 2929) ("declared-bundle-specifiers" 3410) ("declared-bundle-templates" 3576) ("most-specific-bundle-specifier" 3778) ("required-localized-template" 4217) ("localized-template" 4488) ("localized-template/default" 4870) ("make-localized-template" 5295) ("make-localized-template/default" 5533) ("make-required-localized-template" 5795) ("localized-format" 6077) ("localized-template-set!" 6636) ("load-localized-compiled-code" 7094) ("localized-templates" 8457))
(def (sig (procedure "(undefined-condition? OBJECT) => boolean" (id undefined-condition?))) (p "Is the " (tt "OBJECT") " an instance of the SRFI 29 " (tt "undefined-condition") ".") (p "A " (tt "composite-property-condition") " of " (tt "(exn srfi-29 undefined)") "."))
(def (sig (procedure "(unbound-variable-condition? OBJECT) => boolean" (id unbound-variable-condition?))) (p "Is the " (tt "OBJECT") " an instance of the SRFI 29 " (tt "unbound-variable-condition") ".") (p "A " (tt "composite-property-condition") " of " (tt "(exn srfi-29 unbound)") "."))
(def (sig (parameter "(current-language [LANGUAGE])" (id current-language))) (p "Gets or sets the " (tt "LANGUAGE") " symbol."))
(def (sig (parameter "(current-country [COUNTRY])" (id current-country))) (p "Gets or sets the " (tt "COUNTRY") " symbol."))
(def (sig (parameter "(current-locale-details [LOCALE-DETAILS])" (id current-locale-details))) (p "Gets or sets the " (tt "LOCALE-DETAILS") " list."))
(def (sig (parameter "(current-locale-format-function [FORMAT-PROCEDURE])" (id current-locale-format-function))) (p "Gets or sets the " (tt "FORMAT-PROCEDURE") ".") (p "This procedure must at least have the signature of a SRFI 28 " (tt "format") " procedure. The default is the Chicken " (tt "extras#format") " procedure.") (p "This is " (b "not") " a " (tt "paramter") " but a " (tt "variable") ". It is " (b "not") " " (i "thread-local") "."))
(def (sig (procedure "(reset-locale-parameters)" (id reset-locale-parameters))) (p "When the " (tt "current-locale") " is changed, (see the " (int-link "eggs/locale.html" "locale egg") "), the " (tt "current-*") " parameters need not be set individually. This will update those parameters to the values in the new locale. (Reset as in set anew.)"))
(def (sig (procedure "(declare-bundle! BUNDLE-SPECIFIER BUNDLE-ALIST)" (id declare-bundle!))) (p "Creates a bundle."))
(def (sig (procedure "(undeclare-bundle! BUNDLE-SPECIFIER)" (id undeclare-bundle!))) (p "Removes the bundle specified by " (tt "BUNDLE-SPECIFIER") " from the active bundles."))
(def (sig (procedure "(store-bundle! BUNDLE-SPECIFIER [ALTERNATE])" (id store-bundle!))) (p "Stores the bundle using the " (tt "write") " procedure."))
(def (sig (procedure "(load-bundle! BUNDLE-SPECIFIER [ALTERNATE])" (id load-bundle!))) (p "Loads the bundle using the " (tt "read") " procedure."))
(def (sig (procedure "(load-best-available-bundle! BUNDLE-SPECIFIER [ALTERNATE])" (id load-best-available-bundle!))) (p "Attempts " (tt "(load-bundle! BUNDLE-SPECIFIER [ALTERNATE])") ", from most to least specific.") (p "See " (tt "most-specific-bundle-specifier") "."))
(def (sig (procedure "(remove-bundle! BUNDLE-SPECIFIER [ALTERNATE])" (id remove-bundle!))) (p "Removes the bundle specified by " (tt "BUNDLE-SPECIFIER") " from the active bundles, and from the filesystem.") (p "Will not remove the locale directory hierarchy created by " (tt "(store-bundle!...)") "."))
(def (sig (procedure "(remove-bundle-directory! BUNDLE-SPECIFIER [ALTERNATE])" (id remove-bundle-directory!))) (p "Removes the bundle directory hierarchy created by " (tt "(store-bundle!...)") ". Will only remove empty directories. Returns " (tt "#t") " if operation succeeded, " (tt "#f") " when a non-empty directory encountered.") (p "Does not remove the bundle, if any, from the active bundles. A filesystem only operation.") (p "This procedure should be used with caution."))
(def (sig (procedure "(declared-bundle-specifiers) => list" (id declared-bundle-specifiers))) (p "Returns a list of all the declared " (tt "BUNDLE-SPECIFIER") "s."))
(def (sig (procedure "(declared-bundle-templates BUNDLE-SPECIFIER) => list" (id declared-bundle-templates))) (p "Returns an association-list of all the templates for the " (tt "BUNDLE-SPECIFIER") "."))
(def (sig (procedure "(most-specific-bundle-specifier PACKAGE-NAME) => bundle-specifier" (id most-specific-bundle-specifier))) (p "Returns the most specific bundle specifier for the current locale.") (p "The current locale is composed of the " (tt "(current-language)") ", " (tt "(current-country)") ", and " (tt "(current-locale-details)") ".") (p "Note that the " (tt "most-specific-bundle-specifier") " may not be a declared bundle."))
(def (sig (procedure "(required-localized-template PACKAGE-NAME TEMPLATE-NAME) => *" (id required-localized-template))) (p "Returns the object for the " (tt "TEMPLATE-NAME") " in " (tt "PACKAGE-NAME") ". Otherwise a " (tt "undefined-condition") " exception is raised."))
(def (sig (procedure "(localized-template PACKAGE-NAME TEMPLATE-NAME [PACKAGE-NOT-FOUND [TEMPLATE-NOT-FOUND]]) => *" (id localized-template))) (p "Returns the object for the " (tt "TEMPLATE-NAME") " in " (tt "PACKAGE-NAME") ". Otherwise the appropriate " (tt "...-NOT-FOUND") " value.") (p (tt "PACKAGE-NOT-FOUND") " and " (tt "TEMPLATE-NOT-FOUND") " have default " (tt "#t") ","))
(def (sig (procedure "(localized-template/default PACKAGE-NAME TEMPLATE-NAME [PACKAGE-NOT-FOUND [TEMPLATE-NOT-FOUND]]) => *" (id localized-template/default))) (p "Returns " (tt "(localized-template PACKAGE-NAME TEMPLATE-NAME PACKAGE-NOT-FOUND TEMPLATE-NOT-FOUND)") ".") (p (tt "PACKAGE-NOT-FOUND") " and " (tt "TEMPLATE-NOT-FOUND") " have default " (tt "TEMPLATE-NAME") ".") (p "Somewhat like the Posix 'gettext' routine."))
(def (sig (procedure "(make-localized-template PACKAGE-NAME) => (procedure (symbol #!optional * *) *)" (id make-localized-template))) (p "Returns a " (tt "localized-template") "-like procedure curried upon the " (tt "PACKAGE-NAME") "."))
(def (sig (procedure "(make-localized-template/default PACKAGE-NAME) => (procedure (symbol #!optional * *) *)" (id make-localized-template/default))) (p "Returns a " (tt "localized-template/default") "-like procedure curried upon the " (tt "PACKAGE-NAME") "."))
(def (sig (procedure "(make-required-localized-template PACKAGE-NAME) => (procedure (symbol) *)" (id make-required-localized-template))) (p "Like " (tt "make-localized-template") " but raises an " (tt "undefined-condition") " exception should the package or template be missing."))
(def (sig (procedure "(localized-format PACKAGE-NAME TEMPLATE-NAME ARG0...) => string" (id localized-format))) (p "Returns the formatted string using the " (tt "(current-locale-format-function)") " and the format string " (tt "(localized-template PACKAGE-NAME TEMPLATE-NAME)") " on the arguments " (tt "ARG0...") ".") (p "When a localized-template is not found and the " (tt "TEMPLATE-NAME") " is a " (tt "string") " then it is used a the format-string.") (p "A representation is always displayed, even when no template is found. Just not a localized one."))
(def (sig (procedure "(localized-template-set! PACKAGE-NAME TEMPLATE-NAME VALUE) => boolean" (id localized-template-set!))) (p "Creates or updates the " (tt "VALUE") " for the " (tt "TEMPLATE-NAME") " in " (tt "PACKAGE-NAME") " and returns " (tt "#t") ", when the package exists. Otherwise returns " (tt "#f") ".") (p "This can be used to extend the meaning of a package template at runtime. For example: caching the actual closure for a named procedure."))
(def (sig (procedure "(load-localized-compiled-code LIBRARY PACKAGE-NAME TEMPLATE-NAMES)" (id load-localized-compiled-code))) (p "Loads a Scheme code library and replaces the toplevel variable references from the templates with the actual value. Each item " (tt "package-name+template-name") " has a variable reference upon entry. Upon exit this is replaced with the variable value after load.") (p "Every item " (tt "package-name+template-name") " referenced " (b "must") " be defined. Otherwise a " (tt "(exn srfi-29 undefined)") " exception if raised.") (p (tt "LIBRARY") " is an absolute " (tt "pathname") ", relative " (tt "pathname") ", or " (tt "(unitname pathname)") ". The corresponding load call is " (tt "load-relative") ", " (tt "load-relative") ", and " (tt "load-library") ". (See " (int-link "Unit eval") ".)") (p (tt "TEMPLATE-NAMES") " is a " (tt "list") " of " (tt "template-name") ".") (p "A " (tt "variable-reference") " is a " (tt "symbol") " or " (tt "(symbol symbol)") ". The later is a " (tt "module") " import reference; this is a " (i "brittle") " feature as it relies upon knowledge of implementation details.") (p (i "Note") " that only " (tt "load-relative") " is used for a library " (tt "pathname") ". Be sure to provide an " (tt "absolute-pathname") " when a " (tt "current-directory") " relative " (tt "pathname") " is needed."))
(def (sig (procedure "(localized-templates PACKAGE-NAME) => list" (id localized-templates))) (p "Returns an association-list of all the templates for the " (tt "PACKAGE-NAME") "."))

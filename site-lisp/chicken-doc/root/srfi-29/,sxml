((tags "egg") (section 2 "srfi-29" (toc)) (section 2 "Documentation" (p "A Chicken implementation of " (link "http://srfi.schemers.org/srfi-29/srfi-29.html" "SRFI 29") ".") (p "The addition of the escape code " (tt "~[n]@*") " to the SRFI 28 " (tt "format") " is " (b "not") " part of this extension.") (section 3 "Conditions" (section 4 "undefined-condition?" (def (sig (procedure "(undefined-condition? OBJECT) => boolean" (id undefined-condition?))) (p "Is the " (tt "OBJECT") " an instance of the SRFI 29 " (tt "undefined-condition") ".") (p "A " (tt "composite-property-condition") " of " (tt "(exn srfi-29 undefined)") "."))) (section 4 "unbound-variable-condition?" (def (sig (procedure "(unbound-variable-condition? OBJECT) => boolean" (id unbound-variable-condition?))) (p "Is the " (tt "OBJECT") " an instance of the SRFI 29 " (tt "unbound-variable-condition") ".") (p "A " (tt "composite-property-condition") " of " (tt "(exn srfi-29 unbound)") ".")))) (section 3 "Parameters" (section 4 "current-language" (def (sig (parameter "(current-language [LANGUAGE])" (id current-language))) (p "Gets or sets the " (tt "LANGUAGE") " symbol."))) (section 4 "current-country" (def (sig (parameter "(current-country [COUNTRY])" (id current-country))) (p "Gets or sets the " (tt "COUNTRY") " symbol."))) (section 4 "current-locale-details" (def (sig (parameter "(current-locale-details [LOCALE-DETAILS])" (id current-locale-details))) (p "Gets or sets the " (tt "LOCALE-DETAILS") " list."))) (section 4 "current-locale-format-function" (def (sig (parameter "(current-locale-format-function [FORMAT-PROCEDURE])" (id current-locale-format-function))) (p "Gets or sets the " (tt "FORMAT-PROCEDURE") ".") (p "This procedure must at least have the signature of a SRFI 28 " (tt "format") " procedure. The default is the Chicken " (tt "extras#format") " procedure.") (p "This is " (b "not") " a " (tt "paramter") " but a " (tt "variable") ". It is " (b "not") " " (i "thread-local") "."))) (section 4 "reset-locale-parameters" (def (sig (procedure "(reset-locale-parameters)" (id reset-locale-parameters))) (p "When the " (tt "current-locale") " is changed, (see the " (int-link "eggs/locale.html" "locale egg") "), the " (tt "current-*") " parameters need not be set individually. This will update those parameters to the values in the new locale. (Reset as in set anew.)")))) (section 3 "Bundle Operations" (ul (li "A " (tt "BUNDLE-SPECIFIER") " is a list of symbols of the form " (tt "(PACKAGE-NAME [LANGUAGE] [COUNTRY] [DETAILS...])") ".") (li "A " (tt "BUNDLE-ALIST") " is an association-list over with key " (tt "TEMPLATE-NAME") " & value " (tt "TEMPLATE-VALUE") ". The association-list elements must be of the form " (tt "(TEMPLATE-NAME . TEMPLATE-VALUE)") ".")) (p "That is " (tt "(cons 'template-example 'value-example)") " is legal, whereas " (tt "(list 'template-example 'value-example)") " is not. The form " (tt "(list 'template-example 'value-example)") " will have the value " (tt "(list 'value-example)") ", and not " (tt "'value-example") ", as expected.") (ul (li "A " (tt "TEMPLATE-NAME") " is something suitable as a key, such as a " (tt "symbol") " or " (tt "string") ", but can be any " (tt "object") " with a readable printname.") (li "A " (tt "TEMPLATE-VALUE") " maybe any object, but should have a readable printname.")) (section 4 "declare-bundle!" (def (sig (procedure "(declare-bundle! BUNDLE-SPECIFIER BUNDLE-ALIST)" (id declare-bundle!))) (p "Creates a bundle."))) (section 4 "undeclare-bundle!" (def (sig (procedure "(undeclare-bundle! BUNDLE-SPECIFIER)" (id undeclare-bundle!))) (p "Removes the bundle specified by " (tt "BUNDLE-SPECIFIER") " from the active bundles.")))) (section 3 "Bundle Database Operations" (p "SRFI 29 does not specify how bundles are stored. This extension uses the filesystem for the bundle database.") (p "Bundles are stored in the system bundle directory, " (tt "(make-pathname (repository-path) \"srfi-29-bundles\")") ", unless an " (tt "ALTERNATE") " directory is specified.") (p "Within a bundle directory the structure is " (tt "(directory [LANGUAGE] [COUNTRY] [SCRIPT] [CODESET] [MODIFIER] PACKAGE-NAME)") ".") (section 4 "store-bundle!" (def (sig (procedure "(store-bundle! BUNDLE-SPECIFIER [ALTERNATE])" (id store-bundle!))) (p "Stores the bundle using the " (tt "write") " procedure."))) (section 4 "load-bundle!" (def (sig (procedure "(load-bundle! BUNDLE-SPECIFIER [ALTERNATE])" (id load-bundle!))) (p "Loads the bundle using the " (tt "read") " procedure."))) (section 4 "load-best-available-bundle!" (def (sig (procedure "(load-best-available-bundle! BUNDLE-SPECIFIER [ALTERNATE])" (id load-best-available-bundle!))) (p "Attempts " (tt "(load-bundle! BUNDLE-SPECIFIER [ALTERNATE])") ", from most to least specific.") (p "See " (tt "most-specific-bundle-specifier") "."))) (section 4 "remove-bundle!" (def (sig (procedure "(remove-bundle! BUNDLE-SPECIFIER [ALTERNATE])" (id remove-bundle!))) (p "Removes the bundle specified by " (tt "BUNDLE-SPECIFIER") " from the active bundles, and from the filesystem.") (p "Will not remove the locale directory hierarchy created by " (tt "(store-bundle!...)") "."))) (section 4 "remove-bundle-directory!" (def (sig (procedure "(remove-bundle-directory! BUNDLE-SPECIFIER [ALTERNATE])" (id remove-bundle-directory!))) (p "Removes the bundle directory hierarchy created by " (tt "(store-bundle!...)") ". Will only remove empty directories. Returns " (tt "#t") " if operation succeeded, " (tt "#f") " when a non-empty directory encountered.") (p "Does not remove the bundle, if any, from the active bundles. A filesystem only operation.") (p "This procedure should be used with caution."))) (section 4 "declared-bundle-specifiers" (def (sig (procedure "(declared-bundle-specifiers) => list" (id declared-bundle-specifiers))) (p "Returns a list of all the declared " (tt "BUNDLE-SPECIFIER") "s."))) (section 4 "declared-bundle-templates" (def (sig (procedure "(declared-bundle-templates BUNDLE-SPECIFIER) => list" (id declared-bundle-templates))) (p "Returns an association-list of all the templates for the " (tt "BUNDLE-SPECIFIER") "."))) (section 4 "most-specific-bundle-specifier" (def (sig (procedure "(most-specific-bundle-specifier PACKAGE-NAME) => bundle-specifier" (id most-specific-bundle-specifier))) (p "Returns the most specific bundle specifier for the current locale.") (p "The current locale is composed of the " (tt "(current-language)") ", " (tt "(current-country)") ", and " (tt "(current-locale-details)") ".") (p "Note that the " (tt "most-specific-bundle-specifier") " may not be a declared bundle.")))) (section 3 "Bundle Template Operations" (p "These routines will use the most specific declared bundle for the package " (tt "PACKAGE-NAME") " in the current locale.") (section 4 "required-localized-template" (def (sig (procedure "(required-localized-template PACKAGE-NAME TEMPLATE-NAME) => *" (id required-localized-template))) (p "Returns the object for the " (tt "TEMPLATE-NAME") " in " (tt "PACKAGE-NAME") ". Otherwise a " (tt "undefined-condition") " exception is raised."))) (section 4 "localized-template" (def (sig (procedure "(localized-template PACKAGE-NAME TEMPLATE-NAME [PACKAGE-NOT-FOUND [TEMPLATE-NOT-FOUND]]) => *" (id localized-template))) (p "Returns the object for the " (tt "TEMPLATE-NAME") " in " (tt "PACKAGE-NAME") ". Otherwise the appropriate " (tt "...-NOT-FOUND") " value.") (p (tt "PACKAGE-NOT-FOUND") " and " (tt "TEMPLATE-NOT-FOUND") " have default " (tt "#t") ","))) (section 4 "localized-template/default" (def (sig (procedure "(localized-template/default PACKAGE-NAME TEMPLATE-NAME [PACKAGE-NOT-FOUND [TEMPLATE-NOT-FOUND]]) => *" (id localized-template/default))) (p "Returns " (tt "(localized-template PACKAGE-NAME TEMPLATE-NAME PACKAGE-NOT-FOUND TEMPLATE-NOT-FOUND)") ".") (p (tt "PACKAGE-NOT-FOUND") " and " (tt "TEMPLATE-NOT-FOUND") " have default " (tt "TEMPLATE-NAME") ".") (p "Somewhat like the Posix 'gettext' routine."))) (section 4 "make-localized-template" (def (sig (procedure "(make-localized-template PACKAGE-NAME) => (procedure (symbol #!optional * *) *)" (id make-localized-template))) (p "Returns a " (tt "localized-template") "-like procedure curried upon the " (tt "PACKAGE-NAME") "."))) (section 4 "make-localized-template/default" (def (sig (procedure "(make-localized-template/default PACKAGE-NAME) => (procedure (symbol #!optional * *) *)" (id make-localized-template/default))) (p "Returns a " (tt "localized-template/default") "-like procedure curried upon the " (tt "PACKAGE-NAME") "."))) (section 4 "make-required-localized-template" (def (sig (procedure "(make-required-localized-template PACKAGE-NAME) => (procedure (symbol) *)" (id make-required-localized-template))) (p "Like " (tt "make-localized-template") " but raises an " (tt "undefined-condition") " exception should the package or template be missing."))) (section 4 "localized-format" (def (sig (procedure "(localized-format PACKAGE-NAME TEMPLATE-NAME ARG0...) => string" (id localized-format))) (p "Returns the formatted string using the " (tt "(current-locale-format-function)") " and the format string " (tt "(localized-template PACKAGE-NAME TEMPLATE-NAME)") " on the arguments " (tt "ARG0...") ".") (p "When a localized-template is not found and the " (tt "TEMPLATE-NAME") " is a " (tt "string") " then it is used a the format-string.") (p "A representation is always displayed, even when no template is found. Just not a localized one."))) (section 4 "localized-template-set!" (def (sig (procedure "(localized-template-set! PACKAGE-NAME TEMPLATE-NAME VALUE) => boolean" (id localized-template-set!))) (p "Creates or updates the " (tt "VALUE") " for the " (tt "TEMPLATE-NAME") " in " (tt "PACKAGE-NAME") " and returns " (tt "#t") ", when the package exists. Otherwise returns " (tt "#f") ".") (p "This can be used to extend the meaning of a package template at runtime. For example: caching the actual closure for a named procedure."))) (section 4 "load-localized-compiled-code" (def (sig (procedure "(load-localized-compiled-code LIBRARY PACKAGE-NAME TEMPLATE-NAMES)" (id load-localized-compiled-code))) (p "Loads a Scheme code library and replaces the toplevel variable references from the templates with the actual value. Each item " (tt "package-name+template-name") " has a variable reference upon entry. Upon exit this is replaced with the variable value after load.") (p "Every item " (tt "package-name+template-name") " referenced " (b "must") " be defined. Otherwise a " (tt "(exn srfi-29 undefined)") " exception if raised.") (p (tt "LIBRARY") " is an absolute " (tt "pathname") ", relative " (tt "pathname") ", or " (tt "(unitname pathname)") ". The corresponding load call is " (tt "load-relative") ", " (tt "load-relative") ", and " (tt "load-library") ". (See " (int-link "Unit eval") ".)") (p (tt "TEMPLATE-NAMES") " is a " (tt "list") " of " (tt "template-name") ".") (p "A " (tt "variable-reference") " is a " (tt "symbol") " or " (tt "(symbol symbol)") ". The later is a " (tt "module") " import reference; this is a " (i "brittle") " feature as it relies upon knowledge of implementation details.") (p (i "Note") " that only " (tt "load-relative") " is used for a library " (tt "pathname") ". Be sure to provide an " (tt "absolute-pathname") " when a " (tt "current-directory") " relative " (tt "pathname") " is needed."))) (section 4 "localized-templates" (def (sig (procedure "(localized-templates PACKAGE-NAME) => list" (id localized-templates))) (p "Returns an association-list of all the templates for the " (tt "PACKAGE-NAME") ".")))) (section 3 "Exceptions" (ul (li (tt "undefined-condition") " Signaled for unknown bundle-specification, package, template.") (li (tt "unbound-variable-condition") " Signaled for an unbound reference during " (i "localized code") " resolution.") (li (tt "(exn type)") " Signaled for argument type errors.") (li (tt "(exn) message = \"invalid library load specificiation\" arguments = LIBSPEC") " Signaled during " (i "localized code") " resolution for a bad library load name form."))) (section 3 "Thread Local Storage" (p "Just as the " (int-link "locale") " extension supports per thread locale information so does this extension support per thread bundles. However, localized information is probably accessed more frequently than locale information. So the support for per thread bundles is delayed until runtime. Setting the environment variable " (tt "SRFI29_TLS") " to " (tt "[Yy1]") " will activate the feature.") (p "When active each thread may have a different bundle for a package; i.e. a user of [[SRFI 19|srfi-19] can have a different language in each thread."))) (section 2 "Usage" (highlight scheme "(require-extension srfi-29)")) (section 2 "Notes" (ul (li "Possible race condition exists creating a bundle file or directory should another thread be performing the same action.")) (p "Just do not allow this to happen.") (ul (li "The locale symbols must have a lowercase printname! As such they do not truly reflect ISO 639-1/2 & ISO 3166-1 standard names. This is a SRFI 29 restriction.") (li (tt "(current-locale-details)") " is ill-defined by the SRFI 29 document. Which symbol means what? This implementation defines locale details as a 3 element " (tt "list") " " (tt "(SCRIPT CODESET MODIFIER)") " where the elements are " (tt "symbols") " or " (tt "#f") ".") (li "The SRFI 29 document uses the term " (tt "country") " for what the " (int-link "locale") " extension knows as " (tt "region") "."))) (section 2 "Requirements" (p (int-link "lookup-table" "lookup-table") " " (int-link "variable-item" "variable-item") " " (int-link "posix-utils" "posix-utils") " " (int-link "locale" "locale") " " (int-link "check-errors" "check-errors"))) (section 2 "Bugs and Limitations" (ul (li "Currently there is no support for source-form code. Such is considered an even worse security-hole than loading compiled code. However, a possibility is use of the " (int-link "sandbox") ". Should there be sufficient interest this area can be explored."))) (section 2 "Author" (p (int-link "/users/kon-lovett" "Kon Lovett"))) (section 2 "Version history" (dl (dt "2.2.0") (dd "Added runtime support for package per thread. Removed deprecated identifiers.") (dt "2.1.3") (dd "Added " (tt "unbound-variable-condition?") ". Deprecated " (tt "!localized-template") " & " (tt "make-!localized-template") " in favor of " (tt "required-localized-template") " & " (tt "make-required-localized-template") ".") (dt "2.1.2") (dt "2.1.1") (dt "2.1.0") (dd "Added " (tt "undefined-condition?") ", " (tt "!localized-template") ", " (tt "make-localized-template") ", " (tt "make-localized-template/default") ", " (tt "load-localized-compiled-code") ". " (tt "localized-template") " & " (tt "localized-template/default") " now distinguish an undefined template from an undefined package.") (dt "2.0.1") (dd "Fixs for " (tt "bundle-specifier?") " and " (tt "load-best-available-bundle!")) (dt "2.0.0") (dd "Intitial Chicken 4 release. Added introspection routines. Removed " (tt "PORT") " parameter for " (tt "localized-format") "."))) (section 2 "License" (p "Copyright (C) 2010 Kon Lovett.  All rights reserved.") (p "Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the Software), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:") (p "The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.") (p "THE SOFTWARE IS PROVIDED ASIS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.")))
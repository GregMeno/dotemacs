(index ("bb:init" 0) ("bb:widget?" 342) ("bb:make-widget" 484) ("bb:make-widget" 484) ("bb:property" 2485) ("set!" 2485) ("bb:event" 12559) ("set!" 12559) ("bb:message" 13973) ("bb:message" 13973) ("bb:run" 14559) ("bb:add!" 14871) ("bb:add!" 14871) ("bb:add!" 14871) ("bb:add!" 14871) ("bb:add!" 14871) ("bb:image" 18387) ("bb:image" 18387) ("bb:image-data" 18949) ("bb:remove!" 19192) ("bb:set-menu-item-active!" 19608) ("bb:redraw" 20036) ("bb:show" 20129) ("bb:select-file" 20444) ("bb:select-color" 21702) ("bb:select-color" 21702) ("bb:rgb" 22324) ("bb:get-input" 22725) ("bb:group" 22963) ("bb:make-widgets" 23303) ("bb:render" 26613) ("bb:element?" 28259) ("bb:element-widget" 28405) ("bb:element-parent" 28405) ("bb:element-children" 28405) ("bb:element-id" 28405) ("bb:element-tag" 28405) ("bb:element-content" 28405) ("bb:element-attributes" 28405) ("bb:find-element" 29184) ("bb:find-widget" 29485) ("bb:root-element" 29632))
(def (sig (procedure "(bb:init [SCHEME])" (id bb:init))) (p "Initializes the toolkit. The optional argument " (tt "SCHEME") " may be a string naming a particular graphical scheme (possible values " (tt "\"none\"") " or " (tt "\"plastic\"") ") or " (tt "#f") " (meaning the default). Calling this procedure a subsequent time has no effect."))
(def (sig (procedure "(bb:widget? X)" (id bb:widget?))) (p "Returns " (tt "#t") " if " (tt "X") " is a widget, or " (tt "#f") " otherwise."))
(def (sig (procedure "(bb:make-widget TYPE [W H])" (id bb:make-widget)) (procedure "(bb:make-widget TYPE X Y W H)" (id bb:make-widget))) (p "Creates and returns a widget of the type given by the symbol " (tt "TYPE") ". Possible widget types are:") (dl (dt "window") (dd "a normal top-level window") (dt "double-window") (dd "a double-buffered window") (dt "button") (dt "return-button") (dt "choice-button") (dt "menu-button") (dt "check-box") (dt "entry") (dd "a single-line text field") (dt "edit") (dd "a multiline text field") (dt "text-editor") (dd "a full text editor with scroll bars") (dt "int-entry") (dd "text field for editing integer numbers. Value is a string rather than number.") (dt "float-entry") (dd "text field for editing float numbers. Value is a string rather than number.") (dt "counter") (dd "a \"spin-box\" like widget") (dt "dial") (dd "a \"clock\"-type dial widget") (dt "clock") (dd "a proper clock") (dt "label") (dt "slider") (dt "adjuster") (dd "a widget for changing a value by dragging") (dt "roller") (dd "another adjuster-like widget") (dt "list") (dd "a vertical list of strings") (dt "radio-button") (dt "progress") (dt "tabs") (dd "a collection of tab widgets") (dt "tile") (dd "groups widgets with draggable boundaries") (dt "pack") (dd "packs widgets vertically or horizontally") (dt "group") (dd "a generic grouping widget") (dt "scroll") (dd "a group widget with scrollable contents") (dt "light-button") (dd "like a checkbox with a \"light\"") (dt "menu-bar") (dt "glwindow") (dd "a window that contains OpenGL graphics") (dt "live-image") (dd "an image that will be redrawn from a given pointer") (dt "tree") (dd "a tree control. Available only if bb was compiled with " (link "http://www.osc.edu/~jbryan/FLU" "FLU") " support.") (dt "table") (dd "a simple table widget") (dt "html-view") (dd "a simple html viewer")) (p "A top-level window created with " (tt "bb:make-widget") " will not automatically be shown until " (tt "bb:show") " has been called."))
(def (sig (procedure "(bb:property WIDGET PROPERTY)" (id bb:property)) (setter "(set! (bb:property WIDGET PROPERTY) VALUE)" (id set!))) (p "Gets or sets the properties given in " (tt "PROPERTY1 ...") " (which should be symbols). Values may also be lists, in that case the values are combined (this only applies to certain properties - see below).") (p ">Some properties may be set for individual items of the " (tt "tree") " and " (tt "table") " widgets. They are specified in the form " (tt "(list WIDGET ITEMID)") ". " (tt "ITEMID") " is either unique item id or one of the symbols:") (ul (li (tt "root")) (li (tt "connector")) (li (tt "leaf")) (li (tt "branch"))) (p "In this case the " (tt "VALUE") " will be applied either to root node, connector or all subsequent branches or leaves added to the tree.") (p (tt "width") " and " (tt "align") " properties can be applied to the " (tt "table") " widget's columns.") (p "Allowed widget properties are:") (dl (dt "x") (dt "y") (dt "width") (dt "height") (dd "Position and dimensions (integer). Positions are always relative to the container. " (tt "Width") " property may be set for " (tt "connector") " item of the " (tt "tree") " widget.") (dt "text") (dd "The text of a label, button, text-fields or " (tt "html-view") ". Also the title of a window. For the " (tt "tree") " widget the value is the label of the subitem. For the " (tt "table") " widget one can specify individual cells in the form " (tt "(list TABLEWIDGET ROW COLUMN)") ". The negative " (tt "ROW") " means column header.") (dt "value") (dd "The value of a \"range\" widget (" (tt "slider") ", " (tt "roller") ", " (tt "adjuster") ", " (tt "counter") " or " (tt "dial") "), in which case it should be a number. For " (tt "check-box") " and " (tt "radio-button") " widgets the value should be a boolean. For " (tt "list") " widgets, the value is the index of the highlighted item, starting from 1. The value of the " (tt "choice-button") " widget is the index of the selected item. For " (tt "tree") " widgets, the value is the unique id of the currently selected item. The value of the " (tt "html-view") " is a current file name.") (dt "box") (dd "The " (i "box type") ". A box type is one of the symbols")) (ul (li "no-box") (li "flat-box") (li "up-box") (li "down-box") (li "up-frame") (li "down-frame") (li "thin-up-box") (li "thin-down-box") (li "thin-up-frame") (li "thin-down-frame") (li "engraved-box") (li "embossed-box") (li "engraved-frame") (li "embossed-frame") (li "border-box")) (dl (dt "callback") (dd "The callback procedure that is invoked when the value of a widget changes. See the " (tt "when") " property for more information. For " (tt "tree") " widgets one can obtain additional information from properties " (tt "callback-reason") " and " (tt "callback-node") ".") (dt "image") (dd "An image that should be drawn into the widget. See " (tt "bb:image") " for how to load images. You can also set the value " (tt "image") " property to a string, which will load any image file with this name automatically. The value may also be a pointer object pointing to a data buffer for a " (tt "live-image") " widget. Images may be set for a " (tt "tree") " widget items. If subitem is the " (tt "branch") " or " (tt "connector") ", then " (tt "VALUE") " can specify pair of the images: for closed and open state respectively.") (dt "type") (dd "The " (i "type") " of a widget. The possible type symbols depend on what kind of widget it applies to:")) (p "scroll:") (ul (li "scroll-horizontal") (li "scroll-vertical") (li "scroll-both") (li "scroll-always-on") (li "scroll-horizontal-always") (li "scroll-vertical-always") (li "scroll-both-always")) (p "(may be combined)") (p "slider:") (ul (li "vertical-fill-slider") (li "horizontal-fill-slider") (li "vertical-nice-slider") (li "horizontal-nice-slider")) (p "dial:") (ul (li "normal-dial") (li "line-dial") (li "fill-dial") (li "resizable")) (dl (dt "modal") (dd "Whether a window is resizable and/or modal.") (dt "direction") (dd "The direction of a widget, which should be one of the symbols " (tt "horizontal") " or " (tt "vertical") ".") (dt "color") (dd "The background color of a widget. This can either be a value returned by " (tt "bb:rgb") " or one of the following symbols:")) (ul (li "gray0") (li "dark3") (li "dark2") (li "dark1") (li "light1") (li "light2") (li "light3") (li "gray") (li "black") (li "red") (li "green") (li "yellow") (li "blue") (li "magenta") (li "cyan") (li "dark-red") (li "dark-green") (li "dark-yellow") (li "dark-blue") (li "dark-magenta") (li "dark-cyan") (li "white")) (p "The color attribute of a " (tt "live-image") " widget designates the number of color channels (1-4). Also is applicable to the " (tt "connector") " subitem of the " (tt "tree") " widget.") (dl (dt "image-width") (dd "The width of a " (tt "live-image") " widget.") (dt "image-height") (dd "The height of a " (tt "live-image") " widget.") (dt "focus") (dd "Whether this widget has the input focus. Calling " (tt "bb:property") " for this property will always return 0 (but setting it will change the focus to the target widget).") (dt "spacing") (dd "The spacing inside group widgets (in pixels).") (dt "maximum") (dd "Maximum value for range widgets.") (dt "minimum") (dd "Minimum value for range widgets.") (dt "x-position") (dd "X-position for " (tt "scroll") " widgets.") (dt "y-position") (dd "Y-position for " (tt "scroll") " widgets.") (dt "text-color") (dd "Text color. Can also be applied to the " (tt "tree") " subitems.") (dt "text-size") (dd "Text size. Can also be applied to the " (tt "tree") " subitems.") (dt "text-font") (dd "Text font, which may be one of the following:")) (ul (li "helvetica") (li "helvetica-bold") (li "helvetica-italic") (li "helvetica-bold-italic") (li "courier") (li "courier-bold") (li "courier-italic") (li "courier-bold-italic") (li "times") (li "times-bold") (li "times-italic") (li "times-bold-italic") (li "symbol") (li "screen") (li "screen-bold")) (p "Can be specified for the " (tt "tree") " branches and leaves.") (dl (dt "label-color") (dd "Color of a label.") (dt "label-size") (dd "Size of a label.") (dt "label-font") (dd "Font of a label.") (dt "selection-color") (dd "The color of the selection in a text widget or the color of indicators in other widgets.") (dt "position") (dd "The position of the caret in an " (tt "entry") ", " (tt "edit") " or " (tt "text-editor") " widget. Setting the position to " (tt "-1") " will move the caret to the end of the current text.") (dt "mark") (dd "The position of the selection mark in an " (tt "entry") ", " (tt "edit") " or " (tt "text-editor") " widget. The text between the selection mark and the caret is the current selection.") (dt "selection") (dd "The currently selected text in an " (tt "entry") ", " (tt "edit") " or " (tt "text-editor") " widget. When set, the value should be a pair containing start and end position of the selection in the buffer.") (dt "tooltip") (dd "A string that should be displayed, when the mouse hovers over a widget.") (dt "visible") (dd "Whether a widget is visible or not.") (dt "resizable-widget") (dd "The widget in a group, which should be exclusively resizable.") (dt "valid-context") (dd "A flag indicating whether the GL context for a " (tt "glwindow") " is already initialized.") (dt "read-only") (dd "If true, an " (tt "edit") " or " (tt "entry") " widget can not be changed by the user.") (dt "align") (dd "The alignment of the widget label. May be combination of the following symbols:")) (ul (li "center") (li "top") (li "bottom") (li "left") (li "right") (li "inside") (li "text-over-image") (li "image-over-text") (li "clip") (li "wrap")) (dl (dt "when") (dd "An indicator when a widgets callback should be invoked. The default behaviour depends on the type of the widget. Possible settings are:")) (ul (li "never - never invoked the callback") (li "changed - when the widget's value changes") (li "released - when the button or key is released and the value changes") (li "enter - when the enter key is pressed and the value changes") (li "always - modifier for " (tt "released") " or " (tt "enter") ", that indicates the callback should be invoked, even if the value doesn't change")) (p "The default behaviour is to invoke the callback whenever the value of a widget changes, when a " (tt "window") " is closed, when " (tt "glwindow") " needs to be redrawn, or a " (tt "button") " or " (tt "list") " item has been clicked.") (dl (dt "handler") (dd "The callback procedure that is invoked when the event occurs. The event is passed in a")) (p "first (and only) argument to the handler. A event is one of the symbols:") (ul (li "no-event") (li "push") (li "release") (li "enter") (li "leave") (li "drag") (li "focus") (li "unfocus") (li "keydown") (li "keyup") (li "close") (li "move") (li "shortcut") (li "deactivate") (li "activate") (li "hide") (li "show") (li "paste") (li "selectionclear") (li "mousewheel") (li "dnd-enter") (li "dnd-drag") (li "dnd-leave") (li "dnd-release") (li "unknown")) (p "Additional information about event can be obtained with " (tt "bb:event") " procedure. Returning " (tt "#f") " from handler indicates that widget is not interested in handling this event. " (tt "#t") " means that event was successfully handled. Any other value leads to invoking default handler of this widget.") (p "The " (tt "html-view") " widget's " (tt "handler") " is invoked when user tries to follow the link (which URI is passed as an argument). " (tt "Handler") " should return either the name of the temporary file or " (tt "#f") " and set the " (tt "text") " property.") (dl (dt "callback-reason") (dd "The reason for callback. Available only for " (tt "tree") " widget. Valid values are:")) (ul (li "hilighted") (li "unhilighted") (li "selected") (li "unselected") (li "opened") (li "closed") (li "double-click") (li "widget-callback") (li "moved-node") (li "new-node") (li "nothing")) (dl (dt "callback-node") (dd "The unique id of the node that caused callback. Available only for " (tt "tree") " widget.")))
(def (sig (procedure "(bb:event PROPERTY)" (id bb:event)) (setter "(set! (bb:event PROPERTY) VALUE)" (id set!))) (p "Gets or sets the event properties given in " (tt "PROPERTY") " (which should be symbol). Only " (tt "click?") " and " (tt "clicks") " properties can be set.") (p "Allowed event properties are:") (ul (li "alt") (li "ctrl") (li "shift") (li "click?") (li "button1") (li "button2") (li "button3")) (p "Whether mouse or special keyboard button was pressed.") (ul (li "clicks")) (p "The number of clicks (" (tt "N - 1") " for " (tt "N") " clicks)") (ul (li "x") (li "y") (li "x-root") (li "y-root") (li "dx") (li "dy")) (p "Coordinates.") (ul (li "length") (li "text")) (p "The length and text.") (ul (li "key")) (p "Which key was pressed. Possible values are:") (ul (li "character")) (p "for ordinary keys") (ul (li "the pair of " (tt "character") " and " (tt "kp"))) (p "for keypad keys") (ul (li "backspace") (li "tab") (li "enter") (li "pause") (li "scroll-lock") (li "escape") (li "home") (li "left") (li "up") (li "right") (li "down") (li "page-up") (li "page-down") (li "end") (li "print") (li "insert") (li "menu") (li "help") (li "num-lock") (li "shift-l") (li "shift-r") (li "control-l") (li "control-r") (li "caps-lock") (li "meta-l") (li "meta-r") (li "alt-l") (li "alt-r") (li "delete") (li "F1...F24") (li "button1") (li "button2") (li "button3") (li "unknown")) (p "for special keys."))
(def (sig (procedure "(bb:message MESSAGE)" (id bb:message)) (procedure "(bb:message TYPE MESSAGE [BUTTON1 [BUTTON2 [BUTTON3]]])" (id bb:message))) (p "Shows a message box of type " (tt "TYPE") " with the string " (tt "MESSAGE") ". The optional " (tt "BUTTON") " arguments should be strings the specify the text of any extra buttons. Message types may be:") (dl (dt "message") (dd "information dialog with an \"OK\" button.") (dt "alert") (dd "alert box with an \"OK\" button.") (dt "ask") (dd "a \"yes/no\" request dialog.") (dt "choice") (dd "a request button with three choices.")))
(def (sig (procedure "(bb:run [WAIT])" (id bb:run))) (p "Processes events. If " (tt "WAIT") " is true or not specified, " (tt "bb:run") " does not return until the last window closes. If " (tt "WAIT") " is a number, then " (tt "bb:run") " returns after that many seconds, or earlier, if no events are queued."))
(def (sig (procedure "(bb:add! WIDGET ITEM [CALLBACK [SHORTCUT]])" (id bb:add!)) (procedure "(bb:add! LISTWIDGET TEXT [POSITION])" (id bb:add!)) (procedure "(bb:add! TREEWIDGET TEXT [PARENT [POSITION [SUBWIDGET]]])" (id bb:add!)) (procedure "(bb:add! TABLEWIDGET [CELLTEXT ...])" (id bb:add!)) (procedure "(bb:add! TEXTEDITOR TEXT [REPLACE])" (id bb:add!))) (p "If " (tt "WIDGET") " is a " (tt "menu-bar") ", " (tt "choice-button") " or " (tt "menu-button") ", " (tt "bb:add!") " adds a new menu with the text " (tt "ITEM") " (a string), the keyboard-shortcut " (tt "SHORTCUT") " (another string) and the callback " (tt "CALLBACK") " (a procedure of no arguments).") (p "The string encoding the menu-item can include subitems, using the syntax " (tt "foo/bar/baz") ". As many levels as necessary are created.") (p "The shortcut can be " (tt "#f") " or a string describing the shortcut in one of two ways: " (tt "[#+^]ASCII") " or " (tt "[#+^]CHAR") " where a decimal value represents an ascii character (eg. 97 is the ascii for 'a'), and the optional prefixes enhance the value that follows. Multiple prefixes must appear in the above order.") (dl (dt (tt "#")) (dd "Alt") (dt (tt "{+")) (dd "Shift") (dt (tt "^")) (dd "Control")) (p "If " (tt "WIDGET") " is an " (tt "edit") ", " (tt "entry") " or " (tt "text-edit") " widget, " (tt "ITEM") " should be a string, which will be added to the end of the existing text. In case of a " (tt "text-editor") ", the optional boolean argument " (tt "REPLACE") " indicates whether the text should be inserted, or the current selection be replaced.") (p "If " (tt "WIDGET") " is a " (tt "list") ", the " (tt "ITEM") " should be a string, which will added to the list of existing lines. The string may be prefixed by a " (tt "@...") " sequence to enable special formatting:") (dl (dt (tt "@.")) (dd "Print rest of line, don't look for more '@' signs") (dt (tt "@@")) (dd "Print rest of line starting with '@'") (dt (tt "@l")) (dd "Use a large (24 point) font") (dt (tt "@m")) (dd "Use a medium large (18 point) font") (dt (tt "@s")) (dd "Use a small (11 point) font") (dt (tt "@b")) (dd "Use a bold font") (dt (tt "@i")) (dd "Use an italic font") (dt (tt "@f or @t")) (dd "Use a fixed-pitch font") (dt (tt "@c")) (dd "Center the line horizontally") (dt (tt "@r")) (dd "Right-justify the text") (dt (tt "@B0, @B1, ... @B255")) (dd "Fill the backgound with indexed color") (dt (tt "@C0, @C1, ... @C255")) (dd "Use indexed color to draw the text") (dt (tt "@F0, @F1, ...")) (dd "Use indexed font to draw the text") (dt (tt "@S1, @S2, ...")) (dd "Use point size n to draw the text") (dt (tt "@u or @_")) (dd "Underline the text.") (dt (tt "@-")) (dd "draw an engraved line through the middle.")) (p "If " (tt "WIDGET") " is a widget of any other type, then " (tt "ITEM") " should be a child widget, which will be added with " (tt "WIDGET") " as its parent.") (p "For " (tt "tree") " widget " (tt "TEXT") " can be either full path (items are separated with slash) or text label. If it is terminated with slash, the branch (rather than leaf) will be inserted. One can specify parent node id and position in it (default values are " (tt "-1") " for both).  The " (tt "SUBWIDGET") " is a widget that will be inserted as a node. The procedure returns either the unique id of the freshly inserted node or " (tt "-1") " if failed.") (p "This procedure can be used to add either columns (if first " (tt "CELLTEXT") " is symbol " (tt "column") ") or cells to the " (tt "table") " widget."))
(def (sig (procedure "(bb:image X)" (id bb:image)) (procedure "(bb:image PTR W H D)" (id bb:image))) (p "If " (tt "X") " is a string, then " (tt "bb:image") " will load an image file (if its format is supported by FLTK). If " (tt "X") " is a pointer, then it is treated as a pointer to XPM data.  The 4-argument form of " (tt "bb:image") " creates an RGB image from the data pointed to by the foreign pointer " (tt "PTR") ", with width " (tt "W") ", height " (tt "H") " and depth " (tt "D") ", where " (tt "D") " specifies the number of color channels (1-4)."))
(def (sig (procedure "(bb:image-data IMAGE)" (id bb:image-data))) (p "Returns four values: list of pointers to " (tt "IMAGE") " data (usually one element for all formats, except of pixmaps), width, height and depth of the " (tt "IMAGE") "."))
(def (sig (procedure "(bb:remove! WIDGET [INDEX])" (id bb:remove!))) (p "Removes the entry at the position " (tt "INDEX") " from the " (tt "list") " " (tt "WIDGET") ", or all items, if index is " (tt "#t") ". If " (tt "widget") " is an image pointer, the storage occupied by the image will be released. For " (tt "tree") " " (tt "WIDGET") " the node with id " (tt "INDEX") " will be removed. Destroys the widget."))
(def (sig (procedure "(bb:set-menu-item-active! WIDGET INDEX FLAG)" (id bb:set-menu-item-active!))) (p "Activates or deactivates the menu item with the index " (tt "INDEX") " in the menu-bar " (tt "WIDGET") ", depending on the boolean " (tt "FLAG") ". Counting menu-items starts with 0 and every sub-menu increases the count by one.  Note that each sub-menu introduces an invisible extra menu-item that has to be counted in."))
(def (sig (procedure "(bb:redraw WIDGET)" (id bb:redraw))) (p "Redraws " (tt "WIDGET") "."))
(def (sig (procedure "(bb:show WINDOW [ARG ...])" (id bb:show))) (p "Shows " (tt "WINDOW") ". If " (tt "WINDOW") " is already visible, it will be raised to the top.  " (tt "ARG") "s are the options to be parsed by FLTK. By default the name of the executable is passed.  " (tt "#f") " doesn't pass any arguments."))
(def (sig (procedure "(bb:select-file MESSAGE PATTERN [FILENAME])" (id bb:select-file))) (p "Opens a file-dialog and returns the selected filename (or " (tt "#f") " if the file-selection has been canceled).  " (tt "PATTERN") " is a file-pattern that is used to match filenames that can be selected. The following syntax is used by pattern:") (dl (dt (tt "*")) (dd "matches any sequence of 0 or more characters.") (dt (tt "?")) (dd "matches any single character") (dt (tt "[set]")) (dd "matches any character in the set. Set can contain any single characters, or " (tt "a-z") " to represent a range. To match " (tt "]") " or " (tt "-") " they must be the first characters. To match " (tt "^") " or " (tt "!") " they must not be the first characters.") (dt (tt "[^set]")) (dd "Matches any character not in the set.") (dt (tt "[!set]")) (dd "Matches any character not in the set.") (dt (tt "{X|Y|Z") "}") (dd "Matches any one of the subexpressions literally.") (dt (tt "{X,Y,Z") "}") (dd "Matches any one of the subexpressions literally.") (dt (tt "\\x")) (dd "Quotes the character " (tt "x") " so it has no special meaning.") (dt (tt "x")) (dd "All other characters must be matched exactly.")) (p (tt "FILENAME") " specifies the default filename, if given."))
(def (sig (procedure "(bb:select-color [STRING])" (id bb:select-color)) (procedure "(bb:select-color COLOR [STRING])" (id bb:select-color))) (p "Pops up a color-selection dialog. If " (tt "COLOR") " is an exact integer, or a symbol naming one of the default colors, then the user can select a color index, which will then be returned. If " (tt "COLOR") " is a three-element list or vector, then the user can select an RGB (or HSV) color. " (tt "bb:select-color") " either returns a color value (an integer, encoding a color index or a packed RGB value), or " (tt "#f") " if the selection dialog was closed or canceled."))
(def (sig (procedure "(bb:rgb R [G B])" (id bb:rgb))) (p "Transforms the red, green and blue components given in " (tt "R") ", " (tt "G") " and " (tt "B") " into a color value. All components should be integers in the range 0 - 255. If " (tt "G") " and " (tt "B") " are not given, " (tt "bb:rgb") " returns a list of the red, green and blue color components of the packed color value " (tt "R") "."))
(def (sig (procedure "(bb:get-input LABEL [DEFAULT])" (id bb:get-input))) (p "Pops up a dialog the requests an input string. " (tt "LABEL") " should be a string that will be shown in the dialog, " (tt "DEFAULT") " is the default text."))
(def (sig (procedure "(bb:group WIDGET THUNK)" (id bb:group))) (p "Invokes the zero-argument procedure " (tt "THUNK") " in a dynamic context in which all created widgets are added the group " (tt "WIDGET") " (which should be a " (tt "window") ", " (tt "group") ", " (tt "tabs") ", " (tt "tile") ", " (tt "pack") " or " (tt "scroll") ")."))
(def (sig (procedure "(bb:make-widgets SPEC WIDTH HEIGHT [CHARMAP])" (id bb:make-widgets))) (p "Creates the widgets defined in the graphical representation string " (tt "SPEC") " in a window of the dimensions " (tt "WIDTH") " and " (tt "HEIGHT") ".  The graphical representation string is an ASCII picture of the widget layout, with uppercase characters designating widget types:") (ul (li (tt "B") " - button") (li (tt "C") " - check-xbox") (li (tt "E") " - entry") (li (tt "I") " - edit") (li (tt "N") " - counter") (li (tt "M") " - menu-bar") (li (tt "D") " - dial") (li (tt "S") " - slider") (li (tt "A") " - adjuster") (li (tt "L") " - list") (li (tt "W") " - label") (li (tt "O") " - radio-button") (li (tt "P") " - progress") (li (tt "T") " - tabs") (li (tt "F") " - glwindow") (li (tt "X") " - tile") (li (tt "G") " - group") (li (tt "K") " - pack") (li (tt "Z") " - scroll") (li (tt "R") " - roller") (li (tt "J") " - clock") (li (tt "V") " - live-image") (li (tt "H") " - choice-button") (li (tt "<") " - return-button") (li (tt "%") " - int-entry") (li (tt "*") " - int-entry") (li (tt ">") " - menu-button") (li (tt "Y") " - tree")) (p "A widgets dimensions are computed by drawing a contguous line along the upper and left border, starting from the origin of the widget:") (pre " 01234567890123456789\n ....................\n .....BBBBBBBBB......\n .....BBBBBBBBB......\n .....BBBBBBBBB......\n ....................") (p "Here we would have a button at 5/1, with width 9 and height 3 (before adjusting the dimensions to the specified width and height of the complete layout).") (p (tt "bb:make-widgets") " returns an association list of the form " (tt "(TAG . WIDGET)") " which maps widget-tags to created widgets. If the optional argument " (tt "CHARMAP") " (an list of lists of the form " (tt "(ALIASCHAR CHAR TAG)") ") is given, then any occurrence of " (tt "ALIASCHAR") " in the picture is treated as " (tt "CHAR") ". The " (tt "TAG") " will be returned in the widget a-list. If " (tt "CHARMAP") " is not given, then the tag defaults to the usual widget type character.") (p "Specially delimited strings can be embedded in the widget pictures:") (pre " \"STRING\"") (p "Sets the " (tt "text") " property of the widget.") (pre " |STRING|") (p "Sets the direction, box type, slider type or color of the widget. Valid values for " (tt "STRING") " are:") (p "Direction:") (ul (li "v") (li "h")) (p "Slider type:") (ul (li "vfill") (li "hfill") (li "vnice") (li "hnice")) (p "box type :") (ul (li "no") (li "flat") (li "up") (li "down") (li "thinup") (li "thindown") (li "upframe") (li "downframe") (li "thinupframe") (li "thindownframe") (li "engraved") (li "embossed") (li "engravedframe") (li "embossedframe") (li "border")) (p "color:") (ul (li "gray") (li "black") (li "red") (li "green") (li "yellow") (li "blue") (li "magenta") (li "cyan") (li "darkred") (li "darkgreen") (li "darkyellow") (li "darkblue") (li "darkmagenta") (li "darkcyan") (li "white")) (pre " 'STRING, ...'") (p "Adds items to a " (tt "list") " widget.") (pre " #STRING#") (p (tt "STRING") " should be the name of an image file (as understood by " (tt "bb:image") ").") (pre " :STRING:") (p (tt "STRING") " should be the name of a global variable holding a callback, or an expression evaulating to a procedure or name."))
(def (sig (procedure "(bb:render SXML)" (id bb:render))) (p "Creates the widgets defined by the " (link "http://okmij.org/ftp/Scheme/xml.html" "SXML") " representation in " (tt "SXML") ".  Each element represents a widget where the tag specifies a widget type (as in " (tt "bb:make-widget") ").  Element attributes represent widget properties. Attribute-value strings are transformed according to the following mapping:") (pre " x y width height spacing maximum minimum x-position y-position text-size") (p "Numeric strings. " (tt "x") ", " (tt "y") ", " (tt "width") " and " (tt "height") " may also be specified as offsets given as strings prefixed with " (tt "+") " or " (tt "-") ", or percentages given as strings suffixed with " (tt "%") ".") (pre " color text-color selection-color") (p "A string of the form " (tt "#RRGGBB") " or a color name") (pre " resizable visible focus modal read-only valid-context") (p "Anything different from the string " (tt "no") " means true.") (pre " resizable-widget") (p "an element id.") (pre " when") (p "A comma-separated list of indicator-names") (p "Anything else is either treated as a numeric string or (if not a valid number) as a symbolic property value.  Note that attribute values may also be of other types than strings. The content of an SXML element will be used as the " (tt "text") " property value of the created widget, if given.") (p "Elements may have any number of additional attributes. The attribute " (tt "id") " can be used to identify elements.") (p "A child widget will have the dimensions of it's parent, if no " (tt "width") " and/or " (tt "height") " attributes are given."))
(def (sig (procedure "(bb:element? X)" (id bb:element?))) (p "Returns " (tt "#t") " if " (tt "X") " is an element, or " (tt "#f") " otherwise."))
(def (sig (procedure "(bb:element-widget ELEMENT)" (id bb:element-widget)) (procedure "(bb:element-parent ELEMENT)" (id bb:element-parent)) (procedure "(bb:element-children ELEMENT)" (id bb:element-children)) (procedure "(bb:element-id ELEMENT)" (id bb:element-id)) (procedure "(bb:element-tag ELEMENT)" (id bb:element-tag)) (procedure "(bb:element-content ELEMENT)" (id bb:element-content)) (procedure "(bb:element-attributes ELEMENT)" (id bb:element-attributes))) (p "Accessor procedures for element slots. Parent is an element or " (tt "#f") " (if its the root element).  Children is a list of child elements. Widget is the widget represented by this element. Id and tag are symbols.  Attributes is a property list mapping attribute symbols to values. Content is a string."))
(def (sig (procedure "(bb:find-element ID [ROOT])" (id bb:find-element))) (p "Searches the element with the id " (tt "ID") ", starting from parent element " (tt "ROOT") ", or the value of " (tt "(bb:root-element)") " if not given. If no element with this id can be found " (tt "#f") " is returned."))
(def (sig (procedure "(bb:find-widget ID [ROOT])" (id bb:find-widget))) (p "Equivalent to " (tt "(bb:element-widget (bb:find-element ID ROOT))")))
(def (sig (parameter "(bb:root-element [ELEMENT])" (id bb:root-element))) (p "Parameter holding the current root element."))

((tags "egg") (section 2 "thread-utils" (toc)) (section 2 "Documentation" (p "Some SRFI 18 related utility routines.") (p "Rather Chicken centric.") (section 4 "Thread Reaper" (p "Allows a thread to be " (i "joined") " to the primordial thread asynchronously.")) (section 4 "Usage" (highlight scheme "(require-extension thread-reaper)")) (section 4 "thread-reap!" (def (sig (procedure "(thread-reap! THREAD)" (id thread-reap!))) (p "Queues the supplied " (tt "THREAD") " for reaping."))) (section 4 "thread-reaper-stop!" (def (sig (procedure "(thread-reaper-stop!)" (id thread-reaper-stop!))) (p "Processes any threads queued for reaping and terminates the reaper."))) (section 4 "thread-reaper-timeout" (def (sig (procedure "(thread-reaper-timeout) => (or #f number)" (id thread-reaper-timeout)) (procedure "(thread-reaper-timeout SECONDS)" (id thread-reaper-timeout))) (p "Gets and sets the number of seconds to wait for a thread to quit. The default is " (tt "#f") " or wait till termination. Should threads submitted to the reaper be known to \"run off with the cpu\" then something other than wait forever is warranted."))) (section 4 "thread-reaper-retries" (def (sig (procedure "(thread-reaper-retries) => fixnum" (id thread-reaper-retries)) (procedure "(thread-reaper-retries SECONDS)" (id thread-reaper-retries))) (p "Gets and sets the number of attempts to wait for a thread to quit.") (p "Default is " (tt "1") "."))) (section 4 "thread-reaper-greedy" (def (sig (procedure "(thread-reaper-greedy) => boolean" (id thread-reaper-greedy)) (procedure "(thread-reaper-greedy FLAG)" (id thread-reaper-greedy))) (p "Gets and sets the reaper greedy mode. When greedy the queue is exhausted whenever possible. Otherwise only one queue item is processed per time-slice.") (p "Default is " (tt "#f") "."))) (section 4 "thread-reaper-quantum" (def (sig (procedure "(thread-reaper-quantum) => number" (id thread-reaper-quantum)) (procedure "(thread-reaper-quantum MILLISECONDS)" (id thread-reaper-quantum))) (p "Gets and sets the time-slice for the reaper.") (p "Default is " (tt "2500") "."))) (section 4 "thread-reaper-shutdown?" (def (sig (procedure "(thread-reaper-shutdown?) => boolean" (id thread-reaper-shutdown?))) (p "Is the reaper shutting down?"))) (section 4 "Thread Utilities") (section 4 "Usage" (highlight scheme "(require-extension thread-utils)")) (section 4 "print-exception-error" (def (sig (procedure "(print-exception-error EXN [THREAD [PORT]])" (id print-exception-error))) (p "Prints the error " (tt "EXN") " and the current call chain. The message header is supplied by " (tt "thread-warning-message") ". This routine duplicates the uncaught exception in a thread handling behavior of Chicken. Useful for caught exceptions that cannot in fact be handled.") (p "The " (tt "EXN") " is a " (tt "condition") " or any other object. The default for " (tt "THREAD") " is the " (tt "(current-thread)") ". The default for " (tt "PORT") " is the " (tt "(current-error-port)") "."))) (section 4 "print-exception-warning" (def (sig (procedure "(print-exception-warning EXN [THREAD [PORT]])" (id print-exception-warning))) (p "Invokes " (tt "print-exception-error") " when warnings are enabled.") (p "The " (tt "EXN") " is a " (tt "condition") " or any other object. The default for " (tt "THREAD") " is the " (tt "(current-thread)") ". The default for " (tt "PORT") " is the " (tt "(current-error-port)") "."))) (section 4 "thread-warning-message" (def (sig (procedure "(thread-warning-message THREAD) => string" (id thread-warning-message))) (p "Returns the " (tt "string") " " (tt "\"Warning (<THREAD>): \"") "."))) (section 4 "thread-timeout?") (section 4 "check-timeout") (section 4 "error-timeout" (def (sig (procedure "(thread-timeout? OBJECT) => boolean" (id thread-timeout?)) (procedure "(check-timeout LOCATION OBJECT [ARGUMENT-NAME]) => (or #f time number)" (id check-timeout)) (procedure "(error-timeout LOCATION OBJECT [ARGUMENT-NAME])" (id error-timeout))) (p "Is the " (tt "OBJECT") " a " (tt "thread-timeout") " object? A " (tt "thread-timeout") " is " (tt "#f") ", a " (tt "number") ", or a SRFI 18 " (tt "time") " object."))) (section 4 "make-thread-timeout" (def (sig (procedure "(make-thread-timeout OFFSET [BASE]) => (or #f time)" (id make-thread-timeout))) (p "Returns the SRFI 18 " (tt "time") " object representing the " (tt "OFFSET") " + " (tt "BASE") ". The " (tt "BASE") " is a " (tt "thread-timeout") " object with default " (tt "(current-time)") ".") (p "Should " (tt "OFFSET") " be " (tt "#f") " or a " (tt "time") " object the " (tt "BASE") " is ignored and " (tt "OFFSET") " is returned. Assumes an absolute " (tt "OFFSET") " indicates a timeout already calculated."))) (section 4 "check-thread") (section 4 "error-thread" (def (sig (procedure "(check-thread LOCATION OBJECT [ARGUMENT-NAME]) => thread" (id check-thread)) (procedure "(error-thread LOCATION OBJECT [ARGUMENT-NAME])" (id error-thread))) (p "Type checking for " (tt "thread") "."))) (section 4 "thread-created?") (section 4 "thread-ready?") (section 4 "thread-running?") (section 4 "thread-blocked?") (section 4 "thread-suspended?") (section 4 "thread-sleeping?") (section 4 "thread-terminated?") (section 4 "thread-dead?" (def (sig (procedure "(thread-created? THREAD) => boolean" (id thread-created?)) (procedure "(thread-ready? THREAD) => boolean" (id thread-ready?)) (procedure "(thread-running? THREAD) => boolean" (id thread-running?)) (procedure "(thread-blocked? THREAD) => boolean" (id thread-blocked?)) (procedure "(thread-suspended? THREAD) => boolean" (id thread-suspended?)) (procedure "(thread-sleeping? THREAD) => boolean" (id thread-sleeping?)) (procedure "(thread-terminated? THREAD) => boolean" (id thread-terminated?)) (procedure "(thread-dead? THREAD) => boolean" (id thread-dead?))) (p "Is the " (tt "THREAD") " in the indicated state?"))) (section 4 "thread-obstructed?" (def (sig (procedure "(thread-obstructed? THREAD) => boolean" (id thread-obstructed?))) (p "Is the " (tt "THREAD") " blocked or sleeping?"))) (section 4 "thread-state=?" (def (sig (procedure "(thread-state=? THREAD TOKEN) => boolean" (id thread-state=?))) (p "Does the state token of the " (tt "THREAD") " equal the supplied " (tt "TOKEN") "."))) (section 4 "thread-blocked?/termination") (section 4 "thread-blocked?/io") (section 4 "thread-blocked?/timeout" (def (sig (procedure "(thread-blocked?/termination THREAD) => boolean" (id thread-blocked?/termination)) (procedure "(thread-blocked?/io THREAD) => boolean" (id thread-blocked?/io)) (procedure "(thread-blocked?/timeout THREAD) => boolean" (id thread-blocked?/timeout))) (p "Is the " (tt "THREAD") " in the indicated blocking state?"))) (section 4 "thread-unblock!" (def (sig (procedure "(thread-unblock! THREAD)" (id thread-unblock!))) (p "Attempts to " (i "cleanly") " unblock the " (tt "THREAD") ".") (p "Currently only threads blocked for timeout can be unblocked. Threads blocked for any other reason are ignored.")))) (section 2 "Notes" (ul (li "All numbers are as defined by the Chicken core."))) (section 2 "Requirements" (p (int-link "miscmacros") " " (int-link "synch") " " (int-link "thread-utils") " " (int-link "record-variants") " " (int-link "check-errors"))) (section 2 "Author" (p (int-link "kon lovett"))) (section 2 "Version history" (dl (dt "1.0.0") (dd "Moved from " (int-link "srfi-27") " into own extension."))) (section 2 "License" (p "Copyright (C) 2010 Kon Lovett.  All rights reserved.") (p "Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the Software), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:") (p "The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.") (p "THE SOFTWARE IS PROVIDED ASIS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.")))
((tags "egg") (section 2 "uuid-lib" (p "OSF DCE 1.1 UUID") (toc)) (section 2 "Documentation" (p "Wrapper for " (tt "uuid/uuid.h") " procedures on MacOS X, and Linux.") (section 3 "Predicates" (section 4 "uuid?" (def (sig (procedure "(uuid? UUID) => boolean" (id uuid?))) (p "Is " (tt "UUID") " a uuid?"))) (section 4 "uuid-null?" (def (sig (procedure "(uuid-null? UUID) => boolean" (id uuid-null?))) (p "Is " (tt "UUID") " the null uuid?"))) (section 4 "uuid-compare" (def (sig (procedure "(uuid-compare UUID1 UUID2) => integer" (id uuid-compare))) (p "Returns " (tt "-1") ", " (tt "0") ". or " (tt "1") " for the comaprison of " (tt "UUID1") " and " (tt "UUID2") "."))) (section 4 "uuid=?" (def (sig (procedure "(uuid=? UUID1 UUID2) => boolean" (id uuid=?))) (p "Are " (tt "UUID1") " and " (tt "UUID2") " equal?"))) (section 4 "uuid<?" (def (sig (procedure "(uuid<? UUID1 UUID2) => boolean" (id uuid<?))) (p "Does " (tt "UUID1") " order below " (tt "UUID2") "?"))) (section 4 "uuid>?" (def (sig (procedure "(uuid>? UUID1 UUID2) => boolean" (id uuid>?))) (p "Does " (tt "UUID1") " order above " (tt "UUID2") "?"))) (section 4 "uuid<=?" (def (sig (procedure "(uuid<=? UUID1 UUID2) => boolean" (id uuid<=?))) (p "Does " (tt "UUID1") " order below or the same as " (tt "UUID2") "?"))) (section 4 "uuid>=?" (def (sig (procedure "(uuid>=? UUID1 UUID2) => boolean" (id uuid>=?))) (p "Does " (tt "UUID1") " order above or the same as " (tt "UUID2") "?")))) (section 3 "Operations" (section 4 "uuid-clear!" (def (sig (procedure "(uuid-clear! UUID) => uuid" (id uuid-clear!))) (p "Returns the " (tt "UUID") " set to the null-uuid."))) (section 4 "uuid-copy" (def (sig (procedure "(uuid-copy UUID) => uuid" (id uuid-copy))) (p "Returns a copy of the " (tt "UUID") "."))) (section 4 "make-uuid" (def (sig (procedure "(make-uuid [VARIANT]) => uuid" (id make-uuid))) (p "Returns a new uuid.") (p (tt "VARIANT") " is:") (dl (dt (tt "'V1") " or " (tt "'time")) (dd "DCE Version 1 (MAC address) algorithm.") (dt (tt "'V4") " or " (tt "'random")) (dd "DCE Version 4 (random) algorithm. ") (dt (tt "#f")) (dd "The null-uuid. The default.")) (p "An invalid " (tt "MODE") " is an error condtion."))) (section 4 "string->uuid" (def (sig (procedure "(string->uuid UUID-STRING) => uuid" (id string->uuid))) (p "Returns a new uuid from the external string representation " (tt "UUID-STRING") "."))) (section 4 "uuid->string" (def (sig (procedure "(uuid->string UUID) => string" (id uuid->string))) (p "Returns the external string representation of " (tt "UUID") "."))) (section 4 "uuid-generate" (def (sig (procedure "(uuid-generate [METHOD]) => uuid" (id uuid-generate))) (p "Returns a new uuid.") (p (tt "METHOD") " is:") (dl (dt (tt "'random")) (dd "DCE Version 4 (random) algorithm. ") (dt (tt "'time")) (dd "DCE Version 1 (MAC address) algorithm.") (dt (tt "#f")) (dd "DCE V4 if a high-quality random device available, otherwise DCE V1. The default.")) (p "An invalid " (tt "METHOD") " is an error condtion."))) (section 4 "uuid-parse" (def (sig (procedure "(uuid-parse UUID-TEXT) => uuid" (id uuid-parse))) (p "Returns a new uuid from the external string representation " (tt "UUID-TEXT") "."))) (section 4 "uuid-unparse" (def (sig (procedure "(uuid-unparse UUID [CASE]) => string" (id uuid-unparse))) (p "Returns the external string representation of " (tt "UUID") ".") (p (tt "CASE") " is " (tt "#f") " (the system dependent local default), " (tt "'upper") ", or " (tt "'lower") ". Default is " (tt "#f") ".") (p "An invalid " (tt "CASE") " is an error condtion."))))) (section 2 "Usage" (highlight scheme "(require-extension uuid-lib)")) (section 2 "Notes" (ul (li "The " (tt "uuid?") ". " (tt "uuid-null?") ", " (tt "uuid-compare") ", " (tt "uuid=?") ", " (tt "uuid<?") ", " (tt "uuid>?") ", " (tt "uuid<=?") ", " (tt "uuid>=?") ", " (tt "make-uuid") ", " (tt "uuid-copy") ", " (tt "uuid-clear!") ", " (tt "string->uuid") ", " (tt "uuid->string") " share the same signature as the corresponding routines in the " (i "uuid-ossp") " extension.") (li "When a UUID argument is not of the expected type the routines will silently fail by returning " (tt "#f") ", no matter what the declared return type. This may change in the future."))) (section 2 "Author" (p (int-link "/users/kon-lovett" "Kon Lovett"))) (section 2 "Version history" (dl (dt "1.4.0") (dd "Added " (tt "make-uuid") ", " (tt "string->uuid") ", " (tt "uuid->string") ". Dropped use of \"uuid-lib-c-api.scm\" since undocumented. Deprecated " (tt "uuid<>?") ".") (dt "1.3.0") (dd "Exposed " (tt "uuid-compare") ".") (dt "1.2") (dd "Hello."))) (section 2 "License" (p "Copyright (C) 2010 Kon Lovett.  All rights reserved.") (p "Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the Software), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:") (p "The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.") (p "THE SOFTWARE IS PROVIDED ASIS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.")))
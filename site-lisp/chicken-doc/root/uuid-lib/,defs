(index ("uuid?" 0) ("uuid-null?" 94) ("uuid-compare" 205) ("uuid=?" 407) ("uuid<?" 532) ("uuid>?" 660) ("uuid<=?" 788) ("uuid>=?" 933) ("uuid-clear!" 1078) ("uuid-copy" 1204) ("make-uuid" 1315) ("string->uuid" 1710) ("uuid->string" 1878) ("uuid-generate" 2021) ("uuid-parse" 2441) ("uuid-unparse" 2601))
(def (sig (procedure "(uuid? UUID) => boolean" (id uuid?))) (p "Is " (tt "UUID") " a uuid?"))
(def (sig (procedure "(uuid-null? UUID) => boolean" (id uuid-null?))) (p "Is " (tt "UUID") " the null uuid?"))
(def (sig (procedure "(uuid-compare UUID1 UUID2) => integer" (id uuid-compare))) (p "Returns " (tt "-1") ", " (tt "0") ". or " (tt "1") " for the comaprison of " (tt "UUID1") " and " (tt "UUID2") "."))
(def (sig (procedure "(uuid=? UUID1 UUID2) => boolean" (id uuid=?))) (p "Are " (tt "UUID1") " and " (tt "UUID2") " equal?"))
(def (sig (procedure "(uuid<? UUID1 UUID2) => boolean" (id uuid<?))) (p "Does " (tt "UUID1") " order below " (tt "UUID2") "?"))
(def (sig (procedure "(uuid>? UUID1 UUID2) => boolean" (id uuid>?))) (p "Does " (tt "UUID1") " order above " (tt "UUID2") "?"))
(def (sig (procedure "(uuid<=? UUID1 UUID2) => boolean" (id uuid<=?))) (p "Does " (tt "UUID1") " order below or the same as " (tt "UUID2") "?"))
(def (sig (procedure "(uuid>=? UUID1 UUID2) => boolean" (id uuid>=?))) (p "Does " (tt "UUID1") " order above or the same as " (tt "UUID2") "?"))
(def (sig (procedure "(uuid-clear! UUID) => uuid" (id uuid-clear!))) (p "Returns the " (tt "UUID") " set to the null-uuid."))
(def (sig (procedure "(uuid-copy UUID) => uuid" (id uuid-copy))) (p "Returns a copy of the " (tt "UUID") "."))
(def (sig (procedure "(make-uuid [VARIANT]) => uuid" (id make-uuid))) (p "Returns a new uuid.") (p (tt "VARIANT") " is:") (dl (dt (tt "'V1") " or " (tt "'time")) (dd "DCE Version 1 (MAC address) algorithm.") (dt (tt "'V4") " or " (tt "'random")) (dd "DCE Version 4 (random) algorithm. ") (dt (tt "#f")) (dd "The null-uuid. The default.")) (p "An invalid " (tt "MODE") " is an error condtion."))
(def (sig (procedure "(string->uuid UUID-STRING) => uuid" (id string->uuid))) (p "Returns a new uuid from the external string representation " (tt "UUID-STRING") "."))
(def (sig (procedure "(uuid->string UUID) => string" (id uuid->string))) (p "Returns the external string representation of " (tt "UUID") "."))
(def (sig (procedure "(uuid-generate [METHOD]) => uuid" (id uuid-generate))) (p "Returns a new uuid.") (p (tt "METHOD") " is:") (dl (dt (tt "'random")) (dd "DCE Version 4 (random) algorithm. ") (dt (tt "'time")) (dd "DCE Version 1 (MAC address) algorithm.") (dt (tt "#f")) (dd "DCE V4 if a high-quality random device available, otherwise DCE V1. The default.")) (p "An invalid " (tt "METHOD") " is an error condtion."))
(def (sig (procedure "(uuid-parse UUID-TEXT) => uuid" (id uuid-parse))) (p "Returns a new uuid from the external string representation " (tt "UUID-TEXT") "."))
(def (sig (procedure "(uuid-unparse UUID [CASE]) => string" (id uuid-unparse))) (p "Returns the external string representation of " (tt "UUID") ".") (p (tt "CASE") " is " (tt "#f") " (the system dependent local default), " (tt "'upper") ", or " (tt "'lower") ". Default is " (tt "#f") ".") (p "An invalid " (tt "CASE") " is an error condtion."))

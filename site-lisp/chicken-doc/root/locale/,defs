(index ("make-locale-components" 0) ("locale-components?" 188) ("error-locale-components" 347) ("check-locale-components" 486) ("locale-components-exists?" 683) ("locale-component-ref" 888) ("set-locale-component!" 1124) ("update-locale-components!" 1341) ("current-locale" 1582) ("current-locale" 1582) ("current-locale-components" 2009) ("posix-locale-string->locale-components" 2206) ("posix-load-locale" 2590) ("current-timezone" 2895) ("current-timezone" 2895) ("current-timezone-components" 3317) ("posix-timezone-string->timezone-components" 3513) ("posix-load-timezone" 3897) ("make-timezone-components" 4129) ("timezone-components?" 4311) ("error-timezone-components" 4582) ("check-timezone-components" 4725) ("timezone-components-exists?" 4928) ("timezone-component-ref" 5141) ("set-timezone-component!" 5406) ("update-timezone-components!" 5632) ("timezone-dst-rule-julian-noleap?" 5883) ("timezone-dst-rule-julian-leap?" 6113) ("timezone-dst-rule-mwd?" 6340) ("timezone-dst-rule-offset" 6533) ("timezone-dst-rule-julian" 6753) ("timezone-dst-rule-month" 6958) ("timezone-dst-rule-week" 7164) ("timezone-dst-rule-day" 7368) ("make-timezone-dst-rule-julian-leap" 7568) ("make-timezone-dst-rule-julian-noleap" 7793) ("make-timezone-dst-rule-mwd" 8021) ("with-tzset" 8216) ("timezone-offset?" 8465) ("error-timezone-offset" 8621) ("check-timezone-offset" 8756) ("make-locale-dictionary" 8959) ("locale-dictionary?" 9116) ("locale-dictionary-category" 9285) ("set-locale-dictionary-category!" 9497) ("current-locale-dictionary" 9804) ("current-locale-dictionary" 9804) ("locale-category-ref" 10070) ("set-locale-category!" 10287))
(def (sig (procedure "(make-locale-components NAME [SOURCE #f [TAG 'locale]]) => LOCALE-COMPONENTS" (id make-locale-components))) (p "Returns a new " (tt "locale-components") " object."))
(def (sig (procedure "(locale-components? OBJECT) => BOOLEAN" (id locale-components?))) (p "Is the " (tt "OBJECT") " a " (tt "locale-compenents") " object?"))
(def (sig (procedure "(error-locale-components LOCATION OBJECT [ARGUMENT-NAME])" (id error-locale-components))) (p "Raise a type-error."))
(def (sig (procedure "(check-locale-components LOCATION OBJECT [ARGUMENT-NAME])" (id check-locale-components))) (p "Raise a type-error unless the " (tt "OBJECT") " is a valid locale-components."))
(def (sig (procedure "(locale-components-exists? LOCALE-COMPONENTS KEY) => BOOLEAN" (id locale-components-exists?))) (p "Does the specified " (tt "LOCALE-COMPONENTS") " have a value for " (tt "KEY") "?"))
(def (sig (procedure "(locale-component-ref LOCALE-COMPONENTS KEY [DEFAULT #f]) => OBJECT" (id locale-component-ref))) (p "Returns the " (tt "KEY") " property of " (tt "LOCALE-COMPONENTS") " or the " (tt "DEFAULT") " when not found."))
(def (sig (procedure "(set-locale-component! LOCALE-COMPONENTS KEY VALUE)" (id set-locale-component!))) (p "Updates or creates the " (tt "KEY") " property of " (tt "LOCALE-COMPONENTS") " with the " (tt "VALUE") "."))
(def (sig (procedure "(update-locale-components! LOCALE-COMPONENTS KEY VALUE ...) => LOCALE-COMPONENTS" (id update-locale-components!))) (p "Updates in place the " (tt "LOCALE-COMPONENTS") " with the specified " (tt "KEY+VALUE") " pairs."))
(def (sig (procedure "(current-locale) => STRING" (id current-locale)) (procedure "(current-locale VALUE)" (id current-locale))) (p "The currently defined locale. Returns the locale name string.") (p "The specified " (tt "VALUE") " is either a locale string value, a " (tt "locale-components") " object or " (tt "#f") ", indicating locale independence.") (p "When no locale value is set the default locale is " (tt "#f") "."))
(def (sig (procedure "(current-locale-components) => LOCALE-COMPONENTS" (id current-locale-components))) (p "Returns the " (tt "locale-components") " object corresponding to the current-locale."))
(def (sig (procedure "(posix-locale-string->locale-components STRING [SOURCE \"POSIX\" [TAG 'locale]]) => LOCALE-COMPONENTS" (id posix-locale-string->locale-components))) (p "Parses a POSIX locale string specification, " (tt "STRING") ", and returns the corresponding locale-components object.") (p "The optional " (tt "SOURCE") " indicates what locale system supplied the string."))
(def (sig (procedure "(posix-load-locale)" (id posix-load-locale))) (p "Sets up the locale using POSIX rules. Initializes the " (tt "current-locale") " from the " (tt "MESSAGES") " category.") (p "The Posix pathname locale is currently unsupported.") (p "The \"C\" & \"POSIX\" locales are unsupported."))
(def (sig (procedure "(current-timezone) => STRING" (id current-timezone)) (procedure "(current-timezone VALUE)" (id current-timezone))) (p "The currently defined timezone. Retruns the timezone name string.") (p "The specified " (tt "VALUE") " is either a timezone string value, a " (tt "timezone-components") " or " (tt "#f") ", indicating no timezone.") (p "When no timezone value is set the default timezone is UTC."))
(def (sig (procedure "(current-timezone-components) => TIMEZONE-COMPONENTS" (id current-timezone-components))) (p "Returns the timezone-components object corresponding to the current-timezone."))
(def (sig (procedure "(posix-timezone-string->timezone-components STRING [SOURCE \"POSIX\"]) => TIMEZONE-COMPONENTS" (id posix-timezone-string->timezone-components))) (p "Parses a POSIX timezone string specification, " (tt "STRING") ", and returns the corresponding timezone-components object.") (p "The optional " (tt "SOURCE") " indicates what locale system supplied the string."))
(def (sig (procedure "(posix-load-timezone)" (id posix-load-timezone))) (p "Initialize the current-timezone from the TZ environment variable.") (p "The Posix pathname and implementation-defined timezone is currently unsupported."))
(def (sig (procedure "(make-timezone-components NAME [SOURCE #f]) => TIMEZONE-COMPONENTS" (id make-timezone-components))) (p "Returns a new " (tt "timezone-components") " object."))
(def (sig (procedure "(timezone-components? OBJECT) => BOOLEAN" (id timezone-components?))) (p "Is the specified " (tt "OBJECT") " actually a timezone-components object?") (p "Note that a " (tt "timezone-components") " object is-a " (tt "locale-compenents") " object."))
(def (sig (procedure "(error-timezone-components LOCATION OBJECT [ARGUMENT-NAME])" (id error-timezone-components))) (p "Raise a type-error."))
(def (sig (procedure "(check-timezone-components LOCATION OBJECT [ARGUMENT-NAME])" (id check-timezone-components))) (p "Raise a type-error unless the " (tt "OBJECT") " is a valid timezone-components."))
(def (sig (procedure "(timezone-components-exists? TIMEZONE-COMPONENTS KEY) => BOOLEAN" (id timezone-components-exists?))) (p "Does the specified " (tt "TIMEZONE-COMPONENTS") " have a value for " (tt "KEY") "?"))
(def (sig (procedure "(timezone-component-ref TIMEZONE-COMPONENTS KEY [DEFAULT #f])" (id timezone-component-ref))) (p "Returns the timezone-component " (tt "KEY") " of the " (tt "TIMEZONE-COMPONENTS") " object, or the " (tt "DEFAULT") " for a missing component."))
(def (sig (procedure "(set-timezone-component! TIMEZONE-COMPONENTS KEY VALUE)" (id set-timezone-component!))) (p "Sets the timezone-component " (tt "KEY") " of the " (tt "TIMEZONE-COMPONENTS") " object to " (tt "VALUE") "."))
(def (sig (procedure "(update-timezone-components! TIMEZONE-COMPONENTS KEY VALUE ...) => TIMEZONE-COMPONENTS" (id update-timezone-components!))) (p "Updates in place the " (tt "TIMEZONE-COMPONENTS") " with the specified " (tt "KEY+VALUE") " pairs."))
(def (sig (procedure "(timezone-dst-rule-julian-noleap? OBJECT) => BOOLEAN" (id timezone-dst-rule-julian-noleap?))) (p "Is the specified " (tt "OBJECT") " actually a daylight saving time julian day without leap seconds object?"))
(def (sig (procedure "(timezone-dst-rule-julian-leap? OBJECT) => BOOLEAN" (id timezone-dst-rule-julian-leap?))) (p "Is the specified " (tt "OBJECT") " actually a daylight saving time julian day assuming leap seconds object?"))
(def (sig (procedure "(timezone-dst-rule-mwd? OBJECT) => BOOLEAN" (id timezone-dst-rule-mwd?))) (p "Is the specified " (tt "OBJECT") " actually a daylight saving time month+week+day object?"))
(def (sig (procedure "(timezone-dst-rule-offset TIMEZONE-DST-RULE) => INTEGER" (id timezone-dst-rule-offset))) (p "Returns the seconds within day offset component of the specified " (tt "TIMEZONE-DST-RULE") " object."))
(def (sig (procedure "(timezone-dst-rule-julian TIMEZONE-DST-RULE) => INTEGER" (id timezone-dst-rule-julian))) (p "Returns the julian day component of the specified " (tt "TIMEZONE-DST-RULE") " object."))
(def (sig (procedure "(timezone-dst-rule-month TIMEZONE-DST-RULE) => INTEGER" (id timezone-dst-rule-month))) (p "Returns the month of year component of the specified " (tt "TIMEZONE-DST-RULE") " object."))
(def (sig (procedure "(timezone-dst-rule-week TIMEZONE-DST-RULE) => INTEGER" (id timezone-dst-rule-week))) (p "Returns the week of month component of the specified " (tt "TIMEZONE-DST-RULE") " object."))
(def (sig (procedure "(timezone-dst-rule-day TIMEZONE-DST-RULE) => INTEGER" (id timezone-dst-rule-day))) (p "Returns the day of week component of the specified " (tt "TIMEZONE-DST-RULE") " object."))
(def (sig (procedure "(make-timezone-dst-rule-julian-leap JULIAN-DAY OFFSET) => TIMEZONE-DST-RULE" (id make-timezone-dst-rule-julian-leap))) (p "Returns a daylight saving time julian day assuming leap seconds rule object."))
(def (sig (procedure "(make-timezone-dst-rule-julian-noleap JULIAN-DAY OFFSET) => TIMEZONE-DST-RULE" (id make-timezone-dst-rule-julian-noleap))) (p "Returns a daylight saving time julian day without leap seconds rule object."))
(def (sig (procedure "(make-timezone-dst-rule-mwd MONTH WEEK DAY OFFSET) => TIMEZONE-DST-RULE" (id make-timezone-dst-rule-mwd))) (p "Returns a daylight saving time month.week.day rule object."))
(def (sig (procedure "(with-tzset TZ THUNK) => OBJECT" (id with-tzset))) (p "Invoke " (tt "THUNK") " with the TZ environment variable bound to the string " (tt "TZ") ". Uses the C library routine " (tt "tzset") ". Restores the original TZ value."))
(def (sig (procedure "(timezone-offset? OBJECT) => BOOLEAN" (id timezone-offset?))) (p "Is the " (tt "OBJECT") " a valid timezone offset in +/- seconds."))
(def (sig (procedure "(error-timezone-offset LOCATION OBJECT [ARGUMENT-NAME])" (id error-timezone-offset))) (p "Raise a type-error."))
(def (sig (procedure "(check-timezone-offset LOCATION OBJECT [ARGUMENT-NAME])" (id check-timezone-offset))) (p "Raise a type-error unless the " (tt "OBJECT") " a valid timezone offset in +/- seconds."))
(def (sig (procedure "(make-locale-dictionary) => LOCALE-CATEGORIES" (id make-locale-dictionary))) (p "Returns a new " (tt "locale-categories") " object."))
(def (sig (procedure "(locale-dictionary? OBJECT) => BOOLEAN" (id locale-dictionary?))) (p "Is the specified " (tt "OBJECT") " a " (tt "locale-categories") " object?"))
(def (sig (procedure "(locale-dictionary-category LOCALE-CATEGORIES KEY [DEFAULT #f]) => OBJECT" (id locale-dictionary-category))) (p "Returns the value for " (tt "KEY") " in the " (tt "LOCALE-CATEGORIES") "."))
(def (sig (procedure "(set-locale-dictionary-category! LOCALE-CATEGORIES KEY VALUE)" (id set-locale-dictionary-category!))) (p "Changes the " (tt "VALUE") " for " (tt "KEY") " in the " (tt "LOCALE-CATEGORIES") ". A " (tt "VALUE") " of " (tt "#f") " will delete the category identified by " (tt "KEY") "."))
(def (sig (parameter "(current-locale-dictionary) => LOCALE-CATEGORIES" (id current-locale-dictionary)) (parameter "(current-locale-dictionary LOCALE-CATEGORIES)" (id current-locale-dictionary))) (p "Gets and sets the current " (tt "locale-categories") " object."))
(def (sig (procedure "(locale-category-ref CATEGORY [DEFAULT #f])" (id locale-category-ref))) (p "Returns the specified " (tt "CATEGORY") " locale-components object, or " (tt "#f") " if the category is not valued."))
(def (sig (procedure "(set-locale-category! CATEGORY LOCALE-COMPONENTS)" (id set-locale-category!))) (p "Sets the specified " (tt "CATEGORY") " to the specified " (tt "LOCALE-COMPONENTS") " object."))

(index ("u8vector->blob" 0) ("s8vector->blob" 0) ("u16vector->blob" 0) ("s16vector->blob" 0) ("u32vector->blob" 0) ("s32vector->blob" 0) ("f32vector->blob" 0) ("f64vector->blob" 0) ("u8vector->blob/shared" 0) ("s8vector->blob/shared" 0) ("u16vector->blob/shared" 0) ("s16vector->blob/shared" 0) ("u32vector->blob/shared" 0) ("s32vector->blob/shared" 0) ("f32vector->blob/shared" 0) ("f64vector->blob/shared" 0) ("blob->u8vector" 1422) ("blob->s8vector" 1422) ("blob->u16vector" 1422) ("blob->s16vector" 1422) ("blob->u32vector" 1422) ("blob->s32vector" 1422) ("blob->f32vector" 1422) ("blob->f64vector" 1422) ("blob->u8vector/shared" 1422) ("blob->s8vector/shared" 1422) ("blob->u16vector/shared" 1422) ("blob->s16vector/shared" 1422) ("blob->u32vector/shared" 1422) ("blob->s32vector/shared" 1422) ("blob->f32vector/shared" 1422) ("blob->f64vector/shared" 1422) ("subu8vector" 2715) ("subu16vector" 2715) ("subu32vector" 2715) ("subs8vector" 2715) ("subs16vector" 2715) ("subs32vector" 2715) ("subf32vector" 2715) ("subf64vector" 2715) ("read-u8vector" 3401) ("read-u8vector!" 3802) ("write-u8vector" 4291) ("#u8" 4605) ("#u16" 4605) ("#u32" 4605) ("#s8" 4605) ("#s16" 4605) ("#s32" 4605) ("#f32" 4605) ("#f64" 4605) ("u8vector?" 5596) ("s8vector?" 5596) ("u16vector?" 5596) ("s16vector?" 5596) ("u32vector?" 5596) ("s32vector?" 5596) ("f32vector?" 5596) ("f64vector?" 5596) ("make-u8vector" 6085) ("make-s8vector" 6085) ("make-u16vector" 6085) ("make-s16vector" 6085) ("make-u32vector" 6085) ("make-s32vector" 6085) ("make-f32vector" 6085) ("make-f64vector" 6085) ("u8vector" 7965) ("s8vector" 7965) ("u16vector" 7965) ("s16vector" 7965) ("u32vector" 7965) ("s32vector" 7965) ("f32vector" 7965) ("f64vector" 7965) ("u8vector-length" 8517) ("s8vector-length" 8517) ("u16vector-length" 8517) ("s16vector-length" 8517) ("u32vector-length" 8517) ("s32vector-length" 8517) ("f32vector-length" 8517) ("f64vector-length" 8517) ("u8vector-ref" 9109) ("s8vector-ref" 9109) ("u16vector-ref" 9109) ("s16vector-ref" 9109) ("u32vector-ref" 9109) ("s32vector-ref" 9109) ("f32vector-ref" 9109) ("f64vector-ref" 9109) ("u8vector-set!" 9782) ("s8vector-set!" 9782) ("u16vector-set!" 9782) ("s16vector-set!" 9782) ("u32vector-set!" 9782) ("s32vector-set!" 9782) ("f32vector-set!" 9782) ("f64vector-set!" 9782) ("u8vector->list" 10843) ("s8vector->list" 10843) ("u16vector->list" 10843) ("s16vector->list" 10843) ("u32vector->list" 10843) ("s32vector->list" 10843) ("f32vector->list" 10843) ("f64vector->list" 10843) ("list->u8vector" 11437) ("list->s8vector" 11437) ("list->u16vector" 11437) ("list->s16vector" 11437) ("list->u32vector" 11437) ("list->s32vector" 11437) ("list->f32vector" 11437) ("list->f64vector" 11437))
(def (sig (procedure "(u8vector->blob U8VECTOR)" (id u8vector->blob)) (procedure "(s8vector->blob S8VECTOR)" (id s8vector->blob)) (procedure "(u16vector->blob U16VECTOR)" (id u16vector->blob)) (procedure "(s16vector->blob S16VECTOR)" (id s16vector->blob)) (procedure "(u32vector->blob U32VECTOR)" (id u32vector->blob)) (procedure "(s32vector->blob S32VECTOR)" (id s32vector->blob)) (procedure "(f32vector->blob F32VECTOR)" (id f32vector->blob)) (procedure "(f64vector->blob F64VECTOR)" (id f64vector->blob)) (procedure "(u8vector->blob/shared U8VECTOR)" (id u8vector->blob/shared)) (procedure "(s8vector->blob/shared S8VECTOR)" (id s8vector->blob/shared)) (procedure "(u16vector->blob/shared U16VECTOR)" (id u16vector->blob/shared)) (procedure "(s16vector->blob/shared S16VECTOR)" (id s16vector->blob/shared)) (procedure "(u32vector->blob/shared U32VECTOR)" (id u32vector->blob/shared)) (procedure "(s32vector->blob/shared S32VECTOR)" (id s32vector->blob/shared)) (procedure "(f32vector->blob/shared F32VECTOR)" (id f32vector->blob/shared)) (procedure "(f64vector->blob/shared F64VECTOR)" (id f64vector->blob/shared))) (p "Each of these procedures return the contents of the given vector as a 'packed' blob. The byte order in that vector is platform-dependent (for example little-endian on an " (b "Intel") " processor). The " (tt "/shared") " variants return a blob that shares memory with the contents of the vector."))
(def (sig (procedure "(blob->u8vector BLOB)" (id blob->u8vector)) (procedure "(blob->s8vector BLOB)" (id blob->s8vector)) (procedure "(blob->u16vector BLOB)" (id blob->u16vector)) (procedure "(blob->s16vector BLOB)" (id blob->s16vector)) (procedure "(blob->u32vector BLOB)" (id blob->u32vector)) (procedure "(blob->s32vector BLOB)" (id blob->s32vector)) (procedure "(blob->f32vector BLOB)" (id blob->f32vector)) (procedure "(blob->f64vector BLOB)" (id blob->f64vector)) (procedure "(blob->u8vector/shared BLOB)" (id blob->u8vector/shared)) (procedure "(blob->s8vector/shared BLOB)" (id blob->s8vector/shared)) (procedure "(blob->u16vector/shared BLOB)" (id blob->u16vector/shared)) (procedure "(blob->s16vector/shared BLOB)" (id blob->s16vector/shared)) (procedure "(blob->u32vector/shared BLOB)" (id blob->u32vector/shared)) (procedure "(blob->s32vector/shared BLOB)" (id blob->s32vector/shared)) (procedure "(blob->f32vector/shared BLOB)" (id blob->f32vector/shared)) (procedure "(blob->f64vector/shared BLOB)" (id blob->f64vector/shared))) (p "Each of these procedures return a vector where the argument " (tt "BLOB") " is taken as a 'packed' representation of the contents of the vector. The " (tt "/shared") " variants return a vector that shares memory with the contents of the blob."))
(def (sig (procedure "(subu8vector U8VECTOR FROM TO)" (id subu8vector)) (procedure "(subu16vector U16VECTOR FROM TO)" (id subu16vector)) (procedure "(subu32vector U32VECTOR FROM TO)" (id subu32vector)) (procedure "(subs8vector S8VECTOR FROM TO)" (id subs8vector)) (procedure "(subs16vector S16VECTOR FROM TO)" (id subs16vector)) (procedure "(subs32vector S32VECTOR FROM TO)" (id subs32vector)) (procedure "(subf32vector F32VECTOR FROM TO)" (id subf32vector)) (procedure "(subf64vector F64VECTOR FROM TO)" (id subf64vector))) (p "Creates a number vector of the same type as the argument vector with the elements at the positions " (tt "FROM") " up to but not including " (tt "TO") "."))
(def (sig (procedure "(read-u8vector LENGTH [PORT])" (id read-u8vector))) (p "Reads " (tt "LENGTH") " bytes from the " (tt "PORT") " and returns a fresh " (tt "u8vector") " or less if end-of-file is encountered. " (tt "PORT") " defaults to the value of " (tt "(current-input-port)") ".") (p "If " (tt "LENGTH") " is " (tt "#f") ", the vector will be filled completely until end-of-file is reached."))
(def (sig (procedure "(read-u8vector! LENGTH U8VECTOR [PORT [START]])" (id read-u8vector!))) (p "Reads " (tt "LENGTH") " bytes from the " (tt "PORT") " writing the read input into " (tt "U8VECTOR") " beginning at " (tt "START") " (or 0 if not given). " (tt "PORT") " defaults to the value of " (tt "(current-input-port)") ".") (p "If " (tt "LENGTH") " is " (tt "#f") ", the vector will be filled completely until end-of-file is reached. This procedure returns the number of bytes read."))
(def (sig (procedure "(write-u8vector U8VECTOR [PORT [START [END]]])" (id write-u8vector))) (p "Writes the bytes " (tt "U8VECTOR") " between the indices " (tt "START") " (inclusive) and " (tt "END") " (exclusive) to " (tt "PORT") ".") (p (tt "PORT") " defaults to the value of " (tt "(current-output-port)") "."))
(def (sig (read "#u8" (id "#u8")) (read "#u16" (id "#u16")) (read "#u32" (id "#u32")) (read "#s8" (id "#s8")) (read "#s16" (id "#s16")) (read "#s32" (id "#s32")) (read "#f32" (id "#f32")) (read "#f64" (id "#f64"))) (p "The external representation of instances of the datatype " (tt "XXXvector") " is " (tt "#XXX( ...elements... )") ".") (p "For example,") (pre "#u8(0 #e1e2 #xff)}}  ; a {{u8vector}} of length 3 containing 0, 100, 255\n#f64(-1.5)           ; a {{f64vector}} of length 1 containing -1.5.") (p "This external representation is also available in program source code. For example,") (pre "(set! x '#u8(1 2 3))") (p "will set " (tt "x") " to the object " (tt "#u8(1 2 3)") ". Literal homogeneous vectors must be quoted just like heterogeneous vectors must be. Homogeneous vectors can appear in quasiquotations but must not contain " (tt "unquote") " or " (tt "unquote-splicing") " forms.  " (i "I.e.") ",") (pre "`(,x #u8(1 2))        ; legal\n`#u8(1 ,x 2)          ; illegal"))
(def (sig (procedure "(u8vector? OBJ)" (id u8vector?)) (procedure "(s8vector? OBJ)" (id s8vector?)) (procedure "(u16vector? OBJ)" (id u16vector?)) (procedure "(s16vector? OBJ)" (id s16vector?)) (procedure "(u32vector? OBJ)" (id u32vector?)) (procedure "(s32vector? OBJ)" (id s32vector?)) (procedure "(f32vector? OBJ)" (id f32vector?)) (procedure "(f64vector? OBJ)" (id f64vector?))) (p "Return " (tt "#t") " if " (tt "obj") " is an object of the specified type or " (tt "#f") " if not."))
(def (sig (procedure "(make-u8vector N [U8VALUE NONGC FINALIZE])" (id make-u8vector)) (procedure "(make-s8vector N [S8VALUE NONGC FINALIZE])" (id make-s8vector)) (procedure "(make-u16vector N [U16VALUE NONGC FINALIZE])" (id make-u16vector)) (procedure "(make-s16vector N [S16VALUE NONGC FINALIZE])" (id make-s16vector)) (procedure "(make-u32vector N [U32VALUE NONGC FINALIZE])" (id make-u32vector)) (procedure "(make-s32vector N [S32VALUE NONGC FINALIZE])" (id make-s32vector)) (procedure "(make-f32vector N [F32VALUE NONGC FINALIZE])" (id make-f32vector)) (procedure "(make-f64vector N [F64VALUE NONGC FINALIZE])" (id make-f64vector))) (p "Return a newly-allocated SRFI-4 homogeneous number vector of length N.") (p "If the optional fill VALUE is specified, it specifies the initial value for each slot in the vector.  If not, the content of the vector is unspecified but individual elements of the vector are guaranteed to be in the range of values permitted for that type of vector.") (p "The type of the fill value must be compatible with the elements of the vector datatype.  It is an error if otherwise -- for example, if an inexact integer is passed to " (tt "make-u8vector") ".") (p "On Chicken, these procedures have been extended to allow allocating the storage in non-garbage collected memory, as follows:") (p "The optional arguments " (tt "NONGC") " and " (tt "FINALIZE") " define whether the vector should be allocated in a memory area not subject to garbage collection and whether the associated storage should be automatically freed (using finalization) when there are no references from Scheme variables and data.  " (tt "NONGC") " defaults to " (tt "#f") " (the vector will be located in normal garbage collected memory) and " (tt "FINALIZE") " defaults to " (tt "#t") ". Note that the " (tt "FINALIZE") " argument is only used when " (tt "NONGC") " is true."))
(def (sig (procedure "(u8vector U8VALUE ...)" (id u8vector)) (procedure "(s8vector S8VALUE ...)" (id s8vector)) (procedure "(u16vector U16VALUE ...)" (id u16vector)) (procedure "(s16vector S16VALUE ...)" (id s16vector)) (procedure "(u32vector U32VALUE ...)" (id u32vector)) (procedure "(s32vector S32VALUE ...)" (id s32vector)) (procedure "(f32vector F32VALUE ...)" (id f32vector)) (procedure "(f64vector F64VALUE ...)" (id f64vector))) (p "Return a newly-allocated SRFI-4 homogeneous number vector of the specified type, composed of the arguments."))
(def (sig (procedure "(u8vector-length U8VECTOR)" (id u8vector-length)) (procedure "(s8vector-length S8VECTOR)" (id s8vector-length)) (procedure "(u16vector-length U16VECTOR)" (id u16vector-length)) (procedure "(s16vector-length S16VECTOR)" (id s16vector-length)) (procedure "(u32vector-length U32VECTOR)" (id u32vector-length)) (procedure "(s32vector-length S32VECTOR)" (id s32vector-length)) (procedure "(f32vector-length F32VECTOR)" (id f32vector-length)) (procedure "(f64vector-length F64VECTOR)" (id f64vector-length))) (p "Returns the length of the SRFI-4 homogeneous number VECTOR."))
(def (sig (procedure "(u8vector-ref U8VECTOR I)" (id u8vector-ref)) (procedure "(s8vector-ref S8VECTOR i)" (id s8vector-ref)) (procedure "(u16vector-ref U16VECTOR I)" (id u16vector-ref)) (procedure "(s16vector-ref S16VECTOR I)" (id s16vector-ref)) (procedure "(u32vector-ref U32VECTOR I)" (id u32vector-ref)) (procedure "(s32vector-ref S32VECTOR I)" (id s32vector-ref)) (procedure "(f32vector-ref F32VECTOR I)" (id f32vector-ref)) (procedure "(f64vector-ref F64VECTOR I)" (id f64vector-ref))) (p "Return the value of the " (i "i") "th element of the SRFI-4 homogeneous number vector, where " (tt "I") " is a nonnegative exact integer less than the length of the vector."))
(def (sig (procedure "(u8vector-set! U8VECTOR I U8VALUE)" (id u8vector-set!)) (procedure "(s8vector-set! S8VECTOR I S8VALUE)" (id s8vector-set!)) (procedure "(u16vector-set! U16VECTOR I U16VALUE)" (id u16vector-set!)) (procedure "(s16vector-set! S16VECTOR I S16VALUE)" (id s16vector-set!)) (procedure "(u32vector-set! U32VECTOR I U32VALUE)" (id u32vector-set!)) (procedure "(s32vector-set! S32VECTOR I S32VALUE)" (id s32vector-set!)) (procedure "(f32vector-set! F32VECTOR I F32VALUE)" (id f32vector-set!)) (procedure "(f64vector-set! F64VECTOR I F64VALUE)" (id f64vector-set!))) (p "Set the " (tt "i") "th element of the SRFI-4 homogeneous number VECTOR to VALUE.  " (tt "I") " is a nonnegative exact integer less than the length of the vector and VALUE must be the same type as the elements of the vector datatype.") (p "Additionally, SRFI-17 setters are defined on all " (tt "xxxvector-ref") " procedures.  For example, to set the " (tt "i") "th element of SRFI-4 " (tt "u8vector") " to " (tt "u8value") ":") (pre "(set! (u8vector-ref u8vector i) u8value)"))
(def (sig (procedure "(u8vector->list U8VECTOR)" (id u8vector->list)) (procedure "(s8vector->list S8VECTOR)" (id s8vector->list)) (procedure "(u16vector->list U16VECTOR)" (id u16vector->list)) (procedure "(s16vector->list S16VECTOR)" (id s16vector->list)) (procedure "(u32vector->list U32VECTOR)" (id u32vector->list)) (procedure "(s32vector->list S32VECTOR)" (id s32vector->list)) (procedure "(f32vector->list F32VECTOR)" (id f32vector->list)) (procedure "(f64vector->list F64VECTOR)" (id f64vector->list))) (p "Return a list consisting of the elements of SRFI-4 homogeneous number VECTOR."))
(def (sig (procedure "(list->u8vector U8LIST)" (id list->u8vector)) (procedure "(list->s8vector S8LIST)" (id list->s8vector)) (procedure "(list->u16vector U16LIST)" (id list->u16vector)) (procedure "(list->s16vector S16LIST)" (id list->s16vector)) (procedure "(list->u32vector U32LIST)" (id list->u32vector)) (procedure "(list->s32vector S32LIST)" (id list->s32vector)) (procedure "(list->f32vector F32LIST)" (id list->f32vector)) (procedure "(list->f64vector F64LIST)" (id list->f64vector))) (p "Return a newly-allocated SRFI-4 homogeneous number VECTOR consisting of the elements of LIST.  Each element of LIST must be compatible with the datatype of VECTOR."))

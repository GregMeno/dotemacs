((section 2 "pty" (p "Easy Pseudo-Terminal Interface") (pre "    ") (section 3 "Author" (p "Alex Shinn")) (section 3 "Documentation" (p "PTY allows you to run sub-processes in pseudo-terminals and access their input and output from the controlling program as regular Chicken ports.  This is useful for a variety of purposes, such as:") (ul (li "Run a remote session via ssh or rlogin using a user-supplied password.") (li "Automate some or all of a terminal game or program (such as nethack or vi).") (li "Run fsck, answering \"yes\" or \"no\" based on pre-determined criteria.") (li "Implement an xterm program.")) (p "In general these cannot be done with regular sub-process ports.") (section 4 "High-Level Interface" (def (sig (procedure "(call-with-pty-process-io command proc [name [width [height]]])" (id call-with-pty-process-io))) (p "Call and return the result of " (tt "proc") " which should be a procedure of three arguments: the input, output and PID of the sub-process " (tt "command") " running in a new PTY. Ensures the sub-process is terminated on completion.") (p (tt "name") ", " (tt "width") " and " (tt "height") " are optional settings for the new PTY.") (p (tt "command") " may optionally be a list specifying the arglist to the sub-process, or a single string which is split on whitespace.") (p "The ports generated only block the current thread, and " (tt "char-ready?") " only returns #t if some input is already available.  The eof-object is returned only when the sub-process terminates.") (p (b "NOTE:") " Prior to login of, and after completion of the sub-process, anything written to the output port will pass directly through to the input port, which is almost certainly not what you want.  To avoid premature writes, you should read once first.  To avoid writing after the process has completed, don't write after you've read a single eof-object, or alternately you can check manually with " (tt "process-alive?") ".")) (def (sig (procedure "(with-pty-process-io command proc [name [width [height]]])" (id with-pty-process-io))) (p "As above, except current input and output ports are bound to the output and input of " (tt "command") " respectively, and " (tt "proc") " only takes one argument, the PID.")))) (section 3 "Low-Level Interface" (def (sig (procedure "(open-pty-process command [name [width [height]]])" (id open-pty-process))) (p "(procedure>(open-pty [name [width [height]]])</procedure> <procedure>(login-tty fd)</procedure> <procedure>(process-alive? pid)</procedure> <procedure>(fcntl-ref fd)</procedure> <procedure>(fcntl-set! fd arg)</procedure> <procedure>(file-select-one fd)</procedure> <procedure>(file-read/maybe fd buf len)</procedure> <procedure>(open-file-io/non-blocking fd [process-alive? (-> boolean)])</procedure>"))) (section 3 "Example" (highlight scheme "(call-with-pty-process-io \"ssh myfirewall\"\n  (lambda (in out pid)\n    (peek-char in)\n    (display (gui-get-password) out)\n    (newline out)\n    (read-line in)\n    (display \"dhclient 2>/dev/null && echo OK || echo FAIL\\n\" out)\n    (unless (equal? \"OK\" (read-line in))\n      (error \"couldn't launch dhclient\")))")) (section 3 "Changelog" (ul (li "1.3 setup script fixes (felix)") (li "1.1 MacOS X compile [Kon Lovett]") (li "1.0 Initial release"))) (section 3 "License" (pre " Copyright (c) 2006 Alex Shinn\n All rights reserved.\n \n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions\n are met:\n 1. Redistributions of source code must retain the above copyright\n    notice, this list of conditions and the following disclaimer.\n 2. Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in the\n    documentation and/or other materials provided with the distribution.\n 3. The name of the author may not be used to endorse or promote products\n    derived from this software without specific prior written permission.\n \n THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  "))))
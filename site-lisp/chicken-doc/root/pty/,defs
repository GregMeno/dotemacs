(index ("call-with-pty-process-io" 0) ("with-pty-process-io" 1232) ("open-pty-process" 1520))
(def (sig (procedure "(call-with-pty-process-io command proc [name [width [height]]])" (id call-with-pty-process-io))) (p "Call and return the result of " (tt "proc") " which should be a procedure of three arguments: the input, output and PID of the sub-process " (tt "command") " running in a new PTY. Ensures the sub-process is terminated on completion.") (p (tt "name") ", " (tt "width") " and " (tt "height") " are optional settings for the new PTY.") (p (tt "command") " may optionally be a list specifying the arglist to the sub-process, or a single string which is split on whitespace.") (p "The ports generated only block the current thread, and " (tt "char-ready?") " only returns #t if some input is already available.  The eof-object is returned only when the sub-process terminates.") (p (b "NOTE:") " Prior to login of, and after completion of the sub-process, anything written to the output port will pass directly through to the input port, which is almost certainly not what you want.  To avoid premature writes, you should read once first.  To avoid writing after the process has completed, don't write after you've read a single eof-object, or alternately you can check manually with " (tt "process-alive?") "."))
(def (sig (procedure "(with-pty-process-io command proc [name [width [height]]])" (id with-pty-process-io))) (p "As above, except current input and output ports are bound to the output and input of " (tt "command") " respectively, and " (tt "proc") " only takes one argument, the PID."))
(def (sig (procedure "(open-pty-process command [name [width [height]]])" (id open-pty-process))) (p "(procedure>(open-pty [name [width [height]]])</procedure> <procedure>(login-tty fd)</procedure> <procedure>(process-alive? pid)</procedure> <procedure>(fcntl-ref fd)</procedure> <procedure>(fcntl-set! fd arg)</procedure> <procedure>(file-select-one fd)</procedure> <procedure>(file-read/maybe fd buf len)</procedure> <procedure>(open-file-io/non-blocking fd [process-alive? (-> boolean)])</procedure>"))

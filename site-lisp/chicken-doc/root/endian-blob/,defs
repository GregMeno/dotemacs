(index ("endian-blob?" 0) ("byte-blob->endian-blob" 292) ("endian-blob->sint1" 528) ("endian-blob->sint2" 528) ("endian-blob->sint4" 528) ("sint1->endian-blob" 528) ("sint2->endian-blob" 528) ("sint4->endian-blob" 528) ("endian-blob->uint1" 1275) ("endian-blob->uint2" 1275) ("endian-blob->uint4" 1275) ("uint1->endian-blob" 1275) ("uint2->endian-blob" 1275) ("uint4->endian-blob" 1275) ("endian-blob->ieee_float32" 2024) ("endian-blob->ieee_float64" 2024) ("ieee_float32->endian-blob" 2024) ("ieee_float64->endian-blob" 2024) ("endian-blob->s8vector" 2682) ("endian-blob->s16vector" 2682) ("endian-blob->s32vector" 2682) ("endian-blob->u8vector" 2682) ("endian-blob->u16vector" 2682) ("endian-blob->u32vector" 2682) ("endian-blob->f32vector" 2682) ("endian-blob->f64vector" 2682) ("s8vector->endian-blob" 2682) ("s16vector->endian-blob" 2682) ("s32vector->endian-blob" 2682) ("u8vector->endian-blob" 2682) ("u16vector->endian-blob" 2682) ("u32vector->endian-blob" 2682) ("f32vector->endian-blob" 2682) ("f64vector->endian-blob" 2682))
(def (sig (procedure "(endian-blob? X) => BOOL" (id endian-blob?))) (p "Returns " (tt "#t") " if the given object is an endian blob, " (tt "#f") " otherwise.") (ul (li (tt "MSB")) (li (tt "LSB"))) (p "These constants specify most-significant or least-significant byte order, respectively."))
(def (sig (procedure "(byte-blob->endian-blob BYTE-BLOB BYTE-ORDER)" (id byte-blob->endian-blob))) (p "Returns an endian blob containing the given byte-blob. Argument " (tt "BYTE-ORDER") " is one of " (tt "MSB") " or " (tt "LSB") "."))
(def (sig (procedure "(endian-blob->sint1 ENDIAN-BLOB) => NUMBER" (id endian-blob->sint1)) (procedure "(endian-blob->sint2 ENDIAN-BLOB) => NUMBER" (id endian-blob->sint2)) (procedure "(endian-blob->sint4 ENDIAN-BLOB) => NUMBER" (id endian-blob->sint4)) (procedure "(sint1->endian-blob NUMBER) => ENDIAN-BLOB" (id sint1->endian-blob)) (procedure "(sint2->endian-blob NUMBER) => ENDIAN-BLOB" (id sint2->endian-blob)) (procedure "(sint4->endian-blob NUMBER) => ENDIAN-BLOB" (id sint4->endian-blob))) (p "These procedures convert between endian blobs and signed integers of size 1, 2, or 4 bytes, respectively. Exceptions are thrown if the given endian blobs are of incorrect size, or if the given numbers are too big to fit in the specified size."))
(def (sig (procedure "(endian-blob->uint1 ENDIAN-BLOB) => NUMBER" (id endian-blob->uint1)) (procedure "(endian-blob->uint2 ENDIAN-BLOB) => NUMBER" (id endian-blob->uint2)) (procedure "(endian-blob->uint4 ENDIAN-BLOB) => NUMBER" (id endian-blob->uint4)) (procedure "(uint1->endian-blob NUMBER) => ENDIAN-BLOB" (id uint1->endian-blob)) (procedure "(uint2->endian-blob NUMBER) => ENDIAN-BLOB" (id uint2->endian-blob)) (procedure "(uint4->endian-blob NUMBER) => ENDIAN-BLOB" (id uint4->endian-blob))) (p "These procedures convert between endian blobs and unsigned integers of size 1, 2, or 4 bytes, respectively. Exceptions are thrown if the given endian blobs are of incorrect size, or if the given numbers are too big to fit in the specified size."))
(def (sig (procedure "(endian-blob->ieee_float32 ENDIAN-BLOB) => NUMBER" (id endian-blob->ieee_float32)) (procedure "(endian-blob->ieee_float64 ENDIAN-BLOB) => NUMBER" (id endian-blob->ieee_float64)) (procedure "(ieee_float32->endian-blob NUMBER) => ENDIAN-BLOB" (id ieee_float32->endian-blob)) (procedure "(ieee_float64->endian-blob NUMBER) => ENDIAN-BLOB" (id ieee_float64->endian-blob))) (p "These procedures convert between endian blobs and IEEE floating point numbers of single or double precision, respectively. Exceptions are thrown if the given endian blobs are of incorrect size, or if the given numbers are too big to fit in the specified size."))
(def (sig (procedure "(endian-blob->s8vector  ENDIAN-BLOB) => S8VECTOR" (id endian-blob->s8vector)) (procedure "(endian-blob->s16vector ENDIAN-BLOB) => S16VECTOR" (id endian-blob->s16vector)) (procedure "(endian-blob->s32vector ENDIAN-BLOB) => S32VECTOR" (id endian-blob->s32vector)) (procedure "(endian-blob->u8vector  ENDIAN-BLOB) => U8VECTOR" (id endian-blob->u8vector)) (procedure "(endian-blob->u16vector ENDIAN-BLOB) => U16VECTOR" (id endian-blob->u16vector)) (procedure "(endian-blob->u32vector ENDIAN-BLOB) => U32VECTOR" (id endian-blob->u32vector)) (procedure "(endian-blob->f32vector ENDIAN-BLOB) => F32VECTOR" (id endian-blob->f32vector)) (procedure "(endian-blob->f64vector ENDIAN-BLOB) => F64VECTOR" (id endian-blob->f64vector)) (procedure "(s8vector->endian-blob  S8VECTOR)  => ENDIAN-BLOB" (id s8vector->endian-blob)) (procedure "(s16vector->endian-blob S16VECTOR) => ENDIAN-BLOB" (id s16vector->endian-blob)) (procedure "(s32vector->endian-blob S32VECTOR) => ENDIAN-BLOB" (id s32vector->endian-blob)) (procedure "(u8vector->endian-blob  U8VECTOR)  => ENDIAN-BLOB" (id u8vector->endian-blob)) (procedure "(u16vector->endian-blob U16VECTOR) => ENDIAN-BLOB" (id u16vector->endian-blob)) (procedure "(u32vector->endian-blob U32VECTOR) => ENDIAN-BLOB" (id u32vector->endian-blob)) (procedure "(f32vector->endian-blob F32VECTOR) => ENDIAN-BLOB" (id f32vector->endian-blob)) (procedure "(f64vector->endian-blob F64VECTOR) => ENDIAN-BLOB" (id f64vector->endian-blob))) (p "These procedures convert between endian blobs and the corresponding SRFI-4 vector type."))

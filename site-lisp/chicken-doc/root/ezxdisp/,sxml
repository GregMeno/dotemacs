((tags "egg") (section 2 "ezxdisp" (toc) (section 3 "Description" (p "A simple graphics library for X11.")) (section 3 "Author" (p "n-sibata and Morihiko Tamai, packaged for CHICKEN by " (int-link "/users/felix winkelmann" "felix winkelmann") ".")) (section 3 "Requirements" (p (int-link "easyffi"))) (section 3 "Documentation" (p "ezxdisp is a simple graphics library for 2D/3D graphical applications. (The official distribution can be found " (link "http://mimi.aist-nara.ac.jp/~morihi-t/ezxdisp" "here") ").") (section 4 "Initialize/Finalize a window" (def (sig (procedure "(ezx-init SIZE_X SIZE_Y WINDOW_NAME)" (id ezx-init))) (p "This procedure returns a " (tt "EZX") " object all other procedures accept.")) (def (sig (procedure "(ezx-quit EZX)" (id ezx-quit))))) (section 4 "Update the graphics in the window" (def (sig (procedure "(ezx-redraw EZX)" (id ezx-redraw))))) (section 4 "Erase the graphics in the window/layer" (def (sig (procedure "(ezx-wipe EZX)" (id ezx-wipe)))) (def (sig (procedure "(ezx-wipe-layer EZX LAYER)" (id ezx-wipe-layer))) (p (tt "LAYER") " should be an exact integer between 0 and 8."))) (section 4 "Get the pointer coordinates" (def (sig (procedure "(ezx-sensebutton EZX)" (id ezx-sensebutton))) (p "Returns the current pointer coordinates as three values: " (tt "BUTTON") ", " (tt "X") " and " (tt "Y"))) (def (sig (procedure "(ezx-pushbutton EZX)" (id ezx-pushbutton))) (p "Block until an event is received.  Returns three values: " (tt "BUTTON") ", " (tt "X") " and " (tt "Y")) (p "The BUTTON result is 1, 2 or 3 for the first, second and third mouse button, respectively. The button number is additionally bitwise OR'd with 8 if the shift key is pressed and with 16 if the control key is pressed."))) (section 4 "Draw 2D graphics" (def (sig (procedure "(ezx-point-2d EZX X Y COLOR)" (id ezx-point-2d)))) (def (sig (procedure "(ezx-line-2d EZX X0 Y0 X1 Y1 COLOR WIDTH)" (id ezx-line-2d)))) (def (sig (procedure "(ezx-lines-2d EZX POINTS NPOINTS COLOR WIDTH)" (id ezx-lines-2d)))) (def (sig (procedure "(ezx-poly-2d EZX POINTS NPOINTS COLOR)" (id ezx-poly-2d))) (p "The " (tt "POINTS") " argument should be an SRFI-4 " (tt "s32vector") " containing the X and Y coordinates of each point.")) (def (sig (procedure "(ezx-rect-2d EZX X0 Y0 X1 Y1 COLOR WIDTH)" (id ezx-rect-2d)))) (def (sig (procedure "(ezx-fillrect-2d EZX X0 Y0 X1 Y1 COLOR)" (id ezx-fillrect-2d)))) (def (sig (procedure "(ezx-circle-2d EZX X0 Y0 R COLOR WIDTH)" (id ezx-circle-2d)))) (def (sig (procedure "(ezx-fillcircle-2d EZX X0 Y0 R COLOR)" (id ezx-fillcircle-2d)))) (def (sig (procedure "(ezx-str-2d EZX X0 Y0 STRING COLOR)" (id ezx-str-2d))))) (section 4 "Draw 3D graphics" (def (sig (procedure "(ezx-set-light-3d EZX EX EY EZ)" (id ezx-set-light-3d)))) (def (sig (procedure "(ezx-set-view-3d EZX EX EY EZ VX VY VZ M)" (id ezx-set-view-3d)))) (def (sig (procedure "(ezx-c3d-to-2d EZX SX SY SZ)" (id ezx-c3d-to-2d))) (p "Returns two values, " (tt "DX") " and " (tt "DY") ".")) (def (sig (procedure "(ezx-line-3d EZX X0 Y0 Z0 X1 Y1 Z1 COLOR WIDTH)" (id ezx-line-3d)))) (def (sig (procedure "(ezx-str-3d EZX X0 Y0 Z0 STRING COLOR)" (id ezx-str-3d)))) (def (sig (procedure "(ezx-poly-3d EZX POINTS HX HY HZ N COLOR)" (id ezx-poly-3d)))) (def (sig (procedure "(ezx-circle-3d EZX X0 Y0 Z0 R COLOR)" (id ezx-circle-3d))) (p "The " (tt "POINTS") " argument should be a SRFI-4 " (tt "f64vector") " containing the X, Y and Z coordinates of each point."))) (section 4 "Event handling" (def (sig (procedure "(ezx-next-event EZX)" (id ezx-next-event))) (p "Removes the next event from the event queue and returns the event-specific information.  If there is no event data in the event queue, this function blocks until the next event occurs. The procedure returns 5 values: the type of the event, the X- and Y-coordinates of the mouse pointer at the time of the event, the button- or keyboard-state mask and the button- or key-code of the event.") (p "The following variables contain the event-types that may occur:") (ul (li (tt "ezx:BUTTON-PRESS") " or " (tt "ezx:BUTTON-RELEASE")) (li (tt "ezx:KEY-PRESS") " or " (tt "ezx:KEY-RELEASE")) (li (tt "ezx:MOTION-NOTIFY")) (li (tt "ezx:CLOSE"))) (p "These button-codes are defined:") (table (tr (th "Code") (th "Button")) "\n" (tr (td "1") (td "left")) "\n" (tr (td "2") (td "middle")) "\n" (tr (td "3") (td "right")) "\n" (tr (td "4") (td "wheel up")) "\n" (tr (td "5") (td "wheel down"))) (p "State mask values that may be returned:") (table (tr (th "Mask") (th "State")) "\n" (tr (td "1") (td "shift key")) "\n" (tr (td "2") (td "control key")) "\n" (tr (td "4") (td "left button")) "\n" (tr (td "8") (td "middle button")) "\n" (tr (td "16") (td "right button"))) (p "For keyboard events, some special keys will return a platform independent keycode:") (table (tr (td "Home") (td "#xff50")) "\n" (tr (td "Left") (td "#xff51")) "\n" (tr (td "Up") (td "#xff52")) "\n" (tr (td "Right") (td "#xff53")) "\n" (tr (td "Down") (td "#xff54"))) (p "The result values will be undefined for events for which they are not used. This table summarizes what results are valid:") (table (tr (th "Event") (th "Results")) "\n" (tr (td "ezx:CLOSE") (td)) "\n" (tr (td "ezx:BUTTON-PRESS ezx:BUTTON-RELEASE") (td "x, y, state, k/b")) "\n" (tr (td "ezx:KEY-PRESS ezx:KEY-RELEASE") (td "x, y, state, k/b")) "\n" (tr (td "ezx:MOTION-NOTIFY") (td "x, y, state"))))) (section 4 "Miscellaneous functions" (def (sig (procedure "(ezx-select-layer EZX LAYER)" (id ezx-select-layer))) (p "Focuses on the layer.")) (def (sig (procedure "(ezx-raise-window EZX)" (id ezx-raise-window))) (p "Raises the window.")) (def (sig (procedure "(ezx-window-name EZX STRING)" (id ezx-window-name))) (p "Sets a name of the window.")) (def (sig (procedure "(ezx-set-background EZX COLOR)" (id ezx-set-background))) (p "Sets the background color of the window."))) (section 4 "Colors" (def (sig (procedure "(make-ezx-color R G B)" (id make-ezx-color))) (p "This procedure returns a \"color object\", which is internally encoded as a " (tt "f64vector") ". The red, green and blue components should be between 0 and 1.")))) (section 3 "Examples" (highlight scheme "(define ezx (ezx-init 100 100 \"Hello, ezxdisp\"))\n(ezx-set-background ezx (make-ezx-color 1 1 1))\n(ezx-fillcircle-2d ezx 50 50 25 (make-ezx-color 1 0 0))\n(ezx-redraw ezx)\n\n(let loop ()\n  (let-values (((b _ _) (ezx-pushbutton ezx)))\n    (loop)))\n\n(ezx-quit ezx)") (p "A more elaborate example is in the egg distribution in a file named " (tt "3d_clock.scm") ", which displays an animated 3D-clock.")) (section 3 "Changelog" (ul (li "2.5 fixed use of removed " (tt "pointer") " type") (li "2.4 added " (tt "ezx-resize")) (li "2.3 Added win32 support; ezx-next-event always returns 5 values") (li "2.1 Fixed srfi-4 use issue [reported by Christian Kellermann]") (li "2.0 Ported to Chicken 4; updated to upstream version 0.1.4") (li "1.3 Added " (tt "ezx-event-pending")) (li "1.2 Adapted to externalized " (tt "easyffi") " extension") (li "1.1 " (tt "ezx-set-background") " wasn't documented") (li "1.0 Initial release"))) (section 3 "License" (pre " This program is free software; you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as\n published by the Free Software Foundation; either version 2 of the\n License, or (at your option) any later version.\n \n This program is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n \n You should have received a copy of the GNU General Public License\n along with this program; if not, write to the Free Software\n Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA"))))
((tags "eggs") (toc) (section 2 "Introduction" (p "packedobjects is a data encoding tool based on the telecommunications standard Packed Encoding Rules (PER). An abstract syntax language is used to define a protocol specification. packedobjects uses the Scheme programming language to represent the protocol specification within a symbolic expression (s-expression).") (p "packedobjects is suitable for simple cross platform request/response protocols that require efficient encoding.") (p "So far packedobjects has been run on the following platforms:") (ul (li "Mac OS X (PowerPC)") (li "Linux (PowerPC)") (li "Linux (Intel)") (li "Linux (ARM)") (li "NetBSD (alpha)")) (p "For a more detailed introduction refer to the following short " (link "http://zedstar.org/papers/packedobjects.pdf" "paper") ".")) (section 2 "Author" (p "John P. T. Moore <jptmoore@gmail.com>")) (section 2 "Version" (ul (li "0.77 ported to CHICKEN 4 by felix") (li "0.76 fixed .setup issue") (li "0.74 Removed .html from egg") (li "0.73 Added set-finalizer! to automatically free PDU buffer") (li "0.72 Bugfix to SET data type") (li "0.71 Minor code improvement") (li "0.70 Added two new data types: numeric-string and null") (li "0.69 Performance improvements") (li "0.66 Inital wiki version"))) (section 2 "Building from subversion repository" (pre "svn checkout http://anonymous:@code.call-cc.org/svn/chicken-eggs/release/3/packedobjects\n\nchicken-setup packedobjects.setup")) (section 2 "Usage" (highlight scheme "(packedobjects <protocol> #!key <pdusize> <strsize>)") (p "Creates a packedobject using the supplied protocol specification. Optional values for the PDU and string buffer sizes can be specified. They default to 5000 and 1000 respectively. Both the PDU buffer and string buffer are fixed in size. The string buffer must be large enough to handle any string used by the protocol. The PDU buffer must be manually freed.") (highlight scheme "(<packedobject> 'pack <values>)") (p "Encodes a list of values and returns the number of bytes used.") (highlight scheme "(<packedobject> 'unpack)") (p "Returns a list of values.") (highlight scheme "(<packedobject> 'read <fd> <size>)") (p "Reads a number of bytes from a file descriptor into the PDU buffer.") (highlight scheme "(<packedobject> 'write <fd> <size>)") (p "Writes a number of bytes from the PDU buffer to a file descriptor.") (highlight scheme "(<packedobject> 'read-message <fd>)") (p "Reads a message from a file descriptor into the PDU buffer.") (highlight scheme "(<packedobject> 'write-message <fd> <size>)") (p "Writes a message containing a number of bytes from the PDU buffer to a file descriptor.") (p "A message consists of the encoded data plus a 2 byte header representing the length of the message. Therefore, the maximum message size is 2^16-1 bytes.") (highlight scheme "(<packedobject> 'dump-buffer <filename> <size>)") (p "Dumps a number of bytes from the PDU buffer to a file.") (highlight scheme "(<packedobject> 'free)") (p "Explicitly frees the PDU buffer. N.B. This call is optional as the memory will be automatically garbage collected.")) (section 2 "Data types with examples" (p "The following data types are currently supported.") (section 3 "string" (dl (dt "protocol") (dd (tt "(foobar string (size 1 10))")) (dt "values") (dd (tt "(foobar \"foobar\")")) (dt "description") (dd "7 bit string limited to 10 characters in length."))) (section 3 "octet-string" (dl (dt "protocol") (dd (tt "(foobar octet-string ())")) (dt "values") (dd (tt "(foobar \"foobar\")")) (dt "description") (dd "8 bit string with no length restriction."))) (section 3 "bit-string" (dl (dt "protocol") (dd (tt "(foobar bit-string (size 8))")) (dt "values") (dd (tt "(foobar \"10101010\")")) (dt "description") (dd "Bitstring fixed in length."))) (section 3 "hex-string" (dl (dt "protocol") (dd (tt "(foobar hex-string (size 1 max))")) (dt "values") (dd (tt "(foobar \"afafaf\")")) (dt "description") (dd "String of hexadecimal characters with no length restriction."))) (section 3 "numeric-string" (dl (dt "protocol") (dd (tt "(foobar numeric-string ())")) (dt "values") (dd (tt "(foobar \"123\")")) (dt "description") (dd "String of numeric characters with no length restriction."))) (section 3 "integer" (dl (dt "protocol") (dd (tt "(foobar integer (range 1 10))")) (dt "values") (dd (tt "(foobar 5)")) (dt "description") (dd "Integer with a minimum allowed value of 1 and maximum allowed value of 10."))) (section 3 "boolean" (dl (dt "protocol") (dd (tt "(foobar boolean)")) (dt "values") (dd (tt "(foobar #t)")) (dt "description") (dd "Boolean value."))) (section 3 "enumerated" (dl (dt "protocol") (dd (tt "(foobar enumerated (mon tues wed thurs fri))")) (dt "values") (dd (tt "(foobar fri)")) (dt "description") (dd "List of alternative symbols."))) (section 3 "null" (dl (dt "protocol") (dd (tt "(foobar null)")) (dt "values") (dd (tt "(foobar)")) (dt "description") (dd "Null value."))) (section 3 "sequence" (dl (dt "protocol") (dd (tt "(foobar sequence (foo string (size 1 10)) (bar string (size 1 10)))")) (dt "values") (dd (tt "(foobar (foo \"foo\") (bar \"bar\"))")) (dt "description") (dd "Ordered sequence of types."))) (section 3 "sequence-of" (dl (dt "protocol") (dd (tt "(foobar sequence-of (foo string (size 1 10)) (bar string (size 1 10)))")) (dt "values") (dd (tt "(foobar ((foo \"foo\") (bar \"bar\")) ((foo \"anotherfoo\") (bar \"anotherbar\")))")) (dt "description") (dd "Ordered sequence of types where the sequence may repeat."))) (section 3 "set" (dl (dt "protocol") (dd (tt "(foobar set (foo string (size 1 10)) (bar string (size 1 10)))")) (dt "values") (dd (tt "(foobar (bar \"bar\") (foo \"foo\"))")) (dt "description") (dd "Unordered sequence of types. Each element of a set is also optional."))) (section 3 "choice" (dl (dt "protocol") (dd (tt "(foobar choice (foo integer ()) (bar integer ()))")) (dt "values") (dd (tt "(foobar (bar 100))")) (dt "description") (dd "Single item from a series of types.")))) (section 2 "Constraints" (p "Constraints may be placed on all string types as well as integers. Restricting the size of strings and the range of integers can reduce the amount of bits encoded.") (p "The following are valid string contraints:") (ul (li "()") (li "(size min max)") (li "(size <unsigned> <unsigned>)") (li "(size <unsigned>)")) (p "The following are valid integer constraints:") (ul (li "()") (li "(range min max)") (li "(range <int> <int>)")) (p "Note, " (i "min") " and " (i "max") " denotes no lower bound and upper bound respectively, therefore () is equivalent to (size min max) or (range min max).")) (section 2 "Examples" (highlight scheme "(require-extension packedobjects)\n \n(define bbcard\n  '(bbcard sequence\n           (name string (size 1 60))\n           (team string (size 1 60))\n           (age integer (range 1 100))\n           (position string (size 1 60))\n           (handedness enumerated (left-handed right-handed ambidextrous))\n           (batting-average sequence\n                            (mantissa integer ())\n                            (base enumerated (2 10))\n                            (exponent integer ()))))\n \n(define bbcard-values\n  '(bbcard\n    (name \"Casey\")\n    (team \"Mudville Nine\")\n    (age 32)\n    (position \"left field\")\n    (handedness ambidextrous)\n    (batting-average\n     (mantissa 250)\n     (base 10)\n     (exponent -3))))\n \n(define po (packedobjects bbcard))\n(print* \"encoded in \" (po 'pack bbcard-values) \" bytes.\\n\")\n(print (po 'unpack))\n(po 'free)") (p "The following example retrieves random numbers from " (link "http://random.org" "random.org") ".") (p "The client talks to a server process which in turn obtains the numbers using HTTP. The data transferred between client and server is significantly more efficient, in terms of bits on the wire, than if the client talked directly to random.org using HTTP.") (p (link "http://zedstar.org/chicken/tcpclient.scm" "tcpclient.scm")) (p (link "http://zedstar.org/chicken/tcpserver.scm" "tcpserver.scm"))) (section 2 "Limitations" (ul (li "The length of strings, the number of elements in a set and the number of times a sequence-of may repeat is restricted to 2^30-1.") (li "The maximum integer (unsigned), the number of choices and the number of enumerations is restricted to 2^32-1."))) (section 2 "To do" (ul (li "Tidy code.") (li "Performance enhancements.") (li "Improvements to error/exception handling.") (li "Further testing."))) (section 2 "License" (p "Copyright (c) 2006, John P. T. Moore") (p "All rights reserved.") (p (link "http://www.opensource.org/licenses/bsd-license.php" "BSD license"))))
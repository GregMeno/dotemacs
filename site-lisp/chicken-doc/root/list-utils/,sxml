((tags "egg") (section 2 "list-utils" (p "Miscellaneous list oriented routines.") (toc)) (section 2 "Documentation" (section 3 "skip+" (def (sig (procedure "(skip+ LIST COUNT) => (list integer)" (id skip+))) (p "Returns 2 values, the " (tt "COUNT") " " (tt "pair") " from " (tt "LIST") ", and the remaining count. The remaining count will be non-zero when end-of-list reached.") (p (tt "COUNT") " is a " (tt "natural fixnum") ".") (highlight scheme "(skip+ '(1 2) 3) ;=> '() 1\n(skip+ '(1 2 3) 3) ;=> '() 0\n(skip+ '(1 2 3 4) 3) ;=> '(4) 0"))) (section 3 "split-at+" (def (sig (procedure "(split-at+ LIST COUNT [PADS]) => (list list)" (id split-at+))) (p "Returns 2 values, the leading " (tt "COUNT") " elements from " (tt "LIST") " as a new " (tt "list") ", and the remaining elements from " (tt "LIST") ". Should there be fewer than " (tt "COUNT") " elements available padding is attempted.") (p "Padding is performed by trying to complete the remaining elements from the " (tt "list") " " (tt "PADS") ".") (p (tt "COUNT") " is a " (tt "natural fixnum") ". " (tt "PADS") " is a " (tt "list") " or " (tt "#f") ". Default is " (tt "'()") ".") (p "A negative " (tt "COUNT") " is treated as " (tt "0") ".") (p "When " (tt "PADS") " is " (tt "#f") " then an incomplete leading sublist is treated as " (tt "'()") ". The very odd treatment of " (tt "PADS") " = " (tt "#f") " can safely be ignored since this is not the default behavior.") (highlight scheme "(split-at+ '(1 2 3) 3) ;=> '(1 2 3) '()\n(split-at+ '(1 2 3) 2) ;=> '(1 2) '(3)\n(split-at+ '(1 2 3) 4) ;=> '(1 2 3) '()\n(split-at+ '(1 2 3) 4 #f) ;=> '() '()"))) (section 3 "section" (def (sig (procedure "(section LIST SIZE [[STEP] PADS]) => list" (id section))) (p "Returns a " (tt "list") " of " (tt "list") ", built by taking " (tt "SIZE") " elements from " (tt "LIST") " every " (tt "STEP") " elements. When too few elements remain to complete a " (i "section") " padding is performed.") (p (tt "SIZE") " is a " (tt "positive fixnum") ". " (tt "STEP") " is a " (tt "positive fixnum") ". Default is " (tt "SIZE") ". " (tt "PADS") " is a " (tt "list") " or " (tt "#f") ". Default is " (tt "'()") ".") (p "When " (tt "PADS") " is " (tt "#f") " then any incomplete trailing section is dropped. The very odd treatment of " (tt "PADS") " = " (tt "#f") " can safely be ignored since this is not the default behavior.") (highlight scheme "(section '(1 2) 3 3 '(3 4 5)) ;=> ((1 2 3))\n(section '(1 2 3) 2 1 '(3 4 5)) ;=> ((1 2) (2 3))\n(section '(1 2 3) 2 2 '(4 5)) ;=> ((1 2) (3 4))\n(section '(1 2 3) 2 2) ;=> ((1 2) (3))"))) (section 3 "length=0?" (def (sig (syntax "(length=0? LIST) => boolean" (id length=0?))) (p "List of length zero? (Just " (tt "null?") ".)"))) (section 3 "length=1?" (def (sig (syntax "(length=1? LIST) => boolean" (id length=1?))) (p "List of length one?"))) (section 3 "length>1?" (def (sig (syntax "(length>1? LIST) => boolean" (id length>1?))) (p "List of length greater than one?"))) (section 3 "length=2?" (def (sig (syntax "(length=2? LIST) => boolean" (id length=2?))) (p "List of length two?"))) (section 3 "ensure-list" (def (sig (syntax "(ensure-list OBJECT) => list" (id ensure-list))) (p "Returns a list, either the list " (tt "OBJECT") " or " (tt "(list OBJECT)") "."))) (section 3 "not-null?" (def (sig (syntax "(not-null? LIST) => (or list boolean)" (id not-null?))) (p "Returns " (tt "#f") " if the given " (tt "LIST") " is empty, and " (tt "LIST") " otherwise."))) (section 3 "alist-delete-first" (def (sig (syntax "(alist-delete-first KEY ALIST [TEST?])" (id alist-delete-first))) (p "Returns " (tt "(alist-delete/count KEY ALIST [TEST?] 1)") "."))) (section 3 "alist-delete-first!" (def (sig (syntax "(alist-delete-first! KEY ALIST [TEST?])" (id alist-delete-first!))) (p "Destructive version of " (tt "alist-delete-first") "."))) (section 3 "assoc-def" (def (sig (syntax "(assoc-def KEY ALIST [TEST] [NOT-FOUND])" (id assoc-def))) (p "The assoc procedure with an optional test and default value."))) (section 3 "assv-def" (def (sig (syntax "(assv-def KEY ALIST [NOT-FOUND])" (id assv-def))) (p "The assv procedure with a default value."))) (section 3 "assq-def" (def (sig (syntax "(assq-def KEY ALIST [NOT-FOUND])" (id assq-def))) (p "The assq procedure with a default value."))) (section 3 "alist-inverse-ref" (def (sig (procedure "(alist-inverse-ref VALUE ALIST [TEST? [NOT-FOUND]])" (id alist-inverse-ref))) (p "Returns the first key associated with " (tt "VALUE") " in the " (tt "ALIST") " using the " (tt "TEST?") " predicate, else " (tt "NOT-FOUND") ".") (p (tt "TEST?") " is " (tt "eqv?") " and " (tt "NOT-FOUND") " is " (tt "#f") "."))) (section 3 "alist-delete/count" (def (sig (procedure "(alist-delete/count KEY ALIST [TEST? [COUNT]])" (id alist-delete/count))) (p "Deletes the first " (tt "COUNT") " associations from alist " (tt "ALIST") " with the given key " (tt "KEY") ", using key-comparison procedure " (tt "TEST?") ". The dynamic order in which the various applications of equality are made is from the alist head to the tail.") (p "Returns a new alist. The alist is not disordered - elements that appear in the result alist occur in the same order as they occur in the argument alist.") (p "The equality procedure is used to compare the element keys, " (tt "key[i: 0 <= i < (length ALIST)") "', of the alist's entries to the key parameter in this way: " (tt "(TEST? KEY key[i])") ".") (p (tt "COUNT") " defaults to essentially, infinity, and " (tt "EQUALITY?") " defaults to " (tt "eqv?") "."))) (section 3 "alist-delete!/count" (def (sig (procedure "(alist-delete!/count KEY ALIST [TEST? [COUNT]])" (id alist-delete!/count))) (p "Destructive version of " (tt "alist-delete/count") ".") (p (tt "alist-delete-first") " and " (tt "alist-delete-first!") " are also available as procedures."))) (section 3 "unzip-alist" (def (sig (procedure "(unzip-alist ALIST)" (id unzip-alist))) (p "Returns 2 values, a list of the keys & a list of the values from the " (tt "ALIST") "."))) (section 3 "zip-alist" (def (sig (procedure "(zip-alist KEYS VALUES)" (id zip-alist))) (p "Returns an association list with elements from the corresponding items of " (tt "KEYS") " and " (tt "VALUES") ".") (p "Error signaling versions of the standard association lookup functions. When the " (tt "KEY") " is not found and a " (tt "NOT-FOUND") " value is not supplied an " (tt "error") " is invoked."))) (section 3 "plist->alist" (def (sig (procedure "(plist->alist PLIST) => list" (id plist->alist))) (p "Returns the association-list form of " (tt "PLIST") "."))) (section 3 "alist->plist" (def (sig (procedure "(alist->plist ALIST) => list" (id alist->plist))) (p "Returns the property-list form of " (tt "ALIST") "."))) (section 3 "shift!" (def (sig (procedure "(shift! LIST [DEFAULT]) => *" (id shift!))) (p "Retrns the first element of " (tt "LIST") ", or " (tt "DEFAULT") " when " (tt "LIST") " is null.") (p "The " (tt "car") " and " (tt "cdr") " of the first " (tt "pair") " of " (tt "LIST") " are set to the corresponding element of the second " (tt "pair") ".") (p "Like a stack-pop."))) (section 3 "unshift!" (def (sig (procedure "(unshift! OBJECT LIST) => list" (id unshift!))) (p "The " (tt "car") " of the first " (tt "pair") " of " (tt "LIST") " is set to " (tt "OBJECT") ". The " (tt "cdr") " of the first " (tt "pair") " of " (tt "LIST") " is set to " (tt "LIST") ".") (p "Like a stack-push."))) (section 3 "shift!/set" (def (sig (syntax "(shift!/set VARIABLE [WHEN-EMPTY])" (id shift!/set))) (p "Like " (tt "shift!") " but assigns the " (tt "VARIABLE") " " (tt "'()") " after shifting from a list of length 1.") (p (tt "WHEN-EMPTY") ", which defaults to " (tt "#f") ", is returned when the list bound to " (tt "VARIABLE") " is empty."))) (section 3 "andmap" (def (sig (procedure "(andmap FUNC LIST...) => boolean" (id andmap))) (p "The arity of the function " (tt "FUNC") " must be the length of " (tt "LIST...") ".") (p (tt "(and (FUNC (car LIST)...) (andmap FUNC (cdr LIST)...))") "."))) (section 3 "ormap" (def (sig (procedure "(ormap FUNC LIST...) => boolean" (id ormap))) (p "The arity of the function " (tt "FUNC") " must be the length of " (tt "LIST...") ".") (p (tt "(or (FUNC (car LIST)...) (ormap FUNC (cdr LIST)...))") ".")))) (section 2 "Usage" (highlight scheme "(require-extension list-utils)")) (section 2 "Requirements" (p (int-link "check-errors"))) (section 2 "Bugs and Limitations") (section 2 "Author" (p (int-link "/users/kon-lovett" "Kon Lovett"))) (section 2 "Version history" (dl (dt "1.1.0") (dd "Added " (tt "skip+") ", " (tt "split-at+") ", and " (tt "section") ".") (dt "1.0.0") (dd "Hello,"))) (section 2 "License" (p "Copyright (C) 2010 Kon Lovett.  All rights reserved.") (p "Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the Software), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:") (p "The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.") (p "THE SOFTWARE IS PROVIDED ASIS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.")))
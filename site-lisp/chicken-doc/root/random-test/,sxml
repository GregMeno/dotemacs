((tags "egg") (section 2 "random-test" (p "Some simple randomness tests for a sequence of numbers.") (toc)) (section 2 "Usage" (p "(require-extension random-test)")) (section 2 "Documentation" (p "The " (tt "random-test") " library provides a procedure that applies various statistical tests to a sequence of random numerical values, and a procedure to reports the results of those tests in convenient form.") (p "The library is useful for evaluating pseudorandom number generators for statistical sampling applications, compression algorithms, and other applications where the properties of a random sequence are of interest. The code in the library is based on the " (link "http://www.fourmilab.ch/random/" "ent program") " by John Walker.") (section 3 "Procedures" (def (sig (procedure "make-random-test:: [CAR CDR NULL?] -> (SEQ -> RANDOM-STATS)" (id make-random-test))) (p "This procedure creates a procedure that reads in a sequence of numerical values, and performs statistical tests to tests the randomness of the elements of the sequence.") (p "By default, the sequence is expected to be a list; however, if a different sequential data structure is used (e.g. a stream), the optional arguments " (tt "CAR, CDR, NULL?") " may be used to specify procedures that perform the corresponding operations on the input sequence.") (p "The returned procedure is of the form " (tt "SEQ -> RANDOM-STATS") ", where " (tt "SEQ") " is the sequence and the returned value is an alist with the following fields:") (dl (dt (tt "chisq")) (dd "the result of the Chi-Square test") (dt (tt "pochisq")) (dd "the calculated probability of the Chi-Square test") (dt (tt "mean")) (dd "the mean of the values in the input sequence</td></tr>") (dt (tt "min")) (dd "the minimum of the values in the input sequence</td></tr>") (dt (tt "max")) (dd "the maximum of the values in the input sequence</td></tr>") (dt (tt "montepi")) (dd "Monte Carlo value of pi") (dt (tt "scc")) (dd "the serial correlation coefficient")) (p "See the following section for explanation of the different fields.")) (def (sig (procedure "format-random-stats:: OUT * RANDOM-STATS -> UNDEFINED" (id format-random-stats))) (p "Given an output port, and the value returned by the random test procedure, this procedure outputs a human readable interpretation of the test results."))) (section 3 "Tests" (section 4 "Chi-Square Test" (p "In general, the Chi-Square distribution for an experiment with " (tt "k") " possible outcomes, performed " (tt "n") " times, in which " (tt "Y1, Y2,... Yk") " are the number of experiments which resulted in each possible outcome, and probabilities of each outcome " (tt "p1, p2,... pk") ", is given as: " (image-link "random-test.fig1.png")) (pre "\\chi^{2} = \\sum_{1 <= i <= k}{\\frac{(Y_{i} - m p_{i})^{2}}{np_{i}}}") (p (tt "\\Chi^2") " will grow larger as the measured results diverge from those expected by pure chance. The probability " (tt "Q") " that a Chi-Square value calculated for an experiment with d degrees of freedom (where " (tt "d=k-1") ", one less the number of possible outcomes) is due to chance is: " (image-link "random-test.fig2.png")) (pre "Q(\\Chi^2,d) = [2^{d/2} * \\Gamma(d/2)]^{-1} * \\int_{\\Chi^2}^{\\infty}(t)^{d/2-1} * exp(-t/2) * dt") (p "Where Gamma is the generalization of the factorial function to real and complex arguments: " (image-link "random-test.fig3.png")) (pre " \\Gamma(x) = \\int_{0}^{\\infty} t^{x-1} * exp(-t) * dt") (p "There is no closed form solution for Q, so it must be evaluated numerically.  Note that the probability calculated from the " (tt "\\Chi^2") " is an approximation which is valid only for large values of n, and is therefore only meaningful when calculated from a large number of independent experiments.") (p "In this implementation, the Chi-Square distribution is calculated for the list of values given as argument to the random-test procedure and expressed as an absolute number and a percentage which indicates how frequently a truly random sequence would exceed the value calculated.") (p "The percentage can be interpreted as the degree to which the sequence tested is suspected of being non-random. If the percentage is greater than 99% or less than 1%, the sequence is almost certainly not random. If the percentage is between 99% and 95% or between 1% and 5%, the sequence is suspect. Percentages between 90% and 95% and 5% and 10% indicate the sequence is almost suspect.")) (section 4 "Arithmetic Mean" (p "This is simply the result of summing the all the values in the sequence and dividing by the sequence length. If the data are close to random, the mean should be about " (tt "(2^b - 1)/2") " where " (tt "b") " is the number of bits used to represent a value. If the mean departs from this value, the values are consistently high or low.")) (section 4 "Monte Carlo Value for Pi" (p "Each pair of two values in the input sequence is used as X and Y coordinates within a square with side N (the length of the input sequence). If the distance of the randomly-generated point is less than the radius of a circle inscribed within the square, the pair of values is considered a hit. The percentage of hits can be used to calculate the value of pi:") (pre " # points within circle     1/4 * pi * r^2 \n ----------------------  =  -------------- = 1/4 * pi\n # points within square          r^2") (p "Therefore,") (pre "          # points within circle\n pi = 4 * ----------------------\n          # points within square") (p "For very long sequences (this approximation converges very slowly), the value will approach the correct value of Pi if the sequence is close to random.")) (section 4 "Serial Correlation Coefficient" (p "This quantity measures the extent to which each value in the sequence depends upon the previous value. For random sequences, this metric (which can be positive or negative) will be close to zero. A non-random sequence such as a text file will yield a serial correlation coefficient of about 0.5. Predictable data will exhibit serial correlation coefficients approaching 1.")))) (section 2 "Examples" (pre "(use random-test srfi-1)\n\n(randomize (current-milliseconds))\n\n(define random-test (make-random-test))\n(define lst (list-tabulate 1000000 (lambda (x) (random 1000000))))\n\n(random-test lst 1000000)\n\n(define stats (random-test lst 1000000))\n\n(format-random-stats stats)")) (section 2 "About this egg" (section 3 "Author" (p (int-link "/users/ivan-raikov" "Ivan Raikov"))) (section 3 "Version history" (dl (dt "1.8") (dd "Documentation converted to wiki format") (dt "1.7") (dd "Ported to Chicken 4") (dt "1.6") (dd "Removed testeez dependency") (dt "1.5") (dd "Build script updated for better cross-platform compatibility") (dt "1.4") (dd "eggdoc documentation fix") (dt "1.3") (dd "License upgrade to GPL v3.") (dt "1.2") (dd "Simplified the interface of random-test procedure") (dt "1.1") (dd "Bug fix in the bin update code") (dt "1.0") (dd "Initial release"))) (section 3 "Requirements" (p (tt "easyffi"))) (section 3 "License" (pre "Copyright 2007-2010 Ivan Raikov. \n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or (at\nyour option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nGeneral Public License for more details.\n\nA full copy of the GPL license can be found at\n<http://www.gnu.org/licenses/>."))))
((tags "egg") (section 2 "remote-mailbox" (toc)) (section 2 "Documentation" (p "Purports to provide an API for sending and receiving remote messages. This egg attempts to duplicate the " (b "mailbox") " egg semantics across an IP connection.") (section 3 "Common Parameters" (section 4 "default-remote-mailbox-tcp-port" (def (sig (procedure "(default-remote-mailbox-tcp-port [TCP-PORT])" (id default-remote-mailbox-tcp-port))) (p "The standard port number to establish a remote mailbox connection. Defaults to " (tt "63001") "."))) (section 4 "default-remote-mailbox-hostname" (def (sig (procedure "(default-remote-mailbox-hostname [HOST-NHAME])" (id default-remote-mailbox-hostname))) (p "The host name to establish a remote mailbox connection. Defaults to " (tt "\"localhost\"") ".")))) (section 3 "Client" (section 4 "Usage" (highlight scheme "(require-extension remote-mailbox-client)")) (section 4 "default-remote-mailbox-serializer" (def (sig (procedure "(default-remote-mailbox-serializer [PROCEDURE])" (id default-remote-mailbox-serializer))) (p "The optional serialize failure handler procedure. Must be " (tt "#f") " or a procedure/1."))) (section 4 "default-remote-mailbox-connect" (def (sig (procedure "(default-remote-mailbox-connect [PROCEDURE])" (id default-remote-mailbox-connect))) (p "The procedure used to establish network connections for a remote mailbox. Defaults to " (tt "tcp-connect") " and must be signature-compatible."))) (section 4 "remote-mailbox" (def (sig (procedure "(remote-mailbox NAME [#:hostname HOSTNAME] [#:tcp-port TCP-PORT] [#:connect CONNECT])" (id remote-mailbox))) (p "Returns a unique " (tt "remote-mailbox") " object for the specified " (tt "NAME") ".") (dl (dt (tt "HOSTNAME")) (dd "A string. Defaults to " (tt "(default-remote-mailbox-tcp-port)") ".") (dt (tt "TCP-PORT")) (dd "A fixnum in [0 65535] or " (tt "#f") ". Defaults to " (tt "(default-remote-mailbox-hostname)") ".") (dt (tt "CONNECT")) (dd "A procedure. Defaults to " (tt "(default-remote-mailbox-connect)") ".")) (p "When " (tt "TCP-PORT") " is " (tt "#f") " the " (tt "HOSTNAME") " must contain the port or service."))) (section 4 "remote-mailbox?" (def (sig (procedure "(remote-mailbox? OBJECT)" (id remote-mailbox?))) (p "Is the " (tt "OBJECT") " a valid " (tt "remote-mailbox") "?"))) (section 4 "remote-mailbox-name" (def (sig (procedure "(remote-mailbox-name REMOTE-MAILBOX)" (id remote-mailbox-name))) (p "Returns the " (tt "REMOTE-MAILBOX") " name."))) (section 4 "default-remote-mailbox-hostname" (def (sig (procedure "(default-remote-mailbox-hostname REMOTE-MAILBOX)" (id default-remote-mailbox-hostname))) (p "Returns the " (tt "REMOTE-MAILBOX") " hostname."))) (section 4 "remote-mailbox-tcp-port" (def (sig (procedure "(remote-mailbox-tcp-port REMOTE-MAILBOX)" (id remote-mailbox-tcp-port))) (p "Returns the " (tt "REMOTE-MAILBOX") " tcp-port."))) (section 4 "remote-mailbox-connected?" (def (sig (procedure "(remote-mailbox-connected? REMOTE-MAILBOX)" (id remote-mailbox-connected?))) (p "Is the " (tt "REMOTE-MAILBOX") " connected? (Has it been used?)"))) (section 4 "remote-mailbox-send!" (def (sig (procedure "(remote-mailbox-send! REMOTE-MAILBOX OBJECT [SERIALIZER])" (id remote-mailbox-send!))) (p "Transmit the " (tt "OBJECT") " to the " (tt "REMOTE-MAILBOX") ", using the " (tt "SERIALIZER") ", which defaults to " (tt "(default-remote-mailbox-serializer)") "."))) (section 4 "drop-remote-mailbox!" (def (sig (procedure "(drop-remote-mailbox! REMOTE-MAILBOX)" (id drop-remote-mailbox!))) (p "Invalidate and forget the " (tt "REMOTE-MAILBOX") "."))) (section 4 "drop-all-remote-mailboxes" (def (sig (procedure "(drop-remote-mailboxes!)" (id drop-remote-mailboxes!))) (p "Invalidate and forget all the remote mailboxes. Performs a reset to the initial state.")))) (section 3 "Server" (section 4 "Usage" (highlight scheme "(require-extension remote-mailbox-server)")) (section 4 "default-remote-mailbox-deserializer" (def (sig (procedure "(default-remote-mailbox-deserializer [PROCEDURE])" (id default-remote-mailbox-deserializer))) (p "The optional deserialize failure handler procedure. Must be " (tt "#f") " or a procedure/2."))) (section 4 "default-remote-mailbox-listen" (def (sig (procedure "(default-remote-mailbox-listen [PROCEDURE])" (id default-remote-mailbox-listen))) (p "The procedure used to establish network connections for a remote mailbox. Defaults to " (tt "tcp-listen") " and must be signature-compatible."))) (section 4 "default-remote-mailbox-auto-create?" (def (sig (procedure "(default-remote-mailbox-auto-create? [AUTO-CREATE?])" (id default-remote-mailbox-auto-create?))) (p "Automatically create local-mailbox? Defaults to " (tt "#t") "."))) (section 4 "make-remote-mailbox-server" (def (sig (procedure "(make-remote-mailbox-server [#:name NAME] [#:tcp-port TCP-PORT] [#:listen LISTEN] [#:request-limit REQUEST-LIMIT] [#:deserializer DESERIALIZER] [#:auto-create? AUTO-CREATE?] [#:debug DEBUG])" (id make-remote-mailbox-server))) (p "Creates and returns a " (tt "remote-mailbox-server") ". Uses " (tt "make-tcp-server") " to create a server procedure. The server threads spawned by this procedure are continuously processing remote mailbox sends until the connection is closed.)") (dl (dt (tt "NAME")) (dd "Defaults to " (tt "remote-mailbox-server:#")) (dt (tt "TCP-PORT")) (dd "Defaults to " (tt "(default-remote-mailbox-tcp-port)")) (dt (tt "LISTEN")) (dd "Defaults to " (tt "(default-remote-mailbox-listen)")) (dt (tt "DESERIALIZER")) (dd "Defaults to " (tt "(default-remote-mailbox-deserializer)")) (dt (tt "REQUEST-LIMIT")) (dd "The tcp-server upper limit for currently executing requests. Defaults to " (tt "10000") ".") (dt (tt "AUTO-CREATE?")) (dd "Automatically create local-mailbox. Defaults to " (tt "#t")) (dt (tt "DEBUG")) (dd "Print tcp diagnostics with " (tt "DEBUG") " prefix when truw. Defaults to " (tt "#f"))))) (section 4 "make-remote-mailbox-server-thread" (def (sig (procedure "(make-remote-mailbox-server-thread REMOTE-MAILBOX-SERVER)" (id make-remote-mailbox-server-thread))) (p "Returns a thread that, when started, will run the " (tt "REMOTE-MAILBOX-SERVER") "."))) (section 4 "remote-mailbox-server?" (def (sig (procedure "(remote-mailbox-server? OBJECT)" (id remote-mailbox-server?))) (p "Is the " (tt "OBJECT") " a " (tt "remote-mailbox-server") "?"))) (section 4 "remote-mailbox-server-name" (def (sig (procedure "(remote-mailbox-server-name REMOTE-MAILBOX-SERVER)" (id remote-mailbox-server-name))) (p "Returns the name of the specified " (tt "REMOTE-MAILBOX-SERVER") "."))) (section 4 "remote-mailbox-server-auto-create?" (def (sig (procedure "(remote-mailbox-server-auto-create? REMOTE-MAILBOX-SERVER)" (id remote-mailbox-server-auto-create?))))) (section 4 "remote-mailbox-server-deserializer" (def (sig (procedure "(remote-mailbox-server-deserializer REMOTE-MAILBOX-SERVER)" (id remote-mailbox-server-deserializer))))) (section 4 "remote-mailbox-server-listener" (def (sig (procedure "(remote-mailbox-server-listener REMOTE-MAILBOX-SERVER)" (id remote-mailbox-server-listener))) (p "Returns the listener object for the specified " (tt "REMOTE-MAILBOX-SERVER") "."))) (section 4 "remote-mailbox-server-request-limit" (def (sig (procedure "(remote-mailbox-server-request-limit REMOTE-MAILBOX-SERVER)" (id remote-mailbox-server-request-limit))))) (section 4 "remote-mailbox-server-debug" (def (sig (procedure "(remote-mailbox-server-debug REMOTE-MAILBOX-SERVER)" (id remote-mailbox-server-debug))))) (section 4 "remote-mailbox-server-start!" (def (sig (procedure "(remote-mailbox-server-start! REMOTE-MAILBOX-SERVER)" (id remote-mailbox-server-start!))) (p "Starts the server in a thread continuously processing remote mailbox sends until the connection is closed.") (p "Returns the started thread."))) (section 4 "remote-mailbox-server-run!" (def (sig (procedure "(remote-mailbox-server-run! REMOTE-MAILBOX-SERVER)" (id remote-mailbox-server-run!))) (p "Starts the server continuously processing remote mailbox sends until the connection is closed."))) (section 4 "local-mailbox/server" (def (sig (procedure "(local-mailbox/server REMOTE-MAILBOX-SERVER NAME)" (id local-mailbox/server))) (p "Returns the mailbox of " (tt "NAME") " for " (tt "REMOTE-MAILBOX-SERVER") " (a mailbox object as returned by the procedure " (tt "make-mailbox") "). Should the mailbox not exist it will be created if the " (tt "REMOTE-MAILBOX-SERVER") " has a true " (tt "AUTO-CREATE?") " flag, otherwise returns " (tt "#f") ".") (p "To receive remote messages:") (p (tt "(mailbox-receive! (local-mailbox/server REMOTE-MAILBOX-SERVER NAME))")))) (section 4 "drop-local-mailbox!/server" (def (sig (procedure "(drop-local-mailbox!/server REMOTE-MAILBOX-SERVER NAME)" (id drop-local-mailbox!/server))) (p "Forget the server's mailbox."))) (section 4 "local-mailbox-names/server" (def (sig (procedure "(local-mailbox-names/server REMOTE-MAILBOX-SERVER)" (id local-mailbox-names/server))) (p "Returns a list of all the mailboxes created for the server."))) (section 4 "local-mailbox" (def (sig (procedure "(local-mailbox NAME [DEBUG])" (id local-mailbox))) (p "This is a convenience interface and only recommended for the simplest of situations.") (p "When " (tt "NAME") " is:") (dl (dt "default-remote-mailbox-server-thread") (dd "returns the thread for the default server.") (dt "default-remote-mailbox-server") (dd "returns the default server record.") (dt "<other symbol>") (dd "returns the mailbox for " (tt "NAME") ".")) (p "The " (tt "DEBUG") " argument is passed on to " (tt "tcp-server") " which will print tcp diagnostics with " (tt "DEBUG") " as a prefix. The other parameters to " (tt "make-remote-mailbox-server") " are defaulted.") (p "The default server is created and run in a separate thread upon the first call.") (p "To receive remote messages:") (p (tt "(mailbox-receive! (local-mailbox NAME))")))) (section 4 "local-mailbox-start!" (def (sig (procedure "(local-mailbox-start! [DEBUG])" (id local-mailbox-start!))) (p "What " (tt "local-mailbox") " does upon the first invocation."))) (section 4 "local-mailbox-server" (def (sig (procedure "(local-mailbox-server) => REMOTE-MAILBOX-SERVER" (id local-mailbox-server))) (p "The " (tt "remote-mailbox-server") " object for " (tt "local-mailbox") "."))) (section 4 "local-mailbox-thread" (def (sig (procedure "(local-mailbox-thread) => THREAD" (id local-mailbox-thread))) (p "The " (tt "thread") " object for " (tt "local-mailbox") "."))))) (section 2 "Requirements" (p (int-link "tcp-server") " " (int-link "s11n") " " (int-link "mailbox") " " (int-link "miscmacros") " " (int-link "synch") " " (int-link "lookup-table") " " (int-link "type-errors"))) (section 2 "Bugs and Limitations" (ul (li "The sender (client) identity is not part of this API.") (li "\"Curry\" to supply " (tt "BACKLOG") " and/or " (tt "HOST") " arguments to the " (tt "listen") " procedure.") (li "There is not a good way to terminate a tcp-server. The test terminates the thread and then joins under an exception handler. Ugh."))) (section 2 "Author" (p (int-link "/users/kon-lovett" "Kon Lovett"))) (section 2 "Version history" (dl (dt "2.0.1") (dd "Explicit requirements.") (dt "2.0.0") (dd "Initial Chicken 4 release."))) (section 2 "License" (p "Copyright (C) 2009 Kon Lovett.  All rights reserved.") (p "Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the Software), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:") (p "The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.") (p "THE SOFTWARE IS PROVIDED ASIS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.")))
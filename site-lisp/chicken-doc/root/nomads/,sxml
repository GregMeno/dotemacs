((section 2 "nomads" (toc) (section 3 "Introduction" (p "This extension provides a simple framework for database migrations similar to those used in web frameworks like Ruby on Rails. It allows the user to keep different versions of database-schemas and manage the up- and down migration in a convenient manner.") (p "The library aims to be simple to use, yet powerful enough to do more sophisticated migrations.")) (section 3 "Examples" (highlight scheme "(use nomads nomads-sql-de-lite fmt fmt-color filepath)\n\n(migration-directory \"./migrations\")\n(database-credentials \"test.db\")\n\n(define (get-version)\n  (let ((version (get-environment-variable \"VERSION\")))\n    (if version\n        (or (string->number version) (string->symbol version))\n        'latest)))\n\n\n(define (pretty-print-migration checkpoint irreversible?)\n  (let ((direction (car checkpoint))\n        (migration (cdr checkpoint)))\n    (fmt #t\n     (pad-char #\\.\n               (cat \"[\"\n                    (fmt-bold (migration-version migration))\n                    \"] \"\n                    (filepath:drop-extension (migration-filename migration))\n                    \" \"\n                    (space-to 72)\n                    \"[\"\n                    (fmt-bold (if irreversible? (fmt-red \"IRREVERSIBLE\")  (fmt-green \"OK\")))\n                    \"]\")))\n    (newline)))\n\n\n(migrate version: (get-version) callback: pretty-print-migration)") (p "You can compile and use this little program to control your migrations from the command-line along with pretty-printing what it does.") (pre "$ csi -s migrate\n$ VERSION=2 csi -s migrate ") (p "Where a migration file inside the " (tt "migration-directory") " may look something like this.") (pre ";; 1-create-tests.scm\n((UP\n   \"CREATE TABLE tests (name string)\")\n (DOWN\n  \"DROP TABLE tests\"))")) (section 3 "Authors" (p (int-link "David Krentzlin"))) (section 3 "License" (pre " Copyright (c) 2010 David Krentzlin \n\n Permission is hereby granted, free of charge, to any person obtaining a\n copy of this software and associated documentation files (the \"Software\"),\n to deal in the Software without restriction, including without limitation\n the rights to use, copy, modify, merge, publish, distribute, sublicense,\n and/or sell copies of the Software, and to permit persons to whom the\n Software is furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included\n in all copies or substantial portions of the Software.\n \n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\n OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n OTHER DEALINGS IN THE SOFTWARE.")) (section 3 "Documentation" (section 4 "Supported Databases" (p "The library does currently ship with support for  " (b "sqlite3") " through " (int-link "sql-de-lite") ", and " (b "postgresql") " through  " (int-link "postgresql") ". You can enable the adapter by requiring the library-part accordingly.") (p (b "Enabling the postgresql-support")) (pre "(use nomads nomads-postgresql)\n(database-credentials '((host . \"127.0.0.1\") (user . \"testuser\") (password . \"testpassword\") (dbname . \"testdb\")))") (p (b "Enabling the sqlite-support")) (pre "(use nomads nomads-sql-de-lite)\n(database-credentials \"/path/to/db\")")) (section 4 "Migrationfiles" (p "The migrationfiles must match the following layout") (pre "((UP\n    \"statement1\"\n    \"statement2\"\n    \"statementx\")\n (DOWN\n   \"statement1down\"\n   \"statement2down\"\n   \"statementxdown\"))") (p "Depending on the direction, the library will either execute the statements in the DOWN or in the UP section of the file. There are two special kinds of statements.") (section 5 "Lambdas " (p "Those can be used to implement migrations that can not be expressed by simple sql-statements") (pre "((UP\n   ,(lambda (connection) (do-something-difficult connection))\n (DOWN\n  \"statement1\"))\n   ")) (section 5 "Irreversible Migrations" (p "If a #f is encountered the migration is interpreted as " (b "irreversible") ". An irreversible migration can not be reverted. In such a case, the library stops at this migration and does not attempt to revert earlier migrations.") (pre "((UP\n   \"statement1\")\n (DOWN #f))"))) (section 4 "Configuration" (p "There are some parameters that you might want to tweak to use migrations. There are also some parameters that allow you to tweak the behaviour of the library even more. See the " (tt "versioning") " section for details. Most of the time though you'll only have to set two parameters for the library to function.") (def (sig (parameter "database-credentials" (id database-credentials))) (p "Depending on the database-binding you use, this holds the connection-specification that will be passed to the binding's connect-procedure. See the documentation for " (int-link "sql-de-lite") " and " (int-link "postgresql") " for details.")) (def (sig (parameter "migration-directory" (id migration-directory))) (p "As the name suggests this parameter specifies where migration files can be found.")) (def (sig (parameter "error-on-duplicate-migrations" (id error-on-duplicate-migrations))) (p "If this parameter is set to " (tt "#t") " (the default) a condition of kind (nomads-error duplicate-version) is signaled.")) (def (sig (parameter "error-on-non-existent-migration" (id error-on-non-existent-migration))) (p "If this parameter is set to " (tt "#t") " (the default) a condition of kind (nomads-error non-existent-version) is signaled.")) (section 5 "Versioning and filename format" (p "The library allows you to implement your own custom versioning scheme. By default it uses a simple sequential scheme, that simple prefixes every migration with a numeric value. You're free to implement your own versioning scheme, for example to use timestamped versioning.") (def (sig (parameter "filename-pattern" (id filename-pattern)) (parameter "filename-partitioner" (id filename-partitioner)) (parameter "filename-joiner" (id filename-joiner)) (parameter "versioner" (id versioner)) (parameter "version?" (id version?)) (parameter "version-less?" (id version-less?)) (parameter "version-equal?" (id version-equal?)) (parameter "version->string" (id version->string)) (parameter "string->version" (id string->version))) (p "The following example set's up a versioning scheme that uses timestamps") (highlight scheme "(use nomads nomads-sql-de-lite numbers)\n\n(versioner (lambda (max-version)\n            (inexact->exact (current-seconds))))\n\n(filename-partitioner      \n (lambda (filename)\n   (let ((parts (string-split filename \"-\")))\n     (cond\n      ((null? parts) (cons #f \"\"))\n      ((string->number (car parts))\n       => (lambda (num)\n            (cons (number->string (inexact->exact num)) (string-join (cdr parts) \"-\"))))\n      (else (cons #f filename))))))\n\n(filename-joiner           \n (lambda (version file)\n    (sprintf \"~A-~A\" version file)))\n\n ;;we need to bind it to the number's version of those\n(version? number?)\n\n(define (->number what)\n  (inexact->exact (if (string? what) (string->number what) what)))\n\n(version-less?\n (lambda (l r)\n   (< (->number l) (->number r))))\n\n(version-equal?\n (lambda (l r)\n   (equal? (->number l) (->number r))))")))) (section 4 "Generating Migrations" (def (sig (procedure "(generate-migration name)" (id generate-migration))) (p "The procedure generates a migration-stub inside " (tt "migration-directory") " with the given name. It returns the full name of the migration-file including the version."))) (section 4 "Running Migrations" (def (sig (procedure "(migrate #!key (version 'latest) (callback default-callback))" (id migrate))) (p "This procedure starts the migration process. It migrates from the currently active version to " (tt "version") ". Depending on the active version the migrations run downwards or upwards executing the DOWN and UP portion of the files respectively. After each check-point (a single migration) " (tt "callback") " is invoked. If you do not specify this argument the " (tt "default-handler") " will just print which migration have been executed and their status."))))))
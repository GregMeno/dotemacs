(index ("rss:read" 0) ("rss:feed" 235) ("rss:feed?" 235) ("rss:feed-version" 235) ("rss:feed-channel" 235) ("rss:feed-items" 235) ("rss:item" 741) ("rss:item?" 741) ("rss:item-title" 741) ("rss:item-link" 741) ("rss:item-description" 741) ("rss:item-enclosure" 741) ("rss:item-attributes" 741) ("rss:item-attribute" 1888) ("rss:item=?" 2127) ("rss:enclosure" 2332) ("rss:renclosure?" 2520) ("rss:enclosure-url" 2520) ("rss:enclosure-type" 2520) ("rss:enclosure-length" 2520))
(def (sig (procedure "(rss:read [PORT])" (id rss:read))) (p "Reads an RSS feed from the given " (tt "PORT") ", or from the value of " (tt "(current-input-port)") ", if no port is specified. A " (tt "rss:feed") " record is returned."))
(def (sig (record "rss:feed" (id rss:feed)) (procedure "(rss:feed? x)" (id rss:feed?)) (procedure "(rss:feed-version FEED)" (id rss:feed-version)) (procedure "(rss:feed-channel FEED)" (id rss:feed-channel)) (procedure "(rss:feed-items FEED)" (id rss:feed-items))) (p "A record that holds information for an RSS feed. The " (tt "version") " field contains a string, the " (tt "channel") " field and the " (tt "items") " hold a single " (tt "rss:item") " and a list of " (tt "rss:item") "s, respectively."))
(def (sig (record "rss:item" (id rss:item)) (procedure "(rss:item? X)" (id rss:item?)) (procedure "(rss:item-title ITEM)" (id rss:item-title)) (procedure "(rss:item-link ITEM)" (id rss:item-link)) (procedure "(rss:item-description ITEM)" (id rss:item-description)) (procedure "(rss:item-enclosure ITEM)" (id rss:item-enclosure)) (procedure "(rss:item-attributes ITEM)" (id rss:item-attributes))) (p "A record containing data of a RSS item. The " (tt "title") ", " (tt "link") " and " (tt "description") " fields are strings. The " (tt "rss:item-enclosure") " procedure returns a " (tt "enclosure") " record (see below). The " (tt "attributes") " field holds an association list mapping symbols to strings and contain all sub-elements of a specific RSS item, including the " (tt "title") ", " (tt "link") " " (tt "description") " and " (tt "enclosure") " values.  So:") (pre " (eq? (alist-ref 'title (rss:item-attributes ITEM)) (rss:item-title ITEM))  ==>  #t") (p "The " (tt "item") " attribute is an SXML expression of the form") (pre " (image (title STRING) ...)") (p "where " (tt "...") " hold additional subelements of the image attribute."))
(def (sig (procedure "(rss:item-attribute ITEM SYMBOL)" (id rss:item-attribute))) (p "Returns the attribute " (tt "SYMBOL") " of the RSS feed item " (tt "ITEM") " or " (tt "#f") " if the item does not contain an attribute of this name."))
(def (sig (procedure "(rss:item=? ITEM ITEM)" (id rss:item=?))) (p "Returns " (tt "#t") " if the items have identical GUID attributes or (if no GUIDs are available) if the items have the same contents."))
(def (sig (record "rss:enclosure" (id rss:enclosure))) (p "Holds the url of an embedded file, the mime-type of that file and the length in bytes. It's accessors are defined as follows:"))
(def (sig (procedure "(rss:renclosure? X)" (id rss:renclosure?)) (procedure "(rss:enclosure-url ENCLOSURE)" (id rss:enclosure-url)) (procedure "(rss:enclosure-type ENCLOSURE)" (id rss:enclosure-type)) (procedure "(rss:enclosure-length ENCLOSURE)" (id rss:enclosure-length))) (p "All the returned values are strings."))

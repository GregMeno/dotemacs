(index ("unbound-value" 0) ("unbound-value?" 72) ("unbound?" 147) ("symbol-value" 210) ("unspecified-value" 350) ("unspecified-value?" 437) ("unspecified?" 520) ("symbol->keyword" 591) ("symbol-printname-details" 779) ("symbol-printname=?" 996) ("symbol-printname<?" 1136) ("symbol-printname-length" 1276) ("max-symbol-printname-length" 1372) ("make-qualified-symbol" 1539) ("make-qualified-uninterned-symbol" 1728) ("qualified-symbol?" 1849) ("symbol->qualified-string" 1933) ("interned-symbol?" 2030))
(def (sig (syntax "(unbound-value) => #<unbound>" (id unbound-value))))
(def (sig (syntax "(unbound-value? OBJ) => boolean" (id unbound-value?))))
(def (sig (syntax "(unbound? SYM) => boolean" (id unbound?))))
(def (sig (syntax "(symbol-value SYM [DEF]) => *" (id symbol-value))) (p "Returns " (tt "SYM") " binding or " (tt "DEF") " when unbound."))
(def (sig (procedure "(unspecified-value) => #<unspecified>" (id unspecified-value))))
(def (sig (syntax "(unspecified-value? OBJ) => boolean" (id unspecified-value?))))
(def (sig (syntax "(unspecified? OBJ) => boolean" (id unspecified?))))
(def (sig (procedure "(symbol->keyword SYM) => keyword" (id symbol->keyword))) (p (i "Note") " that " (tt "keyword->symbol") " is just " (tt "(string->symbol (symbol->string KWD))") "."))
(def (sig (procedure "(symbol-printname-details SYM) => (string string)" (id symbol-printname-details))) (p "Returns 2 values: the " (tt "string") ", and any qualification prefix " (tt "string") ", for " (tt "SYM")))
(def (sig (procedure "(symbol-printname=? X Y) => boolean" (id symbol-printname=?))) (p (tt "X") " & " (tt "Y") " are " (tt "symbol") "."))
(def (sig (procedure "(symbol-printname<? X Y) => boolean" (id symbol-printname<?))) (p (tt "X") " & " (tt "Y") " are " (tt "symbol") "."))
(def (sig (procedure "(symbol-printname-length SYM) => integer" (id symbol-printname-length))))
(def (sig (procedure "(max-symbol-printname-length SYMS) => integer" (id max-symbol-printname-length))) (p (tt "SYMS") " is a " (tt "list") " of " (tt "symbol") "."))
(def (sig (procedure "(make-qualified-symbol PREFIX NAME) => symbol" (id make-qualified-symbol))) (p (tt "PREFIX") " & " (tt "NAME") " are either " (tt "symbol") " or " (tt "string") "."))
(def (sig (procedure "(make-qualified-uninterned-symbol PREFIX NAME) => symbol" (id make-qualified-uninterned-symbol))))
(def (sig (procedure "(qualified-symbol? SYM) => boolean" (id qualified-symbol?))))
(def (sig (procedure "(symbol->qualified-string SYM) => string" (id symbol->qualified-string))))
(def (sig (procedure "(interned-symbol? SYM) => boolean" (id interned-symbol?))))

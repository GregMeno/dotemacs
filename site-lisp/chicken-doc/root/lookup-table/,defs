(index ("make-dict" 0) ("alist->dict" 232) ("dict?" 471) ("dict-equivalence-function" 579) ("dict-count" 781) ("dict-keys" 910) ("dict-values" 1023) ("dict->alist" 1142) ("dict-ref" 1301) ("dict-Idempotent-ref!" 1488) ("dict-exists?" 1879) ("dict-set!" 2029) ("dict-update!" 2225) ("dict-update-list!" 2740) ("dict-update-dict!" 2930) ("dict-delete!" 3215) ("dict-for-each" 3355) ("dict-merge!" 3552) ("dict-search" 3787) ("dict-print" 4144))
(def (sig (procedure "(make-dict [EQUALITY eq? [ESTIMATE <small-number>]]) -> dict" (id make-dict))) (p "Returns a dictionary using the supplied " (tt "EQUALITY") " test, optimized for the number of elements " (tt "ESTIMATE") "."))
(def (sig (procedure "(alist->dict ALIST [EQUALITY eq?] [ESTIMATE 0]) -> dict" (id alist->dict))) (p "Returns a dictionary constructed from " (tt "ALIST") " using the supplied " (tt "EQUALITY") " test, and optional " (tt "ESTIMATE") "."))
(def (sig (procedure "(dict? OBJECT) -> boolean" (id dict?))) (p "Is the " (tt "OBJECT") " a dictionary?"))
(def (sig (procedure "(dict-equivalence-function DICT) -> (procedure (object object) boolean)" (id dict-equivalence-function))) (p "Returns the equality test predicate procedure for " (tt "DICT") "."))
(def (sig (procedure "(dict-count DICT) -> integer" (id dict-count))) (p "Returns the number of items in the " (tt "DICT") "."))
(def (sig (procedure "(dict-keys DICT) -> list" (id dict-keys))) (p "Returns the keys in the " (tt "DICT") "."))
(def (sig (procedure "(dict-values DICT) -> list" (id dict-values))) (p "Returns the values in the " (tt "DICT") "."))
(def (sig (procedure "(dict->alist DICT) => list" (id dict->alist))) (p "Returns the " (tt "DICT") " as an association list. The result may not be mutated!"))
(def (sig (procedure "(dict-ref DICT KEY [DEFAULT #f]) => *" (id dict-ref))) (p "Returns the value associated with " (tt "KEY") " in the " (tt "DICT") ", otherwise " (tt "DEFAULT") "."))
(def (sig (procedure "(dict-Idempotent-ref! DICT KEY FUNC [DEFAULT #f]) => *" (id dict-Idempotent-ref!))) (p "Should a value for " (tt "KEY") " exist in " (tt "DICT") " it is returned. Otherwise " (tt "FUNC") " is invoked on " (tt "DEFAULT") ". Any result other than " (tt "DEFAULT") " is the value for the " (tt "KEY") " and that value is returned. Otherwise returns " (tt "DEFAULT") "."))
(def (sig (procedure "(dict-exists? DICT KEY) => boolean" (id dict-exists?))) (p "Does an entry with " (tt "KEY") " exist in the " (tt "DICT") " ?"))
(def (sig (procedure "(dict-set! DICT KEY VALUE)" (id dict-set!))) (p "Associate " (tt "VALUE") " with " (tt "KEY") " in the " (tt "DICT") ".") (p (tt "VALUE") " must not be " (tt "(void)") "!"))
(def (sig (procedure "(dict-update! DICT KEY DEFAULT-VALUE-PROCEDURE [FUNC identity])" (id dict-update!))) (p "Invokes " (tt "FUNC") " on either the existing value for " (tt "KEY") " in the " (tt "DICT") ", or the result of the " (tt "DEFAULT-VALUE-PROCEDURE") " when no existing value. The result then becomes the value for " (tt "KEY") " in the " (tt "DICT") ".") (p "Returns the updated value for " (tt "KEY") " in the " (tt "DICT") ".") (p (tt "DEFAULT-VALUE-PROCEDURE") " must not return " (tt "(void)") "!"))
(def (sig (procedure "(dict-update-list! DICT KEY [OBJECT]...)" (id dict-update-list!))) (p "Updates the value for " (tt "KEY") " in the " (tt "DICT") " with a list of " (tt "OBJECT") "."))
(def (sig (procedure "(dict-update-dict! DICT KEY [EQUALITY eq? [ESTIMATE <small-number>]])" (id dict-update-dict!))) (p "Updates the value for " (tt "KEY") " in the " (tt "DICT") " with a " (tt "dict") ".") (p (tt "EQUALITY") " and " (tt "ESTIMATE") " as for " (tt "make-dict") "."))
(def (sig (procedure "(dict-delete! DICT KEY)" (id dict-delete!))) (p "Removes any association of " (tt "KEY") " in the " (tt "DICT") "."))
(def (sig (procedure "(dict-for-each DICT (PROCEDURE (-> KEY VALUE <ignored>)))" (id dict-for-each))) (p "Invokes the supplied " (tt "PROCEDURE") " with each association in the " (tt "DICT") "."))
(def (sig (procedure "(dict-merge! DICT [DICT1...]) => dict" (id dict-merge!))) (p "Returns the " (tt "DICT") " as the " (tt "(union DICT DICT1 ...)") " using overwrite semantics.") (p "Tables must have the same equality predicate."))
(def (sig (procedure "(dict-search DICT PROCEDURE [DEFAULT #f]) => *" (id dict-search))) (p "Returns the first entry value matched by the " (tt "PROCEDURE") ". Otherwise the " (tt "DEFAULT") " value is returned.)") (p (tt "PROCEDURE") " is a " (tt "(procedure (object object) boolean)") " where the first argument is the key and the second is the value."))
(def (sig (procedure "(dict-print DICT [PORT (current-output-port)])" (id dict-print))) (p "Pretty-print " (tt "DICT") " to " (tt "PORT") "."))

((tags "egg") (section 2 "directory-utils" (toc)) (section 2 "Documentation" (section 3 "pathname?" (def (sig (procedure "(pathname? OBJ)" (id pathname?))) (p "Does not verify existence of the file, just whether it has dir+fil.")) (def (sig (procedure "(check-pathname LOCATION OBJECT [ARGNAM]) => *" (id check-pathname)) (procedure "(error-pathname LOCATION OBJECT [ARGNAM])" (id error-pathname))))) (section 3 "filename?" (def (sig (procedure "(filename? OBJ)" (id filename?))) (p "Does not verify existence of the file, just whether it doesn't have dir.")) (def (sig (procedure "(check-filename LOCATION OBJECT [ARGNAM]) => *" (id check-filename)) (procedure "(error-filename LOCATION OBJECT [ARGNAM])" (id error-filename))))) (section 3 "dot-filename?" (def (sig (procedure "(dot-filename? PATHNAME) => boolean" (id dot-filename?))) (p "Does the " (tt "OBJECT") " name a file with a dot-name?") (p "Does not verify existence of the file!"))) (section 3 "dot-pathname?" (def (sig (procedure "(dot-pathname? PATHNAME) => boolean" (id dot-pathname?))) (p "Is any dir in the " (tt "PATHNAME") " a dot-filename?") (p "Does not verify existence of the file!"))) (section 3 "check-directory" (def (sig (procedure "(check-directory LOCATION OBJECT [ARGNAM]) => *" (id check-directory))) (p "Does the " (tt "OBJECT") " name an existing " (tt "directory") ">")) (def (sig (procedure "(error-directory LOCATION OBJECT [ARGNAM])" (id error-directory))))) (section 3 "directory-fold" (def (sig (procedure "(directory-fold FUNCTION IDENTITY DIRECTORY [#:dotfiles? DOTFILES?]) => *" (id directory-fold))) (p "Invokes " (tt "FUNCTION") " on each " (tt "filename") " in the " (tt "DIRECTORY") " and the recursive value from " (tt "IDENTITY") ". Returns the final value.") (p (i "Note") " that only the " (tt "filename") " is passed and not the complete " (tt "pathname") ". The " (tt "\".\"") " and " (tt "\"..\"") " filenames are not supplied no matter the " (tt "DOTFILES?") " setting.") (p (tt "FUNCTION") " is a " (tt "(procedure (filename *) *)") ".") (p (tt "DOTFILES") " is a " (tt "boolean") " indicating whether files with a " (tt "\".\"") " prefix are included in the fold. Default is " (tt "#f") ".") (p "On a " (b "Windows") " platform hidden files have a " (tt "hidden") " attribute so this routine is rather " (b "*nix") " centric."))) (section 3 "create-pathname-directory" (def (sig (procedure "(create-pathname-directory PATHNAME)" (id create-pathname-directory))) (p "Ensures the directory component of PATHNAME exist.") (p "Like the " (b "*nix") " `\"mkdir -p `dirname PATHNAME`\" command."))) (section 3 "make-program-filename" (def (sig (procedure "(make-program-filename COMMAND)" (id make-program-filename))) (p "Returns the platform specific form of an executable command filename.") (p "On " (b "Windows") " the " (tt "\"exe\"") " extension is added unless an extension is already present. Does nothing otherwise."))) (section 3 "make-shell-filename" (def (sig (procedure "(make-shell-filename COMMAND)" (id make-shell-filename))) (p "Returns the platform specific form of a shell command filename.") (p "On " (b "Windows") " the " (tt "\"bat\"") " extension is added unless an extension is already present. Otherwise conditionally adds the " (tt "\"sh\"") " extension."))) (section 3 "file-exists/directory?" (def (sig (procedure "(file-exists/directory? FILENAME [DIRECTORY | DIRECTORY-LIST])" (id #f))) (p "Returns the pathname when FILENAME exists in the DIRECTORY, otherwise #f.") (p "DIRECTORY-LIST is as for make-pathname.") (p "When only the FILENAME parameter supplied then the same as file-exists?."))) (section 3 "find-file-pathnames" (def (sig (procedure "(find-file-pathnames FILENAME [DIRECTORY | DIRECTORY-LIST] ...)" (id #f))) (p "Returns a list of all pathnames found for FILENAME in the supplied directory/directories, or #f when not found.") (p "The list of pathnames is in the same relative order as that of the directory parameter(s)."))) (section 3 "find-program-pathnames" (def (sig (procedure "(find-program-pathnames COMMAND-NAME [DIRECTORY | DIRECTORY-LIST] ...)" (id #f))) (p "Returns a list of all pathnames found for COMMAND-NAME in the supplied directory/directories, or #f when not found.") (p "Uses make-program-filename to make a filename.") (p "On " (b "Windows") " also uses make-shell-filename to make a filename.") (p "Does not ensure that the file is executable!"))) (section 3 "which-command-pathnames" (def (sig (procedure "(which-command-pathnames COMMAND-NAME [ENVIRONMENT-VARIABLE])" (id which-command-pathnames))) (p "Returns the pathnames of COMMAND-NAME in the ENVIRONMENT-VARIABLE where the file exists, or #f when nothing found.") (p "The default ENVIRONMENT-VARIABLE is \"PATH\".") (p "Uses the platform specific \"PATH\" environment variable element separator - a " (tt "#\\;") " for " (b "Windows") ", and a " (tt "#\\:") " otherwise."))) (section 3 "which-command-pathname" (def (sig (procedure "(which-command-pathname COMMAND-NAME [ENVIRONMENT-VARIABLE])" (id which-command-pathname))) (p "Same as which-command-pathnames but returns the first pathname only.") (p "Like the " (b "*nix") " `which COMMAND-NAME` command."))) (section 3 "remove-dotfiles" (def (sig (procedure "(remove-dotfiles FILES)" (id remove-dotfiles))) (p "Remove dot files from a directory list. Useful with glob.")) (section 4 "Directory Stack" (section 5 "push-directory" (def (sig (procedure "(push-directory DIRECTORY)" (id push-directory))) (p "Push the current directory and change to the DIRECTORY."))) (section 5 "pop-directory" (def (sig (procedure "(pop-directory)" (id pop-directory))) (p "Pop the last directory and change to it."))) (section 5 "pop-toplevel-directory" (def (sig (procedure "(pop-toplevel-directory)" (id pop-toplevel-directory))) (p "Pop the earliest directory and change to it.")))))) (section 2 "Usage" (highlight scheme "(require-extension directory-utils)")) (section 2 "Author" (p (int-link "/users/kon-lovett" "Kon Lovett"))) (section 2 "Version history" (dl (dt "1.0.2") (dd "Deprecated " (tt "create-directory/parents") ".") (dt "1.0.1") (dt "1.0.0") (dd "Hello"))) (section 2 "License" (p "Copyright (C) 2010 Kon Lovett.  All rights reserved.") (p "Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the Software), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:") (p "The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.") (p "THE SOFTWARE IS PROVIDED ASIS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.")))
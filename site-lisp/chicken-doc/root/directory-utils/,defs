(index ("pathname?" 0) ("check-pathname" 131) ("error-pathname" 131) ("filename?" 300) ("check-filename" 436) ("error-filename" 436) ("dot-filename?" 605) ("dot-pathname?" 793) ("check-directory" 979) ("error-directory" 1146) ("directory-fold" 1236) ("create-pathname-directory" 2097) ("make-program-filename" 2320) ("make-shell-filename" 2614) ("which-command-pathnames" 2936) ("which-command-pathname" 3383) ("remove-dotfiles" 3633) ("push-directory" 3768) ("pop-directory" 3903) ("pop-toplevel-directory" 4011))
(def (sig (procedure "(pathname? OBJ)" (id pathname?))) (p "Does not verify existence of the file, just whether it has dir+fil."))
(def (sig (procedure "(check-pathname LOCATION OBJECT [ARGNAM]) => *" (id check-pathname)) (procedure "(error-pathname LOCATION OBJECT [ARGNAM])" (id error-pathname))))
(def (sig (procedure "(filename? OBJ)" (id filename?))) (p "Does not verify existence of the file, just whether it doesn't have dir."))
(def (sig (procedure "(check-filename LOCATION OBJECT [ARGNAM]) => *" (id check-filename)) (procedure "(error-filename LOCATION OBJECT [ARGNAM])" (id error-filename))))
(def (sig (procedure "(dot-filename? PATHNAME) => boolean" (id dot-filename?))) (p "Does the " (tt "OBJECT") " name a file with a dot-name?") (p "Does not verify existence of the file!"))
(def (sig (procedure "(dot-pathname? PATHNAME) => boolean" (id dot-pathname?))) (p "Is any dir in the " (tt "PATHNAME") " a dot-filename?") (p "Does not verify existence of the file!"))
(def (sig (procedure "(check-directory LOCATION OBJECT [ARGNAM]) => *" (id check-directory))) (p "Does the " (tt "OBJECT") " name an existing " (tt "directory") ">"))
(def (sig (procedure "(error-directory LOCATION OBJECT [ARGNAM])" (id error-directory))))
(def (sig (procedure "(directory-fold FUNCTION IDENTITY DIRECTORY [#:dotfiles? DOTFILES?]) => *" (id directory-fold))) (p "Invokes " (tt "FUNCTION") " on each " (tt "filename") " in the " (tt "DIRECTORY") " and the recursive value from " (tt "IDENTITY") ". Returns the final value.") (p (i "Note") " that only the " (tt "filename") " is passed and not the complete " (tt "pathname") ". The " (tt "\".\"") " and " (tt "\"..\"") " filenames are not supplied no matter the " (tt "DOTFILES?") " setting.") (p (tt "FUNCTION") " is a " (tt "(procedure (filename *) *)") ".") (p (tt "DOTFILES") " is a " (tt "boolean") " indicating whether files with a " (tt "\".\"") " prefix are included in the fold. Default is " (tt "#f") ".") (p "On a " (b "Windows") " platform hidden files have a " (tt "hidden") " attribute so this routine is rather " (b "*nix") " centric."))
(def (sig (procedure "(create-pathname-directory PATHNAME)" (id create-pathname-directory))) (p "Ensures the directory component of PATHNAME exist.") (p "Like the " (b "*nix") " `\"mkdir -p `dirname PATHNAME`\" command."))
(def (sig (procedure "(make-program-filename COMMAND)" (id make-program-filename))) (p "Returns the platform specific form of an executable command filename.") (p "On " (b "Windows") " the " (tt "\"exe\"") " extension is added unless an extension is already present. Does nothing otherwise."))
(def (sig (procedure "(make-shell-filename COMMAND)" (id make-shell-filename))) (p "Returns the platform specific form of a shell command filename.") (p "On " (b "Windows") " the " (tt "\"bat\"") " extension is added unless an extension is already present. Otherwise conditionally adds the " (tt "\"sh\"") " extension."))
(def (sig (procedure "(which-command-pathnames COMMAND-NAME [ENVIRONMENT-VARIABLE])" (id which-command-pathnames))) (p "Returns the pathnames of COMMAND-NAME in the ENVIRONMENT-VARIABLE where the file exists, or #f when nothing found.") (p "The default ENVIRONMENT-VARIABLE is \"PATH\".") (p "Uses the platform specific \"PATH\" environment variable element separator - a " (tt "#\\;") " for " (b "Windows") ", and a " (tt "#\\:") " otherwise."))
(def (sig (procedure "(which-command-pathname COMMAND-NAME [ENVIRONMENT-VARIABLE])" (id which-command-pathname))) (p "Same as which-command-pathnames but returns the first pathname only.") (p "Like the " (b "*nix") " `which COMMAND-NAME` command."))
(def (sig (procedure "(remove-dotfiles FILES)" (id remove-dotfiles))) (p "Remove dot files from a directory list. Useful with glob."))
(def (sig (procedure "(push-directory DIRECTORY)" (id push-directory))) (p "Push the current directory and change to the DIRECTORY."))
(def (sig (procedure "(pop-directory)" (id pop-directory))) (p "Pop the last directory and change to it."))
(def (sig (procedure "(pop-toplevel-directory)" (id pop-toplevel-directory))) (p "Pop the earliest directory and change to it."))

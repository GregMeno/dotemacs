(index ("pix-clone" 0) ("pix-copy" 107) ("pix-create" 357) ("pix-destroy" 577) ("pix-read" 723) ("pix-write" 927) ("pix-get-width" 1148) ("pix-set-width" 1272) ("pix-get-height" 1434) ("pix-set-height" 1561) ("pix-get-depth" 1726) ("pix-set-depth" 1847) ("pix-set-dimensions" 2002) ("pix-get-x-res" 2186) ("pix-set-x-res" 2307) ("pix-get-y-res" 2466) ("pix-set-y-res" 2587) ("pix-set-resolution" 2746) ("pix-scale-resolution" 2925) ("pix-get-input-format" 3105) ("pix-set-input-format" 3234) ("pix-abs-difference" 3368) ("pix-add-gray" 3706) ("pix-add-constant-gray" 4028) ("pix-close-gray" 4239) ("pix-combine-masked" 4561) ("pix-dilate-gray" 5050) ("pix-dither-to-binary" 5274) ("pix-dither-to-binary-spec" 5506) ("pix-erode-gray" 5826) ("pix-find-skew" 6048) ("pix-invert" 6220) ("pix-max-dynamic-range" 6474) ("pix-min-or-max" 6768) ("pix-mult-constant-gray" 7268) ("pix-open-gray" 7493) ("pix-rotate-am-gray" 7709) ("pix-subtract-gray" 8041) ("pix-threshold-to-binary" 8380) ("pix-threshold-to-value" 8691) ("pix-var-threshold-to-binary" 9167) ("rotate" 9447) ("scale" 9924) ("pix-conn-comp-bb" 10105) ("pix-conn-comp-pixa" 10324) ("pix-count-conn-comp" 10661) ("box-get-geometry" 10880) ("box-set-geometry" 11068) ("boxa-get-box" 11267) ("boxa-get-count" 11554) ("pixa-get-count" 11689) ("pixa-get-pix" 11814))
(def (sig (procedure "(pix-clone pix)" (id pix-clone))) (p "Return a reference to given " (tt "pix") "."))
(def (sig (procedure "(pix-copy pix-d pix-s)" (id pix-copy))) (p "Makes a copy of " (tt "pix-s") ": if " (tt "pix-d") " is " (tt "#f") " then returns a pointer to a copy of " (tt "pix-s") ", else makes " (tt "pix-d") " a copy of " (tt "pix-s") "."))
(def (sig (procedure "(pix-create width height depth)" (id pix-create))) (p "Returns a pointer to a new " (tt "pix") ", an image of given " (tt "width") " and " (tt "height") " in pixels, and colour " (tt "depth") "."))
(def (sig (procedure "(pix-destroy pix)" (id pix-destroy))) (p "Reduces reference count to " (tt "pix") ", and destroys picture if count is 0."))
(def (sig (procedure "(pix-read filename)" (id pix-read))) (p "Returns a pointer to a new " (tt "pix") " created by reading image from " (tt "filename") ".  Returns " (tt "#f") " if there is an error."))
(def (sig (procedure "(pix-write filename pix image-type)" (id pix-write))) (p "Writes " (tt "pix") " to an image file called " (tt "filename") ".  The " (tt "image-type") " is taken from the list of constants, below."))
(def (sig (procedure "(pix-get-width pix)" (id pix-get-width))) (p "Returns the width in pixels of given " (tt "pix") "."))
(def (sig (procedure "(pix-set-width pix integer)" (id pix-set-width))) (p "Sets the width in pixels of given " (tt "pix") ".  Returns 0 if ok, or 1 if error."))
(def (sig (procedure "(pix-get-height pix)" (id pix-get-height))) (p "Returns the height in pixels of given " (tt "pix") "."))
(def (sig (procedure "(pix-set-height pix integer)" (id pix-set-height))) (p "Sets the height in pixels of given " (tt "pix") ".  Returns 0 if ok, or 1 if error."))
(def (sig (procedure "(pix-get-depth pix)" (id pix-get-depth))) (p "Returns the colour depth of given " (tt "pix") "."))
(def (sig (procedure "(pix-set-depth pix integer)" (id pix-set-depth))) (p "Sets colour depth of given " (tt "pix") ".  Returns 0 if ok, or 1 if error."))
(def (sig (procedure "(pix-set-dimensions pix width height depth)" (id pix-set-dimensions))) (p "Sets all three properties of given " (tt "pix") ".  Returns 0 if ok, or 1 if error."))
(def (sig (procedure "(pix-get-x-res pix)" (id pix-get-x-res))) (p "Returns the x resolution of given " (tt "pix") "."))
(def (sig (procedure "(pix-set-x-res pix integer)" (id pix-set-x-res))) (p "Sets the x resolution of given " (tt "pix") ".  Returns 0 if ok, or 1 if error."))
(def (sig (procedure "(pix-get-y-res pix)" (id pix-get-y-res))) (p "Returns the y resolution of given " (tt "pix") "."))
(def (sig (procedure "(pix-set-y-res pix integer)" (id pix-set-y-res))) (p "Sets the y resolution of given " (tt "pix") ".  Returns 0 if ok, or 1 if error."))
(def (sig (procedure "(pix-set-resolution pix x-res y-res)" (id pix-set-resolution))) (p "Sets the x and y resolution of given " (tt "pix") ".  Returns 0 if ok, or 1 if error."))
(def (sig (procedure "(pix-scale-resolution pix x-scale y-scale)" (id pix-scale-resolution))) (p "Rescales the image in the x and y directions.  Returns 0 if ok, or 1 if error."))
(def (sig (procedure "(pix-get-input-format pix)" (id pix-get-input-format))) (p "Returns the input format of " (tt "pix") "."))
(def (sig (procedure "(pix-set-input-format pix integer)" (id pix-set-input-format))) (p "Sets the input format of " (tt "pix") "."))
(def (sig (procedure "(pix-abs-difference pix-1 pix-2)" (id pix-abs-difference))) (p "Returns pointer to new image which is formed by taking the pixel-wise absolute difference between " (tt "pix-1") " and " (tt "pix-2") ".  The two source images must have identical dimensions and colour depth.  " (tt "#f") " is returned on an error."))
(def (sig (procedure "(pix-add-gray pix-d pix-1 pix-2)" (id pix-add-gray))) (p "Returns pointer to image which is pixel sum of " (tt "pix-1") " and " (tt "pix-2") ".  Unless " (tt "#f") ", " (tt "pix-d") " may specify the destination image, and " (tt "pix-d") " may be equal to " (tt "pix-1") " for an in-place change."))
(def (sig (procedure "(pix-add-constant-gray pix-s value)" (id pix-add-constant-gray))) (p "In-place modification of " (tt "pix-s") " by adding " (tt "value") " to each pixel.  Returns 0 if OK or 1 if error."))
(def (sig (procedure "(pix-close-gray pix h-size v-size)" (id pix-close-gray))) (p (tt "h-size") " and " (tt "v-size") " must be odd values: they denote the size of gray block to find. Returns a pointer to a new " (tt "pix") ", based on the given " (tt "pix") ", removing parts that do not fit a h-size x v-size block."))
(def (sig (procedure "(pix-combine-masked pix-d pix-s pix-m)" (id pix-combine-masked))) (p "Modifies " (tt "pix-d") " in place.  Each pixel in " (tt "pix-d") " corresponding to a set pixel in the mask " (tt "pix-m") " is set to that pixel's value from " (tt "pix-s") ".  " (tt "pix-d") " and " (tt "pix-s") " must be equivalent in pixel depth.  The three images are aligned to the top-left corner, stopping when outside the intersection of three images.  Returns 0 if OK or 1 if error."))
(def (sig (procedure "(pix-dilate-gray pix h-size v-size)" (id pix-dilate-gray))) (p (tt "h-size") " and " (tt "v-size") " must be odd values. Returns a pointer to a new " (tt "pix") ", based on the given " (tt "pix") "."))
(def (sig (procedure "(pix-dither-to-binary pix)" (id pix-dither-to-binary))) (p "Uses Floyd-Steinberg error diffusion dithering algorithm to convert given " (tt "pix") " to a new " (tt "pix") ".  Returns " (tt "#f") " on error."))
(def (sig (procedure "(pix-dither-to-binary-spec pix lowerclip upperclip)" (id pix-dither-to-binary-spec))) (p "Similar to " (tt "pix-dither-to-binary") ", but the integers " (tt "lowerclip") " and " (tt "upperclip") " specific the distance to 0 or 255 respectively beyond which the routine stops propagating excess."))
(def (sig (procedure "(pix-erode-gray pix h-size v-size)" (id pix-erode-gray))) (p (tt "h-size") " and " (tt "v-size") " must be odd values. Returns a pointer to a new " (tt "pix") ", based on the given " (tt "pix") "."))
(def (sig (procedure "(pix-find-skew pix)" (id pix-find-skew))) (p "Returns two values: the angle (in radians) and confidence level of skew in the given " (tt "pix") "."))
(def (sig (procedure "(pix-invert pix-d pix-s)" (id pix-invert))) (p "Inverts the image " (tt "pix-s") ".  If " (tt "pix-d") " is " (tt "#f") ", then a pointer to a new " (tt "pix") " is returned; otherwise, " (tt "pix-d") " holds the inverted image."))
(def (sig (procedure "(pix-max-dynamic-range pix scale-type)" (id pix-max-dynamic-range))) (p "Returns a new pointer to an image which stretches the colour values in " (tt "pix") " to the full available range.  Returns " (tt "#f") " if error.  " (tt "scale-type") " is constant given below."))
(def (sig (procedure "(pix-min-or-max pix-d pix-1 pix-2 choose-type)" (id pix-min-or-max))) (p "Returns a pointer to an image which is formed either from the pixel-wise min or max of the two source images (the type determined by " (tt "choose-type") ", defined below).  If " (tt "pix-d") " is " (tt "#f") " then a new image is created and returned.  If " (tt "pix-d") " is an image, then that image is updated.  If " (tt "pix-d") " is the same as " (tt "pix-1") " then an in-place change is made."))
(def (sig (procedure "(pix-mult-constant-gray pix-s value)" (id pix-mult-constant-gray))) (p "In-place modification of " (tt "pix-s") " by multiplying each pixel value by " (tt "value") ".  Returns 0 if OK, or 1 if error."))
(def (sig (procedure "(pix-open-gray pix h-size v-size)" (id pix-open-gray))) (p (tt "h-size") " and " (tt "v-size") " must be odd values. Returns a pointer to a new " (tt "pix") ", based on the given " (tt "pix")))
(def (sig (procedure "(pix-rotate-am-gray pix angle filler)" (id pix-rotate-am-gray))) (p "Returns a pointer to a new 8bpp " (tt "pix") " created by rotating the given 8 bpp " (tt "pix") " through the given " (tt "angle") "; " (tt "filler") " specifies the gray value to be brought in to fill blanks, 0 for black, 255 for white."))
(def (sig (procedure "(pix-subtract-gray pix-d pix-1 pix-2)" (id pix-subtract-gray))) (p "Returns pointer to image which is pixel difference of " (tt "pix-1") " and " (tt "pix-2") ".  Unless " (tt "#f") ", " (tt "pix-d") " may specify the destination image, and " (tt "pix-d") " may be equal to " (tt "pix-1") " for an in-place change."))
(def (sig (procedure "(pix-threshold-to-binary pix threshold)" (id pix-threshold-to-binary))) (p "Returns a pointer to a new " (tt "pix") " created from the given " (tt "pix") ".  The given " (tt "pix") " should be a 4 or 8 bpp colour image; the given threshold value is used to convert the image to binary."))
(def (sig (procedure "(pix-threshold-to-value pix-d pix-s threshold set-value)" (id pix-threshold-to-value))) (p "If " (tt "pix-d") " is " (tt "#f") ", returns a pointer to a new " (tt "pix") ".  Else, " (tt "pix-d") " must be equal to " (tt "pix-s") " and thresholding is done in place.  If set-value > threshold, then all pixels with a value >= threshold are set to set-value; else, if set-value < threshold, then all pixels with value <= threshold are set to set-value."))
(def (sig (procedure "(pix-var-threshold-to-binary pix-s pix-g)" (id pix-var-threshold-to-binary))) (p "Returns a pointer to a new " (tt "pix") " created from the given 8 bpp " (tt "pix-s") " by thresholding each corresponding pixel according to the value in " (tt "pix-g") "."))
(def (sig (procedure "(rotate pix angle rotation-type in-colour width height)" (id rotate))) (p "Returns a pointer to a new " (tt "pix") " created by rotating given " (tt "pix") ".") (ul (li "angle: in radians, with positive value indicating clockwise.") (li "rotation-type: from list of constants below.") (li "in-colour: from list of constants below, determines if white or black pixels complete missing spaces.") (li "width: of final image") (li "height: of final image")))
(def (sig (procedure "(scale pix scale-x scale-y)" (id scale))) (p "Returns a pointer to a new " (tt "pix") " created by rescaling given " (tt "pix") " along x and y dimensions."))
(def (sig (procedure "(pix-conn-comp-bb pix connectivity)" (id pix-conn-comp-bb))) (p "Returns an array of bounding boxes corresponding to the components within " (tt "pix") ".  " (tt "pix") " must be a 1 bpp image."))
(def (sig (procedure "(pix-conn-comp-pixa pix connectivity)" (id pix-conn-comp-pixa))) (p "Returns two values: an array of bounding boxes (type " (tt "BOXA") ") and an array of pix images (type " (tt "PIXA") ").  The bounding boxes and images are the components within the given " (tt "pix") ".  " (tt "pix") " must be a 1 bpp image."))
(def (sig (procedure "(pix-count-conn-comp pix connectivity)" (id pix-count-conn-comp))) (p "Returns the number of connected components, or " (tt "#f") " if there was an error.  " (tt "pix") " must be a 1 bpp image."))
(def (sig (procedure "(box-get-geometry box)" (id box-get-geometry))) (p "Returns four values: the x, y, width, height of the box in pixel coordinates.  Returns " (tt "#f") " on error."))
(def (sig (procedure "(box-set-geometry box x y w h)" (id box-set-geometry))) (p "Sets the values of x, y, width and height of the given " (tt "box") " in pixels.  Returns 0 if OK, or 1 if error."))
(def (sig (procedure "(boxa-get-box boxa index copy-type)" (id boxa-get-box))) (p "Return a pointer to the indexed box in the box array: " (tt "copy-type") " is a constant, as defined below, and determines if the box is returned as a copy or a clone.  Returns " (tt "#f") " on error."))
(def (sig (procedure "(boxa-get-count boxa)" (id boxa-get-count))) (p "Returns a count of the number of boxes within the box array."))
(def (sig (procedure "(pixa-get-count pixa)" (id pixa-get-count))) (p "Returns the number of pix images in the pix array."))
(def (sig (procedure "(pixa-get-pix pixa index copy-type)" (id pixa-get-pix))) (p "Returns a pointer to the indexed pix in the pix array: " (tt "copy-type") " is a constant, as defined below, and determines if the pix is returned as a copy or a clone.  Returns " (tt "#f") " on error."))

((tags "egg") (section 2 "colorize" (section 3 "Description" (p "Colorize programming code as HTML (syntax highlighting).")) (section 3 "Author" (p "Brian Mastenbrook, ported to Chicken by " (int-link "/users/peter-bex" "Peter Bex"))) (section 3 "Requirements" (p (int-link "defstruct"))) (section 3 "Documentation" (p "This extension is a port of " (link "http://www.common-lisp.net/project/lisppaste" "lisppaste's") " colorizing code.  It currently supports syntax highlighting for the following languages:") (ul (li "Basic Lisp") (li "Scheme") (li "Emacs Lisp") (li "Common Lisp") (li "C") (li "C++") (li "Java") (li "Objective C") (li "Erlang") (li "Python") (li "Ruby") (li "Haskell") (li "Unified Context Diff"))) (section 3 "Colorizing procedures" (def (sig (procedure "(coloring-type-names)" (id coloring-type-names))) (p "Returns an alist of supported coloring types (recognised languages). The keys of this list are simple symbols which encode the internal name of the colorizer, the values of this list are human-readable strings describing the language.")) (def (sig (procedure "(coloring-type-exists? name)" (id coloring-type-exists?))) (p "If you don't need to know the name of a coloring type, this is a faster way to check if a given coloring type exists.  " (tt "name") " is a symbol which encodes the internal name of the coloring type.  If the coloring type with that name exists, " (tt "#t") " is returned, " (tt "#f") " otherwise.")) (def (sig (procedure "(html-colorize coloring-type string)" (id html-colorize))) (p "Colorize the given " (tt "string") " with the named " (tt "coloring-type") ".") (highlight scheme "(use colorize)\n\n(html-colorize 'c \"int main(void) {\\n    return 1;\\n}\")\n => \"<span class=\\\"symbol\\\">int</span> main<span class=\\\"paren1\\\">(<span class=\\\"default\\\"><span class=\\\"symbol\\\">void</span></span>)</span> <span class=\\\"paren1\\\">{<span class=\\\"default\\\">\\n    <span class=\\\"symbol\\\">return</span> 1;\\n</span>}</span>\""))) (section 3 "Used CSS classes" (p "The HTML can be easily and extensively styled using CSS. The colorizers use the following classes:") (ul (li (tt "comment") " for comments") (li (tt "character") " for character literals") (li (tt "string") " for string literals") (li (tt "variable") " for user variables that can be distinguished as such") (li (tt "function") " for function definitions if they can be distinguished as such (currently only used by the Erlang and Haskell coloring-types)") (li (tt "attribute") " for Erlang attributes") (li (tt "macro") " for macros (Erlang only)") (li (tt "atom") " for atoms (Erlang and Haskell only)") (li (tt "special") " for \"special\" variables.  These include preprocessor directives in C, " (tt "*starred-global-identifiers*") " for Lisps etc") (li (tt "symbol") " for symbols, identifiers, user variables that cannot be distinguished from regular symbols") (li (tt "keyword") " for keyword types (actual keywords in Lisps, variables containing unusual characters in Haskell, etc)") (li (tt "paren1") " through " (tt "paren6") " to indicate parenthetical nesting level") (li (tt "default") " to support displaying a different background of the code inside parens (for example to support mouse hover highlighting of matching parens)") (li (tt "syntax-error") " for syntax errors detected during parsing (currently unused)") (li (tt "diff-normal") " Lines of diff context without changes (Unified Diff only)") (li (tt "diff-added") " Added lines (Unified Diff only)") (li (tt "diff-deleted") " Deleted lines (Unified Diff only)"))) (section 3 "Changelog" (ul (li "0.3 - Fix a few bugs in the Lisp colorizer that didn't always trigger in lisppaste's colorizer because it processes strings a line at a time(?)") (li "0.2.2 - More silly bugfixes") (li "0.2.1 - Fixed stupid bug caused by 0.2 and added " (tt "coloring-type-exists?") " predicate") (li "0.2 - Ensured variables were not kept around in coloring type objects from previous invocations of html-colorize.") (li "0.1 - Initial port"))) (section 3 "License" (pre " Copyright (c) 2010 Peter Bex\n Copyright (c) 2003-2010 Brian Mastenbrook\n \n Permission is hereby granted, free of charge, to any person obtaining\n a copy of this software and associated documentation files (the\n \"Software\"), to deal in the Software without restriction, including\n without limitation the rights to use, copy, modify, merge, publish,\n distribute, sublicense, and/or sell copies of the Software, and to\n permit persons to whom the Software is furnished to do so, subject to\n the following conditions:\n \n The above copyright notice and this permission notice shall be\n included in all copies or substantial portions of the Software.\n \n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."))))
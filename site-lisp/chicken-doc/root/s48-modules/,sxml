((tags "egg") (section 2 "s48-modules" (toc) (section 3 "Description" (p "Chicken wrapper for the Scheme48 module system.")) (section 3 "Author" (p "Felix")) (section 3 "Requirements" (p "none")) (section 3 "Documentation" (p "This egg allows you to compile Scheme48 modules as-is, and use them in your Chicken programs.") (p "Most of the module (or \"package\") syntax is supported. For information on how to use these, see " (link "http://s48.org/1.8/manual/manual-Z-H-5.html" "the Scheme48 manual") ".")) (section 3 "Limitations and caveats" (p "This module system only generates import statements.  Libraries are not loaded by import statements.  This means you will have to load the libraries exporting the modules yourself prior to using the s48 modules.") (p "The following code actually defines " (i "two") " modules; " (tt "foo") " and " (tt "_foo") ":") (highlight scheme "(define-structure foo (export bar)\n  (open scheme)\n  (files foo))") (p "That's because " (tt "define-structure") " internally expands to " (tt "define-structures") " with only one structure defined.  Generating several modules with differing export lists requires one common internal module holding the actual code, which exports all its symbols. If you have several modules defined, the name of the internal module is equal to the first in the list, prefixed by an underscore. If you ask Chicken to generate import libraries while compiling, don't forget to add an extra " (tt "-j") " flag to generate the \"hidden\" import library, as well.") (section 4 "include-relative" (p "This module also defines the following macro as a replacement for the regular " (int-link "/manual/Non-standard macros and special forms#include" "include") " macro:") (def (sig (syntax "(include-relative filename)" (id include-relative))) (p "This includes " (tt "filename") " just like " (tt "include") " would, but if you use " (tt "include-relative") " inside " (i "that") " file, it will include files relative to the directory in which " (tt "filename") " is located (include would instead just try to find the file relative to the topmost file you're compiling).") (p "This macro must be used to include Scheme 48 module/package files which use " (tt "files") " declarations to load external files.") (p "For example, this code:") (highlight scheme ";; file: /rootpath/foo.scm\n(include \"bar/qux.scm\")") (highlight scheme ";; file: /rootpath/bar/qux.scm\n(include \"mooh/blah.scm\")") (p "Would fail to load " (tt "/rootpath/bar/mooh/blah.scm") ". Instead, it gives an error because it is trying to load " (tt "/rootpath/mooh/blah.scm") ".") (p "Whereas this would work:") (highlight scheme ";; file: /rootpath/foo.scm\n(use s48-modules)\n(include-relative \"bar/qux.scm\")") (highlight scheme ";; file: /rootpath/bar/qux.scm\n(include-relative \"mooh/blah.scm\")")))) (section 3 "Changelog" (ul (li "0.3 Add include-relative") (li "0.2 Tests and minor bugfixes") (li "0.1 Initial release"))) (section 3 "License" (pre "Copyright (c) 2008, Felix L. Winkelmann\nAll rights reserved.") (pre "Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following\nconditions are met:") (pre "  Redistributions of source code must retain the above copyright notice, this list of conditions and the following\n    disclaimer. \n  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following\n    disclaimer in the documentation and/or other materials provided with the distribution. \n  Neither the name of the author nor the names of its contributors may be used to endorse or promote\n    products derived from this software without specific prior written permission. ") (pre "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS\nOR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR\nCONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\nCONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\nOTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE."))))
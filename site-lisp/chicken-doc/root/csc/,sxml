((tags "manual") (toc) (section 2 "Using the compiler" (p "The " (tt "csc") " compiler driver provides a convenient interface to the basic Scheme-to-C translator (" (tt "chicken") ") and takes care for compiling and linking the generated C files into executable code. Enter") (pre "csc -help") (p "on the command line for a list of options.") (section 3 "Compiler command line format" (pre "csc FILENAME-OR-OPTION") (p (tt "FILENAME") " is the pathname of the source file that is to be compiled. A filename argument of " (tt "-") " specifies that the source text should be read from standard input.") (section 4 "Basic command-line options" (dl (dt "-analyze-only") (dd "Stop compilation after first analysis pass.") (dt "-block") (dd "Enable block-compilation. When this option is specified, the compiler assumes that global variables are not modified outside this compilation-unit.  Specifically, toplevel bindings are not seen by " (tt "eval") " and unused toplevel bindings are removed.") (dt "-case-insensitive") (dd "Enables the reader to read symbols case insensitive. The default is to read case sensitive (in violation of R5RS).  This option registers the " (tt "case-insensitive") " feature identifier.") (dt "-check-syntax") (dd "Aborts compilation process after macro-expansion and syntax checks.") (dt "-consult-inline-file FILENAME") (dd "load file with definitions for cross-module inlining generated by a previous compiloer invocation via " (tt "-emit-inline-file") ". Implies " (tt "-inline") ".") (dt "-debug MODES") (dd "Enables one or more compiler debugging modes. " (tt "MODES") " is a string of characters that select debugging information about the compiler that will be printed to standard output.")) (pre "    t          show time needed for compilation\n    b          show breakdown of time needed for each compiler pass\n    o          show performed optimizations\n    r          show invocation parameters\n    s          show program-size information and other statistics\n    a          show node-matching during simplification\n    p          show execution of compiler sub-passes\n    l          show lambda-lifting information\n    m          show GC statistics during compilation\n    n          print the line-number database \n    c          print every expression before macro-expansion\n    u          lists all unassigned global variable references\n    d          lists all assigned global variables\n    x          display information about experimental features\n    D          when printing nodes, use node-tree output\n    N          show the real-name mapping table\n    0          show database before lambda-lifting pass\n    S          show applications of compiler syntax\n    T          show expressions after converting to node tree\n    L          show expressions after lambda-lifting\n    U          show expressions after unboxing\n    M          show syntax-/runtime-requirements\n    1          show source expressions\n    2          show canonicalized expressions\n    3          show expressions converted into CPS\n    4          show database after each analysis pass\n    5          show expressions after each optimization pass\n    6          show expressions after each inlining pass\n    7          show expressions after complete optimization\n    8          show database after final analysis\n    9          show expressions after closure conversion") (dl (dt "-debug-level LEVEL") (dd "Selects amount of debug-information. " (tt "LEVEL") " should be an integer.")) (pre "    -debug-level 0             is equivalent to -no-trace -no-lambda-info\n    -debug-level 1             is equivalent to -no-trace\n    -debug-level 2             is equivalent to -scrutinize") (dl (dt "-disable-interrupts") (dd "Equivalent to the " (tt "(disable-interrupts)") " declaration. No interrupt-checks are generated for compiled programs.") (dt "-disable-stack-overflow-checks") (dd "Disables detection of stack overflows. This is equivalent to running the compiled executable with the " (tt "-:o") " runtime option.") (dt "-dynamic") (dd "This option should be used when compiling files intended to be loaded dynamically into a running Scheme program.") (dt "-epilogue FILENAME") (dd "Includes the file named " (tt "FILENAME") " at the end of the compiled source file. The include-path is not searched. This option may be given multiple times.") (dt "-emit-all-import-libraries") (dd "emit import libraries for all modules defined in the current compulation unit (see also: " (tt "-emit-import-library") ").") (dt "-emit-external-prototypes-first") (dd "Emit prototypes for callbacks defined with " (tt "define-external") " before any other foreign declarations. This is sometimes useful, when C/C++ code embedded into the a Scheme program has to access the callbacks. By default the prototypes are emitted after foreign declarations.") (dt "-emit-import-library MODULE") (dd "Specifies that an import library named " (tt "MODULE.import.scm") " for the named module should be generated (equivalent to using the " (tt "emit-import-library") " declaration).") (dt "-emit-inline-file FILENAME") (dd "Write procedures that can be globally inlined in internal form to " (tt "FILENAME") ", if global inlining is enabled. Implies " (tt "-inline -local") ". If the inline-file would be empty (because no procedure would be inlinable) no file is generated and any existing inline-file with that name is deleted.") (dt "-explicit-use") (dd "Disables automatic use of the units " (tt "library, eval") " and " (tt "extras") ". Use this option if compiling a library unit instead of an application unit.") (dt "-extend FILENAME") (dd "Loads a Scheme source file or compiled Scheme program (on systems that support it) before compilation commences. This feature can be used to extend the compiler.  This option may be given multiple times. The file is also searched in the current include path and in the extension-repository.") (dt "-feature SYMBOL") (dd "Registers " (tt "SYMBOL") " to be a valid feature identifier for " (tt "cond-expand") ". Multiple symbols may be given, if comma-separated.") (dt "-fixnum-arithmetic") (dd "Equivalent to " (tt "(fixnum-arithmetic)") " declaration. Assume all mathematical operations use small integer arguments.") (dt "-heap-size NUMBER") (dd "Sets a fixed heap size of the generated executable to " (tt "NUMBER") " bytes. The parameter may be followed by a  " (tt "M") " (" (tt "m") ") or " (tt "K") " (" (tt "k") ") suffix which stand for mega- and kilobytes, respectively.  The default heap size is 5 kilobytes. Note that only half of it is in use at every given time.") (dt "-heap-initial-size NUMBER") (dd "Sets the size that the heap of the compiled application should have at startup time.") (dt "-heap-growth PERCENTAGE") (dd "Sets the heap-growth rate for the compiled program at compile time (see: " (tt "-:hg") ").") (dt "-heap-shrinkage PERCENTAGE") (dd "Sets the heap-shrinkage rate for the compiled program at compile time (see: " (tt "-:hs") ").") (dt "-help") (dd "Print a summary of available options and the format of the command line parameters and exit the compiler.") (dt "-ignore-repository") (dd "Do not load any extensions from the repository (treat repository as empty). Also do not consult compiled (only interpreted) import libraries in " (tt "import") " forms.") (dt "-include-path PATHNAME") (dd "Specifies an additional search path for files included via the " (tt "include") " special form. This option may be given multiple times. If the environment variable " (tt "CHICKEN_INCLUDE_PATH") " is set, it should contain a list of alternative include pathnames separated by " (tt ";") ".") (dt "-inline") (dd "Enable procedure inlining for known procedures of a size below the threshold (which can be set through the " (tt "-inline-limit") " option).") (dt "-inline-global") (dd "Enable cross-module inlining (in addition to local inlining). Implies " (tt "-inline") ". For more information, see also " (int-link "Declarations") ".") (dt "-inline-limit THRESHOLD") (dd "Sets the maximum size of a potentially inlinable procedure. The default threshold is " (tt "20") ".") (dt "-keyword-style STYLE") (dd "Enables alternative keyword syntax, where " (tt "STYLE") " may be either " (tt "prefix") " (as in Common Lisp, e.g. :keyword), " (tt "suffix") " (as in DSSSL, e.g. keyword:) or " (tt "none") ". Any other value is ignored. The default is " (tt "suffix") ".") (dt "-keep-shadowed-macros") (dd "Do not remove macro definitions with the same name as assigned toplevel variables (the default is to remove the macro definition).") (dt "-lambda-lift") (dd "Enable the optimization known as lambda-lifting.") (dt "-local") (dd "Assume toplevel variables defined in the current compilation unit are not externally modified.") (dt "-no-argc-checks") (dd "disable argument count checks") (dt "-no-bound-checks") (dd "disable bound variable checks") (dt "-no-feature SYMBOL") (dd "Disables the predefined feature-identifier " (tt "SYMBOL") ". Multiple symbols may be given, if comma-separated.") (dt "-no-lambda-info") (dd "Don't emit additional information for each " (tt "lambda") " expression (currently the argument-list, after alpha-conversion/renaming).") (dt "-no-module-registration") (dd "Do not generate module-registration code in the compiled code. This is only needed if you want to use an import library that is generated by other means (manually, for example).") (dt "-no-parentheses-synonyms STYLE") (dd "Disables list delimiter synonyms, [..] and {...} for (...).") (dt "-no-procedure-checks") (dd "disable procedure call checks") (dt "-no-procedure-checks-for-usual-bindings") (dd "disable procedure call checks only for usual bindings") (dt "-no-procedure-checks-for-toplevel-bindings") (dd "disable bound and procedure call checks for calls to procedures referenced through a toplevel variable.") (dt "-no-symbol-escape") (dd "Disables support for escaped symbols, the |...| form.") (dt "-no-trace") (dd "Disable generation of tracing information. If a compiled executable should halt due to a runtime error, then a list of the name and the line-number (if available) of the last procedure calls is printed, unless " (tt "-no-trace") " is specified. With this option the generated code is slightly faster.") (dt "-no-warnings") (dd "Disable generation of compiler warnings.") (dt "-nursery NUMBER") (dt "-stack-size NUMBER") (dd "Sets the size of the first heap-generation of the generated executable to " (tt "NUMBER") " bytes. The parameter may be followed by a " (tt "M") " (" (tt "m") ") or " (tt "K") " (" (tt "k") ") suffix.  The default stack-size depends on the target platform.") (dt "-optimize-leaf-routines") (dd "Enable leaf routine optimization.") (dt "-optimize-level LEVEL") (dd "Enables certain sets of optimization options. " (tt "LEVEL") " should be an integer.")) (pre "    -optimize-level 0          is equivalent to -no-usual-integrations -no-compiler-syntax\n    -optimize-level 1          is equivalent to -optimize-leaf-routines\n    -optimize-level 2          is equivalent to -optimize-leaf-routines -inline\n    -optimize-level 3          is equivalent to -optimize-leaf-routines -local -inline -inline-global\n    -optimize-level 4          is equivalent to -optimize-leaf-routines -local -inline -unsafe -unboxing\n    -optimize-level 5          is equivalent to -optimize-leaf-routines -block -inline -unsafe -unboxing -lambda-lift -disable-interrupts -no-trace -no-lambda-info") (dl (dt "-output-file FILENAME") (dd "Specifies the pathname of the generated C file. Default is " (tt "FILENAME.c") ".") (dt "-postlude EXPRESSIONS") (dd "Add " (tt "EXPRESSIONS") " after all other toplevel expressions in the compiled file.  This option may be given multiple times. Processing of this option takes place after processing of " (tt "-epilogue") ".") (dt "-prelude EXPRESSIONS") (dd "Add " (tt "EXPRESSIONS") " before all other toplevel expressions in the compiled file.  This option may be given multiple times. Processing of this option takes place before processing of " (tt "-prologue") ".") (dt "-profile") (dt "-accumulate-profile") (dd "Instruments the source code to count procedure calls and execution times. After the program terminates (either via an explicit " (tt "exit") " or implicitly), profiling statistics are written to a file named " (tt "PROFILE.<randomnumber>") ". Each line of the generated file contains a list with the procedure name, the number of calls and the time spent executing it. Use the " (tt "chicken-profile") " program to display the profiling information in a more user-friendly form. Enter " (tt "chicken-profile") " with no arguments at the command line to get a list of available options. The " (tt "-accumulate-profile") " option is similar to " (tt "-profile") ", but the resulting profile information will be appended to any existing " (tt "PROFILE") " file. " (tt "chicken-profile") " will merge and sum up the accumulated timing information, if several entries for the same procedure calls exist. Only profiling information for global procedures will be collected.") (dt "-profile-name FILENAME") (dd "Specifies name of the generated profile information (which defaults to " (tt "PROFILE.<randomnumber>") ". Implies " (tt "-profile") ".") (dt "-prologue FILENAME") (dd "Includes the file named " (tt "FILENAME") " at the start of the compiled source file.  The include-path is not searched. This option may be given multiple times.") (dt "-r5rs-syntax") (dd "Disables the Chicken extensions to R5RS syntax. Does not disable " (int-link "Non-standard read syntax" "non-standard read syntax") ".") (dt "-raw") (dd "Disables the generation of any implicit code that uses the Scheme libraries (that is all runtime system files besides " (tt "runtime.c") " and " (tt "chicken.h") ").") (dt "-require-extension NAME") (dd "Loads the extension " (tt "NAME") " before the compilation process commences. This is identical to adding " (tt "(require-extension NAME)") " at the start of the compiled program. If " (tt "-uses NAME") " is also given on the command line, then any occurrences of " (tt "-require-extension NAME") " are replaced with " (tt "(declare (uses NAME))") ". Multiple names may be given and should be separated by " (tt ",") ".") (dt "-setup-mode") (dd "When locating extension, search the current directory first. By default, extensions are located first in the " (i "extension repository") ", where " (tt "chicken-install") " stores compiled extensions and their associated metadata.") (dt "-scrutinize") (dd "Enable simple flow-analysis to catch common type errors and argument/result mismatches. You can also use the " (tt "scrutinize") " declaration to enable scrutiny.") (dt "-static-extension NAME") (dd "similar to " (tt "-require-extension NAME") ", but links extension statically (also applies for an explicit " (tt "(require-extension NAME)") ").") (dt "-types FILENAME") (dd "load additional type database from " (tt "FILENAME") ". Type-definitions in " (tt "FILENAME") " will override previous type-definitions.") (dt "-compile-syntax") (dd "Makes macros also available at run-time. By default macros are not available at run-time.") (dt "-to-stdout") (dd "Write compiled code to standard output instead of creating a " (tt ".c") " file.") (dt "-unboxing") (dd "try to use unboxed temporaries for numerical operations. This optimization is only effective in unsafe mode.") (dt "-unit NAME") (dd "Compile this file as a library unit. Equivalent to " (tt "-prelude \"(declare (unit NAME))\"")) (dt "-unsafe") (dd "Disable runtime safety checks.") (dt "-uses NAME") (dd "Use definitions from the library unit " (tt "NAME") ". This is equivalent to " (tt "-prelude \"(declare (uses NAME))\"") ". Multiple arguments may be given, separated by " (tt ",") ".") (dt "-no-usual-integrations") (dd "Specifies that standard procedures and certain internal procedures may be redefined, and can not be inlined. This is equivalent to declaring " (tt "(not usual-integrations)") ".") (dt "-version") (dd "Prints the version and some copyright information and exit the compiler.") (dt "-verbose") (dd "Prints progress information to standard output during compilation.")) (p "The environment variable " (tt "CHICKEN_OPTIONS") " can be set to a string with default command-line options for the compiler.")) (section 4 "Further options" (p "Enter") (pre " csc -help") (p "to see a list of all supported options and short aliases to basic options."))) (section 3 "Runtime options" (p "After successful compilation a C source file is generated and can be compiled with a C compiler. Executables generated with CHICKEN (and the compiler itself) accept a small set of runtime options:") (dl (dt (tt "-:?")) (dd "Shows a list of the available runtime options and exits the program.") (dt (tt "-:aNUMBER")) (dd "Specifies the length of the buffer for recording a trace of the last invoked procedures. Defaults to 16.") (dt (tt "-:b")) (dd "Enter a read-eval-print-loop when an error is encountered.") (dt (tt "-:B")) (dd "Sounds a bell (ASCII 7) on every major garbage collection.") (dt (tt "-:c")) (dd "Forces console mode. Currently this is only used in the interpreter (" (tt "csi") ") to force output of the " (tt "#;N>") " prompt even if stdin is not a terminal (for example if running in an " (tt "emacs") " buffer under Windows).") (dt (tt "-:d")) (dd "Prints some debug-information at runtime.") (dt (tt "-:D")) (dd "Prints some more debug-information at runtime.") (dt (tt "-:g")) (dd "Prints information about garbage-collection.") (dt (tt "-:G")) (dd "Force GUI mode (show error messages in dialog box, suitable for platform).") (dt (tt "-:H")) (dd "Before terminating, dump heap usage to stderr.") (dt (tt "-:fNUMBER")) (dd "Specifies the maximal number of currently pending finalizers before finalization is forced.") (dt (tt "-:hNUMBER")) (dd "Specifies fixed heap size") (dt (tt "-:hgPERCENTAGE")) (dd "Sets the growth rate of the heap in percent. If the heap is exhausted, then it will grow by " (tt "PERCENTAGE") ". The default is 200.") (dt (tt "-:hiNUMBER")) (dd "Specifies the initial heap size") (dt (tt "-:hmNUMBER")) (dd "Specifies a maximal heap size. The default is (2GB - 15).") (dt (tt "-:hsPERCENTAGE")) (dd "Sets the shrink rate of the heap in percent. If no more than a quarter of " (tt "PERCENTAGE") " of the heap is used, then it will shrink to " (tt "PERCENTAGE") ". The default is 50.  Note: If you want to make sure that the heap never shrinks, specify a value of " (tt "0") ".  (this can be useful in situations where an optimal heap-size is known in advance). ") (dt (tt "-:o")) (dd "Disables detection of stack overflows at run-time.") (dt (tt "-:r")) (dd "Writes trace output to stderr. This option has no effect with in files compiled with the " (tt "-no-trace") " options.") (dt (tt "-:sNUMBER")) (dd "Specifies stack size.") (dt (tt "-:tNUMBER")) (dd "Specifies symbol table size.") (dt (tt "-:w")) (dd "Enables garbage collection of unused symbols. By default unused and unbound symbols are not garbage collected.") (dt (tt "-:x")) (dd "Raises uncaught exceptions of separately spawned threads in primordial thread. By default uncaught exceptions in separate threads are not handled, unless the primordial one explicitly joins them. When warnings are enabled (the default) and " (tt "-:x") " is not given, a warning will be shown, though.")) (p "The argument values may be given in bytes, in kilobytes (suffixed with " (tt "K") " or " (tt "k") "), in megabytes (suffixed with " (tt "M") " or " (tt "m") "), or in gigabytes (suffixed with " (tt "G") " or " (tt "g") "). Runtime options may be combined, like " (tt "-:dc") ", but everything following a " (tt "NUMBER") " argument is ignored. So " (tt "-:wh64m") " is OK, but " (tt "-:h64mw") " will not enable GC of unused symbols.")) (section 3 "Examples" (section 4 "A simple example (with one source file)" (p "To compile a Scheme program (assuming a UNIX-like environment) consisting of a single source file, perform the following steps.") (section 5 "Writing your source file" (p "In this example we will assume your source file is called " (tt "foo.scm") ":") (highlight scheme ";;; foo.scm\n\n(define (fac n)\n  (if (zero? n)\n      1\n      (* n (fac (- n 1))) ) )\n\n(write (fac 10))\n(newline)")) (section 5 "Compiling your program" (p "Compile the file " (tt "foo.scm") ":") (pre "% csc foo.scm") (p "This will produce the " (tt "foo") " executable:") (pre "% ls\nfoo  foo.scm")) (section 5 "Running your program" (p "To run your newly compiled executable use:") (pre "% foo\n3628800") (p "If you get a " (tt "foo: command not found") " error, you might want to try with " (tt "./foo") " instead (or, in Unix machines, modify your " (tt "PATH") " environment variable to include your current directory)."))) (section 4 "An example with multiple files" (p "If multiple bodies of Scheme code are to be combined into a single executable, then we have to compile each file and link the resulting object files together with the runtime system.") (p "Let's consider an example where your program consists of multiple source files.") (section 5 "Writing your source files" (p "The declarations in these files specify which of the compiled files is the main module, and which is the library module. An executable can only have one main module, since a program has only a single entry-point. In this case " (tt "foo.scm") " is the main module, because it doesn't have a " (tt "unit") " declaration:") (highlight scheme ";;; foo.scm\n\n; The declaration marks this source file as dependant on the symbols provided\n; by the bar unit:\n(declare (uses bar))\n\n(write (fac 10)) (newline)") (p (tt "bar.scm") " will be our library:") (highlight scheme ";;; bar.scm\n\n; The declaration marks this source file as the bar unit.  The names of the\n; units and your files don't need to match.\n(declare (unit bar))\n\n(define (fac n)\n  (if (zero? n)\n      1\n      (* n (fac (- n 1))) ) )")) (section 5 "Compiling and running your program" (p "You should compile your two files with the following commands:") (pre "% csc -c bar.scm\n% csc -c foo.scm") (p "That should produce two files, " (tt "bar.o") " and " (tt "foo.o") ". They contain the code from your source files in compiled form.") (p "To link your compiled files use the following command:") (pre "% csc foo.o bar.o -o foo") (p "This should produce the " (tt "foo") " executable, which you can run just as in the previous example. At this point you can also erase the " (tt "*.o") " files.") (p "You could avoid one step and link the two files just as " (tt "foo.scm") " is compiled:") (pre "% csc -c bar.scm\n% csc foo.scm bar.o -o foo") (p "Note that if you want to distribute your program, you might want it to follow the GNU Coding Standards.  One relatively easy way to achieve this is to use Autoconf and Automake, two tools made for this specific purpose.")))) (section 3 "Extending the compiler" (p "The compiler supplies a couple of hooks to add user-level passes to the compilation process. Before compilation commences any Scheme source files or compiled code specified using the " (tt "-extend") " option are loaded and evaluated.  The parameters " (tt "user-options-pass, user-read-pass, user-preprocessor-pass, user-pass") " and " (tt "user-post-analysis-pass") " can be set to procedures that are called to perform certain compilation passes instead of the usual processing (for more information about parameters see: " (int-link "Supported language") ".") (def (sig (parameter "user-options-pass" (id user-options-pass))) (p "Holds a procedure that will be called with a list of command-line arguments and should return two values: the source filename and the actual list of options, where compiler switches have their leading " (tt "-") " (hyphen) removed and are converted to symbols.  Note that this parameter is invoked " (b "before") " processing of the " (tt "-extend") " option, and so can only be changed in compiled user passes.")) (def (sig (parameter "user-read-pass" (id user-read-pass))) (p "Holds a procedure of three arguments. The first argument is a list of strings with the code passed to the compiler via " (tt "-prelude") " options. The second argument is a list of source files including any files specified by " (tt "-prologue") " and " (tt "-epilogue") ". The third argument is a list of strings specified using " (tt "-postlude") " options. The procedure should return a list of toplevel Scheme expressions.")) (def (sig (parameter "user-preprocessor-pass" (id user-preprocessor-pass))) (p "Holds a procedure of one argument. This procedure is applied to each toplevel expression in the source file " (b "before") " macro-expansion. The result is macro-expanded and compiled in place of the original expression.")) (def (sig (parameter "user-pass" (id user-pass))) (p "Holds a procedure of one argument. This procedure is applied to each toplevel expression " (b "after") " macro-expansion.  The result of the procedure is then compiled in place of the original expression.")) (def (sig (parameter "user-post-analysis-pass" (id user-post-analysis-pass))) (p "Holds a procedure that will be called after every performed program analysis pass. The procedure (when defined) will be called with seven arguments: a symbol indicating the analysis pass, the program database, the current node graph, a getter and a setter-procedure which can be used to access and manipulate the program database, which holds various information about the compiled program, a pass iteration count, and an analysis continuation flag. The getter procedure should be called with two arguments: a symbol representing the binding for which information should be retrieved, and a symbol that specifies the database-entry. The current value of the database entry will be returned or " (tt "#f") ", if no such entry is available. The setter procedure is called with three arguments: the symbol and key and the new value. The pass iteration count currently is meaningful only for the 'opt pass. The analysis continuation flag will be " (tt "#f") " for the last 'opt pass. For information about the contents of the program database contact the author.") (p "Loaded code (via the " (tt "-extend") " option) has access to the library units " (tt "extras, srfi-1, srfi-4, utils, regex") " and the pattern matching macros. Multithreading is not available.") (p "Note that the macroexpansion/canonicalization phase of the compiler adds certain forms to the source program.  These extra expressions are not seen by " (tt "user-preprocessor-pass") " but by " (tt "user-pass") "."))) (section 3 "Distributing compiled C files" (p "It is relatively easy to create distributions of Scheme projects that have been compiled to C.  The runtime system of CHICKEN consists of only two handcoded C files (" (tt "runtime.c") " and " (tt "chicken.h") "), plus the file " (tt "chicken-config.h") ", which is generated by the build process. All other modules of the runtime system and the extension libraries are just compiled Scheme code. The following example shows a minimal application, which should run without changes on the most frequent operating systems, like Windows, Linux or FreeBSD:") (p "Let's take a simple example.") (highlight scheme "; hello.scm\n\n(print \"Hello, world!\")") (pre " % csc -t hello.scm -optimize-level 3 -output-file hello.c") (p "Compiled to C, we get " (tt "hello.c") ". We need the files " (tt "chicken.h") " and " (tt "runtime.c") ", which contain the basic runtime system, plus the three basic library files " (tt "library.c") ", " (tt "eval.c") " and " (tt "extras.c") " which contain the same functionality as the library linked into a plain CHICKEN-compiled application, or which is available by default in the interpreter, " (tt "csi") ":") (pre " % cd /tmp\n %echo '(print \"Hello World.\")' > hello.scm\n % cp $CHICKEN_BUILD/runtime.c .\n % cp $CHICKEN_BUILD/library.c .\n % cp $CHICKEN_BUILD/eval.c    .\n % cp $CHICKEN_BUILD/extras.c  .\n % gcc -static -Os -fomit-frame-pointer runtime.c library.c eval.c \\\n   extras.c hello.c -o hello -lm") (p "Now we have all files together, and can create an tarball containing all the files:") (pre "% tar cf hello.tar Makefile hello.c runtime.c library.c eval.c extras.c chicken.h\n% gzip hello.tar") (p "This is naturally rather simplistic. Things like enabling dynamic loading, estimating the optimal stack-size and selecting supported features of the host system would need more configuration- and build-time support. All this can be addressed using more elaborate build-scripts, makefiles or by using autoconf/automake.") (p "Note also that the size of the application can still be reduced by removing " (tt "extras") " and " (tt "eval") " and compiling " (tt "hello.scm") " with the " (tt "-explicit-use") " option.") (p "For more information, study the CHICKEN source code and/or get in contact with the author.") (hr) (p "Previous: " (int-link "Basic mode of operation")) (p "Next: " (int-link "Using the interpreter")))))
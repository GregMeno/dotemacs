((tags "egg") (section 2 "irc" (toc) (section 3 "Description" (p "A simple IRC client library.")) (section 3 "Author" (p (int-link "/users/felix winkelmann" "felix winkelmann"))) (section 3 "Requirements" (p "None")) (section 3 "Documentation" (p "This extension provides basic support for the IRC client protocol (" (link "http://www.faqs.org/rfcs/rfc2812.html" "RFC 2812") "). Note that some basic knowledge of the protocol will be needed to use this library.") (p "Error-replies from the server are signalled as composite conditions of kind " (tt "(exn irc)") " with the properties " (tt "code") " (the IRC error code) and " (tt "reply") " (the actual message object received). If the connection is terminated by the server, a composite condition of the kinds " (tt "(exn irc/eof)") " is signalled. Automatic reconnection on timeout or eof is supported and optional.") (section 4 "irc:connection" (def (sig (procedure "(irc:connection #!key user password server nick real-name port log-traffic ping-timeout)" (id irc:connection))) (p "Returns a " (i "connection") " object, where the following keyword arguments specify the connection parameters:") (table (tr (th "keyword") (th "argument type") (th "default")) "\n" (tr (td (tt "user")) (td "string") (td (tt "nobody"))) "\n" (tr (td (tt "password")) (td "string") (td (i "none"))) "\n" (tr (td (tt "server")) (td "string") (td (i "none"))) "\n" (tr (td (tt "nick")) (td "string") (td "some random symbol")) "\n" (tr (td (tt "real-name")) (td "string") (td "same as the " (tt "user") " parameter")) "\n" (tr (td (tt "port")) (td "integer") (td "6667")) "\n" (tr (td (tt "log-traffic")) (td "port or #f") (td "#f")) "\n" (tr (td (tt "reconnect-timeout")) (td "milliseconds (integer)") (td "3600000")) "\n" (tr (td (tt "reconnect")) (td "boolean") (td "#f"))) (p "A server must be provided in any case.") (p "The connection object can be queried using the following accessors:")) (def (sig (procedure "(irc:connection? X)" (id irc:connection?))) (p "Returns " (tt "#t") " if " (tt "X") " is a connection object, or " (tt "#f") " otherwise.")) (def (sig (procedure "(irc:connection-in CONNECTION)" (id irc:connection-in)) (procedure "(irc:connection-out CONNECTION)" (id irc:connection-out)) (procedure "(irc:connection-server CONNECTION)" (id irc:connection-server)) (procedure "(irc:connection-nick CONNECTION)" (id irc:connection-nick)) (procedure "(irc:connection-user CONNECTION)" (id irc:connection-user)) (procedure "(irc:connection-real-name CONNECTION)" (id irc:connection-real-name)) (procedure "(irc:connection-port CONNECTION)" (id irc:connection-port)) (procedure "(irc:connection-channels CONNECTION)" (id irc:connection-channels)) (procedure "(irc:connection-log-file CONNECTION)" (id irc:connection-log-file)) (procedure "(irc:connection-reconnect-timeout CONNECTION)" (id irc:connection-reconnect-timeout)) (procedure "(irc:connection-password CONNECTION)" (id irc:connection-password)) (procedure "(irc:connection-reconnect? CONNECTION)" (id irc:connection-reconnect?))) (p "Accessors for values stored in a connection object. The " (tt "in") " and " (tt "out") " values are ports, " (tt "port") " is an integer, " (tt "channel") " is a string and all other values are strings."))) (section 4 "irc:connection-raw-filter-set!" (def (sig (procedure "(irc:connection-raw-filter-set! CONNECTION PROC)" (id irc:connection-raw-filter-set!))) (p "When set, then each line of received input will first be processed by the one argument procedure " (tt "PROC") ", and the result be passed to the message descontruction machinery instead. Use this facility to perform very low level pre-processing of input from the IRC server."))) (section 4 "irc:connect" (def (sig (procedure "(irc:connect CONNECTION)" (id irc:connect)) (procedure "(irc:connect #!key KEYWORD ...)" (id irc:connect))) (p "Connects to an IRC server, with the parameters given in the connection object " (tt "CONNECTION") " or via the parameters passed as keywords arguments (just like in the call to " (tt "irc:connection") ").  Returns the connection object. A connection can only be made to a single server at the same time."))) (section 4 "irc:disconnect" (def (sig (procedure "(irc:disconnect CONNECTION)" (id irc:disconnect))) (p "Disconnects any currently active connection."))) (section 4 "irc:reconnect" (def (sig (procedure "(irc:reconnect CONNECTION)" (id irc:reconnect))) (p "Disconnect and reconnect to " (tt "CONNECTION") ", automatically re-joining all channels that we have currently joined."))) (section 4 "irc:connected?" (def (sig (procedure "(irc:connected? CONNECTION)" (id irc:connected?))) (p "Returns " (tt "#t") " if there exists an open connection for " (tt "CONNECTION") ", or " (tt "#f") " otherwise."))) (section 4 "irc:quit" (def (sig (procedure "(irc:quit CONNECTION [MESSAGE])" (id irc:quit))) (p "Sends a " (tt "QUIT") " message to the IRC server (optionally with the text " (tt "MESSAGE") ") and closes the connection designated by the connection object " (tt "CONNECTION") "."))) (section 4 "irc:join" (def (sig (procedure "(irc:join CONNECTION CHANNEL)" (id irc:join))) (p "Sends " (tt "JOIN") " messages for the given " (tt "CHANNEL") " (a string)."))) (section 4 "irc:part" (def (sig (procedure "(irc:part CONNECTION CHANNEL)" (id irc:part)) (procedure "(irc:leave CONNECTION CHANNEL)" (id irc:leave))) (p "Leaves the channels given in the string " (tt "CHANNEL") " by sending a " (tt "PART") " message."))) (section 4 "irc:nick" (def (sig (procedure "(irc:nick CONNECTION NICK)" (id irc:nick))) (p "Changes the nickname to the one given in the string " (tt "NICK") "."))) (section 4 "irc:say" (def (sig (procedure "(irc:say CONNECTION MESSAGE DESTINATION ...)" (id irc:say))) (p "Sends the string " (tt "MESSAGE") " via a " (tt "PRIVMSG") " command to the given destinations, which should be strings designating either channels or nicknames. If no destinations are given, the message is sent to the last channel that has been joined. The message is split into multiple " (tt "PRIVMSG") " operations, if it contains newline characters."))) (section 4 "irc:notice" (def (sig (procedure "(irc:notice CONNECTION MESSAGE DESTINATION ...)" (id irc:notice))) (p "Similar to " (tt "irc:say") " but uses a " (tt "NOTICE") " command instead."))) (section 4 "irc:action" (def (sig (procedure "(irc:action CONNECTION MESSAGE DESTINATION ...)" (id irc:action))) (p "Similar to " (tt "irc:say") " but Sends an \"action\" instead of a normal message."))) (section 4 "irc:command" (def (sig (procedure "(irc:command CONNECTION STRING)" (id irc:command))) (p "Sends an arbitrary IRC command to the server."))) (section 4 "irc:listen" (def (sig (procedure "(irc:listen CONNECTION)" (id irc:listen))) (p "If data is available for reading, then the incoming message is parsed and a \"message\" object is returned.  If no data is currently available, " (tt "#f") " is returned.") (p "The message object can be queried with the following procedures:")) (def (sig (procedure "(irc:message? X)" (id irc:message?))) (p "Returns " (tt "#t") " if " (tt "X") " is a message object, or " (tt "#f") " otherwise.")) (def (sig (procedure "(irc:message-prefix MESSAGE)" (id irc:message-prefix)) (procedure "(irc:message-command MESSAGE)" (id irc:message-command)) (procedure "(irc:message-timestamp MESSAGE)" (id irc:message-timestamp)) (procedure "(irc:message-code MESSAGE)" (id irc:message-code)) (procedure "(irc:message-body MESSAGE)" (id irc:message-body)) (procedure "(irc:message-parameters MESSAGE)" (id irc:message-parameters)) (procedure "(irc:message-index MESSAGE)" (id irc:message-index))) (p "Return the components of a message object. The prefix is either a list of the form " (tt "(SERVERNAME)") " or a list containing the message prefix of the form " (tt "(NICK USER HOST)") " (all values are strings).  The timestamp holds the current number of seconds (as returned by " (tt "(current-seconds)") ") at the point when the message was parsed. The body contains the complete message string. The code is a numerical command-code for the message or " (tt "#f") ". The parameters is a list of strings, containing message destination and message body.  If the message contains extended information (mostly " (tt "ACTION") "s), then the last value in the list is an " (i "extended data") " object.  The index is a numeric message index."))) (section 4 "irc:message-sender" (def (sig (procedure "(irc:message-sender MESSAGE)" (id irc:message-sender)) (procedure "(irc:message-receiver MESSAGE)" (id irc:message-receiver))) (p "Returns the sender and receiver of a message, respectively. The receiver may be a channel name or the nickname of another client."))) (section 4 "irc:extended-data?" (def (sig (procedure "(irc:extended-data? X)" (id irc:extended-data?))) (p "Returns " (tt "#t") " if " (tt "X") " is an extended data object, or " (tt "#f") " otherwise."))) (section 4 "irc:extended-data-tag" (def (sig (procedure "(irc:extended-data-tag EXTENDED)" (id irc:extended-data-tag)) (procedure "(irc:extended-data-content EXTENDED)" (id irc:extended-data-content))) (p "Return the tag (symbol) and content (string) parts of an extended data object."))) (section 4 "irc:wait" (def (sig (procedure "(irc:wait CONNECTION)" (id irc:wait))) (p "Waits until data is available from " (tt "CONNECTION") " and returns the parsed message object."))) (section 4 "irc:process-message" (def (sig (procedure "(irc:process-message CONNECTION MESSAGE [VERBOSE])" (id irc:process-message))) (p "Calls any registered message handlers that apply to " (tt "MESSAGE") ". If the optional argument " (tt "VERBOSE") " is given and true, then diagnostic output will be written to the port returned by " (tt "(current-output-port)") "."))) (section 4 "irc:run-message-loop" (def (sig (procedure "(irc:run-message-loop CONNECTION #!key debug pong filter)" (id irc:run-message-loop))) (p "Repeatedly calls " (tt "irc:wait") " and " (tt "irc:process-message") ". If the keyword argument " (tt "debug") " is given and true, then each incoming message will be dumped to the port given by the value of " (tt "(current-output-port)") ". The keyword argument " (tt "pong") " specifies whether automatic processing of " (tt "PING") " messages should be done. If yes, then a message handler with the tag " (tt "ping") " (a symbol) will be registered as with the following commands:") (pre " (irc:add-message-handler! \n   con\n   (lambda (msg)\n     (irc:command con (string-append \"PONG :\" (car (irc:message-parameters msg)))) )\n   tag: 'ping\n   command: \"PING\") )") (p "The keyword argument " (tt "filter") " can be used to specify a procedure that will be called for each icoming message object (the result will be used for further processing instead)."))) (section 4 "irc:add-message-handler!" (def (sig (procedure "(irc:add-message-handler! CONNECTION PROC #!key command sender receiver body tag code)" (id irc:add-message-handler!))) (p "Defines a message handler for the given " (tt "CONNECTION") " that will invoke the one argument procedure " (tt "PROC") " with the received message object when all of the regular expressions given for the keyword arguments match (uses " (tt "string-search") "), and the " (tt "code") ", which should be an exact integer (and is compared using " (tt "eq?") ").") (p "The keyword " (tt "tag") " defines a message-handler " (i "tag") ", which can be used to remove the handler at a later time.") (p "Note that if this procedure is called with two arguments (and no keyword args), then the message handler will be invoked for all incoming messages.") (p "Message handlers are run in the order in which they are defined. A message handler should return " (tt "#f") " if further handlers should be invoked for the same message, or true if other handlers should not be called.") (p "The " (tt "command, sender, receiver") " and " (tt "body") " arguments may optionally be predicates instead of strings (which will be called with the respective part of the checked message) to allow more fine-grained matching."))) (section 4 "irc:remove-message-handler!" (def (sig (procedure "(irc:remove-message-handler! CONNECTION TAG)" (id irc:remove-message-handler!))) (p "Removes the message handler with the given tag.")))) (section 3 "Example" (p "A minimalistic bot that shows the current time, when asked:") (highlight scheme "(require-extension irc posix)\n\n(define con\n  (irc:connection server: \"irc.freenode.net\" nick: \"PongoTwistleton\") )\n\n(define (bleep _)\n  (irc:say con (seconds->string (current-seconds)) \"#somechannel\") )\n\n(irc:connect con)\n\n(irc:join con \"#somechannel\")\n\n(irc:add-message-handler!\n con bleep\n command: \"PRIVMSG\" body: \"time\")\n\n(irc:run-message-loop con debug: #t)")) (section 3 "Changelog" (ul (li "1.9.3 reconnecting on timeout") (li "1.9.2 reconnect feature") (li "1.9.1 handling of server-EOF") (li "1.9 added logging and ping-timeout support") (li "1.8 uses " (tt "string-search") " for matching handlers; allows regexp objects") (li "1.7 Ported to CHICKEN 4") (li "1.6 Added " (tt "irc:disconnect")) (li "1.5 Multimessage-support [Thanks to Andreas Scholta, again]") (li "1.4 Fixed bug in " (tt "irc:remove-message-handler!") " [Thanks to Andreas Scholta]") (li "1.3 " (tt "irc:join") " accepts only a single channel") (li "1.2 Fixed a bug in processing of handler tags [Thanks to Vesa, again!]") (li "1.1 Added " (tt "irc:connection-raw-handler-set!") " and further options to " (tt "irc:run-message-loop") " (in addition to " (tt "PING") " handling) [Thanks to Vesa Kaihlavirta]") (li "1.0"))) (section 3 "License" (pre " Copyright (c) 2000-2009, Felix L. Winkelmann\n All rights reserved.\n \n Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following\n conditions are met:\n \n   Redistributions of source code must retain the above copyright notice, this list of conditions and the following\n     disclaimer. \n   Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following\n     disclaimer in the documentation and/or other materials provided with the distribution. \n   Neither the name of the author nor the names of its contributors may be used to endorse or promote\n     products derived from this software without specific prior written permission. \n \n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS\n OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY\n AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR\n CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n SERVICESLOSS OF USE, DATA, OR PROFITSOR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n POSSIBILITY OF SUCH DAMAGE."))))
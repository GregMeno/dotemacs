((tags "egg") (section 2 "mailbox" (toc)) (section 2 "Documentation" (p "Thread-safe queues with timeout.") (section 3 "mailbox-timeout-exception?" (def (sig (procedure "(mailbox-timeout-exception? OBJECT) => BOOLEAN" (id mailbox-timeout-exception?))) (p "Is the " (tt "OBJECT") " a mailbox timeout exception?") (p "A mailbox timeout exception is a composite condition of " (tt "'exn") ", " (tt "'mailbox") ", and " (tt "'timeout") ", with properties of " (tt "'location") " and " (tt "'arguments") "."))) (section 3 "make-mailbox" (def (sig (procedure "(make-mailbox [NAME]) => MAILBOX" (id make-mailbox))) (p "Returns a new mailbox object. " (tt "NAME") " is an optional symbol for this mailbox and defaults to some " (tt "gensym") "'d symbol."))) (section 3 "mailbox?" (def (sig (procedure "(mailbox? OBJECT) => BOOLEAN" (id mailbox?))) (p "Is the " (tt "OBJECT") " a " (tt "mailbox") "?"))) (section 3 "mailbox-name" (def (sig (procedure "(mailbox-name MAILBOX) => SYMBOL" (id mailbox-name))) (p "Returns the name of the " (tt "MAILBOX") "."))) (section 3 "mailbox-empty?" (def (sig (procedure "(mailbox-empty? MAILBOX) => BOOLEAN" (id mailbox-empty?))) (p "If there are no queued objects in the " (tt "MAILBOX") ", then this procedure returns " (tt "#t") ", otherwise it returns " (tt "#f") "."))) (section 3 "mailbox-count" (def (sig (procedure "(mailbox-count MAILBOX) => NUMBER" (id mailbox-count))) (p "Returns the number of queued objects for the " (tt "MAILBOX") "."))) (section 3 "mailbox-waiting?" (def (sig (procedure "(mailbox-waiting? MAILBOX) => BOOLEAN" (id mailbox-waiting?))) (p "Is any thread waiting for the " (tt "MAILBOX") "?"))) (section 3 "mailbox-waiters" (def (sig (procedure "(mailbox-waiters MAILBOX) => LIST" (id mailbox-waiters))) (p "Returns a list of the threads waiting for the " (tt "MAILBOX") "."))) (section 3 "mailbox-send!" (def (sig (procedure "(mailbox-send! MAILBOX X)" (id mailbox-send!))) (p "Queues the data object " (tt "X") ". If any threads exist that are waiting for input on " (tt "MAILBOX") ", the execution of the first one will be resumed. The data will be read out of a mailbox in the same order in which is written in (in FIFO manner)."))) (section 3 "mailbox-receive!" (def (sig (procedure "(mailbox-receive! MAILBOX [TIMEOUT [DEFAULT]]) => OBJECT" (id mailbox-receive!))) (p "If there is any data in the " (tt "MAILBOX") ", then the first object will be removed and returned as the result. If the mailbox is currently empty, the current thread will suspended until data is available.") (p (tt "TIMEOUT") " is a " (link "http://srfi.schemers.org/srfi-18/srfi-18.html" "SRFI-18") " " (tt "time") " object or the real number of seconds.") (p "Should " (tt "TIMEOUT") " be specified and occur the " (tt "DEFAULT") ", if supplied, will be returned. Otherwise a mailbox timeout exception will be signaled for the calling thread. The " (tt "DEFAULT") " value cannot be " (tt "(void)") "."))) (section 3 "mailbox-wait!" (def (sig (procedure "(mailbox-wait! MAILBOX [TIMEOUT])" (id mailbox-wait!))) (p "Similar to " (tt "mailbox-receive!") ", but does not remove the received result from the queue of pending data.") (p (tt "TIMEOUT") " is a " (link "http://srfi.schemers.org/srfi-18/srfi-18.html" "SRFI-18") " " (tt "time") " object or the real number of seconds.") (p "Should " (tt "TIMEOUT") " be specified and occur a mailbox timeout exception will be signaled for the calling thread."))) (section 3 "mailbox-push-back!" (def (sig (procedure "(mailbox-push-back! MAILBOX X)" (id mailbox-push-back!))) (p "Pushes the data object " (tt "X") " into the first position of a mailbox."))) (section 3 "mailbox-push-back-list!" (def (sig (procedure "(mailbox-push-back-list! MAILBOX XS)" (id mailbox-push-back-list!))) (p "Pushes the list of objects " (tt "XS") " back into the mailbox, so that " (tt "(car XS)") " becomes the next receivable item."))) (section 3 "make-mailbox-cursor" (def (sig (procedure "(make-mailbox-cursor MAILBOX) => MAILBOX-CURSOR" (id make-mailbox-cursor))) (p "Returns an object which can enumerate a mailbox.") (p "Multiple cursors can scan, and mutate, the same mailbox."))) (section 3 "mailbox-cursor?" (def (sig (procedure "(mailbox-cursor? OBJECT) => BOOLEAN" (id mailbox-cursor?))) (p "Is the " (tt "OBJECT") " a " (tt "mailbox-cursor") "?"))) (section 3 "mailbox-cursor-mailbox" (def (sig (procedure "(mailbox-cursor-mailbox MAILBOX-CURSOR) => MAILBOX" (id mailbox-cursor-mailbox))) (p "Returns the mailbox object associated with the mailbox cursor."))) (section 3 "mailbox-cursor-next" (def (sig (procedure "(mailbox-cursor-next MAILBOX-CURSOR [TIMEOUT [DEFAULT]]) => OBJECT" (id mailbox-cursor-next))) (p "Returns the next object in the mailbox queue, waiting if necessary.") (p "The mailbox queue is scanned from oldest to newest.") (p (tt "TIMEOUT") " is a " (link "http://srfi.schemers.org/srfi-18/srfi-18.html" "SRFI-18") " " (tt "time") " object or the real number of seconds.") (p "Should " (tt "TIMEOUT") " be specified and occur the " (tt "DEFAULT") ", if supplied, will be returned. Otherwise a mailbox timeout exception will be signaled for the calling thread. The " (tt "DEFAULT") " value cannot be " (tt "(void)") "."))) (section 3 "mailbox-cursor-rewind" (def (sig (procedure "(mailbox-cursor-rewind MAILBOX-CURSOR)" (id mailbox-cursor-rewind))) (p "Position the cursor at the oldest message in the mailbox."))) (section 3 "mailbox-cursor-extract-and-rewind" (def (sig (procedure "(mailbox-cursor-extract-and-rewind MAILBOX-CURSOR)" (id mailbox-cursor-extract-and-rewind))) (p "Remove from the associated mailbox queue the last object returned by " (tt "mailbox-cursor-next") " and position the cursor at the oldest message in the mailbox.") (p "The extraction is not performed without a previous call to " (tt "mailbox-cursor-next") "."))) (section 3 "mailbox-cursor-rewound?" (def (sig (procedure "(mailbox-cursor-rewound? MAILBOX-CURSOR) => BOOLEAN" (id mailbox-cursor-rewound?))) (p "Is the " (tt "MAILBOX-CURSOR") " positioned at the start of the mailbox queue?")))) (section 2 "Usage" (highlight scheme "(require-extension mailbox)") (p "or") (highlight scheme "(require-library mailbox)\n...\n(import mailbox)")) (section 2 "Examples" (highlight scheme "(define (consumer ch)\n  (make-thread\n    (lambda ()\n      (let loop () \n        (print (current-thread) \": reading \" (mailbox-receive! ch))\n        (loop) ) ) ) )\n\n(define ch (make-mailbox))\n(thread-start! (consumer ch))\n(for-each\n  (lambda (x)\n    (print (current-thread) \": writing \" x)\n    (mailbox-send! ch x) )\n  '(33 44 55 hello) )")) (section 2 "Notes" (ul (li "A \"deadlock\" situation is possible when using " (tt "mailbox-wait!") ", " (tt "mailbox-recieve!") ", or " (tt "mailbox-cursor-next") " should there be no other threads \"runnable.\" The problem is when the mailbox is empty the current-thread is suspended (indefinite block). When the scheduler looks for the next ready thread and there is not one it signals \"deadlock.\"")) (p "Using a " (i "timeout") " will allow the calling thread to unblock eventually.")) (section 2 "Author" (p (int-link "/users/felix winkelmann" "felix winkelmann")) (p (int-link "/users/kon lovett" "Kon Lovett"))) (section 2 "Requirements" (p (int-link "check-errors"))) (section 2 "Version history" (dl (dt "2.1.0") (dd "Needs \"check-errors\" extension.") (dt "2.0.0") (dd "Port to hygienic Chicken."))) (section 2 "License" (p "Copyright (c) 2003, Felix L. Winkelmann All rights reserved.") (p "Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:") (pre " Redistributions of source code must retain the above copyright notice, this list of conditions and the following\n   disclaimer. \n Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following\n   disclaimer in the documentation and/or other materials provided with the distribution. \n Neither the name of the author nor the names of its contributors may be used to endorse or promote\n   products derived from this software without specific prior written permission. ") (p "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.")))
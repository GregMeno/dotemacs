(index ("mailbox-timeout-exception?" 0) ("make-mailbox" 357) ("mailbox?" 574) ("mailbox-name" 696) ("mailbox-empty?" 823) ("mailbox-count" 1048) ("mailbox-waiting?" 1198) ("mailbox-waiters" 1340) ("mailbox-send!" 1493) ("mailbox-receive!" 1824) ("mailbox-wait!" 2540) ("mailbox-push-back!" 3011) ("mailbox-push-back-list!" 3172) ("make-mailbox-cursor" 3396) ("mailbox-cursor?" 3613) ("mailbox-cursor-mailbox" 3756) ("mailbox-cursor-next" 3930) ("mailbox-cursor-rewind" 4577) ("mailbox-cursor-extract-and-rewind" 4733) ("mailbox-cursor-rewound?" 5114))
(def (sig (procedure "(mailbox-timeout-exception? OBJECT) => BOOLEAN" (id mailbox-timeout-exception?))) (p "Is the " (tt "OBJECT") " a mailbox timeout exception?") (p "A mailbox timeout exception is a composite condition of " (tt "'exn") ", " (tt "'mailbox") ", and " (tt "'timeout") ", with properties of " (tt "'location") " and " (tt "'arguments") "."))
(def (sig (procedure "(make-mailbox [NAME]) => MAILBOX" (id make-mailbox))) (p "Returns a new mailbox object. " (tt "NAME") " is an optional symbol for this mailbox and defaults to some " (tt "gensym") "'d symbol."))
(def (sig (procedure "(mailbox? OBJECT) => BOOLEAN" (id mailbox?))) (p "Is the " (tt "OBJECT") " a " (tt "mailbox") "?"))
(def (sig (procedure "(mailbox-name MAILBOX) => SYMBOL" (id mailbox-name))) (p "Returns the name of the " (tt "MAILBOX") "."))
(def (sig (procedure "(mailbox-empty? MAILBOX) => BOOLEAN" (id mailbox-empty?))) (p "If there are no queued objects in the " (tt "MAILBOX") ", then this procedure returns " (tt "#t") ", otherwise it returns " (tt "#f") "."))
(def (sig (procedure "(mailbox-count MAILBOX) => NUMBER" (id mailbox-count))) (p "Returns the number of queued objects for the " (tt "MAILBOX") "."))
(def (sig (procedure "(mailbox-waiting? MAILBOX) => BOOLEAN" (id mailbox-waiting?))) (p "Is any thread waiting for the " (tt "MAILBOX") "?"))
(def (sig (procedure "(mailbox-waiters MAILBOX) => LIST" (id mailbox-waiters))) (p "Returns a list of the threads waiting for the " (tt "MAILBOX") "."))
(def (sig (procedure "(mailbox-send! MAILBOX X)" (id mailbox-send!))) (p "Queues the data object " (tt "X") ". If any threads exist that are waiting for input on " (tt "MAILBOX") ", the execution of the first one will be resumed. The data will be read out of a mailbox in the same order in which is written in (in FIFO manner)."))
(def (sig (procedure "(mailbox-receive! MAILBOX [TIMEOUT [DEFAULT]]) => OBJECT" (id mailbox-receive!))) (p "If there is any data in the " (tt "MAILBOX") ", then the first object will be removed and returned as the result. If the mailbox is currently empty, the current thread will suspended until data is available.") (p (tt "TIMEOUT") " is a " (link "http://srfi.schemers.org/srfi-18/srfi-18.html" "SRFI-18") " " (tt "time") " object or the real number of seconds.") (p "Should " (tt "TIMEOUT") " be specified and occur the " (tt "DEFAULT") ", if supplied, will be returned. Otherwise a mailbox timeout exception will be signaled for the calling thread. The " (tt "DEFAULT") " value cannot be " (tt "(void)") "."))
(def (sig (procedure "(mailbox-wait! MAILBOX [TIMEOUT])" (id mailbox-wait!))) (p "Similar to " (tt "mailbox-receive!") ", but does not remove the received result from the queue of pending data.") (p (tt "TIMEOUT") " is a " (link "http://srfi.schemers.org/srfi-18/srfi-18.html" "SRFI-18") " " (tt "time") " object or the real number of seconds.") (p "Should " (tt "TIMEOUT") " be specified and occur a mailbox timeout exception will be signaled for the calling thread."))
(def (sig (procedure "(mailbox-push-back! MAILBOX X)" (id mailbox-push-back!))) (p "Pushes the data object " (tt "X") " into the first position of a mailbox."))
(def (sig (procedure "(mailbox-push-back-list! MAILBOX XS)" (id mailbox-push-back-list!))) (p "Pushes the list of objects " (tt "XS") " back into the mailbox, so that " (tt "(car XS)") " becomes the next receivable item."))
(def (sig (procedure "(make-mailbox-cursor MAILBOX) => MAILBOX-CURSOR" (id make-mailbox-cursor))) (p "Returns an object which can enumerate a mailbox.") (p "Multiple cursors can scan, and mutate, the same mailbox."))
(def (sig (procedure "(mailbox-cursor? OBJECT) => BOOLEAN" (id mailbox-cursor?))) (p "Is the " (tt "OBJECT") " a " (tt "mailbox-cursor") "?"))
(def (sig (procedure "(mailbox-cursor-mailbox MAILBOX-CURSOR) => MAILBOX" (id mailbox-cursor-mailbox))) (p "Returns the mailbox object associated with the mailbox cursor."))
(def (sig (procedure "(mailbox-cursor-next MAILBOX-CURSOR [TIMEOUT [DEFAULT]]) => OBJECT" (id mailbox-cursor-next))) (p "Returns the next object in the mailbox queue, waiting if necessary.") (p "The mailbox queue is scanned from oldest to newest.") (p (tt "TIMEOUT") " is a " (link "http://srfi.schemers.org/srfi-18/srfi-18.html" "SRFI-18") " " (tt "time") " object or the real number of seconds.") (p "Should " (tt "TIMEOUT") " be specified and occur the " (tt "DEFAULT") ", if supplied, will be returned. Otherwise a mailbox timeout exception will be signaled for the calling thread. The " (tt "DEFAULT") " value cannot be " (tt "(void)") "."))
(def (sig (procedure "(mailbox-cursor-rewind MAILBOX-CURSOR)" (id mailbox-cursor-rewind))) (p "Position the cursor at the oldest message in the mailbox."))
(def (sig (procedure "(mailbox-cursor-extract-and-rewind MAILBOX-CURSOR)" (id mailbox-cursor-extract-and-rewind))) (p "Remove from the associated mailbox queue the last object returned by " (tt "mailbox-cursor-next") " and position the cursor at the oldest message in the mailbox.") (p "The extraction is not performed without a previous call to " (tt "mailbox-cursor-next") "."))
(def (sig (procedure "(mailbox-cursor-rewound? MAILBOX-CURSOR) => BOOLEAN" (id mailbox-cursor-rewound?))) (p "Is the " (tt "MAILBOX-CURSOR") " positioned at the start of the mailbox queue?"))

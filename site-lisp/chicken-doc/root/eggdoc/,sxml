((tags "eggs") (section 2 "eggdoc" (p "An egg documentation tool.") (toc) (section 3 "Overview" (p (b "Note to egg authors") ": Please don't document your eggs using eggdoc anymore! The canonical documentation source is the Chicken wiki, and wiki pages are the recommended way to document eggs.") (p "eggdoc is an SXML documentation tool which produces HTML pages for Chicken eggs.  It uses the sxml-transforms extension to transform your SXML via a comprehensive XML stylesheet, simplifying the creation of egg documentation.  It's also quite customizable.") (p "Other eggs, such as " (int-link "eggdoc-svnwiki") " and " (int-link "eggdoc-texinfo") ", can be loaded to transform your source document into other formats.")) (section 3 "API" (section 4 "Generic API" (def (sig (procedure "(eggdoc:transform DOC [STYLESHEET])" (id eggdoc:transform)) (procedure "(eggdoc->html DOC [STYLESHEET])" (id eggdoc->html))) (p "Transform the SXML document " (tt "DOC") " using the optional SXSLT stylesheet " (tt "STYLESHEET") ".  If not specified, the built-in stylesheet will be used, which is also accessible with " (tt "(eggdoc:make-stylesheet)") ".  Transformation output is displayed to " (tt "current-output-port") ".  Also returns the parse result as an alist (see " (tt "eggdoc:result") ").") (p "This is a generic transformer which by default outputs HTML, but can be overridden by other eggs (such as " (int-link "eggdoc-svnwiki") ") to output other formats.  By default, " (tt "eggdoc:transformer") " will invoke " (tt "eggdoc->html/really") ".") (p (tt "eggdoc->html") " is a deprecated alias to " (tt "eggdoc:transform") " and historically was the entry point to eggdoc.  The name is a misnomer, as it can be overridden to generate other formats.")) (def (sig (procedure "(eggdoc:make-stylesheet DOC)" (id eggdoc:make-stylesheet))) (p "Returns the default SXSLT stylesheet.  This is a procedure because the stylesheet is built dynamically using the contents of the SXML document " (tt "DOC") ".  For example, the value of the (name) tag is retrieved at build time and inserted in the header and the usage information.") (p "You can append to or modify this stylesheet and then pass it to " (tt "eggdoc->html") ".  This is done in doctype's eggdoc to provide a new tag, (strings), which makes the SXML much cleaner.") (p "This procedure invokes " (tt "eggdoc:make-html-stylesheet") " by default. However, it may be overridden by other eggs to return other stylesheet formats; for example, " (int-link "eggdoc-svnwiki") " may return an SXML->svnwiki stylesheet."))) (section 4 "HTML output API" (p "This is the underlying HTML output API used by the default " (tt "eggdoc:transform") " transformer.  Typically, it is not necessary to call these directly, although you might want to alter the HTML doctype or CSS.") (def (sig (procedure "(eggdoc:make-html-stylesheet DOC)" (id eggdoc:make-html-stylesheet))) (p "Returns the default SXML to HTML stylesheet.")) (def (sig (procedure "(eggdoc->html/really DOC)" (id eggdoc->html/really))) (p "Transform eggdoc to HTML using " (tt "eggdoc:make-html-stylesheet") ".  This procedure ensures you will get HTML output regardless of any transformer overrides.")) (def (sig (parameter "eggdoc:doctype" (id eggdoc:doctype))) (p "The DOCTYPE for this document, typically as defined in the doctype extension.  This defaults to doctype:xhtml-1.0-strict.")) (def (sig (parameter "eggdoc:css" (id eggdoc:css))) (p "CSS text inserted verbatim between the document's <style> tags.  This must be <!-- wrapped in HTML comments -->.  The default is quite reasonable.") (p "If you wish to source a CSS file instead of inserting the text directly, you can override the eggdoc-style tag in the default stylesheet to do so."))) (section 4 "Miscellaneous API" (def (sig (parameter "(eggdoc:warnings BOOL)" (id eggdoc:warnings))) (p "If " (tt "#t") ", warn on transformation errors.  If " (tt "#f") ", transformation error output is suppressed.  Defaults to " (tt "#t") ".")) (def (sig (procedure "(eggdoc:make-defsig TAG SIG . [BODY])" (id eggdoc:make-defsig))) (p "Use this procedure inside a stylesheet to generate a new signature tag, just like " (tt "procedure") " or " (tt "macro") ".  It expands to a " (tt "(definition (signatures (signature ...)))") " expression.  For example,") (pre "(eggdoc->html doc `( ,@(eggdoc:make-stylesheet doc)\n                     (constant *macro* . ,eggdoc:make-defsig)\n                     (method   *macro* . ,eggdoc:make-defsig) ))") (p "will create new " (tt "constant") " and " (tt "method") " tags."))) (section 4 "Internal API" (p "This API is used by eggs such as " (int-link "eggdoc-svnwiki") " to override the default output format.") (def (sig (parameter "eggdoc:default-stylesheet-maker" (id eggdoc:default-stylesheet-maker))) (p "The default stylesheet creator, invoked by " (tt "eggdoc:make-stylesheet") ". Defaults to " (tt "eggdoc:make-html-stylesheet") ".")) (def (sig (parameter "eggdoc:default-transformer" (id eggdoc:default-transformer))) (p "The default output transformer, invoked by " (tt "eggdoc:transform") " (and " (tt "eggdoc->html") ").  Defaults to " (tt "eggdoc->html/really") ".")) (def (sig (parameter "eggdoc:result" (id eggdoc:result))) (p "An alist containing the parse result for the last parse. The same value is returned from the eggdoc transformer, but some eggdoc scripts discard it.") (p "The only key currently defined is " (tt "name") ", which contains the egg name as derived by " (tt "eggdoc:derive-egg-name") ".")) (def (sig (procedure "(eggdoc:derive-egg-name DOC)" (id eggdoc:derive-egg-name))) (p "Get egg name from DOC from the " (tt "name") " element.  Implicitly adds a " (tt "(name NAME)") " association to " (tt "eggdoc:results") ".")))) (section 3 "Document structure" (section 4 "Subsections" (p "Document section tags must be nested in the order " (tt "section -> subsection -> subsubsection -> subsubsubsection") ".  You may not nest section tags of the same level, as in " (tt "(section \"name\" (section ...))") ", and you may not skip a level. " (tt "eggdoc") " won't complain if you violate these rules---the HTML driver is pretty lax---but the appearance will be off and " (tt "eggdoc-texinfo") " will fail on such a document.  " (tt "eggdoc-texinfo") " is more sensitive to malformed documents, so it is recommended to generate " (tt ".info") " and " (tt ".pdf") " output as well to ensure your document is correct.") (p (tt "documentation") ", " (tt "examples") ", and " (tt "license") " are " (tt "section") " tags in disguise.  In particular, " (tt "(documentation (section ...))") " is invalid; use " (tt "(documentation (subsection ...)).")))) (section 3 "Examples" (p "Complete examples for the Chicken extensions " (tt "args, doctype, eggdoc, hostinfo, sxml-tools, sxml-transforms,") " and " (tt "vector-lib") " are provided in the egg under src/.")) (section 3 "About this egg" (section 4 "Author" (p (link "http://3e8.org/" "Jim Ursetto"))) (section 4 "Version history" (dl (dt "1.3") (dd "transformer override mechanism") (dt "1.2") (dd (tt "eggdoc:make-defsig") "; subsub[sub]section tags; with-default-param tag") (dt "1.1") (dd "setup scripts adds documentation and version info [Thanks to Jim Miller]") (dt "1.0") (dd "Initial release"))) (section 4 "Requirements" (ul (li (int-link "sxml-transforms") ", " (int-link "doctype")))) (section 4 "License" (p "BSD.")))))
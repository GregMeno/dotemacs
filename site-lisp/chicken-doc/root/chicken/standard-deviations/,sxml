((tags "manual") (section 2 "Confirmed deviations" (p "Identifiers are by default case-sensitive (see " (int-link "Using the compiler") ").") (section 3 "Number of arguments to procedures and macros" (p "The maximal number of arguments that may be passed to a compiled procedure or macro is 120. (However, a macro-definition that has a single rest-parameter can have any number of arguments.) Likewise, the maximum number of values that can be passed to continuations captured using " (tt "call-with-current-continuation") " is 120.  This is an implementation restriction that is unlikely to be lifted.")) (section 3 ((tt "numerator") ", " (tt "denominator") " and " (tt "rationalize")) (p "The " (tt "numerator") " and " (tt "denominator") " procedures cannot be applied to inexact numbers, and the procedure " (tt "rationalize") " is not implemented at all.")) (section 3 "Numeric string-conversion considerations" (p "The runtime system uses the numerical string-conversion routines of the underlying C library and so does only understand standard (C-library) syntax for floating-point constants.  Consequently, the procedures " (tt "string->number") ", " (tt "read") ", " (tt "write") ", and " (tt "display") " do not obey read/write invariance to inexact numbers.")) (section 3 "Environments and non-standard syntax" (p "Code evaluated in " (tt "scheme-report-environment") " or " (tt "null-environment") " still sees non-standard syntax."))) (section 2 "Unconfirmed deviations" (section 3 (tt "char-ready?") (p "The procedure " (tt "char-ready?") " always returns " (tt "#t") " for terminal ports."))) (section 2 "Doubtful deviations" (section 3 (tt "letrec") (p (tt "letrec") " does evaluate the initial values for the bound variables sequentially and not in parallel, that is:") (highlight scheme "(letrec ((x 1) (y 2)) (cons x y))") (p "is equivalent to") (highlight scheme "(let ((x (void)) (y (void)))\n  (set! x 1)\n  (set! y 2)\n  (cons x y) )") (p "where R5RS requires") (highlight scheme "(let ((x (void)) (y (void)))\n  (let ((tmp1 1) (tmp2 2))\n    (set! x tmp1)\n    (set! y tmp2)\n    (cons x y) ) )") (p "It is unclear whether R5RS permits this behavior or not; in any case, this only affects letrecs where the bound values are not lambda-expressions."))) (section 2 "Non-deviations that might surprise you" (section 3 ((tt "let-syntax") " and " (tt "letrec-syntax")) (p (tt "let-syntax") " and " (tt "letrec-syntax") " introduce a new scope.")) (section 3 ((tt "equal?") " compares all structured data recursively") (p (tt "equal?") " compares all structured data recursively, while R5RS specifies that " (tt "eqv?") " is used for data other than pairs, strings and vectors.  However, R5RS does not dictate the treatment of data types that are not specified by R5RS.")) (section 3 "No built-in support for bignums" (p "There is no built-in support for exact rationals, complex numbers or extended-precision integers (bignums). The routines " (tt "complex?") ", " (tt "real?") " and " (tt "rational?") " are identical to the standard procedure " (tt "number?") ". The procedures " (tt "make-rectangular") " and " (tt "make-polar") " are not implemented. Fixnums are limited to 2^" (sup "30") " (or 2^" (sup "62") " on 64-bit hardware).  Support for the full numeric tower is available as a separate package, provided the GNU multiprecision library is installed.")) (section 3 ((tt "transcript-on") " and " (tt "transcript-off") " are not implemented") (p "The " (tt "transcript-on") " and " (tt "transcript-off") " procedures are not implemented.  R5RS does not require them.") (hr) (p "Previous: " (int-link "The R5RS standard")) (p "Next: " (int-link "Extensions to the standard")))))
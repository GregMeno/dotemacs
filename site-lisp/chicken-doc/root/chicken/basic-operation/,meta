(type unit)
(signature "Basic mode of operation")
(timestamp 1277272841.0)
(sxml ((tags "manual") (section 2 "Basic mode of operation" (p "The compiler translates Scheme source code into fairly portable C that can be compiled and linked with most available C compilers. CHICKEN supports the generation of executables and libraries, linked either statically or dynamically. Compiled Scheme code can be loaded dynamically, or can be embedded in applications written in other languages. Separate compilation of modules is fully supported.") (p "The most portable way of creating separately linkable entities is supported by so-called " (i "unit") "s.  A unit is a single compiled object module that contains a number of toplevel expressions that are executed either when the unit is the " (i "main") " unit or if the unit is " (i "used") ".  To use a unit, the unit has to be " (i "declare") "ed as used, like this:") (highlight scheme "(declare (uses UNITNAME))") (p "The toplevel expressions of used units are executed in the order in which the units appear in the " (tt "uses") " declaration. Units may be used multiple times and " (tt "uses") " declarations may be circular (the unit is initialized at most once).  To compile a file as a unit, add a " (tt "unit") " declaration:") (highlight scheme "(declare (unit UNITNAME))") (p "When compiling different object modules, make sure to have one main unit. This unit is called initially and initializes all used units before executing its toplevel expressions. The main-unit has no " (tt "unit") " declaration.") (p "Another method of using definitions in separate source files is to " (i "include") " them. This simply inserts the code in a given file into the current file:") (highlight scheme "(include \"FILENAME\")") (p "Macro definitions are only available when processed by " (tt "include") " or " (tt "import") ". Macro definitions in separate units are not available, since they are defined at compile time, i.e the time when that other unit was compiled (macros can optionally be available at runtime, see " (tt "define-syntax") " in " (int-link "Non-standard macros and special forms" "Substitution forms and macros") ").") (p "On platforms that support dynamic loading of compiled code (Windows, most ELF based systems like Linux or BSD, MacOS X, and others) code can be compiled into a shared object " (tt ".dll") ", " (tt ".so") ", " (tt ".dylib") ") and loaded dynamically into a running application.") (hr) (p "Previous: " (int-link "Getting started")) (p "Next: " (int-link "Using the compiler")))))

((tags "manual") (toc) (section 2 "Extensions" (section 3 "Extension libraries" (p "Extension libraries (" (i "eggs") ") are extensions to the core functionality provided by the basic CHICKEN system, to be built and installed separately.  The mechanism for loading compiled extensions is based on dynamically loadable code and as such is only available on systems on which loading compiled code at runtime is supported. Currently these are most UNIX-compatible platforms that provide the " (tt "libdl") " functionality like Linux, Solaris, BSD, Mac OS X and Windows using Cygwin.") (p "Note: Extension may also be normal applications or shell scripts, but are usually libraries.") (p "Extensions are technically nothing but dynamically loadable compiled files with added meta-data that describes dependencies to other extensions, version information and things like the author/maintainer of the extension. Three tools provide an easy to use interface for installing extensions, removing them and querying the current status of installed extensions.")) (section 3 "Installing extensions" (p "To install an extension library, run the " (tt "chicken-install") " program with the extension name as argument. The extension archive is downloaded, its contents extracted and the contained " (i "setup") " script is executed. This setup script is a normal Scheme source file, which will be interpreted by " (tt "chicken-install") ". The complete language supported by " (tt "csi") " is available, and the library units " (tt "srfi-1 regex utils posix tcp") " are loaded. Additional libraries can be loaded at run-time.") (p "The setup script should perform all necessary steps to build the new library (or application). After a successful build, the extension can be installed by invoking one of the procedures " (tt "install-extension") ", " (tt "install-program") " or " (tt "install-script") ".  These procedures will copy a number of given files into the local extension repository or in the path where the CHICKEN executables are located (in the case of executable programs or scripts). Additionally the list of installed files, and user-defined metadata is stored in the repository.") (p "If no extension name is given on the command-line, then all " (tt ".setup") " scripts in the current directory are processed, in the order given on the command line.") (section 4 "Installing extensions that use libraries" (p "Sometimes an extension requires a C library to compile. Compilation can fail when your system has this library in a nonstandard location. Normally the C compiler searches in the default locations " (tt "/usr") " and " (tt "/usr/local") ", and in the prefix where Chicken itself was installed. Sometimes this is not enough, so you'll need to supply " (tt "chicken-install") " with some extra hints to the C compiler/linker. Here's an example:") (pre " CSC_OPTIONS='-I/usr/pkg/include/mysql -L/usr/pkg/lib/mysql -L -R/usr/pkg/lib/mysql' chicken-install mysql") (p "This installs the mysql egg with the extra compiler options -I and -L to set the include path and the library search path. The second -L switch passes the -R option directly to the linker, which causes the library path to get hardcoded into the resulting extension file (for systems that do not use " (tt "ld.so.conf") ")."))) (section 3 "Creating extensions" (p "Extensions can be created by creating an (optionally gzipped) " (tt "tar") " archive named " (tt "EXTENSION.egg") " containing all needed files plus a " (tt ".setup") " script in the root directory.  After " (tt "chicken-install") " has extracted the files, the setup script will be invoked. There are no additional constraints on the structure of the archive, but the setup script has to be in the root path of the archive.") (p "For more details on creating extensions, see the " (int-link "/eggs tutorial" "eggs tutorial") ".")) (section 3 "Procedures and macros available in setup scripts" (section 4 "install-extension" (def (sig (procedure "(install-extension ID FILELIST [INFOLIST])" (id install-extension))) (p "Installs the extension library with the name " (tt "ID") ". All files given in the list of strings " (tt "FILELIST") " will be copied to the extension repository. It should be noted here that the extension id has to be identical to the name of the file implementing the extension. The extension may load or include other files, or may load other extensions at runtime specified by the " (tt "require-at-runtime") " property.") (p (tt "FILELIST") " may be a filename, a list of filenames, or a list of pairs of the form " (tt "(SOURCE DEST)") " (if you want to copy into a particular sub-directory - the destination directory will be created as needed). If " (tt "DEST") " is a relative pathname, it will be copied into the extension repository.") (p "The optional argument " (tt "INFOLIST") " should be an association list that maps symbols to values, this list will be stored as " (tt "ID.setup-info") " at the same location as the extension code. Currently the following properties are used:")) (section 5 "syntax" (pre "[extension property] (syntax)") (p "Marks the extension as syntax-only. No code is compiled, the extension is intended as a file containing macros to be loaded at compile/macro-expansion time.")) (section 5 "require-at-runtime" (pre "[extension property] (require-at-runtime ID ...)") (p "Specifies extensions that should be loaded (via " (tt "require") ") at runtime. This is mostly useful for syntax extensions that need additional support code at runtime.")) (section 5 "import-only" (pre " [extension property] (import-only)") (p "Specifies that this extension only provides a expansion-time code in an import library and does not require code to be loaded at runtime.")) (section 5 "version" (pre "[extension property] (version STRING)") (p "Specifies version string.")) (section 5 "static" (pre "[extension property] (static STRING)") (p "If the extension also provides a static library, then STRING should contain the name of that library. Used by " (tt "csc") " when compiling with the " (tt "-static-extension") " option.")) (section 5 "static-options" (pre "[extension property] (static-options STRING)") (p "Additional options that should be passed to the linker when linking with the static version of an extension (see " (tt "static") " above). Used by " (tt "csc") " when compiling with the " (tt "-static-extension") " option.") (p "All other properties are currently ignored. The " (tt "FILELIST") " argument may also be a single string."))) (section 4 "install-program" (def (sig (procedure "(install-program ID FILELIST [INFOLIST])" (id install-program))) (p "Similar to " (tt "install-extension") ", but installs an executable program in the executable path (usually " (tt "/usr/local/bin") ")."))) (section 4 "install-script" (def (sig (procedure "(install-script ID FILELIST [INFOLIST])" (id install-script))) (p "Similar to " (tt "install-program") ", but additionally changes the file permissions of all files in " (tt "FILELIST") " to executable (for installing shell-scripts)."))) (section 4 "standard-extension" (def (sig (procedure "(standard-extension ID VERSION #!key static info)" (id standard-extension))) (p "A convenience procedure that combines the compilation and installation of a simple single-file extension. This is roughly equivalent to:") (pre " (compile -s -O2 -d1 ID.scm -j ID)\n (compile -c -O2 -d1 ID.scm -j ID -unit ID)  ; if STATIC is not given or true\n (compile -s -O2 -d0 ID.import.scm)\n \n (install-extension\n  'ID\n  '(\"ID.o\" \"ID.so\" \"ID.import.so\")\n  '((version 1.0)\n    ... `INFO' ...\n    (static \"ID.o\")))   ; if `static' is given and true") (p (tt "VERSION") " may be " (tt "#f") ", in that case the version obtained from where the extension has been retrieved wil be taken. If installed directly from a local directory, the version will default to " (tt "\"unknown\"") "."))) (section 4 "run" (def (sig (syntax "(run FORM ...)" (id run))) (p "Runs the shell command " (tt "FORM") ", which is wrapped in an implicit " (tt "quasiquote") ". " (tt "(run (csc ...))") " is treated specially and passes " (tt "-v") " (if " (tt "-verbose") " has been given to " (tt "chicken-install") ") and " (tt "-feature compiling-extension") " options to the compiler."))) (section 4 "compile" (def (sig (syntax "(compile FORM ...)" (id compile))) (p "Equivalent to " (tt "(run (csc FORM ...))") "."))) (section 4 "make" (def (sig (syntax "(make ((TARGET (DEPENDENT ...) COMMAND ...) ...) ARGUMENTS)" (id make))) (p "A " (i "make") " macro that executes the expressions " (tt "COMMAND ...") ", when any of the dependents " (tt "DEPENDENT ...") " have changed, to build " (tt "TARGET") ". This is the same as the " (tt "make") " extension, which is available separately. For more information, see " (link "http://wiki.call-cc.org/egg/make" "make") "."))) (section 4 "patch" (def (sig (procedure "(patch WHICH REGEX SUBST)" (id patch))) (p "Replaces all occurrences of the regular expression " (tt "REGEX") " with the string " (tt "SUBST") ", in the file given in " (tt "WHICH") ". If " (tt "WHICH") " is a string, the file will be patched and overwritten. If " (tt "WHICH") " is a list of the form " (tt "OLD NEW") ", then a different file named " (tt "NEW") " will be generated."))) (section 4 "copy-file" (def (sig (procedure "(copy-file FROM TO)" (id copy-file))) (p "Copies the file or directory (recursively) given in the string " (tt "FROM") " to the destination file or directory " (tt "TO") "."))) (section 4 "move-file" (def (sig (procedure "(move-file FROM TO)" (id move-file))) (p "Moves the file or directory (recursively) given in the string " (tt "FROM") " to the destination file or directory " (tt "TO") "."))) (section 4 "remove-file*" (def (sig (procedure "(remove-file* PATH)" (id remove-file*))) (p "Removes the file or directory given in the string " (tt "PATH") ", if it exists."))) (section 4 "find-library" (def (sig (procedure "(find-library NAME PROC)" (id find-library))) (p "Returns " (tt "#t") " if the library named " (tt "libNAME.[a|so]") " (unix) or " (tt "NAME.lib") " (windows) could be found by compiling and linking a test program. " (tt "PROC") " should be the name of a C function that must be provided by the library. If no such library was found or the function could not be resolved, " (tt "#f") " is returned."))) (section 4 "find-header" (def (sig (procedure "(find-header NAME)" (id find-header))) (p "Returns " (tt "#t") " if a C include-file with the given name is available, or " (tt "#f") " otherwise."))) (section 4 "try-compile" (def (sig (procedure "(try-compile CODE #!key cc cflags ldflags compile-only c++)" (id try-compile))) (p "Returns " (tt "#t") " if the C code in " (tt "CODE") " compiles and links successfully, or " (tt "#f") " otherwise. The keyword parameters " (tt "cc") " (compiler name, defaults to the C compiler used to build this system), " (tt "cflags") " and " (tt "ldflags") " accept additional compilation and linking options. If " (tt "compile-only") " is true, then no linking step takes place. If the keyword argument " (tt "c++") " is given and true, then the code will be compiled in C++ mode."))) (section 4 "create-directory/parents" (def (sig (procedure "(create-directory/parents PATH)" (id create-directory/parents))) (p "Creates the directory given in the string " (tt "PATH") ", with all parent directories as needed."))) (section 4 "extension-name-and-version" (def (sig (parameter "extension-name-and-version" (id extension-name-and-version))) (p "Returns a list containing the name and version of the currently installed extension as strings. If the setup script is not invoked via " (tt "chicken-install") ", then name and version will be empty."))) (section 4 "version>=?" (def (sig (procedure "(version>=? V1 V2)" (id version>=?))) (p "Compares the version numbers " (tt "V1") " and " (tt "V2") " and returns " (tt "#t") " if " (tt "V1") " is \"less\" than " (tt "V2") " or " (tt "#f") " otherwise. A version number can be an integer, a floating-point number or a string. " (tt "version>=?") " handles dot-separated version-indicators of the form " (tt "\"X.Y. ..\"") ".") (p "If one version number is the prefix of the other, then the shorter version is considered \"less\" than the longer."))) (section 4 "installation-prefix" (def (sig (procedure "(installation-prefix)" (id installation-prefix))) (p "An alternative installation prefix that will be prepended to extension installation paths if specified. It is set by the " (tt "-prefix") " option or environment variable " (tt "CHICKEN_INSTALL_PREFIX") "."))) (section 4 "program-path" (def (sig (parameter "(program-path [PATH])" (id program-path))) (p "Holds the path where executables are installed and defaults to either " (tt "$CHICKEN_PREFIX/bin") ", if the environment variable " (tt "CHICKEN_PREFIX") " is set or the path where the CHICKEN binaries (" (tt "chicken") ", " (tt "csi") ", etc.) are installed."))) (section 4 "setup-root-directory" (def (sig (parameter "(setup-root-directory [PATH])" (id setup-root-directory))) (p "Contains the path of the directory where " (tt "chicken-install") " was invoked."))) (section 4 "setup-install-mode" (def (sig (parameter "(setup-install-mode [BOOL])" (id setup-install-mode))) (p "Reflects the setting of the " (tt "-no-install") " option, i.e. is " (tt "#f") ", if " (tt "-no-install") " was given to " (tt "chicken-install") "."))) (section 4 "required-chicken-version" (def (sig (procedure "(required-chicken-version VERSION)" (id required-chicken-version))) (p "Signals an error if the version of CHICKEN that this script runs under is lexicographically less than " (tt "VERSION") " (the argument will be converted to a string, first)."))) (section 4 "required-extension-version" (def (sig (procedure "(required-extension-version EXTENSION1 VERSION1 ...)" (id required-extension-version))) (p "Checks whether the extensions " (tt "EXTENSION1 ...") " are installed and at least of version " (tt "VERSION1 ...") ". The test is made by lexicographically comparing the string-representations of the given version with the version of the installed extension. If one of the listed extensions is not installed, has no associated version information or is of a version older than the one specified."))) (section 4 "host-extension" (def (sig (parameter "host-extension" (id host-extension))) (p "For a cross-compiling CHICKEN, when compiling an extension, then it should be built for the host environment (as opposed to the target environment). This parameter is controlled by the " (tt "-host") " command-line option. A setup script should perform the proper steps of compiling any code by passing " (tt "-host") " when invoking " (tt "csc") " or using the " (tt "compile") " macro.")))) (section 3 "Examples for extensions" (section 4 "A simple library" (p "The simplest case is a single file that does not export any syntax. For example") (highlight scheme ";;;; hello.scm\n\n(define (hello name)\n  (print \"Hello, \" name \" !\") )") (p "We need a " (tt ".setup") " script to build and install our nifty extension:") (highlight scheme ";;;; hello.setup\n\n;; compile the code into a dynamically loadable shared object\n;; (will generate hello.so)\n(compile -s hello.scm)\n\n;; Install as extension library\n(install-extension 'hello \"hello.so\")") (p "Lastly, we need a file " (tt "hello.meta") " defining a minimal set of properties:") (highlight scheme ";;;; hello.meta\n\n((author \"Me\")\n (synopsis \"A cool hello-world library\")\n (license \"GPLv3\"))") (p "(for more information about available properties, see " (int-link "/Metafile reference" "the metafile reference") ")") (p "After entering") (pre "$ chicken-install") (p "at the shell prompt (and in the same directory where the two files exist), the file " (tt "hello.scm") " will be compiled into a dynamically loadable library. If the compilation succeeds, " (tt "hello.so") " will be stored in the repository, together with a file named " (tt "hello.setup-info") " containing an a-list with metadata (what you stored above in " (tt "hello.meta") "). If no extension name is given to " (tt "chicken-install") ", it will simply execute the any files with the " (tt ".setup") " extension it can find.") (p "Use it like any other CHICKEN extension:") (pre "$ csi -q\n#;1> (require-library hello)\n; loading /usr/local/lib/chicken/4/hello.so ...\n#;2> (hello \"me\")\nHello, me!\n#;3>")) (section 4 "An application" (p "Here we create a simple application:") (highlight scheme ";;;; hello2.scm\n\n(print \"Hello, \")\n(for-each (lambda (x) (printf \"~A \" x)) (command-line-arguments))\n(print \"!\")") (p "We also need a setup script:") (highlight scheme ";;;; hello2.setup\n\n(compile hello2.scm)  ; compile `hello2'\n(install-program 'hello2 \"hello2\") ; name of the extension and files to be installed") (highlight scheme ";;;; hello2.meta\n\n((author \"Me\")\n (synopsis \"A cool hello-world application\")\n (license \"proprietary\"))") (p "To use it, just run " (tt "chicken-install") " in the same directory:") (pre "$ chicken-install") (p "(Here we omit the extension name)") (p "Now the program " (tt "hello2") " will be installed in the same location as the other CHICKEN tools (like " (tt "chicken") ", " (tt "csi") ", etc.), which will normally be " (tt "/usr/local/bin") ".  Note that you need write-permissions for those locations and may have to run " (tt "chicken-install") " with administrative rights or use the " (tt "-sudo") " option.") (p "The extension can be used from the command line:") (pre "$ hello2 one two three\nHello, \none two three !") (p "De-installation is just as easy - use the " (tt "chicken-uninstall") " program to remove one or more extensions from the local repository:") (pre "$ chicken-uninstall hello2")) (section 4 "A module exporting syntax" (p "The hello module was just a shared library, and not a module.") (p "To create an extension that exports syntax see the chapter on " (link "http://wiki.call-cc.org/man/4/Modules%20and%20macros" "Modules and macros") ".  We will show a simple example here: a module " (tt "my-lib") " that exports one macro (" (tt "prog1") ") and one procedure (" (tt "my-sum") "):") (highlight scheme ";;; my-lib.scm\n\n(module my-lib\n  *\n  (import scheme chicken)\n\n(define-syntax prog1\n  (syntax-rules ()\n    ((_ e1 e2 ...)\n     (let ((result e1))\n       (begin e2 ...)\n       result))))\n\n(define my-sum\n  (lambda (numbers)\n    (prog1\n      (apply + numbers)\n      (display \"my-sum used one more time!\")\n      (newline))))\n\n)") (p "The " (tt "prog1") " macro is similar to Common Lisp's " (tt "prog1") ": it evaluates a list of forms, but returns the value of the first form.") (p "The meta file:") (highlight scheme ";;; my-lib.meta\n\n((licence \"BSD\")\n (author \"Me again\")\n (synopsis \"My own cool libraries\"))") (p "The setup file is:") (highlight scheme ";;; my-lib.setup\n\n(compile -s -O3 -d1 \"my-lib.scm\" -j my-lib)\n(compile -c -O3 -d1 \"my-lib.scm\" -unit my-lib)\n(compile -s -O3 -d0 \"my-lib.import.scm\")\n\n(install-extension\n 'my-lib\n '(\"my-lib.o\" \"my-lib.so\" \"my-lib.import.so\")\n '((version 1.0)\n   (static \"my-lib.o\")))") (p "The first line tells the compiler to create a shared (" (tt "-s") ") library and to create an import file (" (tt "my-lib.import.scm") ", because of the " (tt "-j") " flag).  The second line creates a static library " (tt "my-lib.o") ". The third line compiles the import file created by the first one.") (p "IMPORTANT: the module name exported by my-lib.scm must be the same module name passed to the compiler using the -j option, otherwise the imports file will not be generated!") (p "Running " (tt "chicken-install") " on the same directory will install the extension.") (p "Next, it should be possible to load the library:") (pre "$ csi -q\n#;1> (use my-lib)\n; loading /usr/local/lib/chicken/5/my-lib.import.so ...\n; loading /usr/local/lib/chicken/5/scheme.import.so ...\n; loading /usr/local/lib/chicken/5/chicken.import.so ...\n; loading /usr/local/lib/chicken/5/my-lib.so ...\n#;2> (my-sum '(10 20 30))\nmy-sum used one more time!\n60\n#;3> (my-sum '(-1 1 0))\nmy-sum used one more time!\n0\n#;4> (prog1 (+ 2 2) (print \"---\"))\n---\n4")) (section 4 "Notes on chicken-install" (p "When running " (tt "chicken-install") " with an argument " (tt "NAME") ", for which no associated " (tt ".setup") " file exists, then it will try to download the extension via HTTP from the CHICKEN code repository at " (link "http://code.call-cc.org/svn/chicken-eggs/") ". Extensions that are required to compile and/or use the requested extension are downloaded and installed automatically.") (p "To query the list of currently installed extensions, use " (tt "chicken-status") ". It can list what extensions are installed and what files belong to a particular installed extension."))) (section 3 "chicken-install reference" (p "Available options:") (dl (dt (tt "-h   -help")) (dd "show this message and exit") (dt (tt "-v   -version")) (dd "show version and exit") (dt (tt "-force")) (dd "don't ask, install even if versions don't match") (dt (tt "-k   -keep")) (dd "keep temporary files") (dt (tt "-l   -location LOCATION")) (dd "install from given location instead of default") (dt (tt "-t   -transport TRANSPORT")) (dd "use given transport instead of default") (dt (tt "-proxy HOST[:PORT]")) (dd "connect via HTTP proxy") (dt (tt "-s   -sudo")) (dd "use " (tt "sudo(1)") " for installing or removing files") (dt (tt "-r   -retrieve")) (dd "only retrieve egg into current directory, don't install") (dt (tt "-n   -no-install")) (dd "do not install, just build (implies " (tt "-keep") ")") (dt (tt "-p   -prefix PREFIX")) (dd "change installation prefix to " (tt "PREFIX")) (dt (tt "-host")) (dd "when cross-compiling, compile extension for host only") (dt (tt "-target")) (dd "when cross-compiling, compile extension for target only") (dt (tt "-test")) (dd "run included test-cases, if available") (dt (tt "-username USER")) (dd "set username for transports that require this") (dt (tt "-password PASS")) (dd "set password for transports that require this") (dt (tt "-i   -init DIRECTORY")) (dd "initialize empty alternative repository") (dt (tt "-u   -update-db")) (dd "update export database") (dt (tt "-repository")) (dd "print path to extension repository") (dt (tt "-deploy")) (dd "install extension in the application directory for a deployed application (see " (int-link "Deployment") " for more information)") (dt (tt "-trunk")) (dd "build trunk instead of tagged version (only local)") (dt (tt "-D   -feature FEATURE")) (dd "pass this on to subinvocations of " (tt "csi") " and " (tt "csc") " (when done via " (tt "compile") " or " (tt "(run (csc ...))") ")") (dt (tt "-debug")) (dd "print full call-trace when encountering errors in the setup script") (dt (tt "-keep-going")) (dd "continue installation, even if a dependency fails")) (p (tt "chicken-install") " recognizes the " (tt "http_proxy") " environment variable, if set.")) (section 3 "chicken-uninstall reference" (dl (dt (tt "-h   -help")) (dd "show usage information and exit") (dt (tt "-v   -version")) (dd "show version and exit") (dt (tt "-force")) (dd "don't ask, delete whatever matches") (dt (tt "-s   -sudo")) (dd "use " (tt "sudo(1)") " for deleting files") (dt (tt "-host")) (dd "when cross-compiling, remove extensions for host system only") (dt (tt "-target")) (dd "when cross-compiling, remove extensions for target system only") (dt (tt "-exact")) (dd "match extension-name exactly (do not match as pattern)"))) (section 3 "chicken-status reference" (dl (dt (tt "-h   -help")) (dd "show usage information and exit") (dt (tt "-v   -version")) (dd "show version and exit") (dt (tt "-f   -files")) (dd "list installed files") (dt (tt "-host")) (dd "when cross-compiling, show extensions for host system only") (dt (tt "-target")) (dd "when cross-compiling, show extensions for target system only") (dt (tt "-exact")) (dd "match extension-name exactly (do not match as pattern)"))) (section 3 "Security" (p "When extensions are downloaded and installed one is executing code from potentially compromised systems. This applies also when " (tt "chicken-install") " executes system tests for required extensions. As the code has been retrieved over the network effectively untrusted code is going to be evaluated. When " (tt "chicken-install") " is run as " (i "root") " the whole system is at the mercy of the build instructions (note that this is also the case every time you install software via " (tt "sudo make install") ", so this is not specific to the CHICKEN extension mechanism).") (p "Security-conscious users should never run " (tt "chicken-install") " as root. A simple remedy is to keep the repository inside a user's home directory (see the section \"Changing repository location\" below). Alternatively obtain write/execute access to the default location of the repository (usually " (tt "/usr/local/lib/chicken") ") to avoid running as root. " (tt "chicken-install") " also provides a " (tt "-sudo") " option to perform the last installation steps as root user, but do building and other .setup script processing as normal. A third solution is to override " (tt "VARDIR") " when building the system (for example by passing " (tt "\"VARDIR=/foo/bar\"") " on the make command line, or by modifying " (tt "config.make") ". Eggs will then be installed in " (tt "$(VARDIR)/chicken/5") ".")) (section 3 "Changing repository location" (p "When Chicken is installed a repository for eggs is created and initialized in a default location (usually something like " (tt "/usr/local/lib/chicken/5/") "). It is possible to keep an eggs repository in another location. This can be configured at build-time by passing " (tt "VARDIR=<directory>") " to " (tt "make(3)") " or by modifying the " (tt "config.make") " configuration file. If you want to override this location after chicken is installed, you can create an initial repository directory with some default extensions and set the " (tt "CHICKEN_REPOSITORY") " environment variable:") (p "First, initialize the new repository with") (pre " chicken-install -init ~/myeggs/lib/chicken/5") (p "Then set this environment variable:") (pre " export CHICKEN_REPOSITORY=~/myeggs/lib/chicken/5") (p (tt "CHICKEN_REPOSITORY") " is the place where extensions are to be loaded from for all chicken-based programs (which includes all the tools).") (p "You can install eggs with") (pre " chicken-install -p ~/myeggs <package>") (p "See that the argument to chicken-install is just " (tt "~/myeggs") ", while everywhere else it's " (tt "~/myeggs/lib/chicken/5") ".") (p "When you load eggs from the interpreter, you will see messages showing where libraries are being loaded from:") (pre "#;1> (use numbers)\n; loading /home/jdoe/myeggs/lib/chicken/5/numbers.import.so ...\n; loading /home/jdoe/myeggs/lib/chicken/5/scheme.import.so ...\n; loading /home/jdoe/myeggs/lib/chicken/5/chicken.import.so ...\n; loading /home/jdoe/myeggs/lib/chicken/5/foreign.import.so ...\n; loading /home/jdoe/myeggs/lib/chicken/5/regex.import.so ...\n; loading /home/jdoe/myeggs/lib/chicken/5/numbers.so ...\n#;2> ")) (section 3 "Other modes of installation" (p "It is possible to install extensions directly from a " (link "http://subversion.apache.org/" "Subversion") " repository or from a local checkout of the repository tree by using the " (tt "-transport") " and " (tt "-location") " options when invoking " (tt "chicken-install") ". Three possible transport mechanisms are currently supported:") (dl (dt (tt "http")) (dd "download extension sources via HTTP from a web-server (this is the default)") (dt (tt "svn")) (dd "perform an " (tt "svn export") " from the central extension repository; this will require a " (tt "svn(1)") " client to be installed on the machine") (dt (tt "local")) (dd "use sources from the local filesystem and build directly in the source directory")) (p "The " (tt "-location") " option specifies where to look for the source repository and names a web URL, a subversion repository URL or a filesystem path, respectively. A list of locations to try when retrieving extensions is stored in the file " (tt "setup.defaults") " (usually installed in " (tt "/usr/local/share/chicken") "). For " (tt "http") " transports, " (tt "chicken-install") " will detect networking timeouts and try alternative locations, as listed in the file.") (p "Dependency information, which is necessary to ensure required extensions are also installed, is processed automatically.")) (section 3 "Linking extensions statically" (p "The compiler and " (tt "chicken-install") " support statically linked eggs. The general approach is to generate an object file or static library (in addition to the usual shared library) in your " (tt ".setup") " script and install it along with the dynamically loadable extension. The setup properties " (tt "static") " should contain the name of the object file (or static library) to be linked, when " (tt "csc") " gets passed the " (tt "-static-extension") " option:") (highlight scheme " (compile -s -O2 -d1 my-ext.scm)   ; dynamically loadable \"normal\" version\n (compile -c -O2 -d1 my-ext -unit my-ext)  ; statically linkable version\n (install-extension\n   'my-ext\n   '(\"my-ext.so\" \"my-ext.o\")\n   '((static \"my-ext.o\")) )") (p "Note the use of the " (tt "-unit") " option in the second compilation step: static linking must use static library units. " (tt "chicken-install") " will perform platform-dependent file-extension translation for the file list, but does currently not do that for the " (tt "static") " extension property.") (p "To actually link with the static version of " (tt "my-ext") ", do:") (pre "% csc -static-extension my-ext my-program.scm") (p "The compiler will try to do the right thing, but can not handle all extensions, since the ability to statically link eggs is relatively new. Eggs that support static linking are designated as being able to do so. If you require a statically linkable version of an egg that has not been converted yet, contact the extension author or the CHICKEN mailing list.") (hr) (p "Previous: " (int-link "Interface to external functions and variables")) (p "Next: " (int-link "Deployment")))))
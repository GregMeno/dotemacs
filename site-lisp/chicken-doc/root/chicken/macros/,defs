(index ("define-syntax" 0) ("syntax" 1467) ("strip-syntax" 1626))
(def (sig (syntax "(define-syntax IDENTIFIER TRANSFORMER)" (id define-syntax))) (p "Defines a macro named " (tt "IDENTIFIER") " that will transform an expression with " (tt "IDENTIFIER") " in operator position according to " (tt "TRANSFORMER") ". The transformer expression must be a procedure with three arguments or a " (tt "syntax-rules") " form. If " (tt "syntax-rules") " is used, the usual R5RS semantics apply. If " (tt "TRANSFORMER") " is a procedure, then it will be called on expansion with the complete s-expression of the macro invocation, a rename procedure that hygienically renames identifiers and a comparison procedure that compares (possibly renamed) identifiers (see the section \"Explicit renaming macros\" below for a detailed explanation on non-R5RS macros).") (p (tt "define-syntax") " may be used to define local macros that are visible throughout the rest of the body in which the definition occurred, i.e.") (pre " (let ()\n   ...\n   (define-syntax foo ...)\n   (define-syntax bar ...)\n   ...)") (p "is expanded into") (pre " (let ()\n   ...\n   (letrec-syntax ((foo ...) (bar ...))\n     ...) )") (p (tt "syntax-rules") " partially supports " (link "http://srfi.schemers.org/srfi-46/" "SRFI-46") " in allowing the ellipsis identifier to be user-defined by passing it as the first argument to the " (tt "syntax-rules") " form.") (p "The effect of destructively modifying the s-expression passed to a transformer procedure is undefined."))
(def (sig (syntax "(syntax EXPRESSION)" (id syntax))) (p "Similar to " (tt "quote") " but retains syntactical context information for embedded identifiers."))
(def (sig (procedure "(strip-syntax EXPRESSION)" (id strip-syntax))) (p "Strips all syntactical information from " (tt "EXPRESSION") ", returning a new expression where symbols have all context-information removed."))

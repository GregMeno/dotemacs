(index ("tcp-listen" 0) ("tcp-listener?" 453) ("tcp-close" 614) ("tcp-accept" 742) ("tcp-accept-ready?" 1596) ("tcp-listener-port" 1791) ("tcp-listener-fileno" 2035) ("tcp-connect" 2188) ("tcp-addresses" 3513) ("tcp-port-numbers" 3937) ("tcp-abandon-port" 4298) ("tcp-buffer-size" 4504) ("tcp-read-timeout" 5281) ("tcp-write-timeout" 5625) ("tcp-connect-timeout" 5973) ("tcp-accept-timeout" 6316))
(def (sig (procedure "(tcp-listen TCPPORT [BACKLOG [HOST]])" (id tcp-listen))) (p "Creates and returns a TCP listener object that listens for connections on " (tt "TCPPORT") ", which should be an exact integer. " (tt "BACKLOG") " specifies the number of maximally pending connections (and defaults to 4). If the optional argument " (tt "HOST") " is given and not " (tt "#f") ", then only incoming connections for the given host (or IP) are accepted."))
(def (sig (procedure "(tcp-listener? X)" (id tcp-listener?))) (p "Returns " (tt "#t") " if " (tt "X") " is a TCP listener object, or " (tt "#f") " otherwise."))
(def (sig (procedure "(tcp-close LISTENER)" (id tcp-close))) (p "Reclaims any resources associated with " (tt "LISTENER") "."))
(def (sig (procedure "(tcp-accept LISTENER)" (id tcp-accept))) (p "Waits until a connection is established on the port on which " (tt "LISTENER") " is listening and returns two values: an input- and output-port that can be used to communicate with the remote process. The current value of " (tt "tcp-accept-timeout") " is used to determine the maximal number of milliseconds (if any) to wait until a connection is established. When a client connects any read- and write-operations on the returned ports will use the current values (at the time of the connection) of " (tt "tcp-read-timeout") " and " (tt "tcp-write-timeout") ", respectively, to determine the maximal number of milliseconds to wait for input/output before a timeout error is signalled.") (p "Note: this operation and any I/O on the ports returned will not block other running threads."))
(def (sig (procedure "(tcp-accept-ready? LISTENER)" (id tcp-accept-ready?))) (p "Returns " (tt "#t") " if there are any connections pending on " (tt "LISTENER") ", or " (tt "#f") " otherwise."))
(def (sig (procedure "(tcp-listener-port LISTENER)" (id tcp-listener-port))) (p "Returns the port number assigned to " (tt "LISTENER") " (If you pass " (tt "0") " to " (tt "tcp-listen") ", then the system will choose a port-number for you)."))
(def (sig (procedure "(tcp-listener-fileno LISTENER)" (id tcp-listener-fileno))) (p "Returns the file-descriptor associated with " (tt "LISTENER") "."))
(def (sig (procedure "(tcp-connect HOSTNAME [TCPPORT])" (id tcp-connect))) (p "Establishes a client-side TCP connection to the machine with the name " (tt "HOSTNAME") " (a string) at " (tt "TCPPORT") " (an exact integer) and returns two values: an input- and output-port for communicating with the remote process. The current value of " (tt "tcp-connect-timeout") " is used to determine the maximal number of milliseconds (if any) to wait until the connection is established. When the connection takes place any read- and write-operations on the returned ports will use the current values (at the time of the call to " (tt "tcp-connect") ") of " (tt "tcp-read-timeout") " and " (tt "tcp-write-timeout") ", respectively, to determine the maximal number of milliseconds to wait for input/output before a timeout error is signalled.") (p "If the " (tt "TCPPORT") " is omitted, the port is parsed from the " (tt "HOSTNAME") " string.  The format expected is " (tt "HOSTNAME:PORT") ".  The " (tt "PORT") " can either be a string representation of an integer or a service name which is translated to an integer using the POSIX function " (link "http://www.opengroup.org/onlinepubs/009695399/functions/getservbyname.html" ((tt "getservbyname"))) ".") (p "Note: any I/O on the ports returned will not block other running threads."))
(def (sig (procedure "(tcp-addresses PORT)" (id tcp-addresses))) (p "Returns two values for the input- or output-port " (tt "PORT") " (which should be a port returned by either " (tt "tcp-accept") " or " (tt "tcp-connect") "): the IP address of the local and the remote machine that are connected over the socket associated with " (tt "PORT") ". The returned addresses are strings in " (tt "XXX.XXX.XXX.XXX") " notation."))
(def (sig (procedure "(tcp-port-numbers PORT)" (id tcp-port-numbers))) (p "Returns two values for the input- or output-port " (tt "PORT") " (which should be a port returned by either " (tt "tcp-accept") " or " (tt "tcp-connect") "): the TCP port numbers of the local and the remote machine that are connected over the socket associated with " (tt "PORT") "."))
(def (sig (procedure "(tcp-abandon-port PORT)" (id tcp-abandon-port))) (p "Marks the socket port " (tt "PORT") " as abandoned. This is mainly useful to close down a port without breaking the connection."))
(def (sig (parameter "tcp-buffer-size" (id tcp-buffer-size))) (p "Sets the size of the output buffer. By default no output-buffering for TCP output is done, but to improve performance by minimizing the number of TCP packets, buffering may be turned on by setting this parameter to an exact integer greater zero. A buffer size of zero or " (tt "#f") " turns buffering off. The setting of this parameter takes effect at the time when the I/O ports for a particular socket are created, i.e. when " (tt "tcp-connect") " or " (tt "tcp-accept") " is called.") (p "Note that since output is not immediately written to the associated socket, you may need to call " (tt "flush-output") ", once you want the output to be transmitted. Closing the output port will flush automatically."))
(def (sig (parameter "tcp-read-timeout" (id tcp-read-timeout))) (p "Determines the timeout for TCP read operations in milliseconds. A timeout of " (tt "#f") " disables timeout checking. The default read timeout is 60000, i.e. 1 minute. If timeout occurs while reading, a condition object of kinds " (tt "(exn i/o net timeout)") " is thrown."))
(def (sig (parameter "tcp-write-timeout" (id tcp-write-timeout))) (p "Determines the timeout for TCP write operations in milliseconds. A timeout of " (tt "#f") " disables timeout checking. The default write timeout is 60000, i.e. 1 minute. If timeout occurs while writing, a condition object of kinds " (tt "(exn i/o net timeout)") " is thrown."))
(def (sig (parameter "tcp-connect-timeout" (id tcp-connect-timeout))) (p "Determines the timeout for " (tt "tcp-connect") " operations in milliseconds. A timeout of " (tt "#f") " disables timeout checking and is the default. If timeout occurs while trying to connect, a condition object of kinds " (tt "(exn i/o net timeout)") " is thrown."))
(def (sig (parameter "tcp-accept-timeout" (id tcp-accept-timeout))) (p "Determines the timeout for " (tt "tcp-accept") " operations in milliseconds. A timeout of " (tt "#f") " disables timeout checking and is the default. If timeout occurs while waiting for connections, a condition object of kinds " (tt "(exn i/o net timeout)") " is thrown."))

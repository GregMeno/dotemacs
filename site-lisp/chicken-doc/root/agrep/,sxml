((tags "egg") (section 2 "agrep" (toc) (section 3 "Description" (p "This library implements the Wu-Manber algorithm for string searching with errors, popularized by the " (tt "agrep") " Unix command and the " (tt "glimpse") " file indexing tool.  It was developed as part of a search engine for a largish MP3 collection; the \"with error\" searching comes handy for those who can't spell Liszt or Shostakovitch.") (p "Given a search pattern and a string, this algorithm determines whether the string contains a substring that matches the pattern up to a parameterizable number N of errors.  An error is either a substitution (replace a character of the string with another character), a deletion (remove a character) or an insertion (add a character to the string). In more scientific terms, the number of errors is the Levenshtein edit distance between the pattern and the matched substring.") (p "The search patterns are roughly those of the Unix shell, including one-character wildcard (?), character classes ([0-9]) and multi-character wildcard (*).  In addition, conjunction (&) and alternative (|) are supported.  General regular expressions are not supported, however.") (p "The algorithm is described in S. Wu and U. Manber, " (tt "Fast Text Searching With Errors") ", tech. rep. TR 91-11, University of Arizona, 1991.")) (section 3 "Author" (p "Xavier Leroy, ported to Chicken by " (int-link "/users/ivan raikov" "Ivan Raikov") ".")) (section 3 "Library Procedures" (def (sig (procedure "(pattern STRING [TRANSL]) => PATTERN" (id pattern))) (p "Compiles a search pattern.  The syntax for patterns is similar to that of the Unix shell. The following constructs are recognized:") (dl (dt (tt "?")) (dd "match any single character") (dt (tt "*")) (dd "match any sequence of characters") (dt (tt "[..]")) (dd "character set: ranges are denoted with -, as in " (tt "[a-z]") "; an initial " (tt "^") ", as in {[^0-9]}, complements the set") (dt (tt "&")) (dd "conjunction (e.g. " (tt "sweet&sour") ")") (dt (tt "|")) (dd "alternative (e.g. " (tt "high|low") ")") (dt (tt "(..)")) (dd "grouping") (dt (tt "\\")) (dd "escape special characters; the special characters are " (tt "\\?*[]&|()") ".")) (p "The optional argument " (tt "TRANSL") " is a character translation table.")) (def (sig (procedure "(string->pattern STRING [TRANSL]) => PATTERN" (id string->pattern))) (p "Returns a pattern that matches exactly the given string  and nothing else.")) (def (sig (procedure "(string-match PAT STRING [NUMERRS] [WHOLEWORD]) => BOOL" (id string-match))) (p "Tests whether the string " (tt "STRING") " matches the compiled pattern " (tt "PAT") ".  The optional parameter " (tt "NUMERRS") " is the number of errors permitted.  One error corresponds to a substitution, an insertion or a deletion of a character.  " (tt "NUMERRS") " default to 0 (exact match).  The optional parameter " (tt "WHOLEWORD") " is true if the pattern must match a whole word, false if it can match inside a word.  It defaults to false (match inside words).")) (def (sig (procedure "(substring-match PAT STRING POS LEN [NUMERRS] [WHOLEWORD] )" (id substring-match))) (p "Same as " (tt "string-match") ", but restricts the match to the substring of the given string starting at character number " (tt "POS") " and extending " (tt "LEN") " characters.")) (def (sig (procedure "(errors-substring-match PAT STRING POS LEN [NUMERRS] [WHOLEWORD])" (id errors-substring-match))) (p "Same as " (tt "substring-match") ", but returns the smallest number of errors such that the substring matches the pattern.  That is, it returns 0 if the substring matches exactly, 1 if the substring matches with one error, etc.  Returns -1 if the substring does not match the pattern with at most " (tt "NUMERRS") " errors."))) (section 3 "Requires" (ul (li (int-link "datatype")) (li (int-link "easyffi")))) (section 3 "Version History" (ul (li "1.1 Added definition of type ulong in skeleton.h") (li "1.0 Initial Release"))) (section 3 "License" (p (tt "agrep") " was originally written by Xavier Leroy and ported to Chicken by " (int-link "/users/ivan raikov" "Ivan Raikov") ".") (pre " Copyright 2009-2010 Ivan Raikov and the Okinawa Institute of Science\n and Technology.\n\n\n This program is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n This program is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n General Public License for more details.\n\n A full copy of the GPL license can be found at\n <http://www.gnu.org/licenses/>."))))
((tags "egg") (toc) (section 2 "Synopsis" (p "Support for the full numeric tower.")) (section 2 "Interface" (p "This extension provides support for large exact integers, exact rational and complex numbers.") (p "The following standard procedures are redefined:") (pre "+     -      *     /\n=     >      <     >=    <=\nabs   max    min\neqv?  equal?\nexp   expt   log   sin   cos   tan   atan   asin   acos   sqrt\nquotient     modulo      remainder\nexact?       inexact?\nexact->inexact           inexact->exact\npositive?    negative?   even?       odd?   zero?\nnumber?      complex?    real?       rational?     integer?\ngcd   lcm\ntruncate     ceiling     floor       round\nnumber->string           string->number\nnumerator    denominator\nrationalize\nmagnitude         angle\nreal-part         imag-part") (p "The following standard procedures are provided:") (pre "make-rectangular  make-polar") (p "The following non-standard extended procedures are redefined:") (pre "add1         sub1\nsignum\nbitwise-and  bitwise-ior  bitwise-xor  bitwise-not  arithmetic-shift\nrandomize    random") (p "Additionally the following procedures are available:") (def (sig (procedure "(quotient&remainder A B)" (id quotient&remainder))) (p "Return the quotient " (i "and") " the remainder of A divided by B.") (p "This is especially useful for bignums, since both numbers are derived simultaneously.  This saves performing the division algorithm twice.")) (def (sig (procedure "(quotient&modulo A B)" (id quotient&modulo))) (p "Like " (tt "quotient&remainder") ", except return the modulo instead of remainder.")) (def (sig (procedure "(conj Z)" (id conj))) (p "Returns the conjugate of the complex number Z.")) (def (sig (procedure "(bignum? X)" (id bignum?))) (p "Is X an extended-precision integer?")) (def (sig (procedure "(ratnum? X)" (id ratnum?))) (p "Is X a ratio?")) (def (sig (procedure "(cplxnum? X)" (id cplxnum?))) (p "Is X a complex?")) (def (sig (procedure "(rectnum? X)" (id rectnum?))) (p "Is X an exact-complex? (Treats an integer-floatingpoint as \"exact\".)")) (def (sig (procedure "(compnum? X)" (id compnum?))) (p "Is X an inexact-complex?")) (def (sig (procedure "(cflonum? X)" (id cflonum?))) (p "Is X a floatingpoint-complex or a floatingpoint?")) (def (sig (procedure "(cintnum? X)" (id cintnum?))) (p "Is X an integer-complex or an integer?"))) (section 2 "Example" (highlight scheme "(define (fac n)\n  (if (zero? n)\n      1\n      (* n (fac (- n 1))) ) ) ) )\n\n(fac 100)   \n; => 9332621544394415268169923885626670049071596826438162146859296389\n     5217599993229915608941463976156518286253697920827223758251185210\n     916864000000000000000000000000")) (section 2 "Bugs and limitations" (ul (li "Extended number literals can not be used directly in compiled code.  Use " (tt "string->number") " instead."))) (section 2 "About this egg" (section 3 "Author" (p (link "http://wiki.call-cc.org/felix%20winkelmann" "felix")) (p "The code for complex arithmetic was mostly taken from Thomas Chust's " (int-link "/eggref/3/complex" "complex") " egg.")) (section 3 "Version history" (dl (dt "2.3") (dd "Added regex requirement to make it work in Chicken 4.6.2+") (dt "2.2") (dd "Fixed ratnum normalization in case of negative divisors") (dt "2.1") (dd "Changed " (tt "quotient") ", " (tt "remainder") " and " (tt "quotient&remainder") " semantics so they accept fractional flonums to match Chicken's implementation of " (tt "quotient") " and " (tt "remainder") ".  This also affects " (tt "modulo") " and " (tt "quotient&modulo") ".") (dt "2.0") (dd "Removed dependency on GMP, replacing it by the Scheme48 numbers code. Improved performance by integrating with GC.  Added benchmarks and more tests. Converted testsuite to use the " (int-link "/eggref/4/test" "test") " egg instead of " (int-link "/eggref/4/testeez" "testeez") ". [by Peter Bex]") (dt "1.82") (dd "removed dependency on " (int-link "/eggref/4/easyffi" "easyffi") " (Thanks to Peter Bex)") (dt "1.81") (dd "fixed dependencies") (dt "1.809") (dd "Fix for " (tt "(expt <number> <ratio>)") ", would fail [Bug noted by John Cowan]") (dt "1.808") (dd "Fix for 1.0+1i not treated as a rectnum or compnum [Bug noted by John Cowan] Added 'cintnum?' & 'cplxnum?' [kon lovett]") (dt "1.806") (dd "Fix for equal? when given keywords as args [Bug noted by papasi] [elf]") (dt "1.804") (dd "Using more accurate exact->inexact conversion for rationals [Alex Shinn]") (dt "1.803") (dd "fixed bug in fixnum bitwise operations [Thanks to Jeremy Sydik]") (dt "1.802") (dd "not quite complete support for static linking") (dt "1.801") (dd "Fixed a bug in " (tt "angle") " [zb, mario]") (dt "1.8") (dd "Single-argument " (tt "+") " and " (tt "*") " didn't check argument type [Thanks to Stephen Gilardi]") (dt "1.701") (dd "Bugfix for compiler macros, undefined symbol [Kon Lovett]") (dt "1.7") (dd "Added compiler macros for " (tt "bitwise-...") " operations") (dt "1.6") (dd "Compiler macros now work without -X numbers") (dt "1.5") (dd "Added support for speculative inlining of fixnum ops") (dt "1.4") (dd "Fixed bug in ratnum/bignum division [Thanks to Ivan Shmakov]") (dt "1.3") (dd "Fixing round for rational numbers [Alex Shinn]") (dt "1.2") (dd "Added " (tt "bignum? ratnum? cflonum? rectnum? compnum?") " [Kon Lovett]") (dt "1.1") (dd "Uses easyffi properly [reported by John Cowan]") (dt "1.0") (dd "Fix for fixnum/rational comparison [by Zbigniew]") (dt "0.999") (dd (tt "rational?") " always returned false for flonums") (dt "0.998") (dd "Added some missing definitions to numbers.scm [found by Kon Lovett]") (dt "0.997") (dd "Fixed memory leak in some bitwise operations [found by Dan Muresan]") (dt "0.996") (dd "Fixed a bug in " (tt "expt") " [Daishi Kato]") (dt "0.995") (dd (tt "round") " rounds to even (as specified by R5RS) [Thanks to Benedikt Rosenau]") (dt "0.994") (dd "Reimplemented " (tt "=") " in C") (dt "0.993") (dd "Fixed " (tt "equal?") " which didn't handle extended numbers nested in other data") (dt "0.992") (dd "Slight performance tuning for " (tt "expt") " [Again by Daishi]") (dt "0.991") (dd "Fixed bug in fixnum/bignum subtraction [Thanks to Daishi Kato and Alex Shinn]") (dt "0.99") (dd "Speed improvements for " (tt "expt") " by Daishi Kato") (dt "0.98") (dd "Added " (tt "random") " and " (tt "randomize") " [Suggested by Daishi Kato]") (dt "0.97") (dd "bignum/fixnum subtraction used wrong argument order [Thanks to Kon Lovett]") (dt "0.96") (dd "Several bug fixes by Alex Shinn; " (tt "signum") " is exactness preserving") (dt "0.95") (dd "Alex Shinn contributed a working version of " (tt "expt")) (dt "0.94") (dd "Yet another bug-fix by Michal") (dt "0.93") (dd "Several bug-fixes by Michal Janeczek") (dt "0.92") (dd "exactness handling of " (tt "expt") " is slightly better but still not perfect.") (dt "0.91") (dd "Fixed bug in " (tt "integer?")) (dt "0.9") (dd "(beta)"))) (section 3 "License" (pre "Copyright (c) 2008-2010 The CHICKEN Team\nCopyright (c) 2000-2007, Felix L. Winkelmann\nCopyright (c) 1993-2008 Richard Kelsey and Jonathan Rees\nCopyright 1986,1987,1988,1989,1990,1991 Massachusetts Institute of Technology\nCopyright 1992,1993,1994,2004 Massachusetts Institute of Technology\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n3. The name of the authors may not be used to endorse or promote products\n   derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR\nIMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\nOF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,\nINCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\nNOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."))))
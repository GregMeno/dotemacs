((tags "egg") (section 2 "format" (p "Formatted output, Common LISP style") (toc)) (section 2 "Documentation" (def (sig (procedure "(format DESTINATION FORMAT-STRING . ARGUMENTS)" (id format))) (p "An almost complete implementation of Common LISP format description according to the CL reference book " (b "Common LISP, the Language") " from Guy L. Steele, Digital Press. This code was originally part of SLIB. The author is Dirk Lutzebaeck.") (p "Returns " (tt "#t") ", " (tt "#f") " or a string; has side effect of printing according to " (tt "FORMAT-STRING") ".  If " (tt "DESTINATION") " is " (tt "#t") ", the output is to the current output port and " (tt "#t") " is returned.  If " (tt "DESTINATION") " is " (tt "#f") ", a formatted string is returned as the result of the call.  If " (tt "DESTINATION") " is a string, " (tt "DESTINATION") " is regarded as the format string; " (tt "FORMAT-STRING") " is then the first argument and the output is returned as a string. If " (tt "DESTINATION") " is a number, the output is to the value of " (tt "(current-error-port)") ".  Otherwise " (tt "DESTINATION") " must be an output port and " (tt "#t") " is returned.") (p (tt "FORMAT-STRING") " must be a string.  In case of a formatting error format returns " (tt "#f") " and prints a message on the value of " (tt "(current-error-port)") ".  Characters are output as if the string were output by the " (tt "display") " function with the exception of those prefixed by a tilde (~).  For a detailed description of the " (tt "FORMAT-STRING") " syntax please consult a Common LISP format reference manual.") (p "This code is not reentrant, nor is it thread-safe.") (p (tt "format") " implements " (link "http://srfi.schemers.org/srfi-28/srfi-28.html" "SRFI-28")) (p "A list of all supported, non-supported and extended directives follows:") (pre "Format Specification (Format version 3.1)\n-----------------------------------------\n\n  Please consult a Common LISP format reference manual for a detailed\ndescription of the format string syntax.\n\n  This implementation supports directive parameters and modifiers (`:'\nand `@' characters). Multiple parameters must be separated by a comma\n(`,').  Parameters can be numerical parameters (positive or negative),\ncharacter parameters (prefixed by a quote character (`''), variable\nparameters (`v'), number of rest arguments parameter (`#'), empty and\ndefault parameters.  Directive characters are case independent. The\ngeneral form of a directive is:\n\nDIRECTIVE ::= ~{DIRECTIVE-PARAMETER,}[:][@]DIRECTIVE-CHARACTER\n\nDIRECTIVE-PARAMETER ::= [ [-|+]{0-9}+ | 'CHARACTER | v | # ]\n\n\nImplemented CL Format Control Directives\n........................................\n\n  Documentation syntax: Uppercase characters represent the corresponding\ncontrol directive characters. Lowercase characters represent control\ndirective parameter descriptions.\n\n`~A'\n     Any (print as `display' does).\n    `~@A'\n          left pad.\n\n    `~MINCOL,COLINC,MINPAD,PADCHARA'\n          full padding.\n\n`~S'\n     S-expression (print as `write' does).\n    `~@S'\n          left pad.\n\n    `~MINCOL,COLINC,MINPAD,PADCHARS'\n          full padding.\n\n`~D'\n     Decimal.\n    `~@D'\n          print number sign always.\n\n    `~:D'\n          print comma separated.\n\n    `~MINCOL,PADCHAR,COMMACHARD'\n          padding.\n\n`~X'\n     Hexadecimal.\n    `~@X'\n          print number sign always.\n\n    `~:X'\n          print comma separated.\n\n    `~MINCOL,PADCHAR,COMMACHARX'\n          padding.\n\n`~O'\n     Octal.\n    `~@O'\n          print number sign always.\n\n    `~:O'\n          print comma separated.\n\n    `~MINCOL,PADCHAR,COMMACHARO'\n          padding.\n\n`~B'\n     Binary.\n    `~@B'\n          print number sign always.\n\n    `~:B'\n          print comma separated.\n\n    `~MINCOL,PADCHAR,COMMACHARB'\n          padding.\n\n`~NR'\n     Radix N.\n    `~N,MINCOL,PADCHAR,COMMACHARR'\n          padding.\n\n`~@R'\n     print a number as a Roman numeral.\n\n`~:@R'\n     print a number as an \"old fashioned\" Roman numeral.\n\n`~:R'\n     print a number as an ordinal English number.\n\n`~:@R'\n     print a number as a cardinal English number.\n\n`~P'\n     Plural.\n    `~@P'\n          prints `y' and `ies'.\n\n    `~:P'\n          as `~P but jumps 1 argument backward.'\n\n    `~:@P'\n          as `~@P but jumps 1 argument backward.'\n\n`~C'\n     Character.\n    `~@C'\n          prints a character as the reader can understand it (i.e. `#\\'\n          prefixing).\n\n    `~:C'\n          prints a character as emacs does (eg. `^C' for ASCII 03).\n\n`~F'\n     Fixed-format floating-point (prints a flonum like MMM.NNN).\n    `~WIDTH,DIGITS,SCALE,OVERFLOWCHAR,PADCHARF'\n\n    `~@F'\n          If the number is positive a plus sign is printed.\n\n`~E'\n     Exponential floating-point (prints a flonum like MMM.NNN`E'EE).\n    `~WIDTH,DIGITS,EXPONENTDIGITS,SCALE,OVERFLOWCHAR,PADCHAR,EXPONENTCHARE'\n\n    `~@E'\n          If the number is positive a plus sign is printed.\n\n`~G'\n     General floating-point (prints a flonum either fixed or\n     exponential).\n    `~WIDTH,DIGITS,EXPONENTDIGITS,SCALE,OVERFLOWCHAR,PADCHAR,EXPONENTCHARG'\n\n    `~@G'\n          If the number is positive a plus sign is printed.\n\n`~$'\n     Dollars floating-point (prints a flonum in fixed with signs\n     separated).\n    `~DIGITS,SCALE,WIDTH,PADCHAR$'\n\n    `~@$'\n          If the number is positive a plus sign is printed.\n\n    `~:@$'\n          A sign is always printed and appears before the padding.\n\n    `~:$'\n          The sign appears before the padding.\n\n`~%'\n     Newline.\n    `~N%'\n          print N newlines.\n\n`~&'\n     print newline if not at the beginning of the output line.\n    `~N&'\n          prints `~&' and then N-1 newlines.\n\n`~|'\n     Page Separator.\n    `~N|'\n          print N page separators.\n\n`~~'\n     Tilde.\n    `~N~'\n          print N tildes.\n\n`~'<newline>\n     Continuation Line.\n    `~:'<newline>\n          newline is ignored, white space left.\n\n    `~@'<newline>\n          newline is left, white space ignored.\n\n`~T'\n     Tabulation.\n    `~@T'\n          relative tabulation.\n\n    `~COLNUM,COLINCT'\n          full tabulation.\n\n`~?'\n     Indirection (expects indirect arguments as a list).\n    `~@?'\n          extracts indirect arguments from format arguments.\n\n`~(STR~)'\n     Case conversion (converts by `string-downcase').\n    `~:(STR~)'\n          converts by `string-capitalize'.\n\n    `~@(STR~)'\n          converts by `string-capitalize-first'.\n\n    `~:@(STR~)'\n          converts by `string-upcase'.\n\n`~*'\n     Argument Jumping (jumps 1 argument forward).\n    `~N*'\n          jumps N arguments forward.\n\n    `~:*'\n          jumps 1 argument backward.\n\n    `~N:*'\n          jumps N arguments backward.\n\n    `~@*'\n          jumps to the 0th argument.\n\n    `~N@*'\n          jumps to the Nth argument (beginning from 0)\n\n`~[STR0~;STR1~;...~;STRN~]'\n     Conditional Expression (numerical clause conditional).\n    `~N['\n          take argument from N.\n\n    `~@['\n          true test conditional.\n\n    `~:['\n          if-else-then conditional.\n\n    `~;'\n          clause separator.\n\n    `~:;'\n          default clause follows.\n\n`~{STR~}'\n     Iteration (args come from the next argument (a list)). Iteration\n     bounding is controlled by configuration variables\n     format:iteration-bounded and format:max-iterations. With both variables\n     default, a maximum of 100 iterations will be performed.\n    `~N{'\n          at most N iterations.\n\n    `~:{'\n          args from next arg (a list of lists).\n\n    `~@{'\n          args from the rest of arguments.\n\n    `~:@{'\n          args from the rest args (lists).\n\n`~^'\n     Up and out.\n    `~N^'\n          aborts if N = 0\n\n    `~N,M^'\n          aborts if N = M\n\n    `~N,M,K^'\n          aborts if N <= M <= K\n\nNot Implemented CL Format Control Directives\n............................................\n\n`~:A'\n     print `#f' as an empty list (see below).\n\n`~:S'\n     print `#f' as an empty list (see below).\n\n`~<~>'\n     Justification.\n\n`~:^'\n     (sorry I don't understand its semantics completely)\n\nExtended, Replaced and Additional Control Directives\n....................................................\n\n`~MINCOL,PADCHAR,COMMACHAR,COMMAWIDTHD'\n\n`~MINCOL,PADCHAR,COMMACHAR,COMMAWIDTHX'\n\n`~MINCOL,PADCHAR,COMMACHAR,COMMAWIDTHO'\n\n`~MINCOL,PADCHAR,COMMACHAR,COMMAWIDTHB'\n\n`~N,MINCOL,PADCHAR,COMMACHAR,COMMAWIDTHR'\n     COMMAWIDTH is the number of characters between two comma\n     characters.\n\n`~I'\n     print a R4RS complex number as `~F~@Fi' with passed parameters for\n     `~F'.\n\n`~Y'\n     Pretty print formatting of an argument for scheme code lists.\n\n`~K'\n     Same as `~?.'\n\n`~!'\n     Flushes the output if format DESTINATION is a port.\n\n`~_'\n     Print a `#\\space' character\n    `~N_'\n          print N `#\\space' characters.\n\n`~/'\n     Print a `#\\tab' character\n    `~N/'\n          print N `#\\tab' characters.\n\n`~NC'\n     Takes N as an integer representation for a character. No arguments\n     are consumed. N is converted to a character by `integer->char'.  N\n     must be a positive decimal number.\n\n`~:S'\n     Print out readproof.  Prints out internal objects represented as\n     `#<...>' as strings `\"#<...>\"' so that the format output can always\n     be processed by `read'.\n\n`~:A'\n     Print out readproof.  Prints out internal objects represented as\n     `#<...>' as strings `\"#<...>\"' so that the format output can always\n     be processed by `read'.\n\n`~Q'\n     Prints information and a copyright notice on the format\n     implementation.\n    `~:Q'\n          prints format version.\n\n`~F, ~E, ~G, ~$'\n     May also print number strings, i.e. passing a number as a string\n     and format it accordingly.\n\nConfiguration Variables\n-----------------------\n\n  Format has some configuration variables. There should be no modification\nnecessary for the default configuration. If modification is\ndesired the variable should be set after the format code is loaded.\n\nformat:floats\n     System has floating-point numbers. (default #t)\n\nformat:complex-numbers\n     System has complex numbers. (default #f)\n\nformat:fn-max\n     Maximum number of number digits. (default 200)\n\nformat:format:en-max\n     Maximum number of exponent digits. (default 10)\n\nformat:expch\n     The character prefixing the exponent value in ~E printing.\n     (default #\\E)\n\nformat:radix-pref\n     Does number->string add a radix prefix? (default <detects upon load>)\n\nformat:symbol-case-conv\n     Symbols are converted by symbol->string so the case type of the\n     printed symbols is implementation dependent.\n     format:symbol-case-conv is a one arg closure which is either #f (no\n     conversion), string-upcase, string-downcase or string-capitalize.\n     (default #f)\n\nformat:iobj-case-conv\n     As format:symbol-case-conv but applies for the representation of\n     implementation internal objects. (default #f)\n\nformat:iteration-bounded\n     When #t, a ~{...~} control will iterate no more than the number of\n     times specified by format:max-iterations regardless of the number\n     of iterations implied by modifiers and arguments. When #f, a\n     ~{...~} control will iterate the number of times implied by\n     modifiers and arguments, unless termination is forced by language\n     or system limitations. (default #t)\n\nformat:max-iterations\n     The maximum number of iterations performed by a ~{...~} control.\n     Has effect only when format:iteration-bounded is #t. (default 100)\n\nformat:unprocessed-arguments-error?\n     Are superfluous arguments treated as an error. (default #f)"))) (section 2 "Notes" (p "A modular and more robust implementation is available in the " (int-link "format-modular.html" "format-modular") " extension.")) (section 2 "License" (p "This code is in the public domain")) (section 2 "About this egg" (section 3 "Author" (p "Dirk Lutzebaeck, maintained by felix winkelmann and Kon Lovett")) (section 3 "Version history" (dl (dt "3.1.4") (dd "Ported to CHICKEN 4") (dt "3.1.3") (dd "Removed 'format feature & added srfi-13") (dt "3.1.2") (dd "Exports") (dt "3.1") (dd "Eggification")))))
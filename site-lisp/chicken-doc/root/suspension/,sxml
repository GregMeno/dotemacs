((tags "egg") (toc) (section 2 "suspension" (p "Serialized partial continuations") (section 3 "Introduction" (p "A " (i "suspension") " is a serialized partial continuation. This extension provides basic tools for working with suspensions and may be useful for implementing continuation-based " (i "modal") " behaviour in applications like web-servers.") (p "Note that suspensions can only be reliably created for compiled code, as continuations created by the interpreter will contain more references to live data as needed - in particular the environment representation of the interpreter is simpler and retains more garbage. Continuations created by compiled code only reference the minimal set of live data required to continue execution and thus are much smaller.") (p "Not all data is serializable, ports and foreign pointers are not, for example.  To be able to create a suspension from a pending continuation, no references to such data may exist in the continuation (say, in local bindings which are accessed by code executed when the continuation is resumed).") (p "The implementation of delimited execution contexts creates a separate thread so " (tt "(current-thread)") " will not be " (tt "eq?") "  to the thread that created the delimited execution context. Parameters modified in the new execution context are propagated back to the parent thread, though. Also, any exceptions raised in the new context will be delivered to the parent thread.") (p "The default ports (" (tt "current-[input,output,error]-port") ") are bound to the default STDIO-ports during execution of a limited execution context.")) (section 3 "Usage" (highlight scheme "(require-extension suspension)")) (section 3 "Requirements" (p (int-link "/eggref/4/s11n" "s11n"))) (section 3 "Documentation" (section 4 "with-limited-continuation" (def (sig (procedure "(with-limited-continuation THUNK)" (id with-limited-continuation))) (p "Creates a limited execution context by spawning a new thread and suspending the current one. THUNK should be a procedure of no arguments and will be executed in th new context. Any results returned by THUNK will be returned by the " (tt "with-limited-continuation") " form."))) (section 4 "continuation-drop" (def (sig (procedure "(continuation-drop . results)" (id continuation-drop))) (p "Exits the execution context created by the innermost enclosing " (tt "with-limited-continuation") " form and returns RESULTS ...  The effect of invoking " (tt "continuation-drop") " outside of the dynamic context of a " (tt "with-limited-continuation") " is undefined."))) (section 4 "continuation-suspend" (def (sig (procedure "(continuation-suspend STORE)" (id continuation-suspend))) (p "Captures the current continuation up to the point of the innermost enclosing " (tt "with-limited-continuation") " form and invokes the 1-argument procedure STORE with the serialized representation (a string) of the continuation.  The execution context will be exited and the enclosing " (tt "with-limited-continuation") " form will return any results returned by STORE.") (p "The effect of invoking " (tt "continuation-suspend") " outside of the dynamic context of a " (tt "with-limited-continuation") " is undefined.") (p "Returning from STORE normally will result in undefined behaviour. Instead either terminate the current thread or process or use some form of non-local exit."))) (section 4 "continuation-resume" (def (sig (procedure "(continuation-resume SK . RESULTS)" (id continuation-resume))) (p "Deserializes the continuation in the string SK and invokes it, continuing the execution suspended and stored in the serialized continuation. The given results will be returned from the " (tt "continuation-suspend") " form that suspended SK.  The effect of invoking " (tt "continuation-resume") " outside of the dynamic context of a " (tt "with-limited-continuation") " is undefined.")))) (section 3 "Author" (p (int-link "/users/felix winkelmann" "felix winkelmann"))) (section 3 "License" (pre "Copyright (c) 2006-2010, Felix L. Winkelmann\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n3. The name of the authors may not be used to endorse or promote products\n   derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR\nIMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\nOF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,\nINCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\nNOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n ")) (section 3 "Version History" (dl (dt "0.2") (dd "ported to CHICKEN 4") (dt "0.1") (dd "initial release")))))
((tags "egg") (section 2 "Sendfile" (toc) (section 3 "Introduction" (p "This eggs provides procedures to send data from a source to a destination. It tries to use the sendfile(2) syscall on systems that support it and uses some other techniques to emulate it on systems that don't.")) (section 3 "Examples" (highlight scheme "(use sendfile)\n\n;;in all the examples\n;;we use a generic procedure with-prepared-environment\n;;which we assume provides us with the input and outputports\n;;needed. Most of the time the output-port will be a socket\n;;and the input-port may be connected to a file\n;;the size of the input-file was gathered as well\n;; use the standard interface and let the system decide what to do\n\n(with-prepared-environment\n (lambda (in out len)\n   (sendfile in out)))\n\n;; force a specific method to use: Part I\n\n;;read-write\n;;notice that you can force a specific transmission method\n;;via the srfi parameter force-implementation\n;;there are four possible values: 'sendfile,'read-write-loop,'mmapped,'nothing\n;;'nothing is the default, if this is set, sendfile will decide which implementation to use\n;;based on the systems capabilities and the filesize\n(with-prepared-environment\n (lambda (in out len)\n   (parameterize ((force-implementation 'read-write))\n     (sendfile in out))))\n\n;;force a specific method to use: Part II\n\n;;sometimes you may want to decide which method to\n;;use based on the size of the file.\n;;there is an srfi-parameter called implementation-selector\n;;which does just that. See documentation for details\n(with-prepared-environment\n (lambda (in out)\n   (paramaterize ((implementation-selector) (lambda (len)\n                                                       (if (> len 1024)\n                                                           impl:sendfile\n                                                           impl:read-write-loop)))\n                 (sendfile in out))))\n")) (section 3 "Authors" (p "David Krentzlin")) (section 3 "License" (pre " Copyright (c) 2007 David Krentzlin \n\n Permission is hereby granted, free of charge, to any person obtaining a\n copy of this software and associated documentation files (the \"Software\"),\n to deal in the Software without restriction, including without limitation\n the rights to use, copy, modify, merge, publish, distribute, sublicense,\n and/or sell copies of the Software, and to permit persons to whom the\n Software is furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included\n in all copies or substantial portions of the Software.\n \n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\n OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n OTHER DEALINGS IN THE SOFTWARE.")) (section 3 "API" (def (sig (procedure "(sendfile source destination)" (id sendfile))) (p "Tries to send the file identified by `source` to `destination` as fast as possible. Unless a specific technique is forced it will decide what method to use from the systems capabilities and the filesize. " (tt "source") "  can be either a port to the inputfile or a filedescriptor of an already opened file. " (tt "destination") " can be either a port to the outputfile (socket) or a filedescriptor (socketdesciptor) of an already opened file (socket). When it is a port, any buffered output is flushed via " (tt "flush-output") " prior to sending the file.")) (def (sig (procedure "(impl:mmapped src dst len #!key (offset 0.0))" (id impl:mmapped))) (p "Sends a file by mapping it into the memory and do repeated writes. " (tt "source") " is the filedescriptor of an already opened file. " (tt "destination") " is the filedescriptor of an already opened file (can be a socket). " (tt "len") " is the size of the file in bytes as e.g. retrieved by (file-size). " (tt "offset") " is the offset where to start the read. This procedure returns the amount of bytes successfully written.")) (def (sig (procedure "(impl:sendfile src dst len)" (id impl:sendfile))) (p "If it is available this is the interface to the sendfile-implementation of your operating system " (tt "source") " is the filedescriptor of an already opened file. " (tt "destination") " is the filedescriptor of an already opened file (MUST be a socket). " (tt "len") " is the size of the file in bytes as e.g. retrieved by (file-size). This procedure returns the amount of bytes successfully written.")) (def (sig (procedure " (impl:read-write-loop/port src dst len)" (id impl:read-write-loop/port))) (p "Sends a file by performing repeated reads and writes where the source is a port. " (tt "source") "  is  the input-port. " (tt "destination") " is the filedescriptor of an already opened file (can be a socket). " (tt "len") " is the size of the file in bytes as e.g. retrieved by (file-size). This procedure returns the amount of bytes successfully written.")) (def (sig (procedure " (impl:read-write-loop/fd src dst len)" (id impl:read-write-loop/fd)))) (def (sig (parameter "force-implementation" (id force-implementation))) (p "Causes sendfile to allways use the transmission-method specified by this parameter. Possible values are 'sendfile,'mmapped,'read-write and 'nothing. It defaults to 'nothing, where (sendfile) will decide which method to use based on the system's capabilities and sendfile:implementation-selector.")) (def (sig (parameter "implementation-selector" (id implementation-selector))) (p "A one-argument procedure that gets the size of the file in question passed and is expected to return a procedure to use."))) (section 3 "Version history" (ul (li "1.7 Actually allow input ports for source; they still have to have an underlying file descriptor currently") (li "1.6.3 Use c-pointer instead of treating the buffer as a string. Thanks to Felix") (li "1.6.2 Flush output port before sending to ensure output is sent in order.") (li "1.5.0 The 'force parameter has been removed from (sendfile), its a parameter now instead. Bugfix for the read-write-loop, that causes corrupted files to be sent.") (li "1.4.3 MacOS X 10.5 support, fix of BSD & default 'sendfile_implementation' argument order, better error information") (li "1.3.0 make it compile on windows") (li "1.2.0 allmost complete rewrite") (li "1.1.0 Enhanced portability") (li "1.0.0 Initial release")))))
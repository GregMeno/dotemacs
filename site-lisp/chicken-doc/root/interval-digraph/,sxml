((tags "egg") (section 2 "interval-digraph" (p "Directed graph based on adjacency intervals.") (toc)) (section 2 "Usage" (p "(require-extension interval-digraph)")) (section 2 "Documentation" (p "The " (tt "interval-digraph") " library is an implementation of a directed graph, where the nodes and edges may be stored as integer interval objects from the " (int-link "cis") " library.") (p "The library defines a digraph \"object\" -- a procedure that takes a method name as a symbol, and returns the procedure that implements the respective operation.") (section 3 "Directed graph procedures" (section 4 "Constructors" (p "An empty digraph object can be created by procedure " (tt "make-digraph")) (def (sig (procedure "make-digraph:: NAME LABEL -> SELECTOR" (id make-digraph))) (p "where " (tt "NAME") " is the graph name (string or symbol), " (tt "LABEL") " is an optional metadata object of an arbitrary type or " (tt "#f") ".") (p "The returned selector procedure can take one of the following arguments:") (dl (dt (tt "'name")) (dd "returns the graph name (string or symbol)") (dt (tt "'label")) (dd "returns the graph metadata (arbitrary type)") (dt (tt "'nodes")) (dd "returns a procedure with no arguments, which returns a list with the node indices of the graph") (dt (tt "'nodes-with-labels")) (dd "returns a procedure with no arguments, which returns a list with the node indexes of the graph, along with optional label") (dt (tt "'node-intervals")) (dd "returns the node indices of the graph as a " (int-link "cis") " interval object") (dt (tt "'edges")) (dd "returns a procedure with no arguments, which returns a list with the edges of the graph") (dt (tt "'edges-with-labels")) (dd "returns a procedure with no arguments, which returns a list with the edges of the graph and their labels") (dt (tt "'order")) (dd "returns a procedure with no arguments, which returns the number of nodes in the graph") (dt (tt "'size")) (dd "returns a procedure with no arguments, which returns the number of edges in the graph") (dt (tt "'out-edges")) (dd "returns a procedure " (tt "LAMBDA N") " which returns a list with the outgoing edges of node " (tt "N")) (dt (tt "'in-edges")) (dd "returns a procedure " (tt "LAMBDA N") " which returns a list with the incoming edges of node " (tt "N")) (dt (tt "'succ")) (dd "returns a procedure " (tt "LAMBDA N") " which returns a list with the successor nodes of node " (tt "N")) (dt (tt "'pred")) (dd "returns a procedure " (tt "LAMBDA N") " which returns a list with the predecessor nodes of node " (tt "N")) (dt (tt "'succ-interval")) (dd "returns a procedure " (tt "LAMBDA N") " which returns a " (int-link "cis") " interval object with the successor nodes of node " (tt "N")) (dt (tt "'pred-interval")) (dd "returns a procedure " (tt "LAMBDA N") " which returns a " (int-link "cis") " interval object with the predecssor nodes of node " (tt "N")) (dt (tt "'has-edge")) (dd "returns a procedure " (tt "LAMBDA I J") " which returns true if edge " (tt "I -> J") " exists in the graph and false otherwise") (dt (tt "'has-node")) (dd "returns a procedure " (tt "LAMBDA N") " which returns true if node " (tt "N") " exists in the graph and false otherwise") (dt (tt "'has-node-interval")) (dd "returns a procedure " (tt "LAMBDA I") " which returns true if interval " (tt "I") " exists in the graph and false otherwise") (dt (tt "'edge-property")) (dd "returns a procedure " (tt "LAMBDA P I J") " which returns the property P of  edge " (tt "I -> J") ", if it exists, #f otherwise") (dt (tt "'edge-interval-property")) (dd "returns a procedure " (tt "LAMBDA P I J") " which returns the property P of all edges defined on the intervals " (tt "I, J") ", if it exists, #f otherwise") (dt (tt "'edge-interval-prototype")) (dd "returns a procedure " (tt "LAMBDA P I J") " which returns the prototype P of all edges defined on the intervals " (tt "I, J") ", if it exists, #f otherwise; a prototype is a user-supplied procedure of the form " (tt "LAMBDA G I J") " which returns a property value for the edge " (tt "I -> J")) (dt (tt "'node-property")) (dd "returns a procedure " (tt "LAMBDA P N") " which returns the property P of node " (tt "N") ", if it exists, #f otherwise") (dt (tt "'node-interval-property")) (dd "returns a procedure " (tt "LAMBDA P I") " which returns the property P of node interval " (tt "I") ", if it exists, #f otherwise") (dt (tt "'node-label")) (dd "returns a procedure " (tt "LAMBDA N") " which returns the label of node " (tt "N") " if it exists, #f otherwise") (dt (tt "'roots")) (dd "returns a procedure with no arguments, which returns a list with all nodes in the graph that do not have an predecessor") (dt (tt "'foreach-node")) (dd "returns an iterator procedure " (tt "LAMBDA F") " which iterates over the nodes in the graph by invoking function " (tt "F") " on the node index of each node") (dt (tt "'foreach-node-with-label")) (dd "returns an iterator procedure " (tt "LAMBDA F") " which iterates over the nodes in the graph by invoking function " (tt "F") " on the node index and label of each node") (dt (tt "'foreach-edge")) (dd "returns an iterator procedure " (tt "LAMBDA F") " which iterates over the nodes in the graph by invoking function " (tt "F") " on the node indices of each edge") (dt (tt "'add-node")) (dd "returns a procedure " (tt "LAMBDA N [LABEL]") " which when given a node index " (tt "N") " and optional label, returns a new graph containing the original graph plus the given node ") (dt (tt "'add-node-interval")) (dd "returns a procedure " (tt "LAMBDA I [LABEL]") " which when given a " (int-link "cis") " interval object " (tt "I") " and optional label, returns a new graph containing the original graph plus the given node interval") (dt (tt "'remove-node")) (dd "returns a procedure " (tt "LAMBDA N") " which when given a node index " (tt "N") ", returns  the original graph with the given node and connecting edges removed") (dt (tt "'add-edge")) (dd "returns a procedure " (tt "LAMBDA E [LABEL]") " which when given edge " (tt "E = (list I J)") " and optional label, returns a new graph containing the original graph plus the given edge ") (dt (tt "'node-label-set")) (dd "returns a procedure " (tt "LAMBDA N LABEL") " which when given a node index " (tt "N") " and label, returns a new graph with the labeled node") (dt (tt "'node-property-set")) (dd "returns a procedure " (tt "LAMBDA P N V") " which when given property name " (tt "P") ", node index " (tt "N") " and  property value, returns a new graph with the property " (tt "P") " set for node " (tt "N")) (dt (tt "'node-interval-property-set")) (dd "returns a procedure " (tt "LAMBDA P I V") " which when given property name " (tt "P") ", " (int-link "cis") " interval object " (tt "I") " and  property value, returns a new graph with the property " (tt "P") " set for all nodes in the interval " (tt "I")) (dt (tt "'edge-property-set")) (dd "returns a procedure " (tt "LAMBDA P I J V") " which when given property name " (tt "P") ", node indices " (tt "I,J") " and  property value, returns a new graph with the property " (tt "P") " set for edge " (tt "I -> J")) (dt (tt "'edge-interval-property-set")) (dd "returns a procedure " (tt "LAMBDA P I J V") " which when given property name " (tt "P") ", " (int-link "cis") " interval objects " (tt "I,J") " and  property value, returns a new graph with the property " (tt "P") " set for all defined edges on the intervals " (tt "I, J")) (dt (tt "'edge-interval-prototype-set")) (dd "returns a procedure " (tt "LAMBDA P I J V") " which when given property name " (tt "P") ", " (int-link "cis") " interval objects " (tt "I,J") " and  prototype procedure, returns a new graph with the prototype " (tt "P") " set for all defined edges on the intervals " (tt "I, J") ";  a prototype is a user-supplied procedure of the form " (tt "LAMBDA G I J") " which returns a property value for the edge " (tt "I -> J")))) (def (sig (procedure " make-random-gnp-digraph :: NAME LABEL N P R S loops -> SELECTOR " (id make-random-gnp-digraph))) (p "Naive implementation of a random uniform graph: given number of nodes " (tt "N") ", probability " (tt "P") ", random number generator function " (tt "R") ", and initial state " (tt "S") ", samples node indices from a binomial distribution " (tt "N,P") ", and creates edges determined by the sample values. Argument " (tt "loops") " specifies if a node can connect to itself in the graph."))) (section 4 "Combinators" (def (sig (procedure "digraph-union:: GRAPH * GRAPH * MERGE-LABEL-FN -> SELECTOR" (id digraph-union))) (p "Union of directed graphs: given two digraph objects, returns a new digraph containing the union of nodes and edges from the given digraphs. Argument " (tt "MERGE-LABEL-FN") " is a procedure that returns a node label given a node index and the labels for that node from the two given digraphs.")) (def (sig (procedure " digraph-disjoint-union :: GRAPH * GRAPH -> SELECTOR " (id digraph-disjoint-union))) (p "Disjoint union of directed graphs: given two digraph objects, returns a new digraph containing the disjoin union of nodes and edges from the given digraphs. The disjoint property is enforced by reindexing all the nodes in the second digraph to have an index higher than the highest index in the first digraph.")) (def (sig (procedure " digraph-rename :: K * GRAPH -> SELECTOR " (id digraph-rename))) (p "Given a digraph and a number " (tt "K") ", returns a new digraph that has " (tt "K") " added to all node indices and edges."))))) (section 2 "Examples") (section 2 "About this egg" (section 3 "Author" (p (int-link "/users/ivan-raikov" "Ivan Raikov"))) (section 3 "Version history" (dl (dt "1.2") (dd "Added " (tt "edge-interval-prototype") " and " (tt "edge-interval-prototype-set") " ") (dt "1.1") (dd "Initial release"))) (section 3 "License" (pre "Copyright 2010 Ivan Raikov and the Okinawa Institute of Science and Technology\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or (at\nyour option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nGeneral Public License for more details.\n\nA full copy of the GPL license can be found at\n<http://www.gnu.org/licenses/>."))))
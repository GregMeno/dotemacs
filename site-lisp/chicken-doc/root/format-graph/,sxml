((tags "egg") (section 2 "format-graph" (p "Output graph nodes and edges in different formats.") (toc)) (section 2 "Usage" (p "(require-extension format-graph)")) (section 2 "Documentation" (p "The format-graph library defines procedures that print the nodes and edges of a graph in different formats, such as the ones used by the " (link "http://www.graphviz.org/" "GraphViz") " or " (link "http://rw4.cs.uni-sb.de/~sander/html/gsvcg1.html" "VCG") " programs. The input graph objects must have the API defined by the " (int-link "digraph" "digraph module") ".") (section 3 "Procedures" (def (sig (procedure "make-format-graph:: TYPE -> FORMAT-PROC" (id make-format-graph))) (p "returns a graph formatter procedure of the specified types; the following formats are  supported:") (table (@ (class "symbol-table")) (tr (td "'dot") (td "\ndot format (see " (link "http://www.graphviz.org/doc/info/lang.html" "the GraphViz documentation") ")\n")) "\n" (tr (td "'vcg") (td "\nvcg format (see " (link "http://rw4.cs.uni-sb.de/~sander/html/gsvcg1.html#examples" "the VCG documetation") ")\n"))) (p "Each graph formatter procedure is of the form " (tt "LAMBDA OUT-PORT GRAPH [OPTION-LIST]") ", where") (ul (li (tt "OUT-PORT") " is the port to which the graph representation should be output ") (li (tt "GRAPH") " is a graph object that follows the API defined by the e.g. " (int-link "digraph.html" "digraph module")) (li (tt "OPTION-LIST") " is a list of options of the form " (tt "STMT NAME VAL") ", in the case of the dot formatter, or " (tt "NAME VAL") ", in the case of the dot and vcg formatters. Each of the options will be included in the beginning of the graph definition output. "))) (def (sig (procedure "graph->sexp:: GRAPH -> SEXP" (id graph->sexp))) (p "generates an s-expression description of the given graph, with the following structure:") (pre "(graph (name  GRAPH-NAME )\n       (nodes (node (id NODE-ID ) (info NODE-INFO )) ... )\n       (edges (edge (i EDGE-I-NODE )  (j EDGE-J-NODE )  (info (EDGE-INFO ))) ... ))")))) (section 2 "Examples" (pre ";; example adapted from the Boost graph library documentation\n(require-extension srfi-1)\n(require-extension digraph)\n(require-extension format-graph)\n\n(define used-by\n  (list \n    (cons 'dax_h 'foo_cpp) (cons 'dax_h 'bar_cpp) (cons 'dax_h 'yow_h)\n    (cons 'yow_h 'bar_cpp) (cons 'yow_h 'zag_cpp) (cons 'boz_h 'bar_cpp)\n    (cons 'boz_h 'zig_cpp) (cons 'boz_h 'zag_cpp) (cons 'zow_h 'foo_cpp)\n    (cons 'foo_cpp 'foo_o) (cons 'foo_o 'libfoobar_a) \n    (cons 'bar_cpp 'bar_o) (cons 'bar_o 'libfoobar_a) \n    (cons 'libfoobar_a 'libzigzag_a) (cons 'zig_cpp 'zig_o) \n    (cons 'zig_o 'libzigzag_a) (cons 'zag_cpp 'zag_o) \n    (cons 'zag_o 'libzigzag_a) (cons 'libzigzag_a 'killerapp)))\n\n(define g (make-digraph 'depgraph \"dependency graph\"))\n\n(define node-list (delete-duplicates \n\t\t   (concatenate (list (map car used-by) (map cdr used-by)))))\n\t   \n(define node-ids (list-tabulate (length node-list) values))\n\n(for-each (lambda (i n) ((g 'add-node!) i n))\n\t  node-ids node-list)\n\n(define node-map (zip node-list node-ids))\n\n(for-each (lambda (e) \n\t    (match e ((ni . nj) (let ((i (car (alist-ref ni node-map)))\n\t\t\t\t      (j (car (alist-ref nj node-map))))\n\t\t\t\t  ((g 'add-edge!) (list i j (format \"~A->~A\" ni nj)))))\n\t\t   (else (error \"invalid edge \" e))))\n\t  used-by)\n\n((make-format-graph 'dot) (current-output-port) g )\n((make-format-graph 'vcg) (current-output-port) g )")) (section 2 "About this egg" (section 3 "Author" (p (int-link "/users/ivan-raikov" "Ivan Raikov"))) (section 3 "Version history" (dl (dt "1.8") (dd "Documenation converted to wiki format") (dt "1.7") (dd "Ported to Chicken 4") (dt "1.6") (dd "Somes updates to the .setup and .meta files") (dt "1.5") (dd "Fixed a bug in printing the title of a VCG graph") (dt "1.4") (dd "Build script updated for better cross-platform compatibility") (dt "1.3") (dd "eggdoc documentation fix") (dt "1.2") (dd "License upgrade to GPL v3") (dt "1.1") (dd "Fixes in the documentation") (dt "1.0") (dd "Initial release"))) (section 3 "License" (pre "Copyright 2007-2010 Ivan Raikov. \n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or (at\nyour option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nGeneral Public License for more details.\n\nA full copy of the GPL license can be found at\n<http://www.gnu.org/licenses/>."))))
(index ("make-format-graph" 0) ("graph->sexp" 1099))
(def (sig (procedure "make-format-graph:: TYPE -> FORMAT-PROC" (id make-format-graph))) (p "returns a graph formatter procedure of the specified types; the following formats are  supported:") (table (@ (class "symbol-table")) (tr (td "'dot") (td "\ndot format (see " (link "http://www.graphviz.org/doc/info/lang.html" "the GraphViz documentation") ")\n")) "\n" (tr (td "'vcg") (td "\nvcg format (see " (link "http://rw4.cs.uni-sb.de/~sander/html/gsvcg1.html#examples" "the VCG documetation") ")\n"))) (p "Each graph formatter procedure is of the form " (tt "LAMBDA OUT-PORT GRAPH [OPTION-LIST]") ", where") (ul (li (tt "OUT-PORT") " is the port to which the graph representation should be output ") (li (tt "GRAPH") " is a graph object that follows the API defined by the e.g. " (int-link "digraph.html" "digraph module")) (li (tt "OPTION-LIST") " is a list of options of the form " (tt "STMT NAME VAL") ", in the case of the dot formatter, or " (tt "NAME VAL") ", in the case of the dot and vcg formatters. Each of the options will be included in the beginning of the graph definition output. ")))
(def (sig (procedure "graph->sexp:: GRAPH -> SEXP" (id graph->sexp))) (p "generates an s-expression description of the given graph, with the following structure:") (pre "(graph (name  GRAPH-NAME )\n       (nodes (node (id NODE-ID ) (info NODE-INFO )) ... )\n       (edges (edge (i EDGE-I-NODE )  (j EDGE-J-NODE )  (info (EDGE-INFO ))) ... ))"))

(index ("raw-api-call" 0) ("pipejoin" 1019) ("default-method" 1501) ("default-wiki" 1721) ("default-headers" 1974) ("default-headers-gzip" 2406) ("default-headers-none" 2628) ("mw:error" 2824) ("sx-call" 3166) ("make-sx-call" 4242) ("generate-query" 5716) ("sx-select" 6795) ("sx-match-predicate" 7626) ("sx-warnings?" 7994) ("sx-error?" 8204) ("sx-error-handler" 8414) ("sx-warning-handler" 8881) ("sx-warnings-strict" 9383) ("sx-warnings-ignore" 9602))
(def (sig (procedure "(raw-api-call command-parameters #!key wiki method)" (id raw-api-call))) (p "Send a command to the MediaWiki API and return the response as a string.  The command will be sent with http headers as specified by the default-headers parameter.") (dl (dt "command-parameters") (dd "An ALIST containing pairs of API command parameters to send to the API.  If the format command parameter is not included the result will be in the default format (usually xml source formatted for display as a human-readable HTML page)") (dt "wiki") (dd "The full URL of the API page of the wiki.  If not given, the value of the default-wiki parameter will be assumed") (dt "method") (dd "POST or GET.  If not given the value of the default-method parameter will be assumed.  Some commands such as edit and send-mail will only work with the POST method.")) (p "Returns a string containing the content of the response sent by the wiki.  The format of this depends on the format command-parameter you sent to the wiki."))
(def (sig (procedure "(pipejoin c)" (id pipejoin))) (p "Convert a vector or list of strings to a single string with text items separated by the \"|\" character") (p "This is useful for converting lists of items such as wiki page titles to the format required by the MediaWiki API.") (dl (dt "c") (dd "A list or vector containing the items to be joined")) (p "Returns a string containing the items all converted to strings and then joined together separated by a \"|\" character."))
(def (sig (parameter "default-method" (id default-method))) (p "This parameter can be used to control the http method used to send a command in the absence of a method argument to an API call") (p "Initial value: GET"))
(def (sig (parameter "default-wiki" (id default-wiki))) (p "This parameter can be used to control the URL to which a command is sent in the absence of a wiki  argument to an API call") (p "Initial value: #f (it must be set to a valid URL before use)"))
(def (sig (parameter "default-headers" (id default-headers))) (p "This parameter can be used to control the http headers that are sent along with each command") (p "See the http-client egg for a description of the format and range of acceptable values for headers") (p "Initial value: ((accept-encoding . (gzip))) which instructs the API to send the response as gzip-encoded text, which is automatically inflated by this module."))
(def (sig (procedure "(default-headers-gzip)" (id default-headers-gzip))) (p "Set the default-headers parameter to request gzip-encoding.  Any previous value is lost.  The return value of this procedure is unspecified."))
(def (sig (procedure "(default-headers-none)" (id default-headers-none))) (p "Set the default-headers parameter to an empty list.  Any previous value is lost.  The return value is unspecified."))
(def (sig (procedure "(mw:error loc msg . rest)" (id mw:error))) (p "Mainly for internal use.") (p "Raises a MediaWiki error") (dl (dt "loc") (dd "location, the procedure raising the error") (dt "msg") (dd "a message describing the error") (dt "rest") (dd "Other arguments")) (p "A composite error of the types exn and mw:error is raised."))
(def (sig (procedure "(sx-call command-parameters #!key wiki method)" (id sx-call))) (dl (dt "command-parameters") (dd "An ALIST containing pairs of API command parameters to send to the API.  A format command-parameter should NOT be included.  The module itself will add (format . xml) to all API calls to ensure that an XML response will be received.") (dt "wiki") (dd "The full URL of the API page of the wiki.  If not given, the value of the default-wiki parameter will be assumed") (dt "method") (dd "POST or GET.  If not given the value of the default-method parameter will be assumed.  Some commands such as edit and send-mail will only work with the POST method.")) (p "Returns a list of batches of xml response from the API, converted to SXML by ssax:xml->sxml.") (p "NOTE: in the case of queries and lists (API command parameter (action . query)) the size of the response may be very large.  This procedure will fetch all available data from the API, which may not be the most efficient use of memory or time.  For an alternative, see the make-sx-call procedure."))
(def (sig (procedure "(make-sx-call command-parameters #!key wiki method)" (id make-sx-call))) (dl (dt "command-parameters") (dd "An ALIST containing pairs of API command parameters to send to the API.  A format command parameter should NOT be included.  The module itself will add (format . xml) to all API calls to ensure that an XML response will be received.") (dt "wiki") (dd "The full URL of the API page of the wiki.  If not given, the value of the default-wiki parameter will be assumed") (dt "method") (dd "POST or GET.  If not given the value of the default-method parameter will be assumed.  Some commands such as edit and send-mail will only work with the POST method.")) (p "Returns a thunk (a procedure with no arguments) which returns a single batch of responses from the API each time it is called.  The size of each batch is controlled by the limit API command parameter in the API call (See " (link "http://www.mediawiki.org/wiki/API:Query#Continuing_queries" "the API documentation on continuing queries") " but you don't need to worry about the details, they're all taken care of by the module code.)  For compatibility with sx-call, the result of each call to the thunk is enclosed in a single-item list so that it can be processed using identical code.") (p "This procedure can be used to obtain query responses from the API in small batches, saving memory and, in the case where processing is aborted before all data has been fetched, saving time."))
(def (sig (procedure "(generate-query source query)" (id generate-query))) (p "Support \"generate\" syntax of API") (dl (dt "source") (dd "An ALIST representing a query which will be used to generate titles for this query.  Alternatively a string representing a single title or a sequence of titles separated by pipe (\"|\") characters, or else a list headed by one of the keywords \"titles\", \"pageids\", or \"revids\", followed by titles or ids of pages of revisions") (dt "query") (dd "An ALIST representing a query which will be combined with the source to produce a generator query. The query should not contain a \"titles\" clause or any other means of identifying the page titles, because the source argument is supposed to provide the list of titles to work on.")) (p "A new ALIST is returned representing a combination of source and query.  The rules of the \"generate\" syntax are followed, but this does not guarantee that the combination will be accepted.  See " (link "http://www.mediawiki.org/wiki/API:Query#Generators" " the API documentation") " for details."))
(def (sig (procedure "(sx-select sx-call-result data-selector-list)" (id sx-select))) (p "Formats a sx-call or make-sx-call result into tabular form") (dl (dt "sx-call-result") (dd "The batched list of sxml results from sx-call or a thunk created by make-sx-call") (dt "data-selector-list") (dd "A list of xpath descriptors each representing an entity or attribute value to be included in the selection.  Instead of an xpath descriptor, the procedure results returned by sx-call are also acceptable and will save time on successive calls.")) (p "Returns a selection of items as specified in the xpath descriptors, in the form of a row-column list.  The list length will be the number of top-level elements  returned by the original query and each item in the list will be a list of items as specified by the data-selector-list."))
(def (sig (procedure "(sx-match-predicate match-string)" (id sx-match-predicate))) (p "Creates a predicate based on a sxpath string.") (dl (dt "match-string") (dd "An xpath string")) (p "This is used internally to construct the predicates sx-warnings? and sx-error?  It will return #f if applied to a sxml document for which the result of the sxpath query is null."))
(def (sig (procedure "(sx-warnings? sxml)" (id sx-warnings?))) (dl (dt "sxml") (dd "A result returned by sx-call or by a thunk created by make-sx-call")) (p "Returns #f if there are no warnings from the API"))
(def (sig (procedure "(sx-error? sxml)" (id sx-error?))) (dl (dt "sxml") (dd "A result returned by sx-call or by a thunk created by make-sx-call")) (p "Returns #f if there are no error messages from the API"))
(def (sig (parameter "sx-error-handler" (id sx-error-handler))) (p "This parameter specifies a procedure to be executed on encountering an API error.  The form of the procedure is as follows:") (p "(lambda (loc sxml-result) ...)") (dl (dt "loc") (dd "The location.  The name of the procedure encountering the error.") (dt "sxml-result") (dd "Result.  The SSAX-parsed API response")) (p "Initial value: a procedure that calls mw:error with a suitable error message"))
(def (sig (parameter "sx-warning-handler" (id sx-warning-handler))) (p "This parameter specifies a procedure to be executed on encountering API warnings.  The form of the procedure is as follows:") (p "(lambda (loc sxml-result) ...)") (dl (dt "loc") (dd "The location.  The name of the procedure encountering the warnings.") (dt "sxml-result") (dd "Result.  The SSAX-parsed API response")) (p "Initial value: a procedure that returns the sxml-result argument, effectively ignoring the API warnings."))
(def (sig (procedure "(sx-warnings-strict)" (id sx-warnings-strict))) (p "Sets the sx-warning-handler parameter to a procedure that calls mw:error with an appropriate error message.  The return value is unspecified."))
(def (sig (procedure "(sx-warnings-ignore)" (id sx-warnings-ignore))) (p "Sets the sx-warning-handler parameter to a procedure that ignores warnings.  The return value is unspecified."))

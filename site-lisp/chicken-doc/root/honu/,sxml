((tags "egg") (toc) (section 2 "honu" (section 3 "Usage" (pre " (require-extension honu)")) (section 3 "Author" (p (int-link "/users/felix-winkelmann" "Felix Winkelmann"))) (section 3 "Documentation" (p "This is a parser for \"Honu\" syntax.") (p "Honu syntax resembles Java, instead of Scheme. Like Scheme, however, Honu has no fixed syntax. Honu supports extensibility through macros and a base syntax of H-expressions, which are analogous to S-expressions.") (p "Ignoring whitespace, an H-expression is either") (ul (li "a number") (li "an identifier") (li "a string") (li "a character") (li "a sequence of H-expressions between parentheses") (li "a sequence of H-expressions between square brackets") (li "a sequence of H-expressions between curly braces") (li "a comment followed by an H-expression") (li (tt "#;") " followed by two H-expressions") (li (tt "#hx") " followed by an H-expression") (li (tt "#sx") " followed by an S-expression")) (p "Whitespace for H-expressions is as in Scheme: any character for which " (tt "char-whitespace?") " returns true counts as a whitespace.") (section 4 "Numbers" (p "The syntax for Honu numbers is the same as for Java. The S-expression encoding of a particular H-expression number is the obvious Scheme number.")) (section 4 "Identifiers" (p "The syntax for Honu identifiers is the union of Java identifiers plus semicolon (" (tt ";") "), comma (" (tt ",") "), and a set of operator identifiers. An operator identifier is any combination of the following characters:") (pre " + - _ = ? : < > . ! % ^ & * / ~ |") (p "The S-expression encoding of an H-expression identifier is the obvious Scheme symbol. Input is parsed to form maximally long identifiers. For example, the input " (tt "int->int;") "  is parsed as four H-expressions:") (p (tt "int") ", " (tt "->") ", " (tt "int") " and " (tt ";") ".")) (section 4 "Strings" (p "The syntax for an H-expression string is exactly the same as for an S-expression string, and an H-expression string is represented by the obvious Scheme string.")) (section 4 "Characters" (p "The syntax for an H-expression character is the same as for an H-expression string that has a single content character, except that a single quote (" (tt "'") "}) surrounds the character instead of double quotes (" (tt ")") "). The S-expression representation of an H-expression character is the obvious Scheme character.")) (section 4 "Parentheses, Brackets, and Braces" (p "A parenthesized (), bracketed [], or braced {} H-expression sequence is represented by a Scheme list. The first element of the list is " (tt "#%parens") " for a parenthesized sequence, " (tt "#%brackets") " for a brackets sequence, or " (tt "#%braces") " for a braced sequence. The remaining elements are the Scheme representation for the parenthesized, bracketed, or braced H-expressions in order.")) (section 4 "Comments" (p "An H-expression comment starts with either  " (tt "//") "  or " (tt "/*") " . In the former case, the comment runs until a linefeed or return. In the second case, the comment runs until  " (tt "*/") " , but " (tt "/* .... */") "  comments can be nested. Comments are treated like whitespace.") (p (tt "#;") "  starts an H-expression comment, as in Scheme. It is followed by an H-expression to be treated as whitespace. Note that " (tt "#;") "  is equivalent to " (tt "#sx#;#hx") ".")) (section 4 "Interface" (section 5 "read-honu" (def (sig (procedure "(read-honu [PORT [SHOW-LINE-NUMBERS [WRAP]]])" (id read-honu))) (p "Reads a single honu expression from " (tt "PORT") ", which defaults to the value of " (tt "(current-input-port)") " . If " (tt "SHOW-LINE-NUMBERS") " is given and true, then parsing errors will report the offending line-number (as obtained by " (tt "port-position") ".  The optional argument " (tt "WRAP") " may be given to wrap each read item into a user-definable structure, or to perform user-specific conversion. " (tt "WRAP") " is called for each H-expression with the expression and the current line number as arguments replacing the H-expression with the result."))))) (section 3 "License" (pre "Copyright (c) 2006-2009, Felix L. Winkelmann.  All rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the Software),\nto deal in the Software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED ASIS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.")) (section 3 "Version history" (dl (dt "1.6") (dd "fixed testcase") (dt "1.5") (dd "ported to CHICKEN 4") (dt "1.4") (dd "added support for static linking") (dt "1.3") (dd "optional wrapper function argument") (dt "1.2") (dd "Fixed imcomplete floating-point number parsing") (dt "1.1") (dd "Better error message for unexpected closing parens/brackets") (dt "1.0") (dd "Initial release")))))
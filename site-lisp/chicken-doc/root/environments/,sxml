((tags "egg") (section 2 "environments" (p "User defined first-class environments for dynamically evaluated or interpreted code.") (toc) (section 3 "Documentation" (p "This extension provides procedures for creating and manipulating evaluation environments. An extension of the Unit eval API.") (p "An evaluation environment can be passed as the second argument to the " (tt "eval") " procedure.") (p "Environments can optionally be extendable (evaluated code may create new bindings), and selected variables may be mutable or immutable.") (p "The " (tt "(interaction-environment)") " is a special case. All symbols are mutable but the environment itself is not mutable.") (p "These environments do not handle syntactic keywords, only normal global variables; " (i "i.e. No Macros!")) (section 4 "make-environment" (def (sig (procedure "(make-environment [EXTENSIBLE?])" (id make-environment))) (p "Returns a fresh, empty environment. If " (tt "EXTENSIBLE?") " is " (tt "#t") ", then evaluated code can create new bindings inside this environment.") (p (tt "EXTENSIBLE?") " is " (tt "boolean") ". Default is " (tt "#f") "."))) (section 4 "environment-copy" (def (sig (procedure "(environment-copy ENV [EXTENSIBLE? [SYMBOLS [MUTABLE?]]])" (id environment-copy))) (p "Returns a copy of the environment " (tt "ENV") ".") (p (tt "EXTENSIBLE?") " is a " (tt "boolean") ". Default is " (tt "#f") ".") (p (tt "SYMBOLS") " is a " (tt "list") " of " (tt "symbol") ", or " (tt "#f") ". Default is " (tt "#f") ".") (p (tt "MUTABLE?") " is a " (tt "boolean") ". Default is " (tt "EXTENSIBLE?") ".") (p "If " (tt "EXTENSIBLE?") " is " (tt "#t") ", then evaluated code can create new variable bindings inside the environment.") (p "If " (tt "SYMBOLS") " is not " (tt "#f") ", then the environment copy will only contain those symbols from the environment " (tt "ENV") ". Otherwise a full copy is made.") (p "If " (tt "MUTABLE?") " is " (tt "#t") ", then evaluated code can set the copied bindings in the environment. If " (tt "EXTENSIBLE?") " is not supplied then the copied variable's mutable property is used.") (p (i "Note") " that the only way to supply a " (tt "MUTABLE?") " value is to supply an " (tt "EXTENSIBLE?") " value."))) (section 4 "environment?" (def (sig (procedure "(environment? X) => boolean" (id environment?))) (p "Is " (tt "X") " an evaluation environment?"))) (section 4 "interaction-environment?" (def (sig (procedure "(interaction-environment? X) => boolean" (id interaction-environment?))) (p "Is " (tt "X") " the " (tt "interaction-environment") "?"))) (section 4 "environment-empty?" (def (sig (procedure "(environment-empty? ENV) => boolean" (id environment-empty?))) (p "Is the environment " (tt "ENV") " sans bindings?") (p "When " (tt "ENV") " is the " (tt "(interaction-environment)") " this procedure always returns " (tt "#f") "."))) (section 4 "environment-extendable?" (def (sig (procedure "(environment-extendable? ENV) => boolean" (id environment-extendable?))) (p "Is the environment " (tt "ENV") " extensible?"))) (section 4 "environment-has-binding?" (def (sig (procedure "(environment-has-binding? ENV SYMBOL) => boolean" (id environment-has-binding?))) (p "Is the variable " (tt "SYMBOL") " bound in the environment " (tt "ENV") "?"))) (section 4 "environment-includes?" (def (sig (procedure "(environment-includes? ENV SYMBOL) => boolean" (id environment-includes?))) (p "Is a variable " (tt "SYMBOL") " in the environment " (tt "ENV") "?") (p "When " (tt "ENV") " is the " (tt "(interaction-environment)") " this procedure always returns " (tt "#t") "."))) (section 4 "environment-mutable?" (def (sig (procedure "(environment-mutable? ENV SYMBOL) => boolean" (id environment-mutable?))) (p "Is the variable " (tt "SYMBOL") " in environment " (tt "ENV") " mutable?") (p "When " (tt "ENV") " is the " (tt "(interaction-environment)") " this procedure always returns " (tt "#t") "."))) (section 4 "environment-set-mutable!" (def (sig (procedure "(environment-set-mutable! ENV SYMBOL MUTABLE?)" (id environment-set-mutable!))) (p "Makes the variable " (tt "SYMBOL") " in environment " (tt "ENV") " mutable, if " (tt "MUTABLE?") " is " (tt "#t") ", immutable otherwise.") (p "No effect when called with the " (tt "(interaction-environment)") "."))) (section 4 "environment-ref" (def (sig (procedure "(environment-ref ENV SYMBOL) => *" (id environment-ref))) (p "Returns the value of the variable " (tt "SYMBOL") " in environment " (tt "ENV") ".") (p "If the environment does not contain the variable, or if the variable is not bound, an error is signaled."))) (section 4 "environment-set!" (def (sig (procedure "(environment-set! ENV SYMBOL VALUE)" (id environment-set!))) (p "Updates the binding " (tt "SYMBOL") " in environment " (tt "ENV") " with " (tt "VALUE") ". A non-existent binding will be created as mutable.") (p "It is an error to attempt to create a new binding in an inextensible environment.") (p "Changing the value of an existing immutable variable will succeed."))) (section 4 "environment-extend!" (def (sig (procedure "(environment-extend! ENV SYMBOL [VALUE [MUTABLE?]])" (id environment-extend!))) (p "Adds a new binding " (tt "SYMBOL") " in environment " (tt "ENV") ".") (p "If the optional argument " (tt "MUTABLE?") " is not given or " (tt "#t") ", then the binding is mutable and can be changed by evaluating " (tt "(set! VARIABLE ...)") ".") (p "The variable " (tt "SYMBOL") " is initialized to " (tt "VALUE") ", or is unbound, if " (tt "VALUE") " is not given.") (p "Here the creation of a new variable in an inextensible environment will succeed.") (p "Changing the value of an immutable variable will succeed."))) (section 4 "environment-remove!" (def (sig (procedure "(environment-remove! ENV SYMBOLS [SILENT? [INEXTENSIBLE?]])" (id environment-remove!))) (p "Removes bindings " (tt "SYMBOLS") " in environment " (tt "ENV") ".") (p (tt "SYMBOLS") " is a " (tt "list") " of " (tt "symbol") ", or a " (tt "symbol") ".") (p (tt "SILENT?") " is a " (tt "boolean") ". Default is " (tt "#f") ".") (p (tt "INEXTENSIBLE?") " is a " (tt "boolean") ". Default is " (tt "#t") ".") (p "Wiil not remove from an inextensible environment, unless " (tt "INEXTENSIBLE?") " is " (tt "#t") ".") (p "It is an error to attempt to remove an undefined symbol, unless " (tt "SILENT?") " is " (tt "#t") ".") (p "It is an error to attempt to remove from an inextensible environment when " (tt "INEXTENSIBLE?") " is " (tt "#f") ", unless " (tt "SILENT?") " is " (tt "#t") "."))) (section 4 "environment-symbols" (def (sig (procedure "(environment-symbols ENV) => list" (id environment-symbols))) (p "Returns a list of the symbols in the given environment."))) (section 4 "environment-for-each" (def (sig (procedure "(environment-for-each ENV PROC)" (id environment-for-each))) (p "Calls " (tt "PROC") " with each binding in the given environment.") (p (tt "PROC") " is a " (tt "(procedure (symbol *))") " where the first argument is the variable name and the second is the value.")))) (section 3 "Examples" (highlight scheme "(use environments)\n\n; create an immutable environment with all R5RS procedures:\n(define my-env\n(environment-copy (scheme-report-environment 5) #f) )\n\n(eval '(set! car 99) my-env)\n => ; .. Error\n\n(eval '(define abc 100) my-env)\n => ; .. Error\n\n(environment-extend! my-env 'abc 100)\n\n(eval 'abc my-env)\n => 100\n(eval '(set! abc 101) my-env)\n(eval 'abc my-env)\n => 101\n\n(environment-set-mutable! my-env 'abc #f)\n(eval '(set! abc #f) my-env)\n => ; .. Error")) (section 3 "Author" (p (int-link "/users/felix-winkelmann" "Felix Winkelmann")) (p (int-link "/users/kon-lovett" "Kon Lovett"))) (section 3 "Changelog" (dl (dt "1.6.0") (dd "Added " (tt "interaction-environment?") " & " (tt "environment-empty?") ". Added inextensible flag to " (tt "environmet-remove!") ", [Kon Lovett]") (dt "1.53") (dd "Ported to Chicken 4") (dt "1.52") (dd "Minor code cleanup - no semantic changes [Kon Lovett]") (dt "1.51") (dt "1.5") (dd "Bug fix " (tt "environment-set!") " [Kon Lovett]") (dt "1.4") (dd (tt "environment-copy") " symbol filtering, extended interaction-environment support, added " (tt "environment-symbols") " [Kon Lovett]") (dt "1.3") (dd "Fixed bug in " (tt "environment-has-binding?") " [reported by Mario Domenech Goulart]") (dt "1.2") (dd "Added " (tt "environment-for-each")) (dt "1.1") (dd "Fixed bug in " (tt "environment-includes?") " with the interaction-environment, added " (tt "environment-mutable?") " and " (tt "environment-extendable?")) (dt "1.0") (dd "Initial release"))) (section 3 "License" (pre " Copyright (c) 2003, Felix L. Winkelmann\n All rights reserved.") (pre " Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following\n conditions are met:") (pre "   Redistributions of source code must retain the above copyright notice, this list of conditions and the following\n     disclaimer.\n   Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following\n     disclaimer in the documentation and/or other materials provided with the distribution.\n   Neither the name of the author nor the names of its contributors may be used to endorse or promote\n     products derived from this software without specific prior written permission.") (pre " THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS\n OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY\n AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR\n CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n POSSIBILITY OF SUCH DAMAGE."))))
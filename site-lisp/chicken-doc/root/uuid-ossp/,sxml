((tags "egg") (section 2 "uuid-ossp" (toc)) (section 2 "Documentation" (p "Provides access to the " (link "http://www.ossp.org/pkg/lib/uuid" "OSSP UUID Library") ". This document does not supplant the OSSP UUID Library documentation.") (p "The OSSP UUID Library is not included in this distribution. The library source is available at the above URL. See the Issues section below for more information.") (section 3 "Pre-defined Namespaces" (dl (dt "\"nil\"") (dd "00000000-0000-0000-0000-000000000000") (dt "\"ns") (dd "DNS\" : 6ba7b810-9dad-11d1-80b4-00c04fd430c8") (dt "\"ns") (dd "URL\" : 6ba7b811-9dad-11d1-80b4-00c04fd430c8") (dt "\"ns") (dd "OID\" : 6ba7b812-9dad-11d1-80b4-00c04fd430c8") (dt "\"ns") (dd "X500\" : 6ba7b814-9dad-11d1-80b4-00c04fd430c8"))) (section 3 "UUID Variants" (dl (dt "V1") (dd "DCE 1.1 variant UUID of version 1") (dt "V1-MC") (dd "DCE 1.1 variant UUID of version 1 with random MAC address") (dt "V3") (dd "DCE 1.1 variant UUID of version 3") (dt "V4") (dd "DCE 1.1 variant UUID of version 4") (dt "V5") (dd "DCE 1.1 variant UUID of version 5"))) (section 3 "Predicates" (section 4 "uuid?" (def (sig (procedure "(uuid? UUID) => boolean" (id uuid?))) (p "Is " (tt "UUID") " a uuid?"))) (section 4 "uuid-null?") (section 4 "uuid-nil?" (def (sig (procedure "(uuid-null? UUID) => boolean" (id uuid-null?)) (procedure "(uuid-nil? UUID) => boolean" (id uuid-nil?))) (p "Is " (tt "UUID") " the nil-uuid?"))) (section 4 "uuid-compare" (def (sig (procedure "(uuid-compare UUID1 UUID2) => integer" (id uuid-compare))) (p "Returns the comparison of " (tt "UUID1") " and " (tt "UUID2") " as " (tt "-1") ", " (tt "0") ", or " (tt "1") "."))) (section 4 "uuid=?" (def (sig (procedure "(uuid=? UUID1 UUID2) => boolean" (id uuid=?))) (p "Are " (tt "UUID1") " and " (tt "UUID2") " equal?"))) (section 4 "uuid<?" (def (sig (procedure "(uuid<? UUID1 UUID2) => boolean" (id uuid<?))) (p "Does " (tt "UUID1") " order below " (tt "UUID2") "?"))) (section 4 "uuid>?" (def (sig (procedure "(uuid>? UUID1 UUID2) => boolean" (id uuid>?))) (p "Does " (tt "UUID1") " order above " (tt "UUID2") "?"))) (section 4 "uuid<=?" (def (sig (procedure "(uuid<=? UUID1 UUID2) => boolean" (id uuid<=?))) (p "Does " (tt "UUID1") " order below or the same as " (tt "UUID2") "?"))) (section 4 "uuid>=?" (def (sig (procedure "(uuid>=? UUID1 UUID2) => boolean" (id uuid>=?))) (p "Does " (tt "UUID1") " order above or the same as " (tt "UUID2") "?")))) (section 3 "Operations" (section 4 "uuid-clear!" (def (sig (procedure "(uuid-clear! UUID) => uuid" (id uuid-clear!))) (p "Overwrites the existing " (tt "UUID") " with the nil-uuid."))) (section 4 "uuid-copy") (section 4 "uuid-clone" (def (sig (procedure "(uuid-copy UUID) => uuid" (id uuid-copy)) (procedure "(uuid-clone UUID) => uuid" (id uuid-clone))) (p "Returns a copy of the " (tt "UUID") "."))) (section 4 "make-uuid" (def (sig (procedure "(make-uuid [VARIANT [NAMESPACE NAME]]) => uuid" (id make-uuid))) (p "Returns a uuid " (tt "VARIANT") ", or the nil-uuid when missing.") (p "The " (tt "NAMESPACE") " and " (tt "NAME") " are required for V3 and V5 variants.") (p (tt "VARIANT") ", " (tt "NAMESPACE") ", " (tt "NAME") " are " (tt "string") ".") (p "The symbols " (tt "time") " and " (tt "random") " are synonyms for " (tt "V1") " and " (tt "V4") ", respectively."))) (section 4 "string->uuid" (def (sig (procedure "(string->uuid STRING) => uuid" (id string->uuid))) (p "Returns a new uuid from the external " (tt "STRING") " representation."))) (section 4 "uuid->string" (def (sig (procedure "(uuid->string UUID) => string" (id uuid->string))) (p "Returns the external string representation of " (tt "UUID") "."))) (section 4 "uuid-load!" (def (sig (procedure "(uuid-load! UUID [NAMESPACE]) => uuid" (id uuid-load!))) (p "Overwrites the existing " (tt "UUID") " with the " (tt "NAMESPACE") " indicated uuid. When missing " (tt "\"nil\"") " is assumed.") (p (tt "NAMESPACE") " is a " (tt "string") "."))) (section 4 "uuid-load" (def (sig (procedure "(uuid-load [NAMESPACE]) => uuid" (id uuid-load))) (p "Returns a new uuid with the " (tt "NAMESPACE") " uuid. When missing " (tt "\"nil\"") " is assumed.") (p (tt "NAMESPACE") " is a " (tt "string") "."))) (section 4 "uuid-import" (def (sig (procedure "(uuid-import STRING) => uuid" (id uuid-import))) (p "Returns a uuid from the external " (tt "STRING") " representation."))) (section 4 "uuid-import-binary" (def (sig (procedure "(uuid-import-binary STRING) => uuid" (id uuid-import-binary))) (p "Returns a uuid from the external " (tt "STRING") " binary representation."))) (section 4 "uuid-import-siv" (def (sig (procedure "(uuid-import-siv STRING) => uuid" (id uuid-import-siv))) (p "Returns a uuid from the external " (tt "STRING") " single integer value representation."))) (section 4 "uuid-export" (def (sig (procedure "(uuid-export UUID) => string" (id uuid-export))) (p "Returns the external string representation of " (tt "UUID") "."))) (section 4 "uuid-export-binary" (def (sig (procedure "(uuid-export-binary UUID) => " (id uuid-export-binary))) (p "Returns the external binary-string representation of " (tt "UUID") "."))) (section 4 "uuid-export-text" (def (sig (procedure "(uuid-export-text UUID) => string" (id uuid-export-text))) (p "Returns the external text representation of " (tt "UUID") "."))) (section 4 "uuid-export-siv" (def (sig (procedure "(uuid-export-siv UUID) => string" (id uuid-export-siv))) (p "Returns the external single integer value representation of " (tt "UUID") ".")))) (section 3 "Auxillary Procedures" (section 4 "uuid-version" (def (sig (procedure "(uuid-version) => integer" (id uuid-version))) (p "Returns OSSP UUID Library version as an unsigned-long.")))) (section 3 "Errors" (p "Errors generated by the OSSP UUID Library are signalled using a condition of " (tt "(exn uuid)") ", with properties message, and code.") (p "Argument errors are signalled using " (tt "error") "."))) (section 2 "Usage" (highlight scheme "(require-extension uuid-ossp)")) (section 2 "Notes" (ul (li "The " (tt "uuid?") ". " (tt "uuid-null?") ", " (tt "uuid-compare") ", " (tt "uuid=?") ", " (tt "uuid<?") ", " (tt "uuid>?") ", " (tt "uuid<=?") ", " (tt "uuid>=?") ", " (tt "make-uuid") ", " (tt "uuid-copy") ", " (tt "uuid-clear!") ", " (tt "string->uuid") ", " (tt "uuid->string") " share the same signature as the corresponding routines in the " (i "uuid-lib") " extension.") (li "Requires at least release 1.5.0 of the " (link "http://www.ossp.org/pkg/lib/uuid" "OSSP uuid") " Library.") (li "Installation of this egg might require manual intervention. Please see the " (i "uuid-ossp-fix.[ch]") " files which isolate the system header confilicts caused by the OSSP " (i "uuid.h") " header.") (li "The build uses the " (i "uuid-config") " tool to locate the proper include directory.") (li "Reed Sheridan has pointed out that the Debian system renames the library, as an existing library of the same name already exists. For example, " (i "uuid.h") " is " (i "ossp/uuid.h") "."))) (section 2 "Author" (p (int-link "/users/kon-lovett" "Kon Lovett"))) (section 2 "Version history" (dl (dt "1.4.0") (dd "Added " (tt "uuid-copy") ", " (tt "uuid-clear!") ", " (tt "string->uuid") ", " (tt "uuid->string") ", " (tt "uuid-import-siv") ", " (tt "uuid-export-siv") ", " (tt "uuid-load!") ". Deprecated " (tt "uuid<>?") ". Dropped " (tt "uuid=") ", etc.") (dt "1.3.0") (dd "Deprecated " (tt "uuid=") ", etc.") (dt "1.22") (dd "Hello"))) (section 2 "License" (p "Copyright (C) 2010 Kon Lovett.  All rights reserved.") (p "Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the Software), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:") (p "The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.") (p "THE SOFTWARE IS PROVIDED ASIS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.")))
(index ("uuid?" 0) ("uuid-null?" 94) ("uuid-nil?" 94) ("uuid-compare" 261) ("uuid=?" 462) ("uuid<?" 587) ("uuid>?" 715) ("uuid<=?" 843) ("uuid>=?" 988) ("uuid-clear!" 1133) ("uuid-copy" 1268) ("uuid-clone" 1268) ("make-uuid" 1435) ("string->uuid" 1886) ("uuid->string" 2037) ("uuid-load!" 2180) ("uuid-load" 2444) ("uuid-import" 2670) ("uuid-import-binary" 2815) ("uuid-import-siv" 2981) ("uuid-export" 3155) ("uuid-export-binary" 3296) ("uuid-export-text" 3452) ("uuid-export-siv" 3601) ("uuid-version" 3764))
(def (sig (procedure "(uuid? UUID) => boolean" (id uuid?))) (p "Is " (tt "UUID") " a uuid?"))
(def (sig (procedure "(uuid-null? UUID) => boolean" (id uuid-null?)) (procedure "(uuid-nil? UUID) => boolean" (id uuid-nil?))) (p "Is " (tt "UUID") " the nil-uuid?"))
(def (sig (procedure "(uuid-compare UUID1 UUID2) => integer" (id uuid-compare))) (p "Returns the comparison of " (tt "UUID1") " and " (tt "UUID2") " as " (tt "-1") ", " (tt "0") ", or " (tt "1") "."))
(def (sig (procedure "(uuid=? UUID1 UUID2) => boolean" (id uuid=?))) (p "Are " (tt "UUID1") " and " (tt "UUID2") " equal?"))
(def (sig (procedure "(uuid<? UUID1 UUID2) => boolean" (id uuid<?))) (p "Does " (tt "UUID1") " order below " (tt "UUID2") "?"))
(def (sig (procedure "(uuid>? UUID1 UUID2) => boolean" (id uuid>?))) (p "Does " (tt "UUID1") " order above " (tt "UUID2") "?"))
(def (sig (procedure "(uuid<=? UUID1 UUID2) => boolean" (id uuid<=?))) (p "Does " (tt "UUID1") " order below or the same as " (tt "UUID2") "?"))
(def (sig (procedure "(uuid>=? UUID1 UUID2) => boolean" (id uuid>=?))) (p "Does " (tt "UUID1") " order above or the same as " (tt "UUID2") "?"))
(def (sig (procedure "(uuid-clear! UUID) => uuid" (id uuid-clear!))) (p "Overwrites the existing " (tt "UUID") " with the nil-uuid."))
(def (sig (procedure "(uuid-copy UUID) => uuid" (id uuid-copy)) (procedure "(uuid-clone UUID) => uuid" (id uuid-clone))) (p "Returns a copy of the " (tt "UUID") "."))
(def (sig (procedure "(make-uuid [VARIANT [NAMESPACE NAME]]) => uuid" (id make-uuid))) (p "Returns a uuid " (tt "VARIANT") ", or the nil-uuid when missing.") (p "The " (tt "NAMESPACE") " and " (tt "NAME") " are required for V3 and V5 variants.") (p (tt "VARIANT") ", " (tt "NAMESPACE") ", " (tt "NAME") " are " (tt "string") ".") (p "The symbols " (tt "time") " and " (tt "random") " are synonyms for " (tt "V1") " and " (tt "V4") ", respectively."))
(def (sig (procedure "(string->uuid STRING) => uuid" (id string->uuid))) (p "Returns a new uuid from the external " (tt "STRING") " representation."))
(def (sig (procedure "(uuid->string UUID) => string" (id uuid->string))) (p "Returns the external string representation of " (tt "UUID") "."))
(def (sig (procedure "(uuid-load! UUID [NAMESPACE]) => uuid" (id uuid-load!))) (p "Overwrites the existing " (tt "UUID") " with the " (tt "NAMESPACE") " indicated uuid. When missing " (tt "\"nil\"") " is assumed.") (p (tt "NAMESPACE") " is a " (tt "string") "."))
(def (sig (procedure "(uuid-load [NAMESPACE]) => uuid" (id uuid-load))) (p "Returns a new uuid with the " (tt "NAMESPACE") " uuid. When missing " (tt "\"nil\"") " is assumed.") (p (tt "NAMESPACE") " is a " (tt "string") "."))
(def (sig (procedure "(uuid-import STRING) => uuid" (id uuid-import))) (p "Returns a uuid from the external " (tt "STRING") " representation."))
(def (sig (procedure "(uuid-import-binary STRING) => uuid" (id uuid-import-binary))) (p "Returns a uuid from the external " (tt "STRING") " binary representation."))
(def (sig (procedure "(uuid-import-siv STRING) => uuid" (id uuid-import-siv))) (p "Returns a uuid from the external " (tt "STRING") " single integer value representation."))
(def (sig (procedure "(uuid-export UUID) => string" (id uuid-export))) (p "Returns the external string representation of " (tt "UUID") "."))
(def (sig (procedure "(uuid-export-binary UUID) => " (id uuid-export-binary))) (p "Returns the external binary-string representation of " (tt "UUID") "."))
(def (sig (procedure "(uuid-export-text UUID) => string" (id uuid-export-text))) (p "Returns the external text representation of " (tt "UUID") "."))
(def (sig (procedure "(uuid-export-siv UUID) => string" (id uuid-export-siv))) (p "Returns the external single integer value representation of " (tt "UUID") "."))
(def (sig (procedure "(uuid-version) => integer" (id uuid-version))) (p "Returns OSSP UUID Library version as an unsigned-long."))

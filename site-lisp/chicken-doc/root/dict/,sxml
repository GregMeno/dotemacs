((section 2 "dict" (toc) (section 3 "Introduction" (p "Pure scheme implementation of a rfc2229 protocol client. This is a rewrite of the dict.egg available for chicken 3.x which was a wrapper around libdict.")) (section 3 "Examples" (highlight scheme "(use dict)\n\n(*current-log-port* (current-output-port))\n\n(define con (connect \"dict.org\"))\n\n(receive (success matches) (!match con \"scheme\" db: 'all)\n  (if success\n      (printf \"Found matches: ~A~%\" matches)))\n\n(receive (success def) (!define con \"Scheme-to-C\" db: \"foldoc\")\n  (if (and success (not (null? def)))\n      (printf \"Defintion for Scheme-to-C: ~A~%\" (definition-text (car def)))))\n\n(receive (success strats) (!strategies con)\n  (if success\n      (printf \"Strategies: ~A~%\" strats)))\n\n(disconnect con)")) (section 3 "Authors" (p (int-link "David Krentzlin"))) (section 3 "License" (pre " Copyright (c) 2009 David Krentzlin <david@lisp-unleashed.de>\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation\n  files (the \"Software\"), to deal in the Software without\n  restriction, including without limitation the rights to use,\n  copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the\n  Software is furnished to do so, subject to the following\n  conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n  OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n  OTHER DEALINGS IN THE SOFTWARE.") (section 4 "Requirements" (p "Requires the " (int-link "defstruct") "," (int-link "md5") " and " (int-link "utf8") " extensions."))) (section 3 "Documentation" (p "This extension provides a set of procedures, that can be used to communicate with dict-servers. At the moment of this writing it supports almost all commands of the dict-protocol. Mime-headers are currently not supported.") (section 4 "Connect/Disconnect" (def (sig (procedure "(connect server #!key (port (*default-port*)) (client \"dict.egg for chicken scheme\") (timeout #f)) => CONNECTION" (id connect))) (p "Connects to the dict-server with the specified port or the default-port as specified in rfc2229 (2628). Once the connection is established, the server's banner is parsed and information are extracted. Finally the procedure issues a client-command with the specified client-string as parameter. The value for timeout is directly used to set the timeout for tcp-connect. The procedure returns a connection-object on success or signals an error otherwise.")) (def (sig (procedure "(disconnect CONNECTION) => BOOL" (id disconnect))) (p "Closes the connection represented by CONNECTION and sets its  status to disconnected. Returns #t if the connection was closed successfully or false otherwise."))) (section 4 "Connection-object" (p "The connection-object has the following accessors.") (def (sig (procedure "(connection-msg-id CONNECTION) => STRING " (id connection-msg-id))) (p "The message-id as given by the server")) (def (sig (procedure "(connection-server-capabilities CONNECTION) => LIST " (id connection-server-capabilities))) (p "The list of the server's capabilities. For example auth, mime etc."))) (section 4 "Logging" (p "Sometimes you might want to see what happens when you use the extension. For those cases there is support for logging input and output.") (def (sig (parameter " *current-log-port* " (id *current-log-port*))) (p "Set this to a port and the extension will log all input send and all output retrieved from the server to this port. If you want to disable logging, set it to #f. It defaults to #f, so logging is disabled."))) (section 4 "Status-responses" (p "In case of an error the command-procedures return the status-response send by the server. In order to identify a status or present an error-message to the user, there are procedures that deal with status-response-objects") (def (sig (procedure "(status-response? RESP) => BOOL " (id status-response?))) (p "Check if a response is a status-response.")) (def (sig (procedure "(response-status-error? STATUS-RESPONSE) => BOOL " (id response-status-error?))) (p "Checks if the given status-response represents an error.")) (def (sig (procedure "(response-status-code STATUS-RESPONSE) => FIXNUM" (id response-status-code))) (p "Retrieve the status-code (a positive fixnum) of the STATUS-RESPONSE.")) (def (sig (procedure "(response-status-message STATUS-RESPONSE) => STRING" (id response-status-message))) (p "Retrieve the textual information send by the server for this STATUS-RESPONSE")) (def (sig (procedure "(response-status-code->string FIXNUM) => STRING" (id response-status-code->string))) (p "Map status-codes to textual-representation as specified in rfc2229"))) (section 4 "Status-Response-Predicates" (p "For each status-response-type there is a predicate that checks whether a given status-response represents that specific type. See the list of status-predicates at the end of this documentation.")) (section 4 "Commands" (p "Generally all commands return two values. The first value is a boolean indicating success or failure of the operation. The second value depends on the operation performed. In the case of a failure all commands return the status-response send by the server as the second value.") (def (sig (procedure "(!match CONNECTION word #!key (strategy 'default) (db 'first)) => (VALUES BOOL ALIST|STATUS-RESPONSE) " (id !match))) (p "Performs a match-operation on the dict-server for the given word. The strategy to use can be specified by the key-word-argument strategy. It defaults to the symbol 'default which means: \"Use the default-strategy\". The default-strategy is server-dependent. Legal values for the strategy are:") (ul (li "a string => the name of a strategy (see !strategies)") (li "the symbol 'default => this means use the default strategy")) (p "The db key-word-argument specifies the database to search. Legal values for db are:") (ul (li "a string => the name of a database (see !databases)") (li "the symbol 'first => this means search all databases and stop after the first match") (li "the symbol 'all => this means search all databases and return all matches")) (p "This procedure returns an alist mapping databases to matches.")) (def (sig (procedure "(!define CONNECTION word #!key (db 'first)) => (VALUES BOOL LIST|STATUS-RESPONSE)" (id !define))) (p "Performs a define-operation on the dict-server for the given word. The db key-word-argument specifies the database to use: Legal values for db are:") (ul (li "a string => the name of a database (see !databases)") (li "the symbol 'first => this means search all databases and stop after the first match") (li "the symbol 'all => this means search all databases and return all matches")) (p "This procedure returns a list of lists where each sublist consists of the following elements: (WORD DB DB-DESCRPTION DEFINITION)")) (def (sig (procedure "(!databases CONNECTION) => (VALUES BOOL LIST|STATUS-RESPONSE)" (id !databases))) (p "Get a list of available databases.")) (def (sig (procedure "(!strategies CONNECTION) => (VALUES BOOL LIST|STATUS-RESPONSE)" (id !strategies))) (p "Get a list of available search-strategies")) (def (sig (procedure "(!server-information CONNECTION) => (VALUES BOOL STRING|STATUS-RESPONSE)" (id !server-information))) (p "Retrieve information about the server.")) (def (sig (procedure "(!database-information CONNECTION db) => (VALUES STRING LIST|STATUS-RESPONSE)" (id !database-information))) (p "Retrieve information about the database specified by db.")) (def (sig (procedure "(!help CONNECTION) => (VALUES BOOL STRING|STATUS-RESPONSE)" (id !help))) (p "Retrieve the help-text.")) (def (sig (procedure "(!status CONNECTION) => (VALUES BOOL STRING|STATUS-RESPONSE)" (id !status))) (p "Retrieve general status-information e.g. timing-values.")) (def (sig (procedure "(!quit CONNECTION) => (VALUES BOOL STATUS-RESPONSE)" (id !quit))) (p "Ask the server to close the connection. Please don't use this directly, but (disconnect) instead.")) (def (sig (procedure "(!announce-client CONNECTION client) => (VALUES BOOL STATUS-RESPONSE)" (id !announce-client))) (p "Notify the server about the client that is talking to it. This happens automatically during (connect)") (pre "")) (def (sig (procedure "(!authenticate CONNECTION username password) => (VALUES BOOL STATUS-RESPONSE)" (id !authenticate))) (p "Attempts to authenticate the given user at the dict-server. This is sometimes needed to access dictionaries that are otherwise not readable."))) (section 4 "List of status-predicates" (ul (li "status:n-databases-present? ") (li "status:n-strategies-present?   ") (li "status:database-information-follows? ") (li "status:help-text-follows? ") (li "status:server-information-follows?") (li "status:challenge-follows? ") (li "status:n-definitions-retrieved? ") (li "status:word-database-name?") (li "status:n-matches-retrieved? ") (li "status:statistic? ") (li "status:banner? ") (li "status:closing-connection?") (li "status:authentication-successful? ") (li "status:ok? ") (li "status:send-response? ") (li "status:server-temporarily-unavailable?") (li "status:shutdown-at-op-request? ") (li "status:syntax-error-command? ") (li "status:syntax-error-parameter?") (li "status:command-not-implemented?") (li "status:parameter-not-implemented? ") (li "status:access-denied?") (li "status:access-denied-show-info? ") (li "status:access-denied-unknown-mech? ") (li "status:invalid-database?") (li "status:invalid-strategy? ") (li "status:no-match? ") (li "status:no-database-present? ") (li "status:no-strategies-present?")))) (section 3 "Versionhistory")))
(index ("connect" 0) ("disconnect" 613) ("connection-msg-id" 852) ("connection-server-capabilities" 987) ("*current-log-port*" 1175) ("status-response?" 1457) ("response-status-error?" 1586) ("response-status-code" 1753) ("response-status-message" 1929) ("response-status-code->string" 2119) ("!match" 2300) ("!define" 3265) ("!databases" 3911) ("!strategies" 4056) ("!server-information" 4210) ("!database-information" 4379) ("!help" 4573) ("!status" 4699) ("!quit" 4861) ("!announce-client" 5054) ("!authenticate" 5289))
(def (sig (procedure "(connect server #!key (port (*default-port*)) (client \"dict.egg for chicken scheme\") (timeout #f)) => CONNECTION" (id connect))) (p "Connects to the dict-server with the specified port or the default-port as specified in rfc2229 (2628). Once the connection is established, the server's banner is parsed and information are extracted. Finally the procedure issues a client-command with the specified client-string as parameter. The value for timeout is directly used to set the timeout for tcp-connect. The procedure returns a connection-object on success or signals an error otherwise."))
(def (sig (procedure "(disconnect CONNECTION) => BOOL" (id disconnect))) (p "Closes the connection represented by CONNECTION and sets its  status to disconnected. Returns #t if the connection was closed successfully or false otherwise."))
(def (sig (procedure "(connection-msg-id CONNECTION) => STRING " (id connection-msg-id))) (p "The message-id as given by the server"))
(def (sig (procedure "(connection-server-capabilities CONNECTION) => LIST " (id connection-server-capabilities))) (p "The list of the server's capabilities. For example auth, mime etc."))
(def (sig (parameter " *current-log-port* " (id *current-log-port*))) (p "Set this to a port and the extension will log all input send and all output retrieved from the server to this port. If you want to disable logging, set it to #f. It defaults to #f, so logging is disabled."))
(def (sig (procedure "(status-response? RESP) => BOOL " (id status-response?))) (p "Check if a response is a status-response."))
(def (sig (procedure "(response-status-error? STATUS-RESPONSE) => BOOL " (id response-status-error?))) (p "Checks if the given status-response represents an error."))
(def (sig (procedure "(response-status-code STATUS-RESPONSE) => FIXNUM" (id response-status-code))) (p "Retrieve the status-code (a positive fixnum) of the STATUS-RESPONSE."))
(def (sig (procedure "(response-status-message STATUS-RESPONSE) => STRING" (id response-status-message))) (p "Retrieve the textual information send by the server for this STATUS-RESPONSE"))
(def (sig (procedure "(response-status-code->string FIXNUM) => STRING" (id response-status-code->string))) (p "Map status-codes to textual-representation as specified in rfc2229"))
(def (sig (procedure "(!match CONNECTION word #!key (strategy 'default) (db 'first)) => (VALUES BOOL ALIST|STATUS-RESPONSE) " (id !match))) (p "Performs a match-operation on the dict-server for the given word. The strategy to use can be specified by the key-word-argument strategy. It defaults to the symbol 'default which means: \"Use the default-strategy\". The default-strategy is server-dependent. Legal values for the strategy are:") (ul (li "a string => the name of a strategy (see !strategies)") (li "the symbol 'default => this means use the default strategy")) (p "The db key-word-argument specifies the database to search. Legal values for db are:") (ul (li "a string => the name of a database (see !databases)") (li "the symbol 'first => this means search all databases and stop after the first match") (li "the symbol 'all => this means search all databases and return all matches")) (p "This procedure returns an alist mapping databases to matches."))
(def (sig (procedure "(!define CONNECTION word #!key (db 'first)) => (VALUES BOOL LIST|STATUS-RESPONSE)" (id !define))) (p "Performs a define-operation on the dict-server for the given word. The db key-word-argument specifies the database to use: Legal values for db are:") (ul (li "a string => the name of a database (see !databases)") (li "the symbol 'first => this means search all databases and stop after the first match") (li "the symbol 'all => this means search all databases and return all matches")) (p "This procedure returns a list of lists where each sublist consists of the following elements: (WORD DB DB-DESCRPTION DEFINITION)"))
(def (sig (procedure "(!databases CONNECTION) => (VALUES BOOL LIST|STATUS-RESPONSE)" (id !databases))) (p "Get a list of available databases."))
(def (sig (procedure "(!strategies CONNECTION) => (VALUES BOOL LIST|STATUS-RESPONSE)" (id !strategies))) (p "Get a list of available search-strategies"))
(def (sig (procedure "(!server-information CONNECTION) => (VALUES BOOL STRING|STATUS-RESPONSE)" (id !server-information))) (p "Retrieve information about the server."))
(def (sig (procedure "(!database-information CONNECTION db) => (VALUES STRING LIST|STATUS-RESPONSE)" (id !database-information))) (p "Retrieve information about the database specified by db."))
(def (sig (procedure "(!help CONNECTION) => (VALUES BOOL STRING|STATUS-RESPONSE)" (id !help))) (p "Retrieve the help-text."))
(def (sig (procedure "(!status CONNECTION) => (VALUES BOOL STRING|STATUS-RESPONSE)" (id !status))) (p "Retrieve general status-information e.g. timing-values."))
(def (sig (procedure "(!quit CONNECTION) => (VALUES BOOL STATUS-RESPONSE)" (id !quit))) (p "Ask the server to close the connection. Please don't use this directly, but (disconnect) instead."))
(def (sig (procedure "(!announce-client CONNECTION client) => (VALUES BOOL STATUS-RESPONSE)" (id !announce-client))) (p "Notify the server about the client that is talking to it. This happens automatically during (connect)") (pre ""))
(def (sig (procedure "(!authenticate CONNECTION username password) => (VALUES BOOL STATUS-RESPONSE)" (id !authenticate))) (p "Attempts to authenticate the given user at the dict-server. This is sometimes needed to access dictionaries that are otherwise not readable."))

((tags "egg") (section 2 "moremacros" (toc)) (section 2 "Documentation" (p "Various useful forms.") (section 3 "moremacros" (section 4 "type-case" (def (sig (syntax "(type-case EXPRESSION [(TYPE-CASE BODY ...) ...]))" (id type-case))) (p "Expands into a form that selects a " (tt "TYPE-CASE") " based on the type of the " (tt "EXPRESSION") ".") (p "A " (tt "TYPE-CASE") " is:") (dl (dt (tt "symbol")) (dd "the base name of a type predicate") (dt "(" (tt "symbol") " " (tt "symbol") "...)") (dd "a list of base names") (dt (tt "else")) (dd "an else clause")) (p "The actual name of the predicate is built from the base name and a " (tt "?") " suffix. So a base name " (tt "number") " has the predicate " (tt "number?") ".") (highlight scheme "(use moremacros)\n\n(type-case 23\n  ((symbol string char) 'symbolic)\n  (number               'numeric)\n  (else                 'otheric) )\n;=> numeric"))) (section 4 "type-case*" (def (sig (syntax "(type-case* EXPRESSION [(TYPE-TEST BODY ...) ...]))" (id type-case*))) (p "Like " (tt "type-case") " but binds local variable " (tt "it") " to the value of " (tt "EXPRESSION") ".") (highlight scheme "(use moremacros)\n\n(type-case* 23\n  ((symbol string char) (list it 'symbolic) )\n  (number               (list it 'numeric) )\n  (else                 (list it 'otheric) ) )\n;=> (23 numeric)"))) (section 4 "whennot" (def (sig (syntax "(whennot TEST [BODY ...]))" (id whennot))) (p "Synonym for " (tt "miscmacros#unless") "."))) (section 4 "swap-set!" (def (sig (syntax "(swap-set! VAR1 VAR2))" (id swap-set!))) (p "Swap settings of " (tt "VAR1") " & " (tt "VAR2") ".") (p "Like " (tt "(exchange! VAR1 VAR2)") " but lower overhead."))) (section 4 "fluid-set!" (def (sig (syntax "(fluid-set! VAR VAL ...))" (id fluid-set!))) (p "Set each variable " (tt "VAR") " to the value " (tt "VAL") " in parallel."))) (section 4 "stiff-set!" (def (sig (syntax "(stiff-set! VAR VAL ...))" (id stiff-set!))) (p "Set each variable " (tt "VAR") " to the value " (tt "VAL") " in series."))) (section 4 "set!/op" (def (sig (syntax "(set!/op VAR OP ARG...))" (id set!/op))) (p "Sets " (tt "VAR") " to the value of " (tt "(OP ARG...)") ", where an occurrence of <> in " (tt "ARG...") " is replaced with " (tt "VAR") ".") (p "When there is no occurrence of <> in " (tt "ARG...") " the template " (tt "(OP <> ARG...)") " is used.") (p "Similar to the C language family " (tt "<l-value> <bin-op-assign> <r-value>") "."))) (section 4 "assure" (def (sig (syntax "(assure EXPRESSION [ERROR-ARGUMENT...]))" (id assure))) (p "When " (tt "EXPRESSION") " yields value " (tt "#f} invoke {{(error ERROR-ARGUMENT...)") ", otherwise return value."))) (section 4 "make-reference-let" (def (sig (syntax "(make-reference-let NAME REFERENCE-FUNCTION)" (id make-reference-let))) (p (tt "NAME") " is a " (tt "symbol") ", the name of generated " (i "reference-let") " macro.") (p (tt "REFERENCE-FUNCTION") " is a " (tt "(procedure (* * *) *)") " with arguments:") (dl (dt (tt "TABLE")) (dd "some data-structure instance that reifies a set of key+value abstraction") (dt (tt "KEY")) (dd "identifier for a possible entry in the " (tt "TABLE")) (dt (tt "DEFAULT")) (dd "in case an entry for the " (tt "KEY") " does not exist")) (p "The " (tt "REFERENCE-FUNCTION") " is to return the value for " (tt "KEY") " in the " (tt "TABLE") ", otherwise the " (tt "DEFAULT") " value.") (p "The generated macro has the signature:")) (def (sig (syntax "(NAME ((((VAR | (VAR) | (VAR KEY [DEFAULT]))...) TABLE)...) BODY...))" (id NAME))) (p "Decompose " (tt "TABLE") " entries into variable bindings. Should the " (tt "KEY") " not be a " (tt "symbol") ", or the desired variable name " (tt "VAR") ", as " (tt "'VAR") ", is not the key, the " (tt "(VAR KEY [DEFAULT])") " form can be used.") (p "The default for " (tt "DEFAULT") " is " (tt "#f") ".") (p "The " (tt "BODY...") " is evaluated with the specified bindings.") (p "See " (int-link "hash-let") " for an example of use.") (ul (li (i "Note") " that only one type of " (tt "TABLE") " is supported. As yet there is no syntax for generating a " (i "reference-let") " supporting multiple table types. While such a beast is possible just using nested " (i "reference-lets") " gets the same effect without the necessary overhead."))))) (section 3 "hash-let" (section 4 "Usage" (highlight scheme "(require-extension hash-let)")) (section 4 "hash-let" (def (sig (syntax "(hash-let ((((VAR | (VAR) | (VAR KEY [DEFAULT]))...) HASH-TABLE)...) BODY...))" (id hash-let))) (p "Decompose " (tt "HASH-TABLE") " entries into variable bindings. Should the " (tt "KEY") " not be a " (tt "symbol") ", or the desired variable name " (tt "VAR") " is not the key, the " (tt "(VAR KEY [DEFAULT])") " form can be used.") (p "The default value for a missing hash-table entry is " (tt "#f") " but can be specified with the " (tt "(VAR KEY DEFAULT)") " form.") (p "The " (tt "BODY...") " is evaluated with the specified bindings.") (highlight scheme "(use hash-let srfi-69)\n\n(define tbl (make-hash-table))\n\n(hash-table-set! tbl 'abc \"commercial network\")\n(hash-table-set! tbl \"abc\" \"commercial network\")\n(hash-table-set! tbl 'cbs \"commercial network\")\n(hash-table-set! tbl \"cbs\" \"commercial network\")\n\n(hash-let ((((abc) (cbs \"cbs\")) tbl )\n           (((pbs (string-append \"p\" \"bs\") #t) tbs) tbl ) )\n  (print 'abc \" is a \" abc) (print \"cbs\" \" is a \" cbs)\n  (print (string-append \"p\" \"bs\") \" is a \" pbs)\n  (print 'tbs \" is a \" tbs) )") (p "This prints the following:") (pre "abc is a commercial network\ncbs is a commercial network\npbs is a #f\ntbs is a ?") (p (tt "hash-let") " is actually " (tt "(generic-reference-let hash-let hash-table-ref/default)") ".")))) (section 3 "Numeric Macros" (section 4 "Usage" (highlight scheme "(require-extension numeric-macros)")) (section 4 "++" (def (sig (syntax "(++ VAL)" (id ++))) (p "Read-only increment.") (p "When " (tt "VAL") " is a numeric literal the strongest operation available is used in the generated expression, based on the type of the literal."))) (section 4 "--" (def (sig (syntax "(-- VAL)" (id --))) (p "Read-only decrement.") (p "When " (tt "VAL") " is a numeric literal the strongest operation available is used in the generated expression, based on the type of the literal."))) (section 4 "fx++" (def (sig (syntax "(fx++ VAL)" (id fx++))) (p "Read-only fixnum increment."))) (section 4 "fx--" (def (sig (syntax "(fx-- VAL)" (id fx--))) (p "Read-only fixnum decrement."))) (section 4 "fp++" (def (sig (syntax "(fp++ VAL)" (id fp++))) (p "Read-only flonum increment."))) (section 4 "fp--" (def (sig (syntax "(fp-- VAL)" (id fp--))) (p "Read-only flonum decrement."))) (section 4 "fl++" (def (sig (syntax "(fl++ VAL)" (id fl++))) (p "Read-only flonum increment.") (p "R6RS nomenclature."))) (section 4 "fl--" (def (sig (syntax "(fl-- VAL)" (id fl--))) (p "Read-only flonum decrement.") (p "R6RS nomenclature."))) (section 4 "++!" (def (sig (syntax "(++! VAR)" (id ++!))) (p "Mutable increment."))) (section 4 "--!" (def (sig (syntax "(--! VAR)" (id --!))) (p "Mutable decrement."))) (section 4 "fx++!" (def (sig (syntax "(fx++! VAR)" (id fx++!))) (p "Mutable fixnum increment."))) (section 4 "fx--!" (def (sig (syntax "(fx--! VAR)" (id fx--!))) (p "Mutable fixnum decrement."))) (section 4 "fp++!" (def (sig (syntax "(fp++! VAR)" (id fp++!))) (p "Mutable flonum increment."))) (section 4 "fp--!" (def (sig (syntax "(fp--! VAR)" (id fp--!))) (p "Mutable flonum decrement."))) (section 4 "fl++!" (def (sig (syntax "(fl++! VAR)" (id fl++!))) (p "Mutable flonum increment.") (p "R6RS nomenclature."))) (section 4 "fl--!" (def (sig (syntax "(fl--! VAR)" (id fl--!))) (p "Mutable flonum decrement.") (p "R6RS nomenclature."))))) (section 2 "Author" (p (int-link "/users/kon-lovett" "Kon Lovett"))) (section 2 "Version history" (dl (dt "1.3.0") (dd "Moved " (tt "variable-item") " to own extension.") (dt "1.2.0") (dd "Aligned " (tt "make-variable") " better with " (tt "make-parameter") ".") (dt "1.1.1") (dt "1.1.0") (dd "Added " (tt "make-reference-let") ". Split " (tt "make-variable") " & " (tt "define-variable") " into own module " (tt "variable-item") ".") (dt "1.0.0") (dd "Hello"))) (section 2 "License" (p "Copyright (C) 2010 Kon Lovett.  All rights reserved.") (p "Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the Software), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:") (p "The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.") (p "THE SOFTWARE IS PROVIDED ASIS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.")))
(index ("mpd:connect" 0) ("mpd:reconnect" 316) ("mpd-conn?" 528) ("mpd:host" 687) ("mpd:port" 822) ("mpd:password" 953) ("mpd:version" 1210) ("mpd:close" 1411) ("mpd:ping" 1578) ("mpd:clear-error" 1718) ("mpd:stats" 1930) ("mpd:status" 2224) ("mpd:kill" 2591) ("mpd:send-password" 2663) ("mpd:commands" 3026) ("mpd:not-commands" 3155) ("mpd:play/pos" 3301) ("mpd:play/id" 3417) ("mpd:seek/pos" 3533) ("mpd:seek/id" 3682) ("mpd:next" 3818) ("mpd:previous" 3916) ("mpd:stop" 4026) ("mpd:pause" 4103) ("mpd:random" 4236) ("mpd:repeat" 4336) ("mpd:crossfade" 4436) ("mpd:set-vol" 4586) ("mpd:outputs" 4729) ("mpd:enable-output" 4863) ("mpd:disable-output" 4995) ("mpd:playlist/pos" 5130) ("mpd:playlist/id" 5387) ("mpd:current-song" 5861) ("mpd:pl-changes" 6062) ("mpd:pl-changes/pos+id" 6371) ("mpd:add" 6555) ("mpd:add/id" 6806) ("mpd:move/pos" 6959) ("mpd:move/id" 7136) ("mpd:swap/pos" 7303) ("mpd:swap/id" 7479) ("mpd:delete/pos" 7634) ("mpd:delete/id" 7813) ("mpd:shuffle" 7984) ("mpd:clear" 8124) ("mpd:load-playlist" 8253) ("mpd:rm-playlist" 8490) ("mpd:save-playlist" 8659) ("mpd:find" 8833) ("mpd:find/album" 9109) ("mpd:find/artist" 9709) ("mpd:find/title" 9869) ("mpd:search" 10031) ("mpd:search/album" 10374) ("mpd:search/artist" 10579) ("mpd:search/title" 10787) ("mpd:search/filename" 10987) ("mpd:list" 11196) ("mpd:list-artists" 11559) ("mpd:list-albums" 11674) ("mpd:list-all" 11836) ("mpd:list-all/info" 11989) ("mpd:ls/info" 12178) ("mpd:update" 12418))
(def (sig (procedure "(mpd:connect [HOST] [PORT] [PASSWORD])" (id mpd:connect))) (p "Connects to the MPD instance running on " (tt "HOST") " (defaults to " (tt "localhost") ") at " (tt "PORT") " (defaults to " (tt "6600") ").  Optionally authenticates using " (tt "PASSWORD") ". Returns an MPD connection object."))
(def (sig (procedure "(mpd:reconnect CONN)" (id mpd:reconnect))) (p "Reconnects the given MPD connection object.  This function should normally not be needed as the library automatically reconnects if needed."))
(def (sig (procedure "(mpd-conn? CONN)" (id mpd-conn?))) (p "Returns " (tt "#t") " if " (tt "CONN") " is an MPD connection object, " (tt "#f") " otherwise."))
(def (sig (procedure "(mpd:host CONN)" (id mpd:host))) (p "Returns the hostname field of the MPD connection object " (tt "CONN") "."))
(def (sig (procedure "(mpd:port CONN)" (id mpd:port))) (p "Returns the port field of the MPD connection object " (tt "CONN") "."))
(def (sig (procedure "(mpd:password CONN)" (id mpd:password))) (p "Returns the password field of the MPD connection object " (tt "CONN") ".  This is either a string containing the plain text password or " (tt "#f") " if no authentication should be done."))
(def (sig (procedure "(mpd:version CONN)" (id mpd:version))) (p "Returns the version field of the MPD connection object " (tt "CONN") " which contains the version number received by the MPD server."))
(def (sig (procedure "(mpd:close CONN)" (id mpd:close))) (p "Closes the connection to MPD.  " (tt "CONN") " should not be used anymore after calling this function."))
(def (sig (procedure "(mpd:ping CONN)" (id mpd:ping))) (p "Sends a " (tt "ping") " command to the MPD server, reconnecting if necessary."))
(def (sig (procedure "(mpd:clear-error CONN)" (id mpd:clear-error))) (p "Clears the current error message (which is returned by " (tt "(mpd:status)") "). This is also done by any command that starts playback."))
(def (sig (procedure "(mpd:stats CONN)" (id mpd:stats))) (p "Returns an alist containing various stats:") (pre "#;6> (pp (mpd:stats m))\n((artists . 183)\n (albums . 429)\n (songs . 6200)\n (uptime . 130260)\n (playtime . 49958)\n (db_playtime . 1773229)\n (db_update . 1152376960.0))\n#;7>"))
(def (sig (procedure "(mpd:status CONN)" (id mpd:status))) (p "Return an alist describing the current status of MPD:") (pre "#;9> (pp (mpd:status m))\n((volume . 78)\n (repeat . #f)\n (random . #f)\n (playlist . 78)\n (playlistlength . 77)\n (xfade . 0)\n (state . play)\n (song . 12)\n (songid . 12)\n (time 31 623)\n (bitrate . 128)\n (audio 44100 16 2))\n#;10>"))
(def (sig (procedure "(mpd:kill CONN)" (id mpd:kill))) (p "Kill MPD."))
(def (sig (procedure "(mpd:send-password CONN PASSWORD)" (id mpd:send-password))) (p "Sends " (tt "PASSWORD") " (a string containing the plain text password) to the server for authentication.  Normally, this not needed as the password can be specified when creating the connection which has the advantage that it's automatically sent after having reconnected."))
(def (sig (procedure "(mpd:commands CONN)" (id mpd:commands))) (p "Returns a list of commands the current user has access to."))
(def (sig (procedure "(mpd:not-commands CONN)" (id mpd:not-commands))) (p "Returns a list of commands the current user doesn't have access to."))
(def (sig (procedure "(mpd:play/pos CONN POS)" (id mpd:play/pos))) (p "Start playing at position " (tt "POS") "."))
(def (sig (procedure "(mpd:play/id CONN ID)" (id mpd:play/id))) (p "Start playing at song with id " (tt "ID") "."))
(def (sig (procedure "(mpd:seek/pos CONN POS SECS)" (id mpd:seek/pos))) (p "Seeks to " (tt "SECS") " in the song at position " (tt "POSITION") "."))
(def (sig (procedure "(mpd:seek/id CONN ID SECS)" (id mpd:seek/id))) (p "Seeks to " (tt "SECS") " in the song with id " (tt "ID") "."))
(def (sig (procedure "(mpd:next CONN)" (id mpd:next))) (p "Play the next song in the playlist."))
(def (sig (procedure "(mpd:previous CONN)" (id mpd:previous))) (p "Play the previous song in the playlist."))
(def (sig (procedure "(mpd:stop CONN)" (id mpd:stop))) (p "Stop playback."))
(def (sig (procedure "(mpd:pause CONN PAUSE?)" (id mpd:pause))) (p "Pause if " (tt "PAUSE?") " is true, resume playing otherwise."))
(def (sig (procedure "(mpd:random CONN RANDOM?)" (id mpd:random))) (p "Enable or disable random."))
(def (sig (procedure "(mpd:repeat CONN REPEAT?)" (id mpd:repeat))) (p "Enable or disable repeat."))
(def (sig (procedure "(mpd:crossfade CONN SECS)" (id mpd:crossfade))) (p "Sets the cross fading setting to " (tt "SECS") " seconds (0 = disabled)."))
(def (sig (procedure "(mpd:set-vol CONN VOLUME)" (id mpd:set-vol))) (p "Sets the volume to " (tt "VOLUME") " (a fixnum in the range 0-100)."))
(def (sig (procedure "(mpd:outputs CONN)" (id mpd:outputs))) (p "Returns a list of alists describing the available output devices."))
(def (sig (procedure "(mpd:enable-output CONN ID)" (id mpd:enable-output))) (p "Enables the output device with id " (tt "ID") "."))
(def (sig (procedure "(mpd:disable-output CONN ID)" (id mpd:disable-output))) (p "Disables the output device with id " (tt "ID") "."))
(def (sig (procedure "(mpd:playlist/pos CONN [POS])" (id mpd:playlist/pos))) (p "Return a list of alists describing the songs in the current playlist. (Optionally only the song at position " (tt "POS") ").  See below for an example of the result format."))
(def (sig (procedure "(mpd:playlist/id CONN [ID])" (id mpd:playlist/id))) (p "Return a list of alists describing the songs in the current playlist. (Optionally only the song with id " (tt "ID") "):") (pre "#;10>  (pp (mpd:playlist/id m 12))\n(((Id . 12)\n  (Pos . 12)\n  (Time . 623)\n  (Title . \"the leper affinity\")\n  (Track . 1)\n  (Album . \"blackwater park\")\n  (Artist . \"opeth\")\n  (file . \"metal/opeth/blackwater park/01 the leper affinity.mp3\")))\n#;11>"))
(def (sig (procedure "(mpd:current-song CONN)" (id mpd:current-song))) (p "Returns an alist with information about the current song (the same information that " (tt "(mpd:playlist/id)") " returns)."))
(def (sig (procedure "(mpd:pl-changes CONN VERSION)" (id mpd:pl-changes))) (p "Return a list of alists describing new songs since playlist version " (tt "VERSION") ". Note: to detect songs that were deleted at the end of the playlist, use the " (tt "playlistlength") " returned by " (tt "(mpd:status)") "."))
(def (sig (procedure "(mpd:pl-changes/pos+id CONN VERSION)" (id mpd:pl-changes/pos+id))) (p "Similar to " (tt "mpd:pl-changes") " but only returns the position and id of each song."))
(def (sig (procedure "(mpd:add CONN PATH)" (id mpd:add))) (p "Adds " (tt "PATH") " (a string naming a file or directory) to the end of the current playlist.  Directories are added recursively.  Increments playlist version by 1 for each added song."))
(def (sig (procedure "(mpd:add/id CONN PATH)" (id mpd:add/id))) (p "Similar to " (tt "mpd:add") " but returns a list of ids of the newly added songs."))
(def (sig (procedure "(mpd:move/pos CONN FROM TO)" (id mpd:move/pos))) (p "Move song at position " (tt "FROM") " to " (tt "TO") ".  The playlist version is incremented by 1."))
(def (sig (procedure "(mpd:move/id CONN ID TO)" (id mpd:move/id))) (p "Move song with id " (tt "ID") " to " (tt "TO") ".  The playlist version is incremented by 1."))
(def (sig (procedure "(mpd:swap/pos CONN POS1 POS2)" (id mpd:swap/pos))) (p "Swap position of the two songs given by playlist positions " (tt "POS1") " and " (tt "POS2") "."))
(def (sig (procedure "(mpd:swap/id CONN ID1 ID2)" (id mpd:swap/id))) (p "Swap position of the two songs given by ids " (tt "ID1") " and " (tt "ID2") "."))
(def (sig (procedure "(mpd:delete/pos CONN POS)" (id mpd:delete/pos))) (p "Remove the song at position " (tt "POS") " from playlist.  The playlist version is incremented by 1."))
(def (sig (procedure "(mpd:delete/id CONN ID)" (id mpd:delete/id))) (p "Remove the song with id " (tt "ID") " from playlist.  The playlist version is incremented by 1."))
(def (sig (procedure "(mpd:shuffle CONN)" (id mpd:shuffle))) (p "Shuffles the current playlist and increments the playlist version by 1."))
(def (sig (procedure "(mpd:clear CONN)" (id mpd:clear))) (p "Clears the current playlist, incrementing playlist version by 1."))
(def (sig (procedure "(mpd:load-playlist CONN PLAYLIST)" (id mpd:load-playlist))) (p "Loads the playlist named " (tt "\"PLAYLIST.m3u\"") " from the playlist directory. The playlist version is incremented by the number of songs added."))
(def (sig (procedure "(mpd:rm-playlist CONN PLAYLIST)" (id mpd:rm-playlist))) (p "Removes the playlist named " (tt "\"PLAYLIST.m3u\"") " from the playlist directory."))
(def (sig (procedure "(mpd:save-playlist CONN PLAYLIST)" (id mpd:save-playlist))) (p "Saves the current playlist to " (tt "\"PLAYLIST.m3u\"") " in the playlist directory."))
(def (sig (procedure "(mpd:find CONN TYPE STRING)" (id mpd:find))) (p "Searches for songs and returns a list of alists.  " (tt "TYPE") " is e.g. " (tt "'title") ", " (tt "'album") " or " (tt "'artist") ".  " (tt "STRING") " is the search string (which must match exactly)."))
(def (sig (procedure "(mpd:find/album CONN ALBUM)" (id mpd:find/album))) (p "Returns a list of alists describing songs on album " (tt "ALBUM") " (a string).") (pre "#;13> (pp (mpd:find/album m \"catch 33\"))\n(((Time . 101)\n  (Title . \"autonomy lost\")\n  (Track . 1)\n  (Album . \"catch 33\")\n  (Artist . \"meshuggah\")\n  (file . \"metal/meshuggah/catch 33/01 autonomy lost.mp3\"))\n ((Time . 96)\n  (Title . \"imprint of the un-saved\")\n  (Track . 2)\n  (Album . \"catch 33\")\n  (Artist . \"meshuggah\")\n  (file . \"metal/meshuggah/catch 33/02 imprint of the un-saved.mp3\"))\n...\n#;14>"))
(def (sig (procedure "(mpd:find/artist CONN ARTIST)" (id mpd:find/artist))) (p "Returns a list of alists describing songs from " (tt "ARTIST") " (a string)."))
(def (sig (procedure "(mpd:find/title CONN TITLE)" (id mpd:find/title))) (p "Returns a list of alists describing songs with title " (tt "TITLE") " (a string)."))
(def (sig (procedure "(mpd:search CONN TYPE SEARCHSTRING)" (id mpd:search))) (p "Returns a list of alists describing the matching songs.  " (tt "TYPE") " is e.g. " (tt "'title") ", " (tt "'album") " or " (tt "'artist") ".  " (tt "SEARCHSTRING") " is the string which is searched for (not case sensitive, doesn't need to be an exact match)."))
(def (sig (procedure "(mpd:search/album CONN SEARCHSTRING)" (id mpd:search/album))) (p "Returns a list of alists describing songs whose album names contain " (tt "SEARCHSTRING") " (not case sensitive)."))
(def (sig (procedure "(mpd:search/artist CONN SEARCHSTRING)" (id mpd:search/artist))) (p "Returns a list of alists describing songs whose artist names contain " (tt "SEARCHSTRING") " (not case sensitive)."))
(def (sig (procedure "(mpd:search/title CONN SEARCHSTRING)" (id mpd:search/title))) (p "Returns a list of alists describing songs whose titles contain " (tt "SEARCHSTRING") " (not case sensitive)."))
(def (sig (procedure "(mpd:search/filename CONN SEARCHSTRING)" (id mpd:search/filename))) (p "Returns a list of alists describing songs whose filenames contain " (tt "SEARCHSTRING") " (not case sensitive)."))
(def (sig (procedure "(mpd:list CONN TYPE [LIMIT STRING])" (id mpd:list))) (p "Return a list of values of metadata " (tt "TYPE") " (e.g. " (tt "'title") ", " (tt "'album") " or " (tt "'artist") "), optionally limited by " (tt "LIMIT") " and " (tt "STRING") ". E.g. " (tt "(mpd:list m 'album 'artist \"nevermore\")") " to get a list of all albums by Nevermore."))
(def (sig (procedure "(mpd:list-artists CONN)" (id mpd:list-artists))) (p "Returns a list of all known artists."))
(def (sig (procedure "(mpd:list-albums CONN [ARTIST])" (id mpd:list-albums))) (p "Returns a list of all known albums, optionally limited by " (tt "ARTIST") "."))
(def (sig (procedure "(mpd:list-all CONN [PATH])" (id mpd:list-all))) (p "Returns a list of filenames of all songs (below " (tt "PATH") ", if given)."))
(def (sig (procedure "(mpd:list-all/info CONN [PATH])" (id mpd:list-all/info))) (p "Like " (tt "(mpd:list-all)") ", but also returns metadata.  The data is returned as a list of alists."))
(def (sig (procedure "(mpd:ls/info CONN [DIR])" (id mpd:ls/info))) (p "Returns a list of alists describing the contents of " (tt "DIR") " (a string). This function is like " (tt "(mpd:list-all/info)") ", but doesn't operate recursively."))
(def (sig (procedure "(mpd:update CONN [PATH])" (id mpd:update))) (p "Updates MPD's database, removing old songs and adding new songs.  Optionally, the update process can be limited to " (tt "PATH") " (a string naming a file or directory)."))

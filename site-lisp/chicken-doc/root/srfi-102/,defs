(index ("procedure-arity" 0) ("procedure-arity-includes?" 1110) ("arity-at-least?" 1465) ("arity-at-least-value" 1665) ("fixed-arity->arity-at-least" 1886) ("procedure-arity-available?" 2127) ("procedure-fixed-arity?" 2314) ("procedure-minimum-arity" 2512))
(def (sig (procedure "(procedure-arity PROCEDURE) => ARITY-OBJECT" (id procedure-arity))) (p "Produces an " (tt "arity-object") " representing the arity of " (tt "PROCEDURE") ". If " (tt "#f") " results, no information is available for " (tt "PROCEDURE") ".") (p "If this procedure produces an " (tt "exact-non-negative-integer") ", " (tt "K") ", then " (tt "PROCEDURE") " accepts exactly " (tt "K") " arguments; applying " (tt "PROCEDURE") " to some number of arguments other than " (tt "K") " will result in an arity error.") (p "If this procedure produces an " (tt "arity-at-least-object") ", " (tt "A") ", then " (tt "PROCEDURE") " accepts " (tt "(arity-at-least-value A)") " or more arguments; applying " (tt "PROCEDURE") " to some number of arguments less than " (tt "(arity-at-least-value A)") " will result in an arity error.") (p "If this procedure produces a " (tt "list") ", then " (tt "PROCEDURE") " accepts any of the arities described by the elements of the list; applying " (tt "PROCEDURE") " to some number of arguments not described by an element of the list will result in an arity error."))
(def (sig (procedure "(procedure-arity-includes? PROCEDURE K) => BOOLEAN" (id procedure-arity-includes?))) (p "Returns " (tt "#t") " if the " (tt "PROCEDURE") " can accept " (tt "K") " arguments and " (tt "#f") " otherwise. If this procedure returns " (tt "#f") ", applying " (tt "PROCEDURE") " to " (tt "K") " arguments will result in an arity error."))
(def (sig (procedure "(arity-at-least? OBJECT) => BOOLEAN" (id arity-at-least?))) (p "Returns " (tt "#t") " if " (tt "OBJECT") " is an " (tt "arity-at-least-object") " and " (tt "#f") " otherwise."))
(def (sig (procedure "(arity-at-least-value A) => INTEGER" (id arity-at-least-value))) (p "Returns the " (tt "exact-non-negative-integer") " denoting the minimum number of arguments required by the given " (tt "A") "."))
(def (sig (procedure "(fixed-arity->arity-at-least K) => ARITY-AT-LEAST-OBJECT" (id fixed-arity->arity-at-least))) (p "Returns a scalar " (tt "arity-at-least-object") " for the supplied " (tt "exact-non-negative-integer") " " (tt "K") "."))
(def (sig (procedure "(procedure-arity-available? PROCEDURE) => BOOLEAN" (id procedure-arity-available?))) (p "Returns " (tt "#t") " if the " (tt "PROCEDURE") " has arity information."))
(def (sig (procedure "(procedure-fixed-arity? PROCEDURE) => BOOLEAN" (id procedure-fixed-arity?))) (p "Returns " (tt "#t") " if the " (tt "PROCEDURE") " accepts only a fixed number of arguments."))
(def (sig (procedure "(procedure-minimum-arity PROCEDURE) => INTEGER" (id procedure-minimum-arity))) (p "Returns the minimum number of arguments acceptable by the " (tt "PROCEDURE") "."))

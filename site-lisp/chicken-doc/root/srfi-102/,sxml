((tags "egg") (section 2 "srfi-102" (p "Procedure Arity Inspection") (toc)) (section 2 "Documentation" (p "From the Draft " (link "http://srfi.schemers.org/srfi-102/srfi-102.html" "SRFI 102") ".") (p "This implementation uses the Chicken " (tt "procedure-information") " facility.") (section 3 ("SRFI 102 (" (i "Draft") ")") (section 4 "procedure-arity" (def (sig (procedure "(procedure-arity PROCEDURE) => ARITY-OBJECT" (id procedure-arity))) (p "Produces an " (tt "arity-object") " representing the arity of " (tt "PROCEDURE") ". If " (tt "#f") " results, no information is available for " (tt "PROCEDURE") ".") (p "If this procedure produces an " (tt "exact-non-negative-integer") ", " (tt "K") ", then " (tt "PROCEDURE") " accepts exactly " (tt "K") " arguments; applying " (tt "PROCEDURE") " to some number of arguments other than " (tt "K") " will result in an arity error.") (p "If this procedure produces an " (tt "arity-at-least-object") ", " (tt "A") ", then " (tt "PROCEDURE") " accepts " (tt "(arity-at-least-value A)") " or more arguments; applying " (tt "PROCEDURE") " to some number of arguments less than " (tt "(arity-at-least-value A)") " will result in an arity error.") (p "If this procedure produces a " (tt "list") ", then " (tt "PROCEDURE") " accepts any of the arities described by the elements of the list; applying " (tt "PROCEDURE") " to some number of arguments not described by an element of the list will result in an arity error."))) (section 4 "procedure-arity-includes?" (def (sig (procedure "(procedure-arity-includes? PROCEDURE K) => BOOLEAN" (id procedure-arity-includes?))) (p "Returns " (tt "#t") " if the " (tt "PROCEDURE") " can accept " (tt "K") " arguments and " (tt "#f") " otherwise. If this procedure returns " (tt "#f") ", applying " (tt "PROCEDURE") " to " (tt "K") " arguments will result in an arity error."))) (section 4 "arity-at-least?" (def (sig (procedure "(arity-at-least? OBJECT) => BOOLEAN" (id arity-at-least?))) (p "Returns " (tt "#t") " if " (tt "OBJECT") " is an " (tt "arity-at-least-object") " and " (tt "#f") " otherwise."))) (section 4 "arity-at-least-value" (def (sig (procedure "(arity-at-least-value A) => INTEGER" (id arity-at-least-value))) (p "Returns the " (tt "exact-non-negative-integer") " denoting the minimum number of arguments required by the given " (tt "A") ".")))) (section 3 "Extensions" (section 4 "fixed-arity->arity-at-least" (def (sig (procedure "(fixed-arity->arity-at-least K) => ARITY-AT-LEAST-OBJECT" (id fixed-arity->arity-at-least))) (p "Returns a scalar " (tt "arity-at-least-object") " for the supplied " (tt "exact-non-negative-integer") " " (tt "K") "."))) (section 4 "procedure-arity-available?" (def (sig (procedure "(procedure-arity-available? PROCEDURE) => BOOLEAN" (id procedure-arity-available?))) (p "Returns " (tt "#t") " if the " (tt "PROCEDURE") " has arity information."))) (section 4 "procedure-fixed-arity?" (def (sig (procedure "(procedure-fixed-arity? PROCEDURE) => BOOLEAN" (id procedure-fixed-arity?))) (p "Returns " (tt "#t") " if the " (tt "PROCEDURE") " accepts only a fixed number of arguments."))) (section 4 "procedure-minimum-arity" (def (sig (procedure "(procedure-minimum-arity PROCEDURE) => INTEGER" (id procedure-minimum-arity))) (p "Returns the minimum number of arguments acceptable by the " (tt "PROCEDURE") "."))) (section 4 "procedure-arity-set!" (def (sig (procedure "(procedure-arity-set! PROCEDURE [A | K] ...)" (id #f))) (p (tt "PROCEDURE") " has arity information from one or more " (tt "A") " or " (tt "K") ".") (dl (dt (tt "K")) (dd (tt "exact-non-negative-integer")) (dt (tt "A")) (dd "scalar " (tt "arity-at-least-object"))))) (section 4 "append-procedure-arity!" (def (sig (procedure "(append-procedure-arity! PROCEDURE A | K)" (id #f))) (p (tt "PROCEDURE") " has arity information from an " (tt "A") " or " (tt "K") ".") (dl (dt (tt "K")) (dd (tt "exact-non-negative-integer")) (dt (tt "A")) (dd "scalar " (tt "arity-at-least-object"))))))) (section 2 "Usage" (highlight scheme "(require-extension srfi-102)")) (section 2 "Examples" (ul (li "See the \"run.scm\" test source."))) (section 2 "Notes" (ul (li "To call this a " (i "work in progress") " is an understatement. The pulling of procedure arity & name from the " (tt "lambda-info") " type is a hack.") (li "The module " (tt "procedure-introspection") " provides the routines for this extension.") (li "The draft SRFI 102 routines are built from the primitives suggested by Arthur A. Gleckler.") (li "The author is not a fan of this SRFI (draft!) but it is an interesting exercise."))) (section 2 "Requirements") (section 2 "Bugs and Limitations" (ul (li "When no " (tt "lambda-info") " is available no arity info is available.") (li "When a source is compiled with '-no-lambda-info' no arity info is available.") (li "Anonymous, Composed & Curried procedures must have an explicitly set arity.") (li "Support for " (tt "case-lambda") " and " (tt "match-lambda") " is not automatic."))) (section 2 "Author" (p (int-link "/users/kon-lovett" "Kon Lovett"))) (section 2 "Version history" (dl (dt "1.0.0") (dd "Initial Chicken 4 release."))) (section 2 "License" (p "From the Draft SRFI 102 Document Copyright (C) David Van Horn 2009. All Rights Reserved.") (p "Copyright (C) 2009 Kon Lovett.  All rights reserved.") (p "Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the Software), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:") (p "The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.") (p "THE SOFTWARE IS PROVIDED ASIS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.")))
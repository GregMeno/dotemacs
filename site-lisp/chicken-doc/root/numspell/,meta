(type egg)
(signature "numspell egg")
(timestamp 1279600863.0)
(sxml ((tags "egg") (section 2 "numspell" (toc) (section 3 "Description" (p "Spelling Numbers as English in Scheme.")) (section 3 "Author" (p "Neil van Dyke")) (section 3 "Requirements" (p (int-link "/eggref/4/numbers" "numbers"))) (section 3 "Introduction" (p "The numspell library provides the ability to “spell” Scheme numbers in English. This is useful for writing numbers on banking checks and other legal documents, as well as for speech generation.") (p "Most rational numbers in Scheme are presently supported. For example:") (pre " (number->english 123456)\n ==> \"one hundred twenty-three thousand four hundred fifty-six\"\n (number->english (/ 4 -6))\n ==> \"negative two over three\"\n (number->english (exact->inexact (/ 4 -6)))\n ==> \"negative zero point six six six six six six\"") (p "The number names supported by numspell are taken from a version of the Wikipedia “Names of large numbers” article. Both short and long scales are supported, through different procedures, with short scale being the default. For example:") (pre " (number->english             (expt 10 15))\n ==> \"one quadrillion\"\n (number->short-scale-english (expt 10 15))\n ==> \"one quadrillion\"\n (number->long-scale-english  (expt 10 15))\n ==> \"one thousand billion\"") (p "Note: Some numbers, such as very large and very small non-integers printed by some Scheme implementations in exponential notation, are not supported by the current version of numspell.") (p "The public interface consists of a few procedures.") (p "(write-number-as-english num port) -> any/c") (pre " num : any/c\n port : any/c") (p "(write-number-as-short-scale-english\t \tnum") (pre "\t \tport)\t \t->\t \tany/c\n num : any/c\n port : any/c") (p "(write-number-as-long-scale-english\t \tnum") (pre "\t \tport)\t \t->\t \tany/c\n num : any/c\n port : any/c") (p "Spell number num to output port port. If num cannot be spelt, an error is signaled.") (p "(number->english num) -> any/c") (pre " num : any/c") (p "(number->short-scale-english num) -> any/c") (pre " num : any/c") (p "(number->long-scale-english num) -> any/c") (pre " num : any/c") (p "Yield a string that spells number num. If num cannot be spelt, an error is signaled.")) (section 3 "Version" (dl (dt "0.5") (dd "always uses numbers egg, now") (dt "0.4") (dd "Ported to Chicken 4") (dt "0.3") (dd "Initial release"))) (section 3 "License" (p "Copyright 2006 Neil Van Dyke.  This program is Free Software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but without any warranty; without even the implied warranty of merchantability or fitness for a particular purpose.  See " (link "http://www.gnu.org/copyleft/lesser.html") " for details.  For other license options and consulting, contact the author.")))))

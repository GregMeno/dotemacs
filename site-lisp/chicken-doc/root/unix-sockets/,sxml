((tags "egg") (section 2 "unix-sockets" (toc) (section 3 "Description" (p "Simple access to UNIX domain sockets.")) (section 3 "Author" (p (int-link "/users/felix winkelmann" "felix winkelmann"))) (section 3 "Requirements" (p (int-link "easyffi"))) (section 3 "Documentation" (p "The interface is similar to the builtin TCP socket functionality in CHICKEN.") (def (sig (procedure "(unix-listen PATHNAME [BACKLOG])" (id unix-listen))) (p "Creates a socket listener object. " (tt "PATHNAME") " gives the name of the file that represents the connection. " (tt "BACKLOG") " specifies how many pending connections are allowed and defaults to 10.")) (def (sig (procedure "(unix-listener? X)" (id unix-listener?))) (p "Returns " (tt "#t") " if " (tt "X") " is a unix socket listener object, or " (tt "#f") " otherwise.")) (def (sig (procedure "(unix-close LISTENER)" (id unix-close))) (p "Closes the socket associated with the listener object.")) (def (sig (procedure "(unix-accept LISTENER)" (id unix-accept))) (p "Waits for a connection from a client and returns two values: an input- and output-port which can be used to communicate with the connecting process. Calling " (tt "unix-accept") " does not block other threads from running.")) (def (sig (procedure "(unix-accept-ready? LISTENER)" (id unix-accept-ready?))) (p "Returns " (tt "#t") " if a " (tt "unix-accept") " for this listener would not block the current thread, or " (tt "#f") " otherwise.")) (def (sig (procedure "(unix-connect PATHNAME)" (id unix-connect))) (p "Connects to the socket given in " (tt "PATHNAME") " and returns two values: an input- and output-port which allow communication with the server.")) (def (sig (procedure "(unix-listener-fileno LISTENER)" (id unix-listener-fileno))) (p "Returns the file-descriptor of the socket associated with the given listener object.")) (def (sig (procedure "(unix-listener-path LISTENER)" (id unix-listener-path))) (p "Returns the pathname of the socket associated with the given listener object."))) (section 3 "Gotchas" (p "If you try to write to the socket's output port when the other side has shut down the socket, a SIGPIPE will be generated. The application must handle or ignore the signal (see " (int-link "posix") "); once the signal is dealt with, the write attempt will raise an exception of its own using " (tt "signal") " from " (int-link "Exceptions") ".")) (section 3 "Changelog" (ul (li "1.4 Do not import errno, to make it compatible with Chicken 4.1.0") (li "1.3 Applied bugfix by Shawn Wagner") (li "1.2 Added include for sys/time.h, which is needed on some systems [Thanks to Kon Lovett]") (li "1.1 Replaced use of " (tt "(end-of-file)") " with " (tt "#!eof")) (li "1.0 Initial release"))) (section 3 "License" (pre " Copyright (c) 2005, Felix L. Winkelmann\n All rights reserved.\n \n Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following\n conditions are met:\n \n   Redistributions of source code must retain the above copyright notice, this list of conditions and the following\n     disclaimer. \n   Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following\n     disclaimer in the documentation and/or other materials provided with the distribution. \n   Neither the name of the author nor the names of its contributors may be used to endorse or promote\n     products derived from this software without specific prior written permission. \n \n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS\n OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY\n AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR\n CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n POSSIBILITY OF SUCH DAMAGE."))))
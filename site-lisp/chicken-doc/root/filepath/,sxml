((tags "eggs") (toc) (section 2 "filepath" (section 3 "Description" (p "The " (tt "filepath") " library contains procedures for cross-platform parsing and manipulation of file paths. It supports both Windows and POSIX paths, including Windows share paths.")) (section 3 "Library Procedures" (section 4 "Platform Flags" (def (sig (procedure "(filepath:posix [BOOL]) => BOOL" (id filepath:posix))) (p "If invoked without arguments, this procedure returns whether the library procedures assume POSIX-style paths or not. Invoking the procedure with a boolean argument disables or enables POSIX-style paths. If set to false, the library procedures assume Windows-style paths.")) (def (sig (procedure "(filepath:is-windows?) => BOOL" (id filepath:is-windows?))) (p "Convenience function that returns the inverse of " (tt "(filepath:posix)") ".")) (def (sig (procedure "(filepath:is-posix?) => BOOL" (id filepath:is-posix?))) (p "Convenience function that returns the result of " (tt "(filepath:posix)") "."))) (section 4 "Path Separators" (def (sig (procedure "(filepath:path-separator) => CHAR" (id filepath:path-separator))) (p "The character that separates directories. On platforms where more than one character is possible, this procedure returns the default one.")) (def (sig (procedure "(filepath:path-separator-set) => CHAR-SET" (id filepath:path-separator-set))) (p "The set of all possible path separator characters.")) (def (sig (procedure "(filepath:is-path-separator? CHAR) => BOOL" (id filepath:is-path-separator?))) (p "A predicate that returns whether the given character is a path separator for the current platform.")) (def (sig (procedure "(filepath:search-path-separator) => CHAR" (id filepath:search-path-separator))) (p "The character that is used to separate the entries in the " (tt "PATH") " environment variable.")) (def (sig (procedure "(filepath:is-search-path-separator? CHAR) => BOOL" (id filepath:is-search-path-separator?))) (p "A predicate that returns whether the given character can be used a separator in the " (tt "PATH") " environment variable.")) (def (sig (procedure "(filepath:ext-separator) => CHAR" (id filepath:ext-separator))) (p "The character that is used to separate file extensions.")) (def (sig (procedure "(filepath:is-ext-separator? CHAR) => BOOL" (id filepath:is-ext-separator?))) (p "A predicate that returns whether the given character is a file extension separator."))) (section 4 "Search Path" (def (sig (procedure "(filepath:split-search-path STRING) => LIST" (id filepath:split-search-path))) (p "Splits a string on the search path separator character.")) (def (sig (procedure "(filepath:get-search-path) => STRING" (id filepath:get-search-path))) (p "Returns search path from the OS environment."))) (section 4 "Extension procedures" (def (sig (procedure "(filepath:split-extension PATH) => (NAME EXT)" (id filepath:split-extension))) (p "Splits path on the last extension.")) (def (sig (procedure "(filepath:take-extension PATH) => EXT" (id filepath:take-extension))) (p "Returns last extension of given path, or empty string.")) (def (sig (procedure "(filepath:replace-extension PATH EXT) => PATH" (id filepath:replace-extension))) (pre " ") (p "Replaces the last path extension with the given extension.")) (def (sig (procedure "(filepath:drop-extension PATH) => PATH" (id filepath:drop-extension))) (p "Removes last extension and extension separator preceding it.")) (def (sig (procedure "(filepath:add-extension PATH EXT) => PATH" (id filepath:add-extension))) (pre "") (p "Appends an extension to the given path.")) (def (sig (procedure "(filepath:has-extension? PATH) => BOOL" (id filepath:has-extension?))) (p "Returns true if the given path has an extension.") (pre "")) (def (sig (procedure "(filepath:split-all-extensions PATH) => (NAME EXT)" (id filepath:split-all-extensions))) (p "Splits path on the first extension.")) (def (sig (procedure "(filepath:drop-all-extensions PATH) => PATH" (id filepath:drop-all-extensions))) (pre "") (p "Removes all extensions from the path.")) (def (sig (procedure "(filepath:take-all-extensions PATH) => EXT" (id filepath:take-all-extensions))) (p "Returns all extensions from the path."))) (section 4 "Drive procedures" (def (sig (procedure "filepath:split-drive" (id filepath:split-drive))) (p "Splits a path into a Windows drive and a path. When in POSIX mode, " (tt "/") " is treated as a drive.")) (def (sig (procedure "(filepath:join-drive DRIVE PATH) => PATH" (id filepath:join-drive))) (p "Joins a drive and the rest of the path.")) (def (sig (procedure "(filepath:take-drive PATH) => DRIVE" (id filepath:take-drive))) (p "Returns the drive of a path.")) (def (sig (procedure "(filepath:has-drive? PATH) => BOOL" (id filepath:has-drive?))) (p "Returns whether the given path has a drive.")) (def (sig (procedure "(filepath:drop-drive PATH) => PATH" (id filepath:drop-drive))) (p "Removes the drive from the given path.")) (def (sig (procedure "(filepath:is-drive? STRING) => BOOL" (id filepath:is-drive?))) (p "Returns true if the given string is a drive specification."))) (section 4 "Operations on a file path" (def (sig (procedure "(filepath:split-file-name PATH) => (DIR FILE)" (id filepath:split-file-name))) (p "Splits a path into directory and file.")) (def (sig (procedure "(filepath:take-file-name PATH) => FILE" (id filepath:take-file-name))) (p "Returns the filename component of a path.")) (def (sig (procedure "(filepath:replace-file-name PATH FILE) => PATH" (id filepath:replace-file-name))) (p "Replaces the filename component of a path with the given one.")) (def (sig (procedure "(filepath:drop-file-name PATH) => PATH" (id filepath:drop-file-name))) (p "Removes the filename component of a path.")) (def (sig (procedure "(filepath:take-base-name PATH) => STRING" (id filepath:take-base-name))) (p "Returns the base file name (no extension) of a path.")) (def (sig (procedure "(filepath:replace-base-name PATH BASE) => PATH" (id filepath:replace-base-name))) (p "Replaces the base file name of a path with the given one.")) (def (sig (procedure "(filepath:take-directory PATH) => DIR" (id filepath:take-directory))) (p "Returns the directory component of a path.")) (def (sig (procedure "(filepath:replace-directory PATH DIR) => PATH" (id filepath:replace-directory))) (p "Replaces the directory component of a path with the given one.")) (def (sig (procedure "(filepath:combine PATH1 PATH2) => PATH" (id filepath:combine))) (p "Combines two paths. If the second path is absolute, then it returns the second.")) (def (sig (procedure "(filepath:split-path PATH) => LIST" (id filepath:split-path))) (p "Splits a path by the directory separator.")) (def (sig (procedure "(filepath:join-path LIST) => PATH" (id filepath:join-path))) (p "Joins path elements back together.")) (def (sig (procedure "filepath:split-directories" (id filepath:split-directories))) (p "As " (tt "split-path") ", but does not add trailing separators to each element."))) (section 4 "Trailing Separators" (def (sig (procedure "(filepath:has-trailing-path-separator? PATH) => BOOL" (id filepath:has-trailing-path-separator?)))) (def (sig (procedure "(filepath:add-trailing-path-separator PATH) => PATH" (id filepath:add-trailing-path-separator)))) (def (sig (procedure "(filepath:drop-trailing-path-separator PATH) => PATH" (id filepath:drop-trailing-path-separator))))) (section 4 "File Name Normalization and Predicates" (def (sig (procedure "(filepath:normalise PATH) => PATH" (id filepath:normalise)))) (def (sig (procedure "(filepath:path-equal? PATH1 PATH2) => BOOL" (id filepath:path-equal?)))) (def (sig (procedure "(filepath:make-relative ROOT PATH) => PATH" (id filepath:make-relative)))) (def (sig (procedure "(filepath:is-relative? PATH) => BOOL" (id filepath:is-relative?)))) (def (sig (procedure "(filepath:is-absolute? PATH) => BOOL" (id filepath:is-absolute?)))) (def (sig (procedure "(filepath:is-valid? PATH) => BOOL" (id filepath:is-valid?)))) (def (sig (procedure "(filepath:make-valid PATH) => PATH" (id filepath:make-valid)))))) (section 3 "Requires" (ul (li (int-link "matchable")))) (section 3 "Version History" (ul (li "1.2.2 Added test as a test dependency") (li "1.2.1 Changed import to require-extension") (li "1.2 Fix in filepath:posix") (li "1.1 Ported to Chicken 4") (li "1.0 Initial Release"))) (section 3 "License" (p "Based on the " (link "http://www-users.cs.york.ac.uk/~ndm/filepath" "Haskell FilePath library") " by Neil Mitchell.") (p "Copyright 2008-2010 Ivan Raikov.") (p "Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:") (ul (li "Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.") (li "Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.") (li "Neither name of the copyright holders nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.")) (p "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND THE CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR THE CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."))))
(index ("filepath:posix" 0) ("filepath:is-windows?" 355) ("filepath:is-posix?" 522) ("filepath:path-separator" 684) ("filepath:path-separator-set" 917) ("filepath:is-path-separator?" 1075) ("filepath:search-path-separator" 1282) ("filepath:is-search-path-separator?" 1487) ("filepath:ext-separator" 1731) ("filepath:is-ext-separator?" 1880) ("filepath:split-search-path" 2070) ("filepath:get-search-path" 2234) ("filepath:split-extension" 2378) ("filepath:take-extension" 2521) ("filepath:replace-extension" 2675) ("filepath:drop-extension" 2854) ("filepath:add-extension" 3015) ("filepath:has-extension?" 3166) ("filepath:split-all-extensions" 3324) ("filepath:drop-all-extensions" 3478) ("filepath:take-all-extensions" 3635) ("filepath:split-drive" 3782) ("filepath:join-drive" 3964) ("filepath:take-drive" 4102) ("filepath:has-drive?" 4224) ("filepath:drop-drive" 4360) ("filepath:is-drive?" 4491) ("filepath:split-file-name" 4642) ("filepath:take-file-name" 4789) ("filepath:replace-file-name" 4931) ("filepath:drop-file-name" 5104) ("filepath:take-base-name" 5246) ("filepath:replace-base-name" 5401) ("filepath:take-directory" 5570) ("filepath:replace-directory" 5712) ("filepath:combine" 5885) ("filepath:split-path" 6058) ("filepath:join-path" 6192) ("filepath:split-directories" 6317) ("filepath:has-trailing-path-separator?" 6488) ("filepath:add-trailing-path-separator" 6610) ("filepath:drop-trailing-path-separator" 6730) ("filepath:normalise" 6852) ("filepath:path-equal?" 6936) ("filepath:make-relative" 7031) ("filepath:is-relative?" 7128) ("filepath:is-absolute?" 7218) ("filepath:is-valid?" 7308) ("filepath:make-valid" 7392))
(def (sig (procedure "(filepath:posix [BOOL]) => BOOL" (id filepath:posix))) (p "If invoked without arguments, this procedure returns whether the library procedures assume POSIX-style paths or not. Invoking the procedure with a boolean argument disables or enables POSIX-style paths. If set to false, the library procedures assume Windows-style paths."))
(def (sig (procedure "(filepath:is-windows?) => BOOL" (id filepath:is-windows?))) (p "Convenience function that returns the inverse of " (tt "(filepath:posix)") "."))
(def (sig (procedure "(filepath:is-posix?) => BOOL" (id filepath:is-posix?))) (p "Convenience function that returns the result of " (tt "(filepath:posix)") "."))
(def (sig (procedure "(filepath:path-separator) => CHAR" (id filepath:path-separator))) (p "The character that separates directories. On platforms where more than one character is possible, this procedure returns the default one."))
(def (sig (procedure "(filepath:path-separator-set) => CHAR-SET" (id filepath:path-separator-set))) (p "The set of all possible path separator characters."))
(def (sig (procedure "(filepath:is-path-separator? CHAR) => BOOL" (id filepath:is-path-separator?))) (p "A predicate that returns whether the given character is a path separator for the current platform."))
(def (sig (procedure "(filepath:search-path-separator) => CHAR" (id filepath:search-path-separator))) (p "The character that is used to separate the entries in the " (tt "PATH") " environment variable."))
(def (sig (procedure "(filepath:is-search-path-separator? CHAR) => BOOL" (id filepath:is-search-path-separator?))) (p "A predicate that returns whether the given character can be used a separator in the " (tt "PATH") " environment variable."))
(def (sig (procedure "(filepath:ext-separator) => CHAR" (id filepath:ext-separator))) (p "The character that is used to separate file extensions."))
(def (sig (procedure "(filepath:is-ext-separator? CHAR) => BOOL" (id filepath:is-ext-separator?))) (p "A predicate that returns whether the given character is a file extension separator."))
(def (sig (procedure "(filepath:split-search-path STRING) => LIST" (id filepath:split-search-path))) (p "Splits a string on the search path separator character."))
(def (sig (procedure "(filepath:get-search-path) => STRING" (id filepath:get-search-path))) (p "Returns search path from the OS environment."))
(def (sig (procedure "(filepath:split-extension PATH) => (NAME EXT)" (id filepath:split-extension))) (p "Splits path on the last extension."))
(def (sig (procedure "(filepath:take-extension PATH) => EXT" (id filepath:take-extension))) (p "Returns last extension of given path, or empty string."))
(def (sig (procedure "(filepath:replace-extension PATH EXT) => PATH" (id filepath:replace-extension))) (pre " ") (p "Replaces the last path extension with the given extension."))
(def (sig (procedure "(filepath:drop-extension PATH) => PATH" (id filepath:drop-extension))) (p "Removes last extension and extension separator preceding it."))
(def (sig (procedure "(filepath:add-extension PATH EXT) => PATH" (id filepath:add-extension))) (pre "") (p "Appends an extension to the given path."))
(def (sig (procedure "(filepath:has-extension? PATH) => BOOL" (id filepath:has-extension?))) (p "Returns true if the given path has an extension.") (pre ""))
(def (sig (procedure "(filepath:split-all-extensions PATH) => (NAME EXT)" (id filepath:split-all-extensions))) (p "Splits path on the first extension."))
(def (sig (procedure "(filepath:drop-all-extensions PATH) => PATH" (id filepath:drop-all-extensions))) (pre "") (p "Removes all extensions from the path."))
(def (sig (procedure "(filepath:take-all-extensions PATH) => EXT" (id filepath:take-all-extensions))) (p "Returns all extensions from the path."))
(def (sig (procedure "filepath:split-drive" (id filepath:split-drive))) (p "Splits a path into a Windows drive and a path. When in POSIX mode, " (tt "/") " is treated as a drive."))
(def (sig (procedure "(filepath:join-drive DRIVE PATH) => PATH" (id filepath:join-drive))) (p "Joins a drive and the rest of the path."))
(def (sig (procedure "(filepath:take-drive PATH) => DRIVE" (id filepath:take-drive))) (p "Returns the drive of a path."))
(def (sig (procedure "(filepath:has-drive? PATH) => BOOL" (id filepath:has-drive?))) (p "Returns whether the given path has a drive."))
(def (sig (procedure "(filepath:drop-drive PATH) => PATH" (id filepath:drop-drive))) (p "Removes the drive from the given path."))
(def (sig (procedure "(filepath:is-drive? STRING) => BOOL" (id filepath:is-drive?))) (p "Returns true if the given string is a drive specification."))
(def (sig (procedure "(filepath:split-file-name PATH) => (DIR FILE)" (id filepath:split-file-name))) (p "Splits a path into directory and file."))
(def (sig (procedure "(filepath:take-file-name PATH) => FILE" (id filepath:take-file-name))) (p "Returns the filename component of a path."))
(def (sig (procedure "(filepath:replace-file-name PATH FILE) => PATH" (id filepath:replace-file-name))) (p "Replaces the filename component of a path with the given one."))
(def (sig (procedure "(filepath:drop-file-name PATH) => PATH" (id filepath:drop-file-name))) (p "Removes the filename component of a path."))
(def (sig (procedure "(filepath:take-base-name PATH) => STRING" (id filepath:take-base-name))) (p "Returns the base file name (no extension) of a path."))
(def (sig (procedure "(filepath:replace-base-name PATH BASE) => PATH" (id filepath:replace-base-name))) (p "Replaces the base file name of a path with the given one."))
(def (sig (procedure "(filepath:take-directory PATH) => DIR" (id filepath:take-directory))) (p "Returns the directory component of a path."))
(def (sig (procedure "(filepath:replace-directory PATH DIR) => PATH" (id filepath:replace-directory))) (p "Replaces the directory component of a path with the given one."))
(def (sig (procedure "(filepath:combine PATH1 PATH2) => PATH" (id filepath:combine))) (p "Combines two paths. If the second path is absolute, then it returns the second."))
(def (sig (procedure "(filepath:split-path PATH) => LIST" (id filepath:split-path))) (p "Splits a path by the directory separator."))
(def (sig (procedure "(filepath:join-path LIST) => PATH" (id filepath:join-path))) (p "Joins path elements back together."))
(def (sig (procedure "filepath:split-directories" (id filepath:split-directories))) (p "As " (tt "split-path") ", but does not add trailing separators to each element."))
(def (sig (procedure "(filepath:has-trailing-path-separator? PATH) => BOOL" (id filepath:has-trailing-path-separator?))))
(def (sig (procedure "(filepath:add-trailing-path-separator PATH) => PATH" (id filepath:add-trailing-path-separator))))
(def (sig (procedure "(filepath:drop-trailing-path-separator PATH) => PATH" (id filepath:drop-trailing-path-separator))))
(def (sig (procedure "(filepath:normalise PATH) => PATH" (id filepath:normalise))))
(def (sig (procedure "(filepath:path-equal? PATH1 PATH2) => BOOL" (id filepath:path-equal?))))
(def (sig (procedure "(filepath:make-relative ROOT PATH) => PATH" (id filepath:make-relative))))
(def (sig (procedure "(filepath:is-relative? PATH) => BOOL" (id filepath:is-relative?))))
(def (sig (procedure "(filepath:is-absolute? PATH) => BOOL" (id filepath:is-absolute?))))
(def (sig (procedure "(filepath:is-valid? PATH) => BOOL" (id filepath:is-valid?))))
(def (sig (procedure "(filepath:make-valid PATH) => PATH" (id filepath:make-valid))))

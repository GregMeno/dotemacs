((tags "egg") (section 2 "yelp" (toc)) (section 2 "Introduction" (p "This egg provides an interface to the " (link "http://www.yelp.com/about" "Yelp") " " (link "http://www.yelp.com/developers/getting_started" "API") ".  Yelp is a social database of reviews of restaurants and businesses.  It also provides generalized lookup by phone number, geocode, or address across the United States, Canada, and Great Britain.  All six Yelp APIs are supported along with a simple query mechanism for traversing the JSON query result.  A valid Yelp " (link "http://www.yelp.com/developers/getting_started" "YWSID") " is required to use this API.  There is no charge for a YWSID, though each YWSID has a daily query limit (1000) and use is subject to Yelp's " (link "http://www.yelp.com/developers/getting_started/api_terms" "API Terms of Use") ".") (p (image-link "http://static1.px.yelp.com/static/200911301285253944/i/developers/Powered_By_Yelp_Red.png"))) (section 2 "Examples" (pre "#;1> (use yelp)\n#;2> (set-ywsid! \"qvGjCuKXg8adMmACm7haqw\")     ;; example YWSID\n#;3> (define y (by-phone \"4154376800\"))\n#;4> (display-info y)\nCategories: Pizza\nNeighborhood: Mission\nPizzeria Delfina\n3611 18th Street\nSan Francisco, CA 94110\n(415)437-6800\n37.761398 -122.424003\n#;5> (decode y)\nmessage:\n  text: OK\n  code: 0\n  version: 1.1.1\nbusinesses: (1)\n  country_code: US\n  id: bai6umLcCNy9cXql0Js2RQ\n  is_closed: #f\n  city: San Francisco\n  mobile_url: http://mobile.yelp.com/biz/bai6umLcCNy9cXql0Js2RQ\n  review_count: 836\n  zip: 94110\n  state: CA\n  ...\n#;6> (find y \"businesses.phone\")\n\"4154376800\"\n#;7> (find y \"businesses.categories.name\")\n\"Pizza\"\n#;8> (find y \"businesses.neighborhoods.name\")\n\"Mission\"")) (section 2 "Authors" (p "Derrell Piper")) (section 2 "Requirements" (p "Requires the " (int-link "json") " egg.") (p "In addition, the " (tt "chicken-install") " tests require the " (int-link "test") " egg. " (tt "-test") " also requires a valid " (link "http://www.yelp.com/developers/getting_started" "YWSID") " exist in " (tt "../ywsid") " above the egg's temporary install directory.  When fetched with " (tt "chicken-install -r") ", simply creating a file named " (tt "ywsid") " in the parent directory (i.e., the one in which you did the " (tt "chicken-install -r") ") with the following content:") (pre "(set-ywsid! \"<your-personal-ywsid-goes-here>\")") (p "...and then doing a " (tt "chicken-install -test") " in the " (tt "yelp") " subdirectory, should work.") (p "None of this matters if you don't care about regression tests or if you do not specify " (tt "-test") " to " (tt "chicken-install") ".")) (section 2 "API" (section 3 "Authorization and Introspection" (def (sig (procedure "(set-ywsid! YWSID)" (id set-ywsid!))) (p "Sets the Yelp web service ID to the value of " (tt "YWSID") ".  " (b "This must be done before calling any other function in this egg."))) (def (sig (procedure "(valid? OBJECT)" (id valid?))) (p "Is the " (tt "OBJECT") " a valid Yelp response?  There's no need to check " (tt "valid?") " if you check for " (tt "'yelp-success") ".") (p "All Yelp responses include this structure:") (pre "message:\n  text: OK\n  code: 0\n  version: 1.1.1") (p (tt "valid?") " checks for both " (tt "\"OK\"") " and " (tt "0") "."))) (section 3 "Error Handling" (p "The Yelp API consists of the following functions:") (ul (li (tt "by-phone")) (li (tt "hood-for-address")) (li (tt "hood-for-geocode")) (li (tt "near-address")) (li (tt "near-geocode")) (li (tt "near-geobox"))) (p "Each of these functions returns two values.  The first value is a " (tt "RESPONSE") " object if successful or a string representing an error code (either from Yelp or internally generated).  The second value is a symbolic return status.  These values are defined in this egg:") (ul (li (tt "'yelp-success")) (li (tt "'yelp-invalid-response")) (li (tt "'yelp-unavailable")) (li (tt "'yelp-undocumented-response"))) (p "Other values represent the translation of " (tt "\"message.code\"") " in the Yelp response.  " (tt "'yelp-success") " implies " (tt "valid?") ".")) (section 3 "Yelp Phone API" (p "See " (link "http://www.yelp.com/developers/documentation/phone_api" "Yelp Phone API") ".") (def (sig (procedure "(by-phone NUMBER)" (id by-phone))) (p "Look up a business by its phone number, " (tt "NUMBER") ".") (p "The following phone syntax is understood:") (ul (li "aaaxxxnnnn") (li "(aaa)xxx-nnnn") (li "aaa.xxx.nnnn")) (p "This egg currently understands only the North American Numbering Plan syntax (US and Canada).  Sorry mates."))) (section 3 "Yelp Neighborhood API" (p "See " (link "http://www.yelp.com/developers/documentation/neighborhood_api" "Yelp Neighborhood API") ".") (def (sig (procedure "(hood-for-address LOCATION #:CC)" (id hood-for-address))) (p "Returns the neighborhood name associated with a street address, " (tt "LOCATION") ".")) (def (sig (procedure "(hood-for-geocode LAT LON)" (id hood-for-geocode))) (p "Returns the neighborhood name associated with a geocode location, " (tt "LAT") " and " (tt "LON") "."))) (section 3 "Yelp Review Search API" (p "See " (link "http://www.yelp.com/developers/documentation/search_api" "Yelp Review Search API")) (def (sig (procedure "(near-address TERM LOCATION #:NUMBER #:CC #:CATEGORY)" (id near-address))) (p "Returns a list of " (tt "NUMBER") " reviews for businesses containing " (tt "TERM") " and located near the address " (tt "LOCATION") ".  The " (tt "CATEGORY") " keyword may be used to limit the search to a particular Yelp " (link "http://www.yelp.com/developers/documentation/category_list" "category") " name, e.g., " (tt "\"vietnamese\"") ".") (p "Yelp's search algorithm is quite liberal in what it accepts for " (tt "LOCATION") "; neighborhood names are valid terms as are common abbreviations for major cities.  For example:") (pre "#;1> (display-info (near-address \"tokyo a go-go\" \"mission sf\"))\nCategories: Sushi Bars, Japanese\nNeighborhood: Mission\nTokyo Go Go\n3174 16th Street\nSuite 250I\nSan Francisco, CA 94103\n(415)864-2288\n37.764900 -122.424003\n#;2> (display-info (near-address \"john's pizzeria\" \"nyc\"))\nCategories: Pizza\nNeighborhood: West Village\nJohn's Pizzeria\n278 Bleecker St\nNew York, NY 10014\n(212)243-1680\n40.731712 -74.003274")) (def (sig (procedure "(near-geocode TERM LAT LON #:NUMBER #:RADIUS #:CATEGORY)" (id near-geocode))) (p "Returns a list of " (tt "NUMBER") " reviews for businesses containing " (tt "TERM") " and located in a circle around the geocode location " (tt "LAT") " and " (tt "LON") " for a radius of " (tt "RADIUS") ".  The Yelp API fails to specify the units (assume US statute miles).  The " (tt "CATEGORY") " keyword may be used to limit the search to a particular Yelp " (link "http://www.yelp.com/developers/documentation/category_list" "category") " name, e.g., " (tt "\"pizza\"") ".")) (def (sig (procedure "(near-geobox TERM TL-LAT TL-LON BR-LAT BR-LON #:NUMBER #:CATEGORY)" (id near-geobox))) (p "Returns a list of " (tt "NUMBER") " reviews for businesses containing " (tt "TERM") " and located in a box with the top-left geocode of " (tt "TL-LAT") " and " (tt "TL-LON") " and a bottom-right geocode of " (tt "BR-LAT") " and " (tt "BR-LON") ".  The " (tt "CATEGORY") " keyword may be used to limit the search to a particular Yelp " (link "http://www.yelp.com/developers/documentation/category_list" "category") " name, e.g., " (tt "\"divebars+lounges\"") "."))) (section 3 "Display and Query" (def (sig (procedure "(display-info RESPONSE [PORT])" (id display-info))) (p "Display basic information for a Yelp " (tt "RESPONSE") " on " (tt "PORT") ".  For example:") (pre "#;1> (display-info (by-phone \"415.673.3163\"))\nCategories: Vietnamese\nNeighborhood: Civic Center/Tenderloin\nPho Tan Hoa\n431 Jones St\nSan Francisco, CA 94102\n(415)673-3163\n37.785377 -122.412916")) (def (sig (procedure "(decode RESPONSE [PORT])" (id decode))) (p "Walks the JSON tree and decodes the response to " (tt "PORT") ".  Primarily useful during development to determine the pathname of interest.")) (def (sig (procedure "(find RESPONSE PATH)" (id find))) (p "Walks the JSON tree and searches for the JSON key specified by " (tt "PATH") ".  They syntax of " (tt "find") " uses simple dotted notation to describe the pathname, for example: " (tt "businesses.phone") " or " (tt "message.code") "."))) (section 3 "Implementation Notes" (p "The Yelp routines alway return an outermost JSON structure which the JSON egg maps to a vector.  " (tt "find") " returns a list, vector, or a simple value (number, string, #t, #f, or null), depending on what's being queried.  " (tt "decode") " and " (tt "find") " accept lists and vectors.  For example:") (pre "#;1> (define y (by-phone \"(415)864-2288\"))\n#;2> (define c (find y \"businesses.categories\"))\n#;3> (find c \"name\")\n\"Sushi Bars\"\n#;4> (find (list-ref c 0) \"name\")\n\"Sushi Bars\"\n#;5> (for-each (lambda (c) (let ((n (find c \"name\"))) (print n))) c)\nSushi Bars\nJapanese\n#;6> (define m (find y \"message\"))\n#;7> (decode m)\ntext: OK\ncode: 0\nversion: 1.1.1\n#;8> (find m \"text\")\n\"OK\"") (p "The Yelp API defines the following elements as JSON arrays:") (ul (li (tt "businesses")) (li (tt "businesses.categories")) (li (tt "businesses.neighborhoods")) (li (tt "businesses.reviews"))) (p "Note that " (tt "find") " stops on first match, so regular iteration must be used to access second and subsequent elements, as in the first example above (i.e., categories by " (tt "\"name\"") ").")) (section 3 "Limitations" (p "The Yelp servers sometime return spurious " (tt "HTML 301") " redirects (on a good day) for no apparent reason.  There's a sizeable amount of information returned by default for the \"" (tt "near-") "\" queries, so it makes sense to limit queries using " (tt "#:number") " or " (tt "#:category") " when possible."))) (section 2 "Version History" (ul (li "1.0.1 Fix short header exception.  Clarify license is BSD.") (li "1.0   Initial release"))) (section 2 "License" (p "Copyright (C) 2009 Derrell Piper.  BSD-licensed.")))
((tags "eggs" "literals" "regex" "regex-literals") (toc) (section 2 "Regex-literals" (p "A reader extension providing precompiled regular expression literals of the form " (tt "#/[a-z0-9]+/i") " and " "#r{^/path/(to)/file$}") (section 3 "Examples" (section 4 "Using regular expression literals in the interpreter" (p "Loading " (tt "regex-literals") " also loads the " (tt "regex") " unit and allows convenient use of regular expression literals as follows:") (highlight scheme "#;1> (use regex-literals)\n\n#;2> #/[A-Za-z0-9]+/\n#<regexp>\n\n#;3> ,x #/^[a-z0-9]+$/i\n(regexp \"^[a-z0-9]+$\" #t #f #f)\n\n#;4> (string-match #/^(\\d{2}):(\\d{2})(..)/ \"11:59pm\")\n(\"11:59pm\" \"11\" \"59\" \"pm\")\n\n#;5> (string-split-fields #/[^\\s]+/ \"the quick brown fox jumps over the lazy dog\")\n(\"the\" \"quick\" \"brown\" \"fox\" \"jumps\" \"over\" \"the\" \"lazy\" \"dog\")\n\n#;6> (string-split-fields #r{[^/]+} \"/path/to/file\")\n(\"path\" \"to\" \"file\")\n\n#;7> (string-substitute #/(\\w+)\\s+(\\w+)/u \"\\\\2, \\\\1\" \"John Smith\")\n\"Smith, John\"\n")) (section 4 "Using regular expression literals with the compiler" (p "Passing a " (tt "-X regex-literals") " command-line option to " (tt "csc") " allows you to conveniently make use of regular expression literals in your egg or compiled program without making the " (tt "regex-literals") " egg a runtime dependency.") (p "(See the " (int-link "php-s11n") " egg for an example of building with " (tt "regex-literals") ".)"))) (section 3 "Authors" (p (int-link "/users/arto-bendiken" "Arto Bendiken") ", " (link "http://3e8.org/zb" "Zbigniew"))) (section 3 "Requires" (ul (li (int-link "/man/4/Unit regex" "regex")))) (section 3 "Reader extensions" (p "This egg installs a reader extension for " (tt "#\\/") " that reads a regular expression literal as described below in " (tt "read-regex-literal") ", and another reader extension for " (tt "#\\r") " that works similarly but supports a generalized delimiter syntax as described in " (tt "read-regex-literal/general") ".") (p "Note that there are some caveats to using reader extensions when compiling; for more details, refer to the relevant " (int-link "/man/4/faq#Why%20does%20{{define-reader-ctor}}%20not%20work%20in%20my%20compiled%20program?" "FAQ entry") ".")) (section 3 "Input and output" (section 4 "read-regex-literal" (def (sig (procedure " (read-regex-literal [PORT])" (id read-regex-literal))) (p "Reads a regular expression literal of the form " (tt "#/.../") " from " (tt "PORT") ", which defaults to the value of " (tt "(current-input-port)") ". The literal is converted to a precompiled regular expression object using the " (tt "(regexp)") " procedure provided by the " (int-link "/man/4/Unit regex" "regex") " unit.") (p "Regular expression literals may include one or more options that modify the way the pattern matches strings. The options are one or more characters placed immediately after the terminator:") (ul (li (tt "#/.../i") " PCRE_CASELESS: case-insensitive mode; the pattern match will ignore the case of letters in the pattern.") (li (tt "#/.../x") " PCRE_EXTENDED: extended mode; complex regular expressions can be difficult to read, so this option allows you to insert spaces, newlines, and comments in the pattern to make it more readable.") (li (tt "#/.../u") " PCRE_UTF8: UTF-8 mode; sets the language encoding of the regular expression.")))) (section 4 "read-regex-literal/general" (def (sig (procedure " (read-regex-literal/general [PORT])" (id read-regex-literal/general))) (p "Reads a regular expression literal of the form " (tt "#r(...)") " from " (tt "PORT") ", which defaults to the value of " (tt "(current-input-port)") ". This works otherwise similarly to " (tt "read-regex-literal") " but supports a generalized delimiter syntax as follows:") (ul (li "Matching delimiter pairs: " (tt "#r{...") "}, " (tt "#r(...)") ", " (tt "#r[...]") " and " (tt "#r<...>")) (li "Any arbitrary character: " (tt "#r!...!") ", " (tt "#r|...|") ", " (tt "#r@...@") ", and so forth."))))) (section 3 "License" (pre " Copyright (c) 2006-2007 Arto Bendiken.\n \n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to\n deal in the Software without restriction, including without limitation the\n rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n sell copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n \n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n \n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n IN THE SOFTWARE.")) (section 3 "Version history" (dl (dt "1.0.3") (dd "ported to CHICKEN 4 (Thanks to Christian Kellermann)") (dt "1.0.2") (dd "Support for generalized " (tt "#r(...)") " delimiters (by " (link "http://3e8.org/zb" "Zbigniew") ")") (dt "1.0.1") (dd "Added support for the " (tt "#/.../i") ", " (tt "#/.../x") " and " (tt "#/.../u") " options.") (dt "1.0.0") (dd "Initial release of the " (tt "regex-literals") " egg.")))))
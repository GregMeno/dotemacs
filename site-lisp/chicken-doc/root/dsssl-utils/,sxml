((tags "egg") (section 2 "dsssl-utils" (toc)) (section 2 "Documentation" (p "An API to compensate for the #!rest #!key order of a DSSSL extended lambda list.") (p "The extension name is unfortunate since only the extended lambda list feature of DSSSL is involved. See " (int-link "simple-units" "simple-units") " for something that might help with DSSSL " (tt "quantities") ".") (section 3 "DSSSL Extended Lambda List Fixup" (section 4 "Usage" (highlight scheme " (require-extension dsssl-utils) ")) (section 4 "dsssl-fixup" (def (sig (syntax "(dsssl-fixup OPTIONALS KEYS REST BODY...)" (id dsssl-fixup))) (p "Expands the " (tt "BODY...") " in a new lexical scope where the " (tt "#!optional") ", " (tt "#!key") ", and " (tt "#!rest") " variables have the " (i "correct") " value.") (p (tt "OPTIONALS") " is " (tt "(OPTIONAL-BINDING...)") ".") (p (tt "KEYS") " is " (tt "((KEYWORD KEYWORD-BINDING)...)") ", where " (tt "KEYWORD") " is a " (tt "keyword") ".") (p (tt "OPTIONAL-BINDING") " & " (tt "KEYWORD-BINDING") " have the form:") (dl (dt "(" (tt "IDENTIFIER") " " (tt "DEFAULT") ")") (dd "as is") (dt "(" (tt "IDENTIFIER") ")") (dd "becomes (" (tt "IDENTIFIER") " #f)") (dt (tt "IDENTIFIER")) (dd "becomes (" (tt "IDENTIFIER") " #f)")))) (section 4 "fixup-dsssl-lambda-list" (def (sig (procedure "(fixup-dsssl-lambda-list OPTIONALS KEYS REST) => values" (id fixup-dsssl-lambda-list))) (p "Returns 3 \"correct\" values: the rest " (tt "list") ", optionals " (tt "list") ", and keys " (tt "list") ".") (p (tt "OPTIONALS") " is " (tt "((OPTIONAL-VALUE OPTIONAL-DEFAULT)...)") ".") (p (tt "KEYS") " is " (tt "((KEYWORD KEYWORD-VALUE)...)") ".")))) (section 3 "DSSSL Extended Lambda List Replacements" (p "Provides formal argument binding in the " (i "correct") " order. This means an optional will not be bound to a keyword, the rest argument list will not have any optional or keyword values, and keyword arguments are bound to the proper value.") (section 4 "Usage" (highlight scheme " (require-extension lambda+) ")) (section 4 "define+" (def (sig (syntax "(define+ (NAME [ARGUMENT...]) BODY...)" (id define+))) (p "Replacement for " (tt "define") " that uses " (tt "lambda+") ", if necessary.") (p "The " (i "curried define") " form is recognized.") (p "The " (tt "define") " form " (tt "(name arg0 arg1 ... . rest)") " is " (b "not") " supported. However " (tt "(name . rest)") " is recognized. In any case this is about extended lambda lists so use " (tt "#!rest") "."))) (section 4 "lambda+" (def (sig (syntax "(lambda+ [REQUIRED...] [#!optional OPTIONAL...] [#!rest REST] [#!key KEY...])" (id lambda+))) (p "Replacement for " (tt "lambda") " that that binds formals in the " (i "correct") " order."))))) (section 2 "Examples" (highlight scheme "(use dsssl-utils)\n\n(define (f a1 a2 #!optional (o1 'x) o2 #!rest rest #!key k1 k2)\n  (print `((a1 ,a1 a2 ,a2) (o1 ,o1 o2 ,o2) (#:k1 ,k1 #:k2 ,k2) (rest ,rest)))\n  (dsssl-fixup ((o1 'x) o2)\n               ((#:k1 k1) (#:k2 k2))\n               rest\n    `((a1 ,a1 a2 ,a2) (o1 ,o1 o2 ,o2) (#:k1 ,k1 #:k2 ,k2) (rest ,rest)) ) )\n\n(f 1 2 3 #:k1 4 5 6 #:k2 7 8 9)\n;=>\n((a1 1 a2 2) (o1 3 o2 k1:) (k1: #f k2: #f) (rest (4 5 6 k2: 7 8 9)))\n((a1 1 a2 2) (o1 3 o2 5) (k1: 4 k2: 7) (rest (6 8 9)))") (highlight scheme "(use lambda+)\n\n(define (foo r1 r2 #!optional o1 (o2 '()) #!rest rest #!key k1 (k2 'foo))\n  `((,r1 ,r2) (,o1 ,o2) (,k1 ,k2) ,rest) )\n\n(define+ (foo+ r1 r2 #!optional o1 (o2 '()) #!rest rest #!key k1 (k2 'foo))\n  `((,r1 ,r2) (,o1 ,o2) (,k1 ,k2) ,rest) )\n\n(foo 1 2 3 #:k1 4 5 6 7 8) ;=> ((1 2) (3 #:k1) (#f foo) (4 5 6 7 8))\n\n(foo+ 1 2 3 #:k1 4 5 6 7 8) ;=> ((1 2) (3 5) (4 foo) (6 7 8))")) (section 2 "Author" (p (int-link "/users/kon-lovett" "Kon Lovett"))) (section 2 "Version history" (dl (dt "1.0.0") (dd "Added " (tt "lambda+") " & " (tt "define+") ".") (dt "1.0.0") (dd "Hello"))) (section 2 "License" (p "Copyright (C) 2010 Kon Lovett.  All rights reserved.") (p "Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the Software), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:") (p "The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.") (p "THE SOFTWARE IS PROVIDED ASIS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.")))
((tags "egg") (section 2 "http-session" (p "http-session is an implementation of facilities for managing HTTP sessions of web applications.")) (section 2 "Author" (p (link "http://wiki.call-cc.org/users/mario-domenech-goulart" "Mario Domenech Goulart"))) (section 2 "License" (p "BSD")) (section 2 "Requirements" (p (int-link "sha1") ", " (int-link "spiffy"))) (section 2 "Parameters and procedures" (section 3 "Parameters" (def (sig (parameter "(session-table [session-table])" (id session-table))) (p "The session table.  The default value returns an empty session table (first invocation) or the currently session table (subsequent invocations).  See the " (tt "make-session-table") " procedure.")) (def (sig (parameter "(session-lifetime [number])" (id session-lifetime))) (p "The lifetime of sessions in seconds.  Default is 3600s (1h).")) (def (sig (parameter "(session-id-generator [procedure])" (id session-id-generator))) (p "A zero argument procedure which generates a random unique identifier for sessions. Defaults to a procedure which concatenates " (tt "current-milliseconds") " with the process ID and a random number between 0 and 1000 plus the " (tt "current-process-id") " and returns its SHA-1 digest.")) (def (sig (parameter "(match-ip-address? [boolean])" (id match-ip-address?))) (p "Indicates whether http-session should match IP addresses to check if sessions are valid."))) (section 3 "Procedures" (def (sig (procedure "(session-create #!optional (bindings '()))" (id session-create))) (p "Creates a session and returns the session identifier.") (p "The optional " (tt "bindings") " argument is an alist " (tt "'((symbol . value)...)") " of variable bindings valid for the generated session.")) (def (sig (procedure "(session-refresh! sid)" (id session-refresh!))) (p "Refreshes the session identified by " (tt "sid") ", that is, sets the lifetime of the session identified by " (tt "sid") " to " (tt "(session-lifetime)") ".")) (def (sig (procedure "(session-valid? sid)" (id session-valid?))) (p "Returns " (tt "#t") " if the session identified by " (tt "sid") " is valid.  Returns " (tt "#f") " otherwise.") (p "A session is valid if (all items should be satisfied):") (ul (li "There is a session identifier equal to " (tt "sid") " in the session table") (li "The session lifetime corresponding to the session identified by " (tt "sid") " is greater than zero") (li "When " (tt "match-ip-address?") " is not " (tt "#f") ", the IP number corresponding to the session identified by " (tt "sid") " matches the IP number of the client"))) (def (sig (procedure "(session-destroy! sid)" (id session-destroy!))) (p "Destroys the session identified by " (tt "sid") ".")) (def (sig (procedure "(session-ref sid var #!optional default)" (id session-ref))) (p "Returns the value corresponding to VAR from the bindings alist of the session identified by " (tt "sid") ".  If the binding does not exist, DEFAULT is returned.")) (def (sig (procedure "(session-set! sid var val)" (id session-set!))) (p "Sets a value VAL for the VAR symbol in the bindings alist for the session identified by " (tt "sid") ".  If the symbol does not exist in the bindings alist, it is added to it.")) (def (sig (procedure "(session-del! sid var)" (id session-del!))) (p "Deletes the VAR symbol and its corresponding value from the bindings alist of the session identified by " (tt "sid") ".")) (def (sig (procedure "(session-bindings sid)" (id session-bindings))) (p "Returns an alist " (tt "'((variable . value) ... )") " representing the bindings of the session identified by " (tt "sid") ".")) (def (sig (procedure "(make-session-table)" (id make-session-table))) (p "Returns an empty session table.")) (def (sig (procedure "(session-set-finalizer! sid proc)" (id session-set-finalizer!))) (p "Sets a finalizer procedure (" (tt "proc") ") for the session identified by " (tt "sid") ". " (tt "proc") " is an one-argument procedure which receives the session identifier as argument and is executed right before the session is destroyed.")))) (section 2 "Example" (section 3 "Web server" (highlight scheme "(use spiffy web-scheme-handler http-session html-tags html-utils spiffy-request-vars)\n(file-extension-handlers `((\"ws\" . ,web-scheme-handler)))\n(start-server)")) (section 3 "index.ws" (highlight scheme "(define (page:next sid)\n  (html-page\n   (string-append\n    (<h1> (let ((n (add1 (session-ref sid 'n 0))))\n            (session-set! sid 'n n)\n            (number->string n)))\n    (<a> href: (string-append \"?sid=\" sid) \"Next\"))))\n\n(let ((sid ((request-vars) 'sid)))\n  (if sid\n      (if (session-valid? sid)\n          (begin (session-refresh! sid)\n                 (page:next sid))\n          (html-page \"Invalid session.\"))\n      (let ((sid (session-create)))\n        (page:next sid))))"))) (section 2 "Version History" (dl (dt "2.4") (dd "Bug fix for " (tt "session-id-generator") " for long duration processes. The " (tt "current-milliseconds") " value overflows the exact numbers limit for long lived process, so " (tt "inexact->exact") " failed.  Updating to this version is highly recommended.") (dt "2.3") (dd "Dropped requirement for " (tt "regex")) (dt "2.2") (dd "Handle the inexactness of " (tt "current-milliseconds") " on chickens >= 4.6.0") (dt "2.1") (dd "Added the " (tt "session-set-finalizer!") " procedure (by Moritz Heidkamp)") (dt "2.0") (dd "Some major changes")) (ul (li (tt "make-session-table") " is now exported (it was " (tt "make-table") " internally).") (li (tt "current-url") " and " (tt "current-ip") " are gone") (li (tt "session-create") " doesn't use the url-pattern argument anymore (the " (tt "session-table") " can be parameterized for separating web applications)") (li "added " (tt "match-ip-address?") " parameter.  By default, http-session ignores the IP address of the client when checking whether the session is valid.  If " (tt "match-ip-address?") " is " (tt "#t") ", it will take the IP address into account.") (li "Deprecated procedures: " (tt "session-delete-binding!") " and " (tt "session-delete!")) (li "New procedures: " (tt "session-del!") " (to substitute " (tt "session-delete-binding!") ") and " (tt "session-destroy!") " (to substitute " (tt "session-delete!") ")")) (dl (dt "1.2.3") (dd "Added parameters to export list again") (dt "1.2.2") (dd "Ported to Chicken 4") (dt "1.2") (dd "added " (tt "http-session:bindings") ", bug fix for " (tt "http-session:set!") ".") (dt "1.1") (dd "bug fix") (dt "1.0") (dd "initial release"))))
(index ("session-table" 0) ("session-lifetime" 278) ("session-id-generator" 421) ("match-ip-address?" 800) ("session-create" 974) ("session-refresh!" 1271) ("session-valid?" 1505) ("session-destroy!" 2114) ("session-ref" 2242) ("session-set!" 2493) ("session-del!" 2746) ("session-bindings" 2939) ("make-session-table" 3142) ("session-set-finalizer!" 3251))
(def (sig (parameter "(session-table [session-table])" (id session-table))) (p "The session table.  The default value returns an empty session table (first invocation) or the currently session table (subsequent invocations).  See the " (tt "make-session-table") " procedure."))
(def (sig (parameter "(session-lifetime [number])" (id session-lifetime))) (p "The lifetime of sessions in seconds.  Default is 3600s (1h)."))
(def (sig (parameter "(session-id-generator [procedure])" (id session-id-generator))) (p "A zero argument procedure which generates a random unique identifier for sessions. Defaults to a procedure which concatenates " (tt "current-milliseconds") " with the process ID and a random number between 0 and 1000 plus the " (tt "current-process-id") " and returns its SHA-1 digest."))
(def (sig (parameter "(match-ip-address? [boolean])" (id match-ip-address?))) (p "Indicates whether http-session should match IP addresses to check if sessions are valid."))
(def (sig (procedure "(session-create #!optional (bindings '()))" (id session-create))) (p "Creates a session and returns the session identifier.") (p "The optional " (tt "bindings") " argument is an alist " (tt "'((symbol . value)...)") " of variable bindings valid for the generated session."))
(def (sig (procedure "(session-refresh! sid)" (id session-refresh!))) (p "Refreshes the session identified by " (tt "sid") ", that is, sets the lifetime of the session identified by " (tt "sid") " to " (tt "(session-lifetime)") "."))
(def (sig (procedure "(session-valid? sid)" (id session-valid?))) (p "Returns " (tt "#t") " if the session identified by " (tt "sid") " is valid.  Returns " (tt "#f") " otherwise.") (p "A session is valid if (all items should be satisfied):") (ul (li "There is a session identifier equal to " (tt "sid") " in the session table") (li "The session lifetime corresponding to the session identified by " (tt "sid") " is greater than zero") (li "When " (tt "match-ip-address?") " is not " (tt "#f") ", the IP number corresponding to the session identified by " (tt "sid") " matches the IP number of the client")))
(def (sig (procedure "(session-destroy! sid)" (id session-destroy!))) (p "Destroys the session identified by " (tt "sid") "."))
(def (sig (procedure "(session-ref sid var #!optional default)" (id session-ref))) (p "Returns the value corresponding to VAR from the bindings alist of the session identified by " (tt "sid") ".  If the binding does not exist, DEFAULT is returned."))
(def (sig (procedure "(session-set! sid var val)" (id session-set!))) (p "Sets a value VAL for the VAR symbol in the bindings alist for the session identified by " (tt "sid") ".  If the symbol does not exist in the bindings alist, it is added to it."))
(def (sig (procedure "(session-del! sid var)" (id session-del!))) (p "Deletes the VAR symbol and its corresponding value from the bindings alist of the session identified by " (tt "sid") "."))
(def (sig (procedure "(session-bindings sid)" (id session-bindings))) (p "Returns an alist " (tt "'((variable . value) ... )") " representing the bindings of the session identified by " (tt "sid") "."))
(def (sig (procedure "(make-session-table)" (id make-session-table))) (p "Returns an empty session table."))
(def (sig (procedure "(session-set-finalizer! sid proc)" (id session-set-finalizer!))) (p "Sets a finalizer procedure (" (tt "proc") ") for the session identified by " (tt "sid") ". " (tt "proc") " is an one-argument procedure which receives the session identifier as argument and is executed right before the session is destroyed."))

((tags "egg") (section 2 "pyffi" (p "An interface to the Python programming language.") (toc)) (section 2 "Usage" (p "(require-extension pyffi)")) (section 2 "Documentation" (p "The " (tt "pyffi") " extension uses the " (link "http://www.python.org" "Python") " C interface  to invoke Python procedures and methods from within Scheme  and to convert data objects between their Python and Scheme representation.") (p "Currently, " (tt "pyffi") " supports the Python data types listed in the table below. All other Python data types are represented as pointers.") (table (@ (class "symbol-table")) (tr (td "int, float") (td "numeric types, converted to and from the corresponding Scheme numeric values.")) "\n" (tr (td "list") (td "list type, converted to and from Scheme list value")) "\n" (tr (td "str") (td "string type, converted to and from Scheme string value")) "\n" (tr (td "unicode") (td "Unicode string type, converted to and from Scheme " (int-link "utf8.html" "utf8") " string")) "\n" (tr (td "dict") (td "dictionary type, converted to and from Scheme alist value")) "\n" (tr (td "instance") (td "class instance type, converted to Scheme alist value")) "\n" (tr (td "tuple") (td "tuple type, converted to and from Scheme vector value"))) (section 3 "Procedures" (def (sig (procedure "(py-start)" (id py-start))) (p "Initializes the Python interpreter, and creates an evaluation environment. This procedure must be called before all other procedures in the extension.")) (def (sig (procedure "(py-stop)" (id py-stop))) (p "Deallocates the memory reserved by the Python interpreter, and frees all internal structures of the extension.")) (def (sig (procedure "(py-import name)" (id py-import))) (p "Imports Python module " (tt "NAME") ". If the import was unsuccessful, raises an exception of type " (tt "'pyerror") ".")) (def (sig (procedure "(py-eval expr)" (id py-eval))) (p "Evaluates the Python expression contained in the string " (tt "EXPR") " and returns the resulting value, either converted to Scheme representation, or as a pointer to a Python value.")) (def (sig (procedure "(py-apply func arg1 ...)" (id py-apply))) (p "Applies the given arguments to the Python object " (tt "FUNC") " and returns the resulting value, either converted to Scheme representation, or as a pointer to a Python value. The arguments must be either Scheme values of types listed in the type conversion table above, or pointers to Python values."))) (section 3 "Macros" (def (sig (syntax "(define-pyfun expr arg1 ...)" (id define-pyfun))) (p "Defines a Scheme procedure named when called, invokes the Python procedure of the same name. " (tt "EXPR") " is either a string that contains the procedure name, or a pair of the form " (tt "(FORM . NAME)") " where " (tt "FORM") " is a Python expression that when evaluated returns a Python procedure, and " (tt "NAME") " is a string that contains the name of the Scheme procedure. The arguments must be all symbols.")) (def (sig (syntax "(define-pyslot NAME [SCHEME-NAME])" (id define-pyslot))) (p "Defines an accessor/modifier for the Python object attribute " (tt "NAME") ". The optional argument " (tt "SCHEME-NAME") " is an alternate name for the Scheme procedure. The returned procedure takes in a Python object and returns the value of attribute " (tt "NAME") " contained in that object. If the object has no such attribute, #f is returned. If a value is supplied after the name of the object, the procedure acts as a modifier for that slot.")) (def (sig (syntax "(define-pymethod NAME [SCHEME-NAME])" (id define-pymethod))) (p "Defines an accessor for the Python method " (tt "NAME") ". The optional argument " (tt "SCHEME-NAME") " is an alternate name for the Scheme procedure. The accessor is a procedure of the form " (tt "LAMBDA OBJ ARG1 ...") " that takes in a Python object " (tt "OBJ") " and invokes the method " (tt "NAME") " contained in that object, with the supplied arguments, which must be either Scheme values of types listed in the type conversion table above, or pointers to Python values. If the object has no such method, #f is returned.")))) (section 2 "Examples" (pre ";;\n;; Python-UNO example from pyffi.lisp by Dmitri Hrapof.\n;;\n;; Before running the following code, you must make sure OpenOffice is\n;; running as a server:\n;;\n;;  soffice \"-accept=socket,host=localhost,port=2002;urp;\"\n;;\n(require-extension pyffi)\n\n(py-start)\n\n(py-import \"uno\")\n\n(define-pyfun \"uno.getComponentContext\")\n\n(define-pyslot \"ServiceManager\")\n(define-pyslot \"Text\")\n\n;; Can't yet find out appropriate class, the following is lame\n(define-pymethod \"createInstanceWithContext\")\n(define-pymethod \"resolve\")\n(define-pymethod \"getCurrentComponent\")\n(define-pymethod \"createTextCursor\")\n(define-pymethod \"insertString\")\n\n(define (message-uno str)\n  (let* ((lc (uno.getComponentContext))\n\t (resolver (createInstanceWithContext \n\t\t    (ServiceManager lc)\n\t\t    \"com.sun.star.bridge.UnoUrlResolver\" lc))\n\t (ctx (resolve resolver \"uno:socket,host=localhost,port=2002;urp;StarOffice.ComponentContext\"))\n\t (desktop (createInstanceWithContext \n\t\t   (ServiceManager ctx)\n\t\t   \"com.sun.star.frame.Desktop\" ctx))\n\t (model   (getCurrentComponent desktop))\n\t (text    (Text model))\n\t (cursor  (createTextCursor text)))\n    (insertString text cursor str 0)))\n\n\n(message-uno \"Hello, world!\")\n")) (section 2 "About this egg" (section 3 "Author" (p (int-link "/users/ivan-raikov" "Ivan Raikov"))) (section 3 "Version history" (dl (dt "2.17") (dd "Documentation converted to wiki format") (dt "2.16") (dd "setup script updated for Python 2.6") (dt "2.15") (dd "Changed getattr to not convert return result to Scheme value") (dt "2.14") (dd "Eliminated dependency on matchable") (dt "2.13") (dd "More fixes in converting Python values to Scheme") (dt "2.12") (dd "Fixes in converting Python values to Scheme") (dt "2.11") (dd "Ported to Chicken 4"))) (section 3 "License" (pre "Copyright 2007-2010 Ivan Raikov. Based on pyffi.lisp by Dmitri Hrapof.\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or (at\nyour option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nGeneral Public License for more details.\n\nA full copy of the GPL license can be found at\n<http://www.gnu.org/licenses/>."))))
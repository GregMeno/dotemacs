((tags "manual") (toc) (section 2 "Unit utils" (p "This unit contains a \"grab bag\" of procedures without a good home, and which don't have to be available by default (as compared to the " (int-link "Unit extras" "extras") " unit).") (p "This unit uses the " (tt "extras") " and " (tt "srfi-13") " units.") (section 3 "Executing shell commands with formatstring and error checking" (section 4 "system*" (def (sig (procedure "(system* FORMATSTRING ARGUMENT1 ...)" (id system*))) (p "Similar to " (tt "(system (sprintf FORMATSTRING ARGUMENT1 ...))") ", but signals an error should the invoked program return a nonzero exit status.")))) (section 3 "Reading a file's contents" (section 4 "read-all" (def (sig (procedure "(read-all [FILE-OR-PORT])" (id read-all))) (p "If " (tt "FILE-OR-PORT") " is a string, then this procedure returns the contents of the file as a string. If " (tt "FILE-OR-PORT") " is a port, all remaining input is read and returned as a string. The port is not closed. If no argument is provided, input will be read from the port that is the current value of " (tt "(current-input-port)") ".")))) (section 3 "Shell argument quoting" (section 4 "qs" (def (sig (procedure "(qs STRING [PLATFORM])" (id qs))) (p "Escapes " (tt "STRING") " suitably for passing to a shell command on " (tt "PLATFORM") ". " (tt "PLATFORM") " defaults to the value of " (tt "(build-platform)") " and indicates in which style the argument should be quoted. On Windows systems, the string is simply enclosed in double-quote (" (tt "\"") ") characters, on UNIXish systems, characters that would have a special meaning to the shell are escaped using backslash (" (tt "\\") ").")))) (section 3 "Dynamic compilation" (section 4 "compile-file" (def (sig (procedure "(compile-file FILENAME #!key options output-file load)" (id compile-file))) (p "Compiles the Scheme source file " (tt "FILENAME") " into a dynamically loadable library by invoking the " (tt "csc") " compiler driver. If the library can be successfully created and " (tt "load") " is not given or true, the file is loaded into the current Scheme process. " (tt "options") " may be a list of strings which are passed as additional command line options to " (tt "csc") ". If " (tt "output-file") " is not given, then the compiled file is stored in a temporary location and will be deleted when the process exits successfully. When compilation and loading succeeds, the name of the compiled file is returned.") (p "Notes:") (ul (li "loading the same compiled file multiple times is only supported on Linux in the moment and should be considered unreliable. For this reason, a new temporary file is created for every invocation of " (tt "compile-file") ", unless an explicit output file name is given.") (li "this procedure is compatible to the " (tt "scheme-compile-file") " command in " (tt "emacs") "' " (tt "scheme-mode") ".")))) (section 4 "compile-file-options" (def (sig (parameter "compile-file-options" (id compile-file-options))) (p "A parameter that holds a list of default options that should be given to " (tt "csc") " after invocation of the " (tt "compile-file") " procedure. The initial default options are " (tt "-scrutinize -O2 -d2") ".")))) (section 3 "Scanning through an input port" (section 4 "scan-input-lines" (def (sig (procedure "(scan-input-lines REGEXP [PORT])" (id scan-input-lines))) (p "Reads lines from " (tt "PORT") " (defaults to the result of " (tt "(current-input-port)") ") using " (tt "read-line") " and returns the result of " (tt "(string-search REGEXP LINE)") ", if the match succeeds. If no match could be found, " (tt "#f") " is returned.") (p (tt "REGEXP") " may also be a procedure of one argument which is called for each input line and should return a non-false value on success.")))) (section 3 "Asking the user for confirmation" (section 4 "yes-or-no?" (def (sig (procedure "(yes-or-no? MESSAGE #!key default title abort)" (id yes-or-no?))) (p "Prints the string " (tt "MESSAGE") " and asks for entering \"yes\", \"no\" or \"abort\". If running under Windows in GUI mode, then a suitable dialog box is shown. Returns either " (tt "#t") " or " (tt "#f") " depending on whether " (tt "yes") " or " (tt "no") " was entered. The " (tt "default") " keyword argument specifies the default answer that is effective if the user just presses ENTER (or the default button in case of a dialog box). " (tt "title") " specifies the text shown in the caption of the dialog box and is ignored when not running in GUI mode. " (tt "abort") " should be a zero-argument procedure that is called when the user selects \"abort\". The default value for " (tt "abort") " is the " (tt "reset") " procedure. A value of " (tt "#f") " for " (tt "abort") " disables aborting completely.") (p "Previous: " (int-link "Unit posix")) (p "Next: " (int-link "Unit tcp")))))))
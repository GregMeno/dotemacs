((tags "egg") (section 2 "timed-resource" (toc)) (section 2 "Documentation" (p "Provides an abstraction for a managed object, known as a resource, with a fixed lifetime. This might be used to create a file port that will automatically close if unused for some amount of time.") (section 3 "make-timed-resource" (def (sig (procedure "(make-timed-resource OPENER CLOSER TIMEOUT [NAME]) => timed-resource" (id make-timed-resource))) (p "Returns a new " (tt "timed-resource") " object that covers a resource with a lifetime of " (tt "TIMEOUT") " seconds. The resource is acquired by the " (tt "OPENER") " and released by the " (tt "CLOSER") ". An acquired resource will be released automatically at the end of its' life.") (p "The " (tt "OPENER") " is a " (tt "(procedure () *)") " returning the resource object.") (p "The " (tt "CLOSER") " is a " (tt "(procedure (*))") " taking a resource object returned by the " (tt "OPENER") ".") (p "The " (tt "NAME") " is used as a prefix for the generated unique identifier of the created " (tt "timed-resource") " and is usually a " (tt "string") " or " (tt "symbol") ". There is no semantic content.") (p "No attempt is made to serialize access to a resource, this is up to the caller; just don't share the thing.") (p "Exceptions occurring during resource acquisition or release abort the operation. Exceptions during resource release at shutdown are just displayed but no further action is taken."))) (section 3 "with-timed-resource" (def (sig (procedure "(with-timed-resource TIMED-RESOURCE ACTION) => *" (id with-timed-resource))) (p "Returns the result of invoking " (tt "ACTION") " with the resource covered by the " (tt "TIMED-RESOURCE") ". The acquired resource will not be released during the extent of the " (tt "with-timed-resource") " invocation.") (p (tt "ACTION") " is a " (tt "(procedure (timed-resource) *)") "."))) (section 3 "timed-resource?" (def (sig (procedure "(timed-resource? OBJECT) => boolean" (id timed-resource?))) (p "Is the " (tt "OBJECT") " a " (tt "timed-resource") "?"))) (section 3 "timed-resource-name" (def (sig (procedure "(timed-resource-name TIMED-RESOURCE) => *" (id timed-resource-name))) (p "Returns unique id for " (tt "TIMED-RESOURCE") "."))) (section 3 "timed-resource-timeout" (def (sig (procedure "(timed-resource-timeout) => (or #f number)" (id timed-resource-timeout)) (procedure "(timed-resource-timeout SECONDS) => " (id timed-resource-timeout))) (p "Gets & sets the number of seconds to wait for a thread to quit.") (p "Default is " (tt "#f") ".") (p "Currently only used at shutdown.")))) (section 2 "Examples" (highlight scheme "(use timed-resource srfi-4)\n\n;; Returns a blob of random bits.\n;;\n;; (random-blob [BITS])\n;; BITS - the number of random bits, default is 128\n\n(define random-blob\n  (let ((tr-random-dev\n          (make-timed-resource\n            ;Use the random device (*nix only)\n            (lambda () (open-input-file \"/dev/random\" #:binary))\n            (lambda (port) (close-output-port port))\n            ;Only keep open for 10 seconds\n            10.0)))\n    (lambda (#!optional (bits 128))\n      (let ((bytes (inexact->exact (floor (/ (+ bits 7) 8)))))\n        (with-timed-resource tr-random-dev\n          (lambda (port)\n            (u8vector->blob (read-u8vector bytes))))) ) ) )")) (section 2 "Usage" (highlight scheme "(require-extension timed-resource)")) (section 2 "Requirements" (p (int-link "thread-utils") " " (int-link "synch") " " (int-link "record-variants") " " (int-link "check-errors"))) (section 2 "Author" (p (int-link "kon lovett"))) (section 2 "Version history" (dl (dt "1.0.1") (dd "Fix for reporting an expected condition, " (i "timed-resource-closed") ", during shutdown.") (dt "1.0.0") (dd "Moved from " (int-link "srfi-27") " into own extension."))) (section 2 "License" (p "Copyright (C) 2010 Kon Lovett.  All rights reserved.") (p "Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the Software), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:") (p "The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.") (p "THE SOFTWARE IS PROVIDED ASIS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.")))
((tags "eggs") (p "This is version 1.1 of the " (b "hostinfo") " extension library for Chicken Scheme.") (toc) (section 2 "Description" (p "Look up host, protocol, and service information")) (section 2 "Documentation" (p "This extension performs host, protocol and service information lookups via underlying calls to " (i "gethostbyname(3)") ", " (i "getprotobyname(3)") ", and " (i "getservbyname(3)") ".  Depending on your system, this may consult DNS, NIS, " (tt "/etc/hosts") ", " (tt "/etc/services") ", " (tt "/etc/protocols") ", and so on.") (p "A simple interface is provided for the most commmon queries.  Also provided is a more comprehensive interface using records, which contain all data available in a lookup.") (p "IP addresses are represented by 4 (IPv4) or 16 (IPv6) byte " (tt "u8vectors") ". The interface requires, and returns, addresses in this format; functions are provided to convert between the string and " (tt "u8vector") " representations. However, the \"do what I want\" procedures (e.g. " (tt "host-information") ") will do the conversion for you.") (section 3 "Short and sweet" (p "Quickly perform the most common lookups. Convenient and efficient for one-off use, but perform a new lookup each time.  They return " (tt "#f") " on failure.") (def (sig (procedure "(hostname->ip HOSTNAME)" (id hostname->ip))) (p "Look up string " (tt "HOSTNAME") " and return IP address as " (tt "u8vector") ".")) (def (sig (procedure "(ip->hostname IPADDR)" (id ip->hostname))) (p "Look up " (tt "u8vector") " " (tt "IPADDR") " and return hostname as string.")) (def (sig (procedure "(protocol-name->number PROTOCOL-NAME)" (id protocol-name->number))) (p "Look up string " (tt "PROTOCOL-NAME") " and return protocol number.")) (def (sig (procedure "(protocol-number->name PROTOCOL-NUMBER)" (id protocol-number->name))) (p "Look up " (tt "PROTOCOL-NUMBER") " and return protocol name as string.")) (def (sig (procedure "(service-port->name SERVICE-PORT [PROTO])" (id service-port->name))) (p "Look up " (tt "SERVICE-PORT") " number and return service name as string. Optional " (tt "PROTO") " argument, which must be a string, constrains lookup to that protocol.")) (def (sig (procedure "(service-name->port SERVICE-NAME [PROTO])" (id service-name->port))) (p "Look up string " (tt "SERVICE-NAME") " and return the canonical port for that service.  Optional " (tt "PROTO") " argument as above."))) (section 3 "Records" (p "Some lookups return a host, protocol, or service record.  These records print nicely on the screen, for convenient interactive use.") (def (sig (procedure "(hostinfo-address h)" (id hostinfo-address))) (p "Retrieves the " (tt "address") " field of the " (tt "hostinfo") " record " (tt "h") ". Accessors are similar for other records and their fields.")) (def (sig (record "hostinfo" (id hostinfo))) (table (@ (class "symbol-table")) (tr (td "name") (td "Hostname")) "\n" (tr (td "addresses") (td "A vector of one or more u8vector IP addresses")) "\n" (tr (td "aliases") (td "A vector of any alternate hostnames")) "\n" (tr (td "address") (td "The first IP address (u8vector) in addresses")) "\n" (tr (td "type") (td "'AF_INET (IPv4) or 'AF_INET6 (IPv6)")) "\n" (tr (td "length") (td "IP address length in bytes")))) (def (sig (record "protoinfo" (id protoinfo))) (table (@ (class "symbol-table")) (tr (td "name") (td "Protocol name")) "\n" (tr (td "number") (td "Protocol number")) "\n" (tr (td "aliases") (td "Vector of alternate names for this protocol")))) (def (sig (record "servinfo" (id servinfo))) (table (@ (class "symbol-table")) (tr (td "name") (td "Service name")) "\n" (tr (td "number") (td "Service number")) "\n" (tr (td "aliases") (td "Vector of alternate names for this service")) "\n" (tr (td "protocol") (td "Name of protocol this service uses"))))) (section 3 "Record lookup" (def (sig (procedure "(hostname->hostinfo NAME)" (id hostname->hostinfo)) (procedure "(ip->hostinfo IPADDR)" (id ip->hostinfo)) (procedure "(service-name->servinfo NAME)" (id service-name->servinfo)) (procedure "(service-port->servinfo NUM)" (id service-port->servinfo)) (procedure "(protocol-name->protoinfo NAME)" (id protocol-name->protoinfo)) (procedure "(protocol-number->protoinfo NUM)" (id protocol-number->protoinfo))) (p "These lookups correspond to those described in " (i "Short and sweet") ", but return a full record.  The entire record is filled in a single system call."))) (section 3 "One-stop shops" (p "These decipher your argument, call the appropriate lookup, and return an information record.") (def (sig (procedure "(host-information HOST)" (id host-information))) (p "Look up and return a hostinfo record, or " (tt "#f") ". " (tt "HOST") " is a string hostname, a string numeric IP address, or a " (tt "u8vector") " IP address.")) (def (sig (procedure "(protocol-information PROTO)" (id protocol-information))) (p "Look up and return a protoinfo record, or " (tt "#f") ". " (tt "PROTO") " is a protocol number or string name.")) (def (sig (procedure "(service-information SERVICE [PROTO])" (id service-information))) (p "Look up and return a servinfo record, or " (tt "#f") ". " (tt "SERVICE") " is a service number or string name. " (tt "PROTO") " is an optional protocol number or string name, which will constrain lookups to that particular protocol.") (p (b "NOTE:") " if the protocol number is illegal, an error is thrown, since this was probably unintentional."))) (section 3 "Utility functions" (def (sig (procedure "(string->ip IP-STRING)" (id string->ip))) (p "Convert an IPv4 or IPv6 address string in canonical format to a " (tt "u8vector") ", which can be considered an \"IP address object\".   Returns " (tt "#f") " on failure.")) (def (sig (procedure "(ip->string IPADDR)" (id ip->string))) (p "Convert a 4 (IPv4) or 16 (IPv6) element " (tt "u8vector") " to a string in canonical format.  Throws an error if the " (tt "u8vector") " is not 4 or 16 bytes long.  This call should only fail on system error, in which case it will return " (tt "#f") " (perhaps not the best behaviour).")) (def (sig (procedure "(current-hostname [HOSTNAME])" (id current-hostname))) (p "Get the standard host name for the current processor; synonym for " (tt "get-host-name") ".") (p "Set the standard host name when a " (tt "HOSTNAME") " is specified; assuming permission and argument validity. Aborts with an error upon constraint violation.")))) (section 2 "Bugs" (p "IPv6 lookup is not yet supported.  However, IPv6<->string conversion works fine.") (p "System errors return failure (" (tt "#f") ") and so are indistinguishable from failed lookups.  They should probably signal an error or an exception.")) (section 2 "Examples" (pre "(host-information \"www.call-with-current-continuation.org\")\n(host-information '#u8(194 97 107 133))\n(host-information \"194.97.107.133\")\n   ; => #,(hostinfo name: \"www003.lifemedien.de\"\n   ;       addresses: #(#u8(194 97 107 133))\n   ;       aliases: #(\"www.call-with-current-continuation.org\"))\n(ip->hostname '#u8(194 97 107 133))   ; \"www003.lifemedien.de\"\n(string->ip \"0708::0901\")             ;  #u8(7 8 0 0 0 0 0 0 0 0 0 0 0 0 9 1)\n(ip->string '#u8(127 0 0 1))          ;  \"127.0.0.1\"\n(hostinfo-aliases\n (hostname->hostinfo\n  (ip->hostname\n   (hostname->ip\n    (hostinfo-name\n     (host-information \"www.call-with-current-continuation.org\"))))))\n   ; => #(\"www.call-with-current-continuation.org\")\n\n(protocol-information 17)\n   ; => #,(protoinfo name: \"udp\" number: 17 aliases: #(\"UDP\"))\n(protoinfo-name (protocol-information 2))   ; => \"igmp\"\n(protoinfo-aliases (protocol-name->protoinfo\n                    (protocol-number->name\n                     (protoinfo-number\n                      (protocol-information \"ospf\")))))  ; => #(\"OSPFIGP\")\n(protocol-name->number \"OSPFIGP\")     ; 89 (you can look up aliases, too)\n\n(servinfo-protocol (service-name->servinfo\n                    (service-port->name\n                     (servinfo-port (service-information \"ssh\")))))\n   ; => \"udp\" (yes, really)\n(service-information \"ssh\" \"tcp\")\n   ; => #,(servinfo name: \"ssh\" port: 22 aliases: #() protocol: \"tcp\")\n(service-information \"ssh\" \"tco\") ; => #f\n(service-information 512 \"tcp\")\n   ; #,(servinfo name: \"exec\" port: 512 aliases: #() protocol: \"tcp\")\n(service-information 512 \"udp\")\n   ; #,(servinfo name: \"comsat\" port: 512 aliases: #(\"biff\") protocol: \"udp\")\n(service-information 512 17)      ; same as previous\n(service-information 512 170000)\n   ; Error: (service-information) illegal protocol number: 170000")) (section 2 "About this egg" (section 3 "Author" (p (link "http://3e8.org/zb" "Jim Ursetto"))) (section 3 "Version history" (dl (dt "1.3") (dd "Fix for FreeBSD [by Jesper Louis Andersen]") (dt "1.1") (dd "Experimental Windows support [Daishi Kato]") (dt "1.0") (dd "Initial release"))) (section 3 "Requirements" (p (tt "vector-lib"))) (section 3 "License" (pre "Copyright (c) 2005-2010 Jim Ursetto.  All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n  Redistributions of source code must retain the above copyright notice,\n  this list of conditions and the following disclaimer. Redistributions in\n  binary form must reproduce the above copyright notice, this list of\n  conditions and the following disclaimer in the documentation and/or\n  other materials provided with the distribution. Neither the name of the\n  author nor the names of its contributors may be used to endorse or\n  promote products derived from this software without specific prior\n  written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\nIS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR\nCONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\nEXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\nPROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."))))
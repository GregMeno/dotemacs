((section 2 "log5scm" (toc) (section 3 "Introduction" (p "A logging library based on the ideas of CL's " (link "http://common-lisp.net/project/log5" "log5"))) (section 3 "Examples" (highlight scheme "(use log5scm syslog)\n\n(define-category info)\n(define-category debug)\n(define-category warn)\n(define-category warn+ (or info debug warn))\n\n(define-category controller)\n(define-category model)\n(define-category app (or controller model))\n\n(define-output model-out \"model-out\")\n(define-output controller-out \"controller-out\")\n(define-output app-out \"app-out\")\n\n;;start port senders\n(start-sender model-sender (port-sender (current-error-port)) (output (model-out message)) (category model))\n(start-sender controller-sender (port-sender (current-error-port)) (output (controller-out message)) (category controller))\n(start-sender app-sender (port-sender (current-error-port))   (category app))\n\n;;additionally send every warning to syslog\n(start-sender syslog-warn (syslog-sender \"test\" opt/pid facility/local0 prio/warning) (category warn))\n\n(with-context \"Testcontext\"\n (log-for (model warn) \"just a ~A\" \"Test\")\n (with-context \"Nested Context\" \n   (log-for (app) \"nother Test\"))\n (log-for (app) \"Final test\"))")) (section 3 "Authors" (p (int-link "David Krentzlin"))) (section 3 "License" (pre " Copyright (c) 2010 David Krentzlin \n\n Permission is hereby granted, free of charge, to any person obtaining a\n copy of this software and associated documentation files (the \"Software\"),\n to deal in the Software without restriction, including without limitation\n the rights to use, copy, modify, merge, publish, distribute, sublicense,\n and/or sell copies of the Software, and to permit persons to whom the\n Software is furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included\n in all copies or substantial portions of the Software.\n \n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\n OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n OTHER DEALINGS IN THE SOFTWARE.")) (section 3 "Documentation" (def (sig (parameter "*default-logical-connective*" (id *default-logical-connective*))) (p "As the name suggests this is the connective that is assumed, if you do not explicitly specify it in the category-spec.")) (section 4 "Categories" (p "Categories are just a way to organize your logmessages. You may arrange as many and as complex categories as you wish. They're, as the name suggests, a way to express buckets for log-messages. Those buckets may later be bound to senders and thus enable the program to put messages at the right places") (def (sig (syntax "(define-category category-spec)" (id define-category))) (p "Syntax to define categories.  You can define simple and complex categories.") (pre "(define-category info)\n(define-category debug)\n(define-category warn)\n(define-category warn+ (or info debug warn))")) (def (sig (procedure "(dump-categories)" (id dump-categories))) (p "Print all currently known categories to (current-output-port)."))) (section 4 "Senders" (p "Senders are basically filtered sinks for messages. Any message that comes in, will be analyzed against the category-specification and only if a match is found the message is send to its destination. Furthermore senders decide where the output goes. The most commonly used senders will be port-senders. But you could as well send messages to syslog or to a port or via email or whatever. You're free to define a custom sender-type and use it for logging.") (def (sig (syntax "(start-sender sender-constructor (category category-spec) [(output output-spec)])" (id start-sender))) (p "Create and register a sender for the given categories. This sender will only react on matching categories.") (ul (li (tt "sender-constructor") ": is one of the available constructurs. See " (tt "sender-constructors")) (li (tt "category-spec") ": A specification of the categories to match in order for the sender to be applied") (li (tt "output-spec") ":  A specification of the output-formatter. See " (tt "outputs") " for details")) (pre ";;start a port-sender for the category 'model' that outputs the data as \"category message\"\n(start-sender model-sender (port-sender (current-output-port)) (output (category message)) (category model))")) (def (sig (procedure "(dump-senders)" (id dump-senders))) (p "Print the list of all known senders to current-output-port.")) (section 5 "Sender constructors" (def (sig (procedure "(port-sender port-or-path #!key (lazy #f))" (id port-sender))) (p "Creates a sender that outputs to a port. If " (tt "port-or-path") " is a port, all data will be send to this port. If " (tt "port-or-path") " is a string, it is considered a path to a file. The file will be opened and all messages will be send to this file. If " (tt "lazy") " is set to true and " (tt "port-or-path") " is a file-name, the sender will delay the opening of the file until it is actually needed, because a matching log-for statement is issued.")) (def (sig (procedure "(syslog-sender ident options facility prio)" (id syslog-sender))) (p "Creates a syslog-sender. All messages will be send to syslog with the given parameters. See also " (int-link "syslog") ".")))) (section 4 "Outputs" (p "Outputs are just a way to format your message. Technically an output is a procedure that returns a string. Multiple outputs can be combined into a list of outputs that are processed in order when a message is generated") (def (sig (syntax "(define-output name code)" (id define-output))) (p "Register an output with the given " (tt "name") ". The output will be generated by evaluating " (tt "code") ". During the evaluation of " (tt "code") " the following parameters will be bound.") (ul (li (tt "*current-message*") " The content of the message") (li (tt "*current-category*") " The category specification")) (pre "(define-output test-output (string-join (shuffle (string-split (*current-message*) \" \") random) \" \"))")) (section 5 "Predefined outputs" (p "There are some outputs predefined that can be used inside output-specifications") (ul (li "message: the current message") (li "category: the current category")) (def (sig (parameter "*default-output-spec*" (id *default-output-spec*))) (p "This is the output-specification that is used by default when a sender is invoked.")))) (section 4 "Contexts" (p "Sometimes it is useful to have a context in which logging accures. For example if a subsystem logs it might want to execute those log-statements inside its own context.") (def (sig (procedure "(push-context ctx)" (id push-context))) (p "Adds " (tt "ctx") " to the current stack of contexts. This makes " (tt "ctx") " the active context.")) (def (sig (procedure "(pop-context)" (id pop-context))) (p "Removes the most recently push context from the stack of contexts.")) (def (sig (procedure "(call-with-context ctx thunk)" (id call-with-context))) (p "Sets the current context to " (tt "ctx") " and invokes " (tt "thunk") ". When " (tt "thunk") " finishes it restores the previous context.")) (def (sig (syntax "(with-context ctx code)" (id with-context))) (p "This syntax is a convenient wrapper around " (tt "call-with-context") ", that adds a slightly less verbose interface.") (pre "(with-context \"Test\"\n  (log-for (app) \"This is executed withing Test-CTX\")\n  (with-context \"Nested\"\n    (log-for (app) \"This is executed in a nested Context\")))"))) (section 4 "Logging" (p "The actual logging is done using the " (tt "log-for") " syntax.") (def (sig (syntax "(log-for spec fmt . args)" (id log-for))) (p "This form will invoke the logging machinery. It will find the senders that match the given " (tt "spec") ", and send the message to all senders that have a matching category-specification.") (pre "(log-for (model warn) \"just a ~A\" \"Test\")"))))))
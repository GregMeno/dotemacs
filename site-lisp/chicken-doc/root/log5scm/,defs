(index ("*default-logical-connective*" 0) ("define-category" 214) ("dump-categories" 498) ("start-sender" 632) ("dump-senders" 1405) ("port-sender" 1530) ("syslog-sender" 2081) ("define-output" 2298) ("*default-output-spec*" 2804) ("push-context" 2968) ("pop-context" 3137) ("call-with-context" 3267) ("with-context" 3490) ("log-for" 3859))
(def (sig (parameter "*default-logical-connective*" (id *default-logical-connective*))) (p "As the name suggests this is the connective that is assumed, if you do not explicitly specify it in the category-spec."))
(def (sig (syntax "(define-category category-spec)" (id define-category))) (p "Syntax to define categories.  You can define simple and complex categories.") (pre "(define-category info)\n(define-category debug)\n(define-category warn)\n(define-category warn+ (or info debug warn))"))
(def (sig (procedure "(dump-categories)" (id dump-categories))) (p "Print all currently known categories to (current-output-port)."))
(def (sig (syntax "(start-sender sender-constructor (category category-spec) [(output output-spec)])" (id start-sender))) (p "Create and register a sender for the given categories. This sender will only react on matching categories.") (ul (li (tt "sender-constructor") ": is one of the available constructurs. See " (tt "sender-constructors")) (li (tt "category-spec") ": A specification of the categories to match in order for the sender to be applied") (li (tt "output-spec") ":  A specification of the output-formatter. See " (tt "outputs") " for details")) (pre ";;start a port-sender for the category 'model' that outputs the data as \"category message\"\n(start-sender model-sender (port-sender (current-output-port)) (output (category message)) (category model))"))
(def (sig (procedure "(dump-senders)" (id dump-senders))) (p "Print the list of all known senders to current-output-port."))
(def (sig (procedure "(port-sender port-or-path #!key (lazy #f))" (id port-sender))) (p "Creates a sender that outputs to a port. If " (tt "port-or-path") " is a port, all data will be send to this port. If " (tt "port-or-path") " is a string, it is considered a path to a file. The file will be opened and all messages will be send to this file. If " (tt "lazy") " is set to true and " (tt "port-or-path") " is a file-name, the sender will delay the opening of the file until it is actually needed, because a matching log-for statement is issued."))
(def (sig (procedure "(syslog-sender ident options facility prio)" (id syslog-sender))) (p "Creates a syslog-sender. All messages will be send to syslog with the given parameters. See also " (int-link "syslog") "."))
(def (sig (syntax "(define-output name code)" (id define-output))) (p "Register an output with the given " (tt "name") ". The output will be generated by evaluating " (tt "code") ". During the evaluation of " (tt "code") " the following parameters will be bound.") (ul (li (tt "*current-message*") " The content of the message") (li (tt "*current-category*") " The category specification")) (pre "(define-output test-output (string-join (shuffle (string-split (*current-message*) \" \") random) \" \"))"))
(def (sig (parameter "*default-output-spec*" (id *default-output-spec*))) (p "This is the output-specification that is used by default when a sender is invoked."))
(def (sig (procedure "(push-context ctx)" (id push-context))) (p "Adds " (tt "ctx") " to the current stack of contexts. This makes " (tt "ctx") " the active context."))
(def (sig (procedure "(pop-context)" (id pop-context))) (p "Removes the most recently push context from the stack of contexts."))
(def (sig (procedure "(call-with-context ctx thunk)" (id call-with-context))) (p "Sets the current context to " (tt "ctx") " and invokes " (tt "thunk") ". When " (tt "thunk") " finishes it restores the previous context."))
(def (sig (syntax "(with-context ctx code)" (id with-context))) (p "This syntax is a convenient wrapper around " (tt "call-with-context") ", that adds a slightly less verbose interface.") (pre "(with-context \"Test\"\n  (log-for (app) \"This is executed withing Test-CTX\")\n  (with-context \"Nested\"\n    (log-for (app) \"This is executed in a nested Context\")))"))
(def (sig (syntax "(log-for spec fmt . args)" (id log-for))) (p "This form will invoke the logging machinery. It will find the senders that match the given " (tt "spec") ", and send the message to all senders that have a matching category-specification.") (pre "(log-for (model warn) \"just a ~A\" \"Test\")"))

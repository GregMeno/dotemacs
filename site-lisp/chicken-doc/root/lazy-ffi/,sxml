((tags "egg") (section 2 "lazy-ffi" (toc) (section 3 "Description" (p "Another foreign function interface, based on libffi.")) (section 3 "Author" (p (int-link "/users/felix winkelmann" "felix winkelmann"))) (section 3 "Requirements" (ul (li (int-link "silex")) (li (int-link "easyffi")))) (section 3 "Usage" (p (tt "(require-extension lazy-ffi)")) (p "This extension defines the module " (tt "lazy-ffi") ".")) (section 3 "Documentation" (p "A very easy to use foreign function interface, which provides a special read-syntax to call arbitrary functions in shared libraries. This facility uses " (link "http://sources.redhat.com/libffi" "libffi") " and dynamic loading (via " (tt "dlopen(3)") ") to load shared libraries and construct foreign calls at runtime and in interpreted code.") (p "To use this extension in compiled code, invoke the compiler with " (tt "-extension lazy-ffi") ".  This is necessary because the extension defines a special read-syntax which has to be registered before the source code is read in. This is not required for interpreted code.") (section 4 "Read syntax" (p "The following read syntax is provided:") (def (sig (read "#~STRING" (id "#~STRING"))) (p "Registers the shared library named STRING. Subsequent access to foreign symbols will try to find the required symbol in all libraries registered so far. The library name may also be " (tt "#f") ", which allows looking up symbols in the current executable (this may require special linker options, depending on platform).")) (def (sig (read "#~SYMBOL" (id "#~SYMBOL"))) (p "Identifies a foreign symbol, which will be looked up in the currently registered shared libraries.  Returns a procedure that can be called like a normal Scheme procedure.") (p "A special case is the syntax " (tt "#~~") ". When used, an expression is expected preceding any further arguments that should evaluate to a foreign pointer object identifying the address of a C function.")) (def (sig (read "#~(ITEM ...)" (id "#~(ITEM ...)"))) (p "Equivalent to " (tt "(list #~ITEM ...)") ". This can be used to register several shared libraries at once or pre-resolve foreign symbols.") (p "A foreign procedure is called like a normal procedure, with argument values automatically converted to the appropriate foreign representation, using the following mapping of Scheme types to C types:") (table (tr (th "Scheme type") (th "C type")) "\n" (tr (td "boolean") (td (tt "int") " (1 or 0)")) "\n" (tr (td "exact") (td (tt "int"))) "\n" (tr (td "inexact") (td (tt "double"))) "\n" (tr (td "char") (td (tt "char"))) "\n" (tr (td "pointer or locative") (td (tt "void *"))) "\n" (tr (td "string") (td (tt "char *"))) "\n" (tr (td "symbol") (td (tt "char *")))) (p "Arguments of any other type will signal an error (see below for specifying argument conversions).") (p "Additionally the procedure can be called with a number of special keyword arguments:") (dl (dt (tt "return:")) (dd (tt "TYPE"))) (p "Specifies the result type. If not given, the result will be ignored. TYPE should be one of the following:") (table (tr (td (tt "int:"))) "\n" (tr (td (tt "char:"))) "\n" (tr (td (tt "float:"))) "\n" (tr (td (tt "double:"))) "\n" (tr (td (tt "pointer:"))) "\n" (tr (td (tt "string:"))) "\n" (tr (td (tt "symbol:"))) "\n" (tr (td (tt "bool:"))) "\n" (tr (td (tt "void:"))) "\n" (tr (td (tt "scheme-object:")))) (dl (dt (tt "safe:")) (dd (tt "BOOLEAN"))) (p "If given, then the call may call back into Scheme (for example by passing a pointer to a callback function).  If not given, then call may " (b "not") " invoke any Scheme callbacks, or bad things will happen.") (p (tt "TYPE VALUE")) (p "To force a specific argument type conversion (and to allow slightly better argument type checking), a type specifier may also be provided as a keyword, followed by the actual argument. Valid type specifiers are:") (table (tr (td (tt "int:")) (td "exact number")) "\n" (tr (td (tt "float: double:")) (td "inexact number")) "\n" (tr (td (tt "pointer:")) (td "pointer object")) "\n" (tr (td (tt "bool:")) (td "boolean (actually any Scheme object), will be passed as 1 or 0")) "\n" (tr (td (tt "char:")) (td "char")) "\n" (tr (td (tt "string:")) (td "string")) "\n" (tr (td (tt "symbol:")) (td "string (the name of the symbol)")) "\n" (tr (td (tt "scheme-object:")) (td "any Scheme value")) "\n" (tr (td (tt "scheme-pointer:")) (td "any non-immediate Scheme value (a pointer to the data-section will be passed)"))) (p "(The type specifiers " (tt "scheme-pointer:") " and " (tt "scheme-object:") " are mainly intended for advanced uses of this extension)"))) (section 4 "Use from Emacs and Quack" (p "Programmers used to send code from an Emacs Window to the REPL using C-x C-e will notice that it will not work for the " (tt "#~") " syntax, since the whole line " (tt "#~\"...\"") " is neither an S-expression nor a Scheme atom, and Emacs will just send the string " (tt "\"...\"") " alone to the REPL. It may be useful to wrap the library loading with a begin:") (pre " (begin\n   #~\"libc.so.6\"\n   #~\"libm.so.6\")") (p "Then sending the S-expression to the REPL should work."))) (section 3 "Examples" (highlight scheme "(cond-expand\n  (mingw32 #~\"msvcrt\")\n  (else  #~\"libc.so.6\"))\n\n(#~printf \"%d -> %g, ok: %s\\n\" 123 45.67 \"hello\")\n(#~sleep 1)\n\n(cond-expand\n  ((not mingw32) #~\"libm.so.6\")\n  (else))\n\n(#~sin 33.4 return: double:)    ==> 0.915809602890819\n(#~tolower #\\A return: char:)   ==> #\\a\n\n(let* ([box (f64vector 0)]\n       [r (#~modf 123.456 box return: double:)] )\n  (list r box) )   ==> (0.456 #f64(123.0))") (p "Here the \"Hello, world\" example from the GTK 2.0 tutorial:") (highlight scheme ";; Compile like this:\n;\n; $ csc -X lazy-ffi gtkhello.scm\n\n(use lazy-ffi)\n(import foreign)\n\n#~\"libgtk-x11-2.0.so\"\n#~\"libglib-2.0.so\"\n#~\"libgobject-2.0.so\"\n\n(define GTK_WINDOW_TOPLEVEL 0)\n\n(define-external (hello (c-pointer widget) (c-pointer data)) void\n  (print \"Hello, world\") )\n\n(define-external (delete_event (c-pointer widget)\n\t\t\t       (c-pointer event)\n\t\t\t       (c-pointer data) )\n  bool\n  (print \"delete event occurred\")\n  #t)\n\n(define-external (destroy (c-pointer widget) (c-pointer data)) void\n  (#~gtk_main_quit) )\n\n(define (g_signal_connect a b c d)\n  (#~g_signal_connect_data a b c pointer: d pointer: #f 0) )\n\n(#~gtk_init (foreign-value \"&C_main_argc\" c-pointer) (foreign-value \"&C_main_argv\" c-pointer))\n\n(define window (#~gtk_window_new GTK_WINDOW_TOPLEVEL return: pointer:))\n    \n(g_signal_connect window \"delete_event\" #$delete_event #f)  \n(g_signal_connect window \"destroy\" #$destroy #f)\n\n(#~gtk_container_set_border_width window 10)\n    \n(define button (#~gtk_button_new_with_label \"Hello World\" return: pointer:))\n    \n(g_signal_connect button \"clicked\" #$hello #f)\n\n(define-external (close_all (c-pointer widget)) void\n  (#~gtk_widget_destroy window) )\n\n(g_signal_connect button \"clicked\" #$close_all #f)\n(#~gtk_container_add window button)\n(#~gtk_widget_show button)  \n(#~gtk_widget_show window)\n(#~gtk_main safe: #t)") (p "Calling a pointer directly:") (highlight scheme "#~\"libdl.so.2\"\n\n(define atof (#~dlsym pointer: #f \"atof\" return: pointer:)) ; lookup in current module\n\n(print atof)    ; ==> \"#&lt;pointer 1077736272.0&gt;\"\n\n(#~~ atof \"99\" return: double:)    ; ==> 99.0\n\n; Taking it to the extreme...\n\n(use lolevel)\n\n(#~~ (address->pointer 1077736272) \"42.1\" return: double:)    ; ==> 42.1")) (section 3 "Changelog" (ul (li "1.8.3 ported to windows (mingw32)") (li "1.8.2 Ported to chicken4") (li "1.8 Removed use of " (tt "___callback")) (li "1.7 Uses externalized easyffi extension, uses more modern CHICKEN features") (li "1.6 Fixed silly bug in f32vector handling") (li "1.5 Added basic argument and result handling for unsigned ints; allows " (tt "#f") " as module name") (li "1.4 Changed read-syntax to " (tt "#~") " and removed SRFI-4 type-specifiers (transformed automatically)") (li "1.3 Fixed bug (hash-table related, of course)") (li "1.2 Adapted to SRFI-69-compatible hash-tables") (li "1.1 Added " (tt "~~")) (li "1.0 Initial release"))) (section 3 "License" (pre " Copyright (c) 2005, Felix L. Winkelmann\n All rights reserved.\n \n Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following\n conditions are met:\n \n   Redistributions of source code must retain the above copyright notice, this list of conditions and the following\n     disclaimer. \n   Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following\n     disclaimer in the documentation and/or other materials provided with the distribution. \n   Neither the name of the author nor the names of its contributors may be used to endorse or promote\n     products derived from this software without specific prior written permission. \n \n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS\n OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY\n AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR\n CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n POSSIBILITY OF SUCH DAMAGE."))))
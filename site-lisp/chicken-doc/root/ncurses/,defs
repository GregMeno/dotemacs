(index ("A_ALTCHARSET" 0) ("A_ATTRIBUTES" 0) ("A_BLINK" 0) ("A_BOLD" 0) ("A_CHARTEXT" 0) ("A_COLOR" 0) ("A_DIM" 0) ("A_INVIS" 0) ("A_LEFT" 0) ("A_LOW" 0) ("A_NORMAL" 0) ("A_PROTECT" 0) ("A_REVERSE" 0) ("A_RIGHT" 0) ("A_STANDOUT" 0) ("A_TOP" 0) ("A_UNDERLINE" 0) ("A_VERTICAL" 0) ("COLOR_BLACK" 0) ("COLOR_BLUE" 0) ("COLOR_CYAN" 0) ("COLOR_GREEN" 0) ("COLOR_MAGENTA" 0) ("COLOR_PAIR" 0) ("COLOR_RED" 0) ("COLOR_WHITE" 0) ("COLOR_YELLOW" 0) ("KEY_A1" 0) ("KEY_A3" 0) ("KEY_B2" 0) ("KEY_BACKSPACE" 0) ("KEY_BEG" 0) ("KEY_BREAK" 0) ("KEY_BTAB" 0) ("KEY_C1" 0) ("KEY_C3" 0) ("KEY_CANCEL" 0) ("KEY_CATAB" 0) ("KEY_CLEAR" 0) ("KEY_CLOSE" 0) ("KEY_CODE_YES" 0) ("KEY_COMMAND" 0) ("KEY_COPY" 0) ("KEY_CREATE" 0) ("KEY_CTAB" 0) ("KEY_DC" 0) ("KEY_DL" 0) ("KEY_DOWN" 0) ("KEY_EIC" 0) ("KEY_END" 0) ("KEY_ENTER" 0) ("KEY_EOL" 0) ("KEY_EOS" 0) ("KEY_EXIT" 0) ("KEY_F0" 0) ("KEY_FIND" 0) ("KEY_HELP" 0) ("KEY_HOME" 0) ("KEY_IC" 0) ("KEY_IL" 0) ("KEY_LEFT" 0) ("KEY_LL" 0) ("KEY_MARK" 0) ("KEY_MESSAGE" 0) ("KEY_MIN" 0) ("KEY_MOUSE" 0) ("KEY_MOVE" 0) ("KEY_NEXT" 0) ("KEY_NPAGE" 0) ("KEY_OPEN" 0) ("KEY_OPTIONS" 0) ("KEY_PPAGE" 0) ("KEY_PREVIOUS" 0) ("KEY_PRINT" 0) ("KEY_REDO" 0) ("KEY_REFERENCE" 0) ("KEY_REFRESH" 0) ("KEY_REPLACE" 0) ("KEY_RESET" 0) ("KEY_RESIZE" 0) ("KEY_RESTART" 0) ("KEY_RESUME" 0) ("KEY_RIGHT" 0) ("KEY_SAVE" 0) ("KEY_SBEG" 0) ("KEY_SCANCEL" 0) ("KEY_SCOMMAND" 0) ("KEY_SCOPY" 0) ("KEY_SCREATE" 0) ("KEY_SDC" 0) ("KEY_SDL" 0) ("KEY_SELECT" 0) ("KEY_SEND" 0) ("KEY_SEOL" 0) ("KEY_SEXIT" 0) ("KEY_SF" 0) ("KEY_SFIND" 0) ("KEY_SHELP" 0) ("KEY_SHOME" 0) ("KEY_SIC" 0) ("KEY_SLEFT" 0) ("KEY_SMESSAGE" 0) ("KEY_SMOVE" 0) ("KEY_SNEXT" 0) ("KEY_SOPTIONS" 0) ("KEY_SPREVIOUS" 0) ("KEY_SPRINT" 0) ("KEY_SR" 0) ("KEY_SREDO" 0) ("KEY_SREPLACE" 0) ("KEY_SRESET" 0) ("KEY_SRIGHT" 0) ("KEY_SRSUME" 0) ("KEY_SSAVE" 0) ("KEY_SSUSPEND" 0) ("KEY_STAB" 0) ("KEY_SUNDO" 0) ("KEY_SUSPEND" 0) ("KEY_UNDO" 0) ("KEY_UP" 0) ("ACS_BLOCK" 4532) ("ACS_BTEE" 4532) ("ACS_BULLET" 4532) ("ACS_CKBOARD" 4532) ("ACS_DARROW" 4532) ("ACS_DEGREE" 4532) ("ACS_DIAMOND" 4532) ("ACS_HLINE" 4532) ("ACS_LANTERN" 4532) ("ACS_LARROW" 4532) ("ACS_LLCORNER" 4532) ("ACS_LRCORNER" 4532) ("ACS_LTEE" 4532) ("ACS_PLMINUS" 4532) ("ACS_PLUS" 4532) ("ACS_RARROW" 4532) ("ACS_RTEE" 4532) ("ACS_S1" 4532) ("ACS_S9" 4532) ("ACS_TTEE" 4532) ("ACS_UARROW" 4532) ("ACS_ULCORNER" 4532) ("ACS_URCORNER" 4532) ("ACS_VLINE" 4532) ("COLORS" 4532) ("COLOR_PAIRS" 4532) ("LINES" 4532) ("COLS" 4532) ("stdscr" 5759) ("curscr" 5759) ("KEY_F" 5903) ("PAIR_NUMBER" 5903) ("addch" 6047) ("addnstr" 6047) ("addstr" 6047) ("attroff" 6047) ("attron" 6047) ("attrset" 6047) ("beep" 6047) ("border" 6047) ("box" 6047) ("can_change_color" 6460) ("cbreak" 6552) ("clear" 6552) ("clearok" 6552) ("clrtobot" 6552) ("clrtoeol" 6552) ("copywin" 6552) ("curs_set" 6552) ("def_prog_mode" 6552) ("def_shell_mode" 6552) ("delay_output" 6552) ("delch" 6552) ("deleteln" 6552) ("delwin" 6552) ("derwin" 6552) ("doupdate" 6552) ("echo" 6552) ("echochar" 6552) ("endwin" 6552) ("erase" 6552) ("erasechar" 7394) ("flash" 7483) ("flushinp" 7483) ("getbegyx" 7567) ("getch" 7659) ("getmaxyx" 7737) ("getnstr" 7829) ("getparyx" 7889) ("getstr" 7981) ("getsyx" 8035) ("getyx" 8116) ("halfdelay" 8202) ("has_colors" 8259) ("has_ic" 8259) ("has_il" 8259) ("hline" 8414) ("idlok" 8414) ("inch" 8513) ("init_color" 8589) ("init_pair" 8589) ("initscr" 8713) ("insch" 8812) ("insertln" 8889) ("intrflush" 8889) ("is_linetouched" 8993) ("is_wintouched" 8993) ("isendwin" 8993) ("keyname" 9192) ("keypad" 9275) ("killchar" 9275) ("leaveok" 9275) ("longname" 9427) ("meta" 9508) ("move" 9508) ("mvaddch" 9508) ("mvaddnstr" 9508) ("mvaddstr" 9508) ("mvcur" 9508) ("mvdelch" 9508) ("mvgetnstr" 9508) ("mvgetstr" 9508) ("mvhline" 9508) ("mvinch" 10028) ("mvinsch" 10028) ("mvprintw" 10160) ("mvvline" 10160) ("mvwaddch" 10160) ("mvwaddnstr" 10160) ("mvwaddstr" 10160) ("mvwdelch" 10160) ("mvwgetnstr" 10160) ("mvwgetstr" 10160) ("mvwhline" 10160) ("mvwin" 10160) ("mvwinch" 10775) ("mvwinsch" 10775) ("mvwprintw" 10924) ("mvwvline" 10924) ("newpad" 11076) ("newwin" 11076) ("nl" 11231) ("nocbreak" 11231) ("nodelay" 11231) ("noecho" 11231) ("nonl" 11231) ("noraw" 11231) ("notimeout" 11231) ("overlay" 11231) ("overwrite" 11231) ("pair_content" 11616) ("pnoutrefresh" 11713) ("prefresh" 11713) ("printw" 11713) ("raw" 11713) ("refresh" 11713) ("reset_prog_mode" 11713) ("reset_shell_mode" 11713) ("resetty" 11713) ("savetty" 11713) ("scr_dump" 11713) ("scr_init" 11713) ("scr_restore" 11713) ("scr_set" 11713) ("scrl" 11713) ("scroll" 11713) ("scrollok" 11713) ("setscrreg" 11713) ("setsyx" 11713) ("standend" 11713) ("standout" 11713) ("start_color" 11713) ("subpad" 12708) ("subwin" 12708) ("timeout" 12885) ("touchline" 12885) ("touchwin" 12885) ("unctrl" 13040) ("ungetch" 13122) ("untouchwin" 13122) ("vline" 13122) ("waddch" 13122) ("waddnstr" 13122) ("waddstr" 13122) ("wattroff" 13122) ("wattron" 13122) ("wattrset" 13122) ("wborder" 13122) ("wclear" 13122) ("wclrtobot" 13122) ("wclrtoeol" 13122) ("wdelch" 13122) ("wdeleteln" 13122) ("wechochar" 13122) ("werase" 13122) ("wgetch" 13977) ("wgetnstr" 14059) ("whline" 14059) ("winch" 14179) ("winsch" 14179) ("winsertln" 14305) ("wvline" 14305) ("wmove" 14305) ("wnoutrefresh" 14305) ("wprintw" 14305) ("wrefresh" 14305) ("wscrl" 14305) ("wsetscrreg" 14305) ("wstandend" 14305) ("wstandout" 14305) ("wtimeout" 14305) ("wtouchln" 14305))
(def (sig (constant "A_ALTCHARSET" (id A_ALTCHARSET)) (constant "A_ATTRIBUTES" (id A_ATTRIBUTES)) (constant "A_BLINK" (id A_BLINK)) (constant "A_BOLD" (id A_BOLD)) (constant "A_CHARTEXT" (id A_CHARTEXT)) (constant "A_COLOR" (id A_COLOR)) (constant "A_DIM" (id A_DIM)) (constant "A_INVIS" (id A_INVIS)) (constant "A_LEFT" (id A_LEFT)) (constant "A_LOW" (id A_LOW)) (constant "A_NORMAL" (id A_NORMAL)) (constant "A_PROTECT" (id A_PROTECT)) (constant "A_REVERSE" (id A_REVERSE)) (constant "A_RIGHT" (id A_RIGHT)) (constant "A_STANDOUT" (id A_STANDOUT)) (constant "A_TOP" (id A_TOP)) (constant "A_UNDERLINE" (id A_UNDERLINE)) (constant "A_VERTICAL" (id A_VERTICAL)) (constant "COLOR_BLACK" (id COLOR_BLACK)) (constant "COLOR_BLUE" (id COLOR_BLUE)) (constant "COLOR_CYAN" (id COLOR_CYAN)) (constant "COLOR_GREEN" (id COLOR_GREEN)) (constant "COLOR_MAGENTA" (id COLOR_MAGENTA)) (constant "COLOR_PAIR" (id COLOR_PAIR)) (constant "COLOR_RED" (id COLOR_RED)) (constant "COLOR_WHITE" (id COLOR_WHITE)) (constant "COLOR_YELLOW" (id COLOR_YELLOW)) (constant "KEY_A1" (id KEY_A1)) (constant "KEY_A3" (id KEY_A3)) (constant "KEY_B2" (id KEY_B2)) (constant "KEY_BACKSPACE" (id KEY_BACKSPACE)) (constant "KEY_BEG" (id KEY_BEG)) (constant "KEY_BREAK" (id KEY_BREAK)) (constant "KEY_BTAB" (id KEY_BTAB)) (constant "KEY_C1" (id KEY_C1)) (constant "KEY_C3" (id KEY_C3)) (constant "KEY_CANCEL" (id KEY_CANCEL)) (constant "KEY_CATAB" (id KEY_CATAB)) (constant "KEY_CLEAR" (id KEY_CLEAR)) (constant "KEY_CLOSE" (id KEY_CLOSE)) (constant "KEY_CODE_YES" (id KEY_CODE_YES)) (constant "KEY_COMMAND" (id KEY_COMMAND)) (constant "KEY_COPY" (id KEY_COPY)) (constant "KEY_CREATE" (id KEY_CREATE)) (constant "KEY_CTAB" (id KEY_CTAB)) (constant "KEY_DC" (id KEY_DC)) (constant "KEY_DL" (id KEY_DL)) (constant "KEY_DOWN" (id KEY_DOWN)) (constant "KEY_EIC" (id KEY_EIC)) (constant "KEY_END" (id KEY_END)) (constant "KEY_ENTER" (id KEY_ENTER)) (constant "KEY_EOL" (id KEY_EOL)) (constant "KEY_EOS" (id KEY_EOS)) (constant "KEY_EXIT" (id KEY_EXIT)) (constant "KEY_F0" (id KEY_F0)) (constant "KEY_FIND" (id KEY_FIND)) (constant "KEY_HELP" (id KEY_HELP)) (constant "KEY_HOME" (id KEY_HOME)) (constant "KEY_IC" (id KEY_IC)) (constant "KEY_IL" (id KEY_IL)) (constant "KEY_LEFT" (id KEY_LEFT)) (constant "KEY_LL" (id KEY_LL)) (constant "KEY_MARK" (id KEY_MARK)) (constant "KEY_MESSAGE" (id KEY_MESSAGE)) (constant "KEY_MIN" (id KEY_MIN)) (constant "KEY_MOUSE" (id KEY_MOUSE)) (constant "KEY_MOVE" (id KEY_MOVE)) (constant "KEY_NEXT" (id KEY_NEXT)) (constant "KEY_NPAGE" (id KEY_NPAGE)) (constant "KEY_OPEN" (id KEY_OPEN)) (constant "KEY_OPTIONS" (id KEY_OPTIONS)) (constant "KEY_PPAGE" (id KEY_PPAGE)) (constant "KEY_PREVIOUS" (id KEY_PREVIOUS)) (constant "KEY_PRINT" (id KEY_PRINT)) (constant "KEY_REDO" (id KEY_REDO)) (constant "KEY_REFERENCE" (id KEY_REFERENCE)) (constant "KEY_REFRESH" (id KEY_REFRESH)) (constant "KEY_REPLACE" (id KEY_REPLACE)) (constant "KEY_RESET" (id KEY_RESET)) (constant "KEY_RESIZE" (id KEY_RESIZE)) (constant "KEY_RESTART" (id KEY_RESTART)) (constant "KEY_RESUME" (id KEY_RESUME)) (constant "KEY_RIGHT" (id KEY_RIGHT)) (constant "KEY_SAVE" (id KEY_SAVE)) (constant "KEY_SBEG" (id KEY_SBEG)) (constant "KEY_SCANCEL" (id KEY_SCANCEL)) (constant "KEY_SCOMMAND" (id KEY_SCOMMAND)) (constant "KEY_SCOPY" (id KEY_SCOPY)) (constant "KEY_SCREATE" (id KEY_SCREATE)) (constant "KEY_SDC" (id KEY_SDC)) (constant "KEY_SDL" (id KEY_SDL)) (constant "KEY_SELECT" (id KEY_SELECT)) (constant "KEY_SEND" (id KEY_SEND)) (constant "KEY_SEOL" (id KEY_SEOL)) (constant "KEY_SEXIT" (id KEY_SEXIT)) (constant "KEY_SF" (id KEY_SF)) (constant "KEY_SFIND" (id KEY_SFIND)) (constant "KEY_SHELP" (id KEY_SHELP)) (constant "KEY_SHOME" (id KEY_SHOME)) (constant "KEY_SIC" (id KEY_SIC)) (constant "KEY_SLEFT" (id KEY_SLEFT)) (constant "KEY_SMESSAGE" (id KEY_SMESSAGE)) (constant "KEY_SMOVE" (id KEY_SMOVE)) (constant "KEY_SNEXT" (id KEY_SNEXT)) (constant "KEY_SOPTIONS" (id KEY_SOPTIONS)) (constant "KEY_SPREVIOUS" (id KEY_SPREVIOUS)) (constant "KEY_SPRINT" (id KEY_SPRINT)) (constant "KEY_SR" (id KEY_SR)) (constant "KEY_SREDO" (id KEY_SREDO)) (constant "KEY_SREPLACE" (id KEY_SREPLACE)) (constant "KEY_SRESET" (id KEY_SRESET)) (constant "KEY_SRIGHT" (id KEY_SRIGHT)) (constant "KEY_SRSUME" (id KEY_SRSUME)) (constant "KEY_SSAVE" (id KEY_SSAVE)) (constant "KEY_SSUSPEND" (id KEY_SSUSPEND)) (constant "KEY_STAB" (id KEY_STAB)) (constant "KEY_SUNDO" (id KEY_SUNDO)) (constant "KEY_SUSPEND" (id KEY_SUSPEND)) (constant "KEY_UNDO" (id KEY_UNDO)) (constant "KEY_UP" (id KEY_UP))))
(def (sig (procedure "(ACS_BLOCK)" (id ACS_BLOCK)) (procedure "(ACS_BTEE)" (id ACS_BTEE)) (procedure "(ACS_BULLET)" (id ACS_BULLET)) (procedure "(ACS_CKBOARD)" (id ACS_CKBOARD)) (procedure "(ACS_DARROW)" (id ACS_DARROW)) (procedure "(ACS_DEGREE)" (id ACS_DEGREE)) (procedure "(ACS_DIAMOND)" (id ACS_DIAMOND)) (procedure "(ACS_HLINE)" (id ACS_HLINE)) (procedure "(ACS_LANTERN)" (id ACS_LANTERN)) (procedure "(ACS_LARROW)" (id ACS_LARROW)) (procedure "(ACS_LLCORNER)" (id ACS_LLCORNER)) (procedure "(ACS_LRCORNER)" (id ACS_LRCORNER)) (procedure "(ACS_LTEE)" (id ACS_LTEE)) (procedure "(ACS_PLMINUS)" (id ACS_PLMINUS)) (procedure "(ACS_PLUS)" (id ACS_PLUS)) (procedure "(ACS_RARROW)" (id ACS_RARROW)) (procedure "(ACS_RTEE)" (id ACS_RTEE)) (procedure "(ACS_S1)" (id ACS_S1)) (procedure "(ACS_S9)" (id ACS_S9)) (procedure "(ACS_TTEE)" (id ACS_TTEE)) (procedure "(ACS_UARROW)" (id ACS_UARROW)) (procedure "(ACS_ULCORNER)" (id ACS_ULCORNER)) (procedure "(ACS_URCORNER)" (id ACS_URCORNER)) (procedure "(ACS_VLINE)" (id ACS_VLINE)) (procedure "(COLORS)" (id COLORS)) (procedure "(COLOR_PAIRS)" (id COLOR_PAIRS)) (procedure "(LINES)" (id LINES)) (procedure "(COLS)" (id COLS))) (p "All these return an integer value as their result."))
(def (sig (procedure "(stdscr)" (id stdscr)) (procedure "(curscr)" (id curscr))) (p "These two procedures return a " (tt "WINDOW") " object."))
(def (sig (procedure "(KEY_F INT)" (id KEY_F)) (procedure "(PAIR_NUMBER INT)" (id PAIR_NUMBER))) (p "These two procedures return an integer."))
(def (sig (procedure "(addch CHAR)" (id addch)) (procedure "(addnstr STRING INT)" (id addnstr)) (procedure "(addstr STRING)" (id addstr)) (procedure "(attroff INT)" (id attroff)) (procedure "(attron INT)" (id attron)) (procedure "(attrset INT)" (id attrset)) (procedure "(beep)" (id beep)) (procedure "(border CHAR CHAR CHAR CHAR CHAR CHAR CHAR CHAR)" (id border)) (procedure "(box WINDOW CHAR CHAR)" (id box))))
(def (sig (procedure "(can_change_color)" (id can_change_color))) (p "Returns a boolean."))
(def (sig (procedure "(cbreak)" (id cbreak)) (procedure "(clear)" (id clear)) (procedure "(clearok WINDOW BOOL)" (id clearok)) (procedure "(clrtobot)" (id clrtobot)) (procedure "(clrtoeol)" (id clrtoeol)) (procedure "(copywin WINDOW WINDOW INT INT INT INT INT INT BOOL)" (id copywin)) (procedure "(curs_set INT)" (id curs_set)) (procedure "(def_prog_mode)" (id def_prog_mode)) (procedure "(def_shell_mode)" (id def_shell_mode)) (procedure "(delay_output INT)" (id delay_output)) (procedure "(delch)" (id delch)) (procedure "(deleteln)" (id deleteln)) (procedure "(delwin WINDOW)" (id delwin)) (procedure "(derwin WINDOW INT INT INT INT)" (id derwin)) (procedure "(doupdate)" (id doupdate)) (procedure "(echo)" (id echo)) (procedure "(echochar WINDOW CHAR)" (id echochar)) (procedure "(endwin)" (id endwin)) (procedure "(erase)" (id erase))))
(def (sig (procedure "(erasechar)" (id erasechar))) (p "Returns the erased character."))
(def (sig (procedure "(flash)" (id flash)) (procedure "(flushinp)" (id flushinp))))
(def (sig (procedure "(getbegyx WINDOW)" (id getbegyx))) (p "Returns two integer values."))
(def (sig (procedure "(getch)" (id getch))) (p "Returns a character value."))
(def (sig (procedure "(getmaxyx WINDOW)" (id getmaxyx))) (p "Returns two integer values."))
(def (sig (procedure "(getnstr STRING INT)" (id getnstr))))
(def (sig (procedure "(getparyx WINDOW)" (id getparyx))) (p "Returns two integer values."))
(def (sig (procedure "(getstr STRING)" (id getstr))))
(def (sig (procedure "(getsyx)" (id getsyx))) (p "Returns two integer values."))
(def (sig (procedure "(getyx WINDOW)" (id getyx))) (p "Returns two integer values."))
(def (sig (procedure "(halfdelay INT)" (id halfdelay))))
(def (sig (procedure "(has_colors)" (id has_colors)) (procedure "(has_ic)" (id has_ic)) (procedure "(has_il)" (id has_il))) (p "Return a boolean value."))
(def (sig (procedure "(hline CHAR INT)" (id hline)) (procedure "(idlok WINDOW BOOL)" (id idlok))))
(def (sig (procedure "(inch)" (id inch))) (p "Returns a character value."))
(def (sig (procedure "(init_color INT INT INT INT)" (id init_color)) (procedure "(init_pair INT INT INT)" (id init_pair))))
(def (sig (procedure "(initscr)" (id initscr))) (p "Returns an opaque " (tt "WINDOW") " object."))
(def (sig (procedure "(insch CHAR)" (id insch))) (p "Returns a character."))
(def (sig (procedure "(insertln)" (id insertln)) (procedure "(intrflush WINDOW BOOL)" (id intrflush))))
(def (sig (procedure "(is_linetouched WINDOW INT)" (id is_linetouched)) (procedure "(is_wintouched WINDOW)" (id is_wintouched)) (procedure "(isendwin)" (id isendwin))) (p "Return a boolean value."))
(def (sig (procedure "(keyname INT)" (id keyname))) (p "Returns a string value."))
(def (sig (procedure "(keypad WINDOW BOOL)" (id keypad)) (procedure "(killchar CHAR)" (id killchar)) (procedure "(leaveok WINDOW BOOL)" (id leaveok))))
(def (sig (procedure "(longname)" (id longname))) (p "Returns a string value."))
(def (sig (procedure "(meta WINDOW BOOL)" (id meta)) (procedure "(move INT INT)" (id move)) (procedure "(mvaddch INT INT CHAR)" (id mvaddch)) (procedure "(mvaddnstr INT INT STRING INT)" (id mvaddnstr)) (procedure "(mvaddstr INT INT STRING)" (id mvaddstr)) (procedure "(mvcur INT INT INT INT)" (id mvcur)) (procedure "(mvdelch INT INT)" (id mvdelch)) (procedure "(mvgetnstr INT INT STRING INT)" (id mvgetnstr)) (procedure "(mvgetstr INT INT STRING)" (id mvgetstr)) (procedure "(mvhline INT INT CHAR INT)" (id mvhline))))
(def (sig (procedure "(mvinch INT INT)" (id mvinch)) (procedure "(mvinsch INT INT CHAR)" (id mvinsch))) (p "Return a char value."))
(def (sig (procedure "(mvprintw INT INT FORMATSTRING ARG ...)" (id mvprintw)) (procedure "(mvvline INT INT CHAR INT)" (id mvvline)) (procedure "(mvwaddch INT INT CHAR)" (id mvwaddch)) (procedure "(mvwaddnstr WINDOW INT INT STRING INT)" (id mvwaddnstr)) (procedure "(mvwaddstr WINDOW INT INT STRING)" (id mvwaddstr)) (procedure "(mvwdelch WINDOW INT INT)" (id mvwdelch)) (procedure "(mvwgetnstr WINDOW INT INT STRING INT)" (id mvwgetnstr)) (procedure "(mvwgetstr WINDOW INT INT STRING)" (id mvwgetstr)) (procedure "(mvwhline WINDOW INT INT CHAR INT)" (id mvwhline)) (procedure "(mvwin WINDOW INT INT)" (id mvwin))))
(def (sig (procedure "(mvwinch WINDOW INT INT)" (id mvwinch)) (procedure "(mvwinsch WINDOW INT INT CHAR)" (id mvwinsch))) (p "Return a char value"))
(def (sig (procedure "(mvwprintw WINDOW INT INT FORMATSTRING ARG ...)" (id mvwprintw)) (procedure "(mvwvline WINDOW INT INT CHAR INT)" (id mvwvline))))
(def (sig (procedure "(newpad INT INT)" (id newpad)) (procedure "(newwin INT INT INT INT)" (id newwin))) (p "Return an opaque " (tt "WINDOW") " object."))
(def (sig (procedure "(nl)" (id nl)) (procedure "(nocbreak)" (id nocbreak)) (procedure "(nodelay WINDOW BOOL)" (id nodelay)) (procedure "(noecho)" (id noecho)) (procedure "(nonl)" (id nonl)) (procedure "(noraw)" (id noraw)) (procedure "(notimeout WINDOW BOOL)" (id notimeout)) (procedure "(overlay WINDOW WINDOW)" (id overlay)) (procedure "(overwrite WINDOW WINDOW)" (id overwrite))))
(def (sig (procedure "(pair_content INT)" (id pair_content))) (p "Returns two integer values."))
(def (sig (procedure "(pnoutrefresh WINDOW INT INT INT INT INT INT)" (id pnoutrefresh)) (procedure "(prefresh WINDOW INT INT INT INT INT INT)" (id prefresh)) (procedure "(printw FORMATSTRING ARG ...)" (id printw)) (procedure "(raw)" (id raw)) (procedure "(refresh)" (id refresh)) (procedure "(reset_prog_mode)" (id reset_prog_mode)) (procedure "(reset_shell_mode)" (id reset_shell_mode)) (procedure "(resetty)" (id resetty)) (procedure "(savetty)" (id savetty)) (procedure "(scr_dump STRING)" (id scr_dump)) (procedure "(scr_init STRING)" (id scr_init)) (procedure "(scr_restore STRING)" (id scr_restore)) (procedure "(scr_set STRING)" (id scr_set)) (procedure "(scrl INT)" (id scrl)) (procedure "(scroll WINDOW)" (id scroll)) (procedure "(scrollok WINDOW BOOL)" (id scrollok)) (procedure "(setscrreg INT INT)" (id setscrreg)) (procedure "(setsyx INT INT)" (id setsyx)) (procedure "(standend)" (id standend)) (procedure "(standout)" (id standout)) (procedure "(start_color)" (id start_color))))
(def (sig (procedure "(subpad WINDOW INT INT INT INT)" (id subpad)) (procedure "(subwin WINDOW INT INT INT INT)" (id subwin))) (p "Return an opaque " (tt "WINDOW") " object."))
(def (sig (procedure "(timeout INT)" (id timeout)) (procedure "(touchline WINDOW INT INT)" (id touchline)) (procedure "(touchwin WINDOW)" (id touchwin))))
(def (sig (procedure "(unctrl CHAR)" (id unctrl))) (p "Returns a string value."))
(def (sig (procedure "(ungetch INT)" (id ungetch)) (procedure "(untouchwin WINDOW)" (id untouchwin)) (procedure "(vline CHAR INT)" (id vline)) (procedure "(waddch WINDOW CHAR)" (id waddch)) (procedure "(waddnstr WINDOW STRING INT)" (id waddnstr)) (procedure "(waddstr WINDOW STRING)" (id waddstr)) (procedure "(wattroff WINDOW INT)" (id wattroff)) (procedure "(wattron WINDOW INT)" (id wattron)) (procedure "(wattrset WINDOW INT)" (id wattrset)) (procedure "(wborder WINDOW CHAR CHAR CHAR CHAR CHAR CHAR CHAR CHAR)" (id wborder)) (procedure "(wclear WINDOW)" (id wclear)) (procedure "(wclrtobot WINDOW)" (id wclrtobot)) (procedure "(wclrtoeol WINDOW)" (id wclrtoeol)) (procedure "(wdelch WINDOW)" (id wdelch)) (procedure "(wdeleteln WINDOW)" (id wdeleteln)) (procedure "(wechochar WINDOW CHAR)" (id wechochar)) (procedure "(werase WINDOW)" (id werase))))
(def (sig (procedure "(wgetch WINDOW)" (id wgetch))) (p "Returns a char value."))
(def (sig (procedure "(wgetnstr WINDOW STRING INT)" (id wgetnstr)) (procedure "(whline WINDOW CHAR INT)" (id whline))))
(def (sig (procedure "(winch WINDOW)" (id winch)) (procedure "(winsch WINDOW CHAR)" (id winsch))) (p "Return a char value."))
(def (sig (procedure "(winsertln WINDOW)" (id winsertln)) (procedure "(wvline WINDOW CHAR INT)" (id wvline)) (procedure "(wmove WINDOW INT INT)" (id wmove)) (procedure "(wnoutrefresh WINDOW)" (id wnoutrefresh)) (procedure "(wprintw WINDOW FORMATSTRING ARG ...)" (id wprintw)) (procedure "(wrefresh WINDOW)" (id wrefresh)) (procedure "(wscrl WINDOW INT)" (id wscrl)) (procedure "(wsetscrreg WINDOW INT INT)" (id wsetscrreg)) (procedure "(wstandend WINDOW)" (id wstandend)) (procedure "(wstandout WINDOW)" (id wstandout)) (procedure "(wtimeout WINDOW INT)" (id wtimeout)) (procedure "(wtouchln WINDOW INT INT BOOL)" (id wtouchln))))

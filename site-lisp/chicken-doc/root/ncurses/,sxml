((tags "egg") (section 2 "ncurses" (toc) (section 3 "Description" (p "Provides text-mode and terminal operations for text-based user interfaces.")) (section 3 "Author" (p (int-link "/users/felix winkelmann" "felix winkelmann"))) (section 3 "Requirements" (p (int-link "easyffi"))) (section 3 "Documentation" (p "The following definitions are provided (full documentation can be found in your system's " (tt "man") " pages):") (section 4 "Constants" (def (sig (constant "A_ALTCHARSET" (id A_ALTCHARSET)) (constant "A_ATTRIBUTES" (id A_ATTRIBUTES)) (constant "A_BLINK" (id A_BLINK)) (constant "A_BOLD" (id A_BOLD)) (constant "A_CHARTEXT" (id A_CHARTEXT)) (constant "A_COLOR" (id A_COLOR)) (constant "A_DIM" (id A_DIM)) (constant "A_INVIS" (id A_INVIS)) (constant "A_LEFT" (id A_LEFT)) (constant "A_LOW" (id A_LOW)) (constant "A_NORMAL" (id A_NORMAL)) (constant "A_PROTECT" (id A_PROTECT)) (constant "A_REVERSE" (id A_REVERSE)) (constant "A_RIGHT" (id A_RIGHT)) (constant "A_STANDOUT" (id A_STANDOUT)) (constant "A_TOP" (id A_TOP)) (constant "A_UNDERLINE" (id A_UNDERLINE)) (constant "A_VERTICAL" (id A_VERTICAL)) (constant "COLOR_BLACK" (id COLOR_BLACK)) (constant "COLOR_BLUE" (id COLOR_BLUE)) (constant "COLOR_CYAN" (id COLOR_CYAN)) (constant "COLOR_GREEN" (id COLOR_GREEN)) (constant "COLOR_MAGENTA" (id COLOR_MAGENTA)) (constant "COLOR_PAIR" (id COLOR_PAIR)) (constant "COLOR_RED" (id COLOR_RED)) (constant "COLOR_WHITE" (id COLOR_WHITE)) (constant "COLOR_YELLOW" (id COLOR_YELLOW)) (constant "KEY_A1" (id KEY_A1)) (constant "KEY_A3" (id KEY_A3)) (constant "KEY_B2" (id KEY_B2)) (constant "KEY_BACKSPACE" (id KEY_BACKSPACE)) (constant "KEY_BEG" (id KEY_BEG)) (constant "KEY_BREAK" (id KEY_BREAK)) (constant "KEY_BTAB" (id KEY_BTAB)) (constant "KEY_C1" (id KEY_C1)) (constant "KEY_C3" (id KEY_C3)) (constant "KEY_CANCEL" (id KEY_CANCEL)) (constant "KEY_CATAB" (id KEY_CATAB)) (constant "KEY_CLEAR" (id KEY_CLEAR)) (constant "KEY_CLOSE" (id KEY_CLOSE)) (constant "KEY_CODE_YES" (id KEY_CODE_YES)) (constant "KEY_COMMAND" (id KEY_COMMAND)) (constant "KEY_COPY" (id KEY_COPY)) (constant "KEY_CREATE" (id KEY_CREATE)) (constant "KEY_CTAB" (id KEY_CTAB)) (constant "KEY_DC" (id KEY_DC)) (constant "KEY_DL" (id KEY_DL)) (constant "KEY_DOWN" (id KEY_DOWN)) (constant "KEY_EIC" (id KEY_EIC)) (constant "KEY_END" (id KEY_END)) (constant "KEY_ENTER" (id KEY_ENTER)) (constant "KEY_EOL" (id KEY_EOL)) (constant "KEY_EOS" (id KEY_EOS)) (constant "KEY_EXIT" (id KEY_EXIT)) (constant "KEY_F0" (id KEY_F0)) (constant "KEY_FIND" (id KEY_FIND)) (constant "KEY_HELP" (id KEY_HELP)) (constant "KEY_HOME" (id KEY_HOME)) (constant "KEY_IC" (id KEY_IC)) (constant "KEY_IL" (id KEY_IL)) (constant "KEY_LEFT" (id KEY_LEFT)) (constant "KEY_LL" (id KEY_LL)) (constant "KEY_MARK" (id KEY_MARK)) (constant "KEY_MESSAGE" (id KEY_MESSAGE)) (constant "KEY_MIN" (id KEY_MIN)) (constant "KEY_MOUSE" (id KEY_MOUSE)) (constant "KEY_MOVE" (id KEY_MOVE)) (constant "KEY_NEXT" (id KEY_NEXT)) (constant "KEY_NPAGE" (id KEY_NPAGE)) (constant "KEY_OPEN" (id KEY_OPEN)) (constant "KEY_OPTIONS" (id KEY_OPTIONS)) (constant "KEY_PPAGE" (id KEY_PPAGE)) (constant "KEY_PREVIOUS" (id KEY_PREVIOUS)) (constant "KEY_PRINT" (id KEY_PRINT)) (constant "KEY_REDO" (id KEY_REDO)) (constant "KEY_REFERENCE" (id KEY_REFERENCE)) (constant "KEY_REFRESH" (id KEY_REFRESH)) (constant "KEY_REPLACE" (id KEY_REPLACE)) (constant "KEY_RESET" (id KEY_RESET)) (constant "KEY_RESIZE" (id KEY_RESIZE)) (constant "KEY_RESTART" (id KEY_RESTART)) (constant "KEY_RESUME" (id KEY_RESUME)) (constant "KEY_RIGHT" (id KEY_RIGHT)) (constant "KEY_SAVE" (id KEY_SAVE)) (constant "KEY_SBEG" (id KEY_SBEG)) (constant "KEY_SCANCEL" (id KEY_SCANCEL)) (constant "KEY_SCOMMAND" (id KEY_SCOMMAND)) (constant "KEY_SCOPY" (id KEY_SCOPY)) (constant "KEY_SCREATE" (id KEY_SCREATE)) (constant "KEY_SDC" (id KEY_SDC)) (constant "KEY_SDL" (id KEY_SDL)) (constant "KEY_SELECT" (id KEY_SELECT)) (constant "KEY_SEND" (id KEY_SEND)) (constant "KEY_SEOL" (id KEY_SEOL)) (constant "KEY_SEXIT" (id KEY_SEXIT)) (constant "KEY_SF" (id KEY_SF)) (constant "KEY_SFIND" (id KEY_SFIND)) (constant "KEY_SHELP" (id KEY_SHELP)) (constant "KEY_SHOME" (id KEY_SHOME)) (constant "KEY_SIC" (id KEY_SIC)) (constant "KEY_SLEFT" (id KEY_SLEFT)) (constant "KEY_SMESSAGE" (id KEY_SMESSAGE)) (constant "KEY_SMOVE" (id KEY_SMOVE)) (constant "KEY_SNEXT" (id KEY_SNEXT)) (constant "KEY_SOPTIONS" (id KEY_SOPTIONS)) (constant "KEY_SPREVIOUS" (id KEY_SPREVIOUS)) (constant "KEY_SPRINT" (id KEY_SPRINT)) (constant "KEY_SR" (id KEY_SR)) (constant "KEY_SREDO" (id KEY_SREDO)) (constant "KEY_SREPLACE" (id KEY_SREPLACE)) (constant "KEY_SRESET" (id KEY_SRESET)) (constant "KEY_SRIGHT" (id KEY_SRIGHT)) (constant "KEY_SRSUME" (id KEY_SRSUME)) (constant "KEY_SSAVE" (id KEY_SSAVE)) (constant "KEY_SSUSPEND" (id KEY_SSUSPEND)) (constant "KEY_STAB" (id KEY_STAB)) (constant "KEY_SUNDO" (id KEY_SUNDO)) (constant "KEY_SUSPEND" (id KEY_SUSPEND)) (constant "KEY_UNDO" (id KEY_UNDO)) (constant "KEY_UP" (id KEY_UP))))) (section 4 "Variables" (def (sig (procedure "(ACS_BLOCK)" (id ACS_BLOCK)) (procedure "(ACS_BTEE)" (id ACS_BTEE)) (procedure "(ACS_BULLET)" (id ACS_BULLET)) (procedure "(ACS_CKBOARD)" (id ACS_CKBOARD)) (procedure "(ACS_DARROW)" (id ACS_DARROW)) (procedure "(ACS_DEGREE)" (id ACS_DEGREE)) (procedure "(ACS_DIAMOND)" (id ACS_DIAMOND)) (procedure "(ACS_HLINE)" (id ACS_HLINE)) (procedure "(ACS_LANTERN)" (id ACS_LANTERN)) (procedure "(ACS_LARROW)" (id ACS_LARROW)) (procedure "(ACS_LLCORNER)" (id ACS_LLCORNER)) (procedure "(ACS_LRCORNER)" (id ACS_LRCORNER)) (procedure "(ACS_LTEE)" (id ACS_LTEE)) (procedure "(ACS_PLMINUS)" (id ACS_PLMINUS)) (procedure "(ACS_PLUS)" (id ACS_PLUS)) (procedure "(ACS_RARROW)" (id ACS_RARROW)) (procedure "(ACS_RTEE)" (id ACS_RTEE)) (procedure "(ACS_S1)" (id ACS_S1)) (procedure "(ACS_S9)" (id ACS_S9)) (procedure "(ACS_TTEE)" (id ACS_TTEE)) (procedure "(ACS_UARROW)" (id ACS_UARROW)) (procedure "(ACS_ULCORNER)" (id ACS_ULCORNER)) (procedure "(ACS_URCORNER)" (id ACS_URCORNER)) (procedure "(ACS_VLINE)" (id ACS_VLINE)) (procedure "(COLORS)" (id COLORS)) (procedure "(COLOR_PAIRS)" (id COLOR_PAIRS)) (procedure "(LINES)" (id LINES)) (procedure "(COLS)" (id COLS))) (p "All these return an integer value as their result.")) (def (sig (procedure "(stdscr)" (id stdscr)) (procedure "(curscr)" (id curscr))) (p "These two procedures return a " (tt "WINDOW") " object."))) (section 4 "Procedures" (def (sig (procedure "(KEY_F INT)" (id KEY_F)) (procedure "(PAIR_NUMBER INT)" (id PAIR_NUMBER))) (p "These two procedures return an integer.")) (def (sig (procedure "(addch CHAR)" (id addch)) (procedure "(addnstr STRING INT)" (id addnstr)) (procedure "(addstr STRING)" (id addstr)) (procedure "(attroff INT)" (id attroff)) (procedure "(attron INT)" (id attron)) (procedure "(attrset INT)" (id attrset)) (procedure "(beep)" (id beep)) (procedure "(border CHAR CHAR CHAR CHAR CHAR CHAR CHAR CHAR)" (id border)) (procedure "(box WINDOW CHAR CHAR)" (id box)))) (def (sig (procedure "(can_change_color)" (id can_change_color))) (p "Returns a boolean.")) (def (sig (procedure "(cbreak)" (id cbreak)) (procedure "(clear)" (id clear)) (procedure "(clearok WINDOW BOOL)" (id clearok)) (procedure "(clrtobot)" (id clrtobot)) (procedure "(clrtoeol)" (id clrtoeol)) (procedure "(copywin WINDOW WINDOW INT INT INT INT INT INT BOOL)" (id copywin)) (procedure "(curs_set INT)" (id curs_set)) (procedure "(def_prog_mode)" (id def_prog_mode)) (procedure "(def_shell_mode)" (id def_shell_mode)) (procedure "(delay_output INT)" (id delay_output)) (procedure "(delch)" (id delch)) (procedure "(deleteln)" (id deleteln)) (procedure "(delwin WINDOW)" (id delwin)) (procedure "(derwin WINDOW INT INT INT INT)" (id derwin)) (procedure "(doupdate)" (id doupdate)) (procedure "(echo)" (id echo)) (procedure "(echochar WINDOW CHAR)" (id echochar)) (procedure "(endwin)" (id endwin)) (procedure "(erase)" (id erase)))) (def (sig (procedure "(erasechar)" (id erasechar))) (p "Returns the erased character.")) (def (sig (procedure "(flash)" (id flash)) (procedure "(flushinp)" (id flushinp)))) (def (sig (procedure "(getbegyx WINDOW)" (id getbegyx))) (p "Returns two integer values.")) (def (sig (procedure "(getch)" (id getch))) (p "Returns a character value.")) (def (sig (procedure "(getmaxyx WINDOW)" (id getmaxyx))) (p "Returns two integer values.")) (def (sig (procedure "(getnstr STRING INT)" (id getnstr)))) (def (sig (procedure "(getparyx WINDOW)" (id getparyx))) (p "Returns two integer values.")) (def (sig (procedure "(getstr STRING)" (id getstr)))) (def (sig (procedure "(getsyx)" (id getsyx))) (p "Returns two integer values.")) (def (sig (procedure "(getyx WINDOW)" (id getyx))) (p "Returns two integer values.")) (def (sig (procedure "(halfdelay INT)" (id halfdelay)))) (def (sig (procedure "(has_colors)" (id has_colors)) (procedure "(has_ic)" (id has_ic)) (procedure "(has_il)" (id has_il))) (p "Return a boolean value.")) (def (sig (procedure "(hline CHAR INT)" (id hline)) (procedure "(idlok WINDOW BOOL)" (id idlok)))) (def (sig (procedure "(inch)" (id inch))) (p "Returns a character value.")) (def (sig (procedure "(init_color INT INT INT INT)" (id init_color)) (procedure "(init_pair INT INT INT)" (id init_pair)))) (def (sig (procedure "(initscr)" (id initscr))) (p "Returns an opaque " (tt "WINDOW") " object.")) (def (sig (procedure "(insch CHAR)" (id insch))) (p "Returns a character.")) (def (sig (procedure "(insertln)" (id insertln)) (procedure "(intrflush WINDOW BOOL)" (id intrflush)))) (def (sig (procedure "(is_linetouched WINDOW INT)" (id is_linetouched)) (procedure "(is_wintouched WINDOW)" (id is_wintouched)) (procedure "(isendwin)" (id isendwin))) (p "Return a boolean value.")) (def (sig (procedure "(keyname INT)" (id keyname))) (p "Returns a string value.")) (def (sig (procedure "(keypad WINDOW BOOL)" (id keypad)) (procedure "(killchar CHAR)" (id killchar)) (procedure "(leaveok WINDOW BOOL)" (id leaveok)))) (def (sig (procedure "(longname)" (id longname))) (p "Returns a string value.")) (def (sig (procedure "(meta WINDOW BOOL)" (id meta)) (procedure "(move INT INT)" (id move)) (procedure "(mvaddch INT INT CHAR)" (id mvaddch)) (procedure "(mvaddnstr INT INT STRING INT)" (id mvaddnstr)) (procedure "(mvaddstr INT INT STRING)" (id mvaddstr)) (procedure "(mvcur INT INT INT INT)" (id mvcur)) (procedure "(mvdelch INT INT)" (id mvdelch)) (procedure "(mvgetnstr INT INT STRING INT)" (id mvgetnstr)) (procedure "(mvgetstr INT INT STRING)" (id mvgetstr)) (procedure "(mvhline INT INT CHAR INT)" (id mvhline)))) (def (sig (procedure "(mvinch INT INT)" (id mvinch)) (procedure "(mvinsch INT INT CHAR)" (id mvinsch))) (p "Return a char value.")) (def (sig (procedure "(mvprintw INT INT FORMATSTRING ARG ...)" (id mvprintw)) (procedure "(mvvline INT INT CHAR INT)" (id mvvline)) (procedure "(mvwaddch INT INT CHAR)" (id mvwaddch)) (procedure "(mvwaddnstr WINDOW INT INT STRING INT)" (id mvwaddnstr)) (procedure "(mvwaddstr WINDOW INT INT STRING)" (id mvwaddstr)) (procedure "(mvwdelch WINDOW INT INT)" (id mvwdelch)) (procedure "(mvwgetnstr WINDOW INT INT STRING INT)" (id mvwgetnstr)) (procedure "(mvwgetstr WINDOW INT INT STRING)" (id mvwgetstr)) (procedure "(mvwhline WINDOW INT INT CHAR INT)" (id mvwhline)) (procedure "(mvwin WINDOW INT INT)" (id mvwin)))) (def (sig (procedure "(mvwinch WINDOW INT INT)" (id mvwinch)) (procedure "(mvwinsch WINDOW INT INT CHAR)" (id mvwinsch))) (p "Return a char value")) (def (sig (procedure "(mvwprintw WINDOW INT INT FORMATSTRING ARG ...)" (id mvwprintw)) (procedure "(mvwvline WINDOW INT INT CHAR INT)" (id mvwvline)))) (def (sig (procedure "(newpad INT INT)" (id newpad)) (procedure "(newwin INT INT INT INT)" (id newwin))) (p "Return an opaque " (tt "WINDOW") " object.")) (def (sig (procedure "(nl)" (id nl)) (procedure "(nocbreak)" (id nocbreak)) (procedure "(nodelay WINDOW BOOL)" (id nodelay)) (procedure "(noecho)" (id noecho)) (procedure "(nonl)" (id nonl)) (procedure "(noraw)" (id noraw)) (procedure "(notimeout WINDOW BOOL)" (id notimeout)) (procedure "(overlay WINDOW WINDOW)" (id overlay)) (procedure "(overwrite WINDOW WINDOW)" (id overwrite)))) (def (sig (procedure "(pair_content INT)" (id pair_content))) (p "Returns two integer values.")) (def (sig (procedure "(pnoutrefresh WINDOW INT INT INT INT INT INT)" (id pnoutrefresh)) (procedure "(prefresh WINDOW INT INT INT INT INT INT)" (id prefresh)) (procedure "(printw FORMATSTRING ARG ...)" (id printw)) (procedure "(raw)" (id raw)) (procedure "(refresh)" (id refresh)) (procedure "(reset_prog_mode)" (id reset_prog_mode)) (procedure "(reset_shell_mode)" (id reset_shell_mode)) (procedure "(resetty)" (id resetty)) (procedure "(savetty)" (id savetty)) (procedure "(scr_dump STRING)" (id scr_dump)) (procedure "(scr_init STRING)" (id scr_init)) (procedure "(scr_restore STRING)" (id scr_restore)) (procedure "(scr_set STRING)" (id scr_set)) (procedure "(scrl INT)" (id scrl)) (procedure "(scroll WINDOW)" (id scroll)) (procedure "(scrollok WINDOW BOOL)" (id scrollok)) (procedure "(setscrreg INT INT)" (id setscrreg)) (procedure "(setsyx INT INT)" (id setsyx)) (procedure "(standend)" (id standend)) (procedure "(standout)" (id standout)) (procedure "(start_color)" (id start_color)))) (def (sig (procedure "(subpad WINDOW INT INT INT INT)" (id subpad)) (procedure "(subwin WINDOW INT INT INT INT)" (id subwin))) (p "Return an opaque " (tt "WINDOW") " object.")) (def (sig (procedure "(timeout INT)" (id timeout)) (procedure "(touchline WINDOW INT INT)" (id touchline)) (procedure "(touchwin WINDOW)" (id touchwin)))) (def (sig (procedure "(unctrl CHAR)" (id unctrl))) (p "Returns a string value.")) (def (sig (procedure "(ungetch INT)" (id ungetch)) (procedure "(untouchwin WINDOW)" (id untouchwin)) (procedure "(vline CHAR INT)" (id vline)) (procedure "(waddch WINDOW CHAR)" (id waddch)) (procedure "(waddnstr WINDOW STRING INT)" (id waddnstr)) (procedure "(waddstr WINDOW STRING)" (id waddstr)) (procedure "(wattroff WINDOW INT)" (id wattroff)) (procedure "(wattron WINDOW INT)" (id wattron)) (procedure "(wattrset WINDOW INT)" (id wattrset)) (procedure "(wborder WINDOW CHAR CHAR CHAR CHAR CHAR CHAR CHAR CHAR)" (id wborder)) (procedure "(wclear WINDOW)" (id wclear)) (procedure "(wclrtobot WINDOW)" (id wclrtobot)) (procedure "(wclrtoeol WINDOW)" (id wclrtoeol)) (procedure "(wdelch WINDOW)" (id wdelch)) (procedure "(wdeleteln WINDOW)" (id wdeleteln)) (procedure "(wechochar WINDOW CHAR)" (id wechochar)) (procedure "(werase WINDOW)" (id werase)))) (def (sig (procedure "(wgetch WINDOW)" (id wgetch))) (p "Returns a char value.")) (def (sig (procedure "(wgetnstr WINDOW STRING INT)" (id wgetnstr)) (procedure "(whline WINDOW CHAR INT)" (id whline)))) (def (sig (procedure "(winch WINDOW)" (id winch)) (procedure "(winsch WINDOW CHAR)" (id winsch))) (p "Return a char value.")) (def (sig (procedure "(winsertln WINDOW)" (id winsertln)) (procedure "(wvline WINDOW CHAR INT)" (id wvline)) (procedure "(wmove WINDOW INT INT)" (id wmove)) (procedure "(wnoutrefresh WINDOW)" (id wnoutrefresh)) (procedure "(wprintw WINDOW FORMATSTRING ARG ...)" (id wprintw)) (procedure "(wrefresh WINDOW)" (id wrefresh)) (procedure "(wscrl WINDOW INT)" (id wscrl)) (procedure "(wsetscrreg WINDOW INT INT)" (id wsetscrreg)) (procedure "(wstandend WINDOW)" (id wstandend)) (procedure "(wstandout WINDOW)" (id wstandout)) (procedure "(wtimeout WINDOW INT)" (id wtimeout)) (procedure "(wtouchln WINDOW INT INT BOOL)" (id wtouchln))))) (section 4 "Notes:" (ul (li "Arguments of type CHAR may be either characters or integers (the caracter code)") (li "Procedures that normally return an error code are checked, and a condition of the kind " (tt "(exn curses)") " is raised.") (li "The " (tt "...printw") " procedures accept " (tt "printf") " style format-strings (not the C " (tt "printf") ", but the " (tt "printf") " in Chicken's " (tt "extras") " library unit).")))) (section 3 "Example" (highlight scheme "(declare (block) (fixnum) (usual-integrations))\n\n(use ncurses srfi-25)\n\n;;;; life\n\n(define STARTX 0)\n(define STARTY 0)\n(define ENDX 79)\n(define ENDY 24)\n\n(define CELL_CHAR #\\#)\n(define TIME_OUT 300)\n\n(define oldstate car)\n(define newstate cdr)\n(define oldstate-set! set-car!)\n(define newstate-set! set-cdr!)\n\n(define cols #f)\n(define lines #f)\n\n(define (life-display win area startx starty endx endy)\n  (wclear win)\n  (do ([i startx (add1 i)])\n      ((>= i endx))\n    (do ([j starty (add1 j)])\n\t((>= j endy))\n      (unless (zero? (newstate (array-ref area i j)))\n\t(mvwaddch win j i CELL_CHAR) ) ) )\n  (wrefresh win) )\n\n(define (calc area i j)\n  (let ([neighbours \n\t (+ (oldstate (array-ref area (modulo (+ i -1 cols) cols) j))\n\t    (oldstate (array-ref area (modulo (+ i -1 cols) cols) (modulo (+ j -1 lines) lines)))\n\t    (oldstate (array-ref area (modulo (+ i -1 cols) cols) (modulo (add1 j) lines)))\n\t    (oldstate (array-ref area (modulo (add1 i) cols) j))\n\t    (oldstate (array-ref area (modulo (add1 i) cols) (modulo (+ j -1 lines) lines)))\n\t    (oldstate (array-ref area (modulo (add1 i) cols) (modulo (add1 j) lines)))\n\t    (oldstate (array-ref area i (modulo (+ j -1 lines) lines)))\n\t    (oldstate (array-ref area i (modulo (add1 j) lines))) ) ] )\n    (newstate-set!\n     (array-ref area i j)\n     (if (and (not (zero? (oldstate (array-ref area i j))))\n\t      (or (= 2 neighbours) (= 3 neighbours)) )\n\t 1\n\t (if (and (zero? (oldstate (array-ref area i j))) \n\t\t  (= 3 neighbours) )\n\t     1\n\t     0) ) ) ) )\n\n(define (update-state area startx starty endx endy)\n  (do ([i startx (add1 i)])\n      ((>= i endx))\n    (do ([j starty (add1 j)])\n\t((>= j endy))\n      (let ([cell (array-ref area i j)])\n\t(oldstate-set! cell (newstate cell)) ) ) ) )\n\n(define (main)\n  (initscr)\n  (cbreak)\n  (timeout TIME_OUT)\n  (keypad (stdscr) #t)\n  (curs_set 0)\n  (set! cols (COLS))\n  (set! lines (LINES))\n  (set! ENDX (sub1 cols))\n  (set! ENDY (sub1 lines))\n  (let ([workarea (make-array (shape 0 cols 0 lines))])\n    (do ([i 0 (add1 i)])\n\t((>= i cols))\n      (do ([j 0 (add1 j)])\n\t  ((>= j lines))\n\t(array-set! workarea i j (cons 0 0)) ) )\n    (newstate-set! (array-ref workarea 39 15) 1)\n    (newstate-set! (array-ref workarea 40 15) 1)\n    (newstate-set! (array-ref workarea 41 15) 1)\n    (newstate-set! (array-ref workarea 39 16) 1)\n    (newstate-set! (array-ref workarea 39 17) 1)\n    (newstate-set! (array-ref workarea 41 16) 1)\n    (newstate-set! (array-ref workarea 41 17) 1)\n    (update-state workarea STARTX STARTY ENDX ENDY)\n    (life-display (stdscr) workarea STARTX STARTY ENDX ENDY)\n    (let loop ()\n      (unless (= (char->integer (getch)) (KEY_F 1))\n\t(do ([i STARTX (add1 i)])\n\t    ((>= i ENDX))\n\t  (do ([j STARTY (add1 j)])\n\t      ((>= j ENDY))\n\t    (calc workarea i j) ) )\n\t(update-state workarea STARTX STARTY ENDX ENDY)\n\t(life-display (stdscr) workarea STARTX STARTY ENDX ENDY) \n\t(loop) ) ) ) \n  (endwin) )\n\n(main)")) (section 3 "License" (pre " Copyright (c) 2003, Felix L. Winkelmann\n All rights reserved.\n \n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions\n are met:\n \n   Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n   \n   Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n   \n   Neither the name of the author nor the names of its contributors may\n   be used to endorse or promote products derived from this software\n   without specific prior written permission.\n \n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n OF THE POSSIBILITY OF SUCH DAMAGE."))))
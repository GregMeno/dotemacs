((section 2 "elliptic-curves" (toc) (section 3 "Author" (p (int-link "/users/thomas chust" "Thomas Chust"))) (section 3 "Requirements" (ul (li (link "http://wiki.call-cc.org/eggref/4/numbers" "numbers")) (li (link "http://wiki.call-cc.org/eggref/4/modular-arithmetic" "modular-arithmetic")) (li (link "http://wiki.call-cc.org/eggref/4/defstruct" "defstruct")) (li (link "http://wiki.call-cc.org/eggref/4/matchable" "matchable")))) (section 3 "Description" (p "This library allows you to perform basic arithmetic and cryptographic primitives on elliptic curve groups over finite fields with arbitrarily large integer moduli.") (p "Points on elliptic curves are represented by complex numbers, the infinitely remote point is represented by the number zero.")) (section 3 "API" (section 4 "Module elliptic-curve-parameters" (p "This module defines an elliptic curve parameter record as follows:") (pre " (defstruct ec-parameters\n   ;; Prime modulus of the curve's underlying field\n   p\n   ;; Parameter a of the Weierstrass equation\n   a\n   ;; Parameter b of the Weierstrass equation\n   b\n   ;; Base point of the curve\n   [G #f]\n   ;; Order of the base point\n   [n #f]\n   ;; Cofactor of the base point\n   [h #f]\n   ;; Optional name of the parameter set\n   [name #f])") (def (sig (syntax "(define-ec-parameters id p a b x y n h)" (id define-ec-parameters))) (p "A shorthand for") (pre " (define id\n   (make-ec-parameters\n    p: (string->number p 16)\n    a: (string->number a 16)\n    b: (string->number b 16)\n    G: (make-rectangular\n        (string->number x 16)\n        (string->number y 16))\n    n: (string->number n 16)\n    h: (string->number h 16)\n    name: 'id))")) (def (sig (constant "brainpool-P160r1" (id brainpool-P160r1)) (constant "brainpool-P192r1" (id brainpool-P192r1)) (constant "brainpool-P224r1" (id brainpool-P224r1)) (constant "brainpool-P256r1" (id brainpool-P256r1)) (constant "brainpool-P320r1" (id brainpool-P320r1)) (constant "brainpool-P384r1" (id brainpool-P384r1)) (constant "brainpool-P512r1" (id brainpool-P512r1))) (p "Constants for standardized elliptic curves suitable for cryptographic use. Refer to the " (link "http://www.ecc-brainpool.org/" "ECC Brainpool") " site for more information."))) (section 4 "Module elliptic-curve-arithmetic" (def (sig (procedure "((ec+ parameters) P ...)" (id ec+))) (p "Computes the sum of the points " (tt "P") " on the elliptic curve specified by the given " (tt "parameters") ", similar to the standard procedure " (tt "+") ".")) (def (sig (procedure "((ec- parameters) A P ...)" (id ec-))) (p "Computes the difference of point " (tt "A") " and all points " (tt "P") " or the additive inverse of " (tt "A") " on the elliptic curve specified by the given " (tt "parameters") ", similar to the standard procedure " (tt "-") ".")) (def (sig (procedure "((ec* parameters) P n)" (id ec*))) (p "Computes the scalar product of point " (tt "P") " with the integer " (tt "n") " on the elliptic curve specified by the given " (tt "parameters") ", but does so much more efficiently than iteratively summing up copies of " (tt "P") ".") (p "If " (tt "n") " is negative, the additive inverse of " (tt "P") " is multiplied by " (tt "(abs n)") ".")) (def (sig (procedure "(on-elliptic-curve? parameters P)" (id on-elliptic-curve?))) (p "Checks whether the point " (tt "P") " is a member of the elliptic curve specified by the given " (tt "parameters") ".")) (def (sig (syntax "(with-elliptic-curve parameters body ...)" (id with-elliptic-curve))) (p "Overloads the symbols " (tt "+") ", " (tt "-") " and " (tt "*") " inside " (tt "body") " with versions operating on elements of the elliptic curve specified by the given " (tt "parameters") "."))) (section 4 "Module elliptic-curve-cryptography" (def (sig (procedure "((ecc-generate-keys parameters random-integer))" (id ecc-generate-keys))) (p "Given elliptic curve " (tt "parameters") " and a cryptographically strong " (tt "random-integer") " generator for huge numbers with analoguous behaviour as the standard procedure " (tt "(random n)") ", a procedure is generated that returns a random new public key and private key. The public key is a point on the elliptic curve, the private key is an integer.")) (def (sig (procedure "((ecc-sign parameters random-integer) d message)" (id ecc-sign))) (p "Given elliptic curve " (tt "parameters") " and a cryptographically strong " (tt "random-integer") " generator for huge numbers with analoguous behaviour as the standard procedure " (tt "(random n)") ", a signature procedure is generated that computes a signature from the private key " (tt "d") " and the given " (tt "message") ".") (p "The message is a number and the signature is a pair of two numbers.") (p "For practical applications, you should convert some message digest into a number with the same bit length as the base point order of the elliptic curve and pass it as the " (tt "message") " argument.")) (def (sig (procedure "((ecc-verify parameters) P message signature)" (id ecc-verify))) (p "Given elliptic curve " (tt "parameters") ", a signature verification procedure is generated that checks a signature given the public key " (tt "P") " of the signer, the original " (tt "message") " and the " (tt "signature") ".") (p "The message is a number and the signature is a pair of two numbers.") (p "For practical applications, you should convert some message digest into a number with the same bit length as the base point order of the elliptic curve and pass it as the " (tt "message") " argument.")) (def (sig (procedure "((ecc-generate-secret parameters) d P)" (id ecc-generate-secret))) (p "Given elliptic curve " (tt "parameters") ", a shared secret generator is created that computes a shared secret given the secret key " (tt "d") " of the \"sender\" and the public key " (tt "P") " of the recipient.") (p "The shared secret is a point on the elliptic curve.") (p "For practical applications you should hash the returned point together with some strong random salt value to derive a key for symmetric encryption.")))) (section 3 "License" (pre " Copyright (c) 2010, Thomas Chust\n All rights reserved.\n \n Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following\n conditions are met:\n \n * Redistributions of source code must retain the above copyright notice, this list of conditions and the following\n     disclaimer.\n * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following\n     disclaimer in the documentation and/or other materials provided with the distribution.\n * Neither the name of the author nor the names of its contributors may be used to endorse or promote\n     products derived from this software without specific prior written permission.\n \n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS\n OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY\n AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR\n CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n POSSIBILITY OF SUCH DAMAGE.")) (section 3 "Version history" (dl (dt "1.0.1") (dd "Fixed some import specifications") (dt "1.0.0") (dd "Initial release")))))
(index ("interp1d:nearest" 0) ("interp1d:linear" 442) ("interp1d:piecewise-quadratic" 875) ("interp1d:from-sequence" 1348) ("interp1d:lbound" 2713) ("interp1d:ubound" 2916))
(def (sig (procedure "interp1d:nearest:: XDATA * YDATA * X  -> Y" (id interp1d:nearest))) (p "Interpolates function " (tt "y=f(x)") " at the point " (tt "x") " using the data point nearest to " (tt "x") ". Arguments " (tt "XDATA") " and " (tt "YDATA") " are lists of numeric values that correspond to sample points of the function being interpolated. Argument " (tt "X") " must be within the range of values contained in " (tt "XDATA") "."))
(def (sig (procedure "interp1d:linear:: XDATA * YDATA * X  -> Y" (id interp1d:linear))) (p "Interpolates function " (tt "y=f(x)") " at the point " (tt "x") " using the linear interpolation method. Arguments " (tt "XDATA") " and " (tt "YDATA") " are lists of numeric values that correspond to sample points of the function being interpolated. Argument " (tt "X") " must be within the range of values contained in " (tt "XDATA") "."))
(def (sig (procedure "interp1d:piecewise-quadratic:: XDATA * YDATA * X  -> Y" (id interp1d:piecewise-quadratic))) (p "Interpolates function " (tt "y=f(x)") " at the point " (tt "x") " using the piecewise quadratic interpolation method. Arguments " (tt "XDATA") " and " (tt "YDATA") " are lists of numeric values that corresponds to sample points of the function being interpolated. Argument " (tt "X") " must be within the range of values contained in " (tt "XDATA") "."))
(def (sig (procedure "interp1d:from-sequence:: METHOD * STEP * YDATA [* START * CAR * CDR * NULL? * DELTA-WINDOW-LEN * MAX-WINDOW-LEN] -> (LAMBDA X -> Y)" (id interp1d:from-sequence))) (p "Constructs a sliding window interpolation procedure, for a given sequence " (tt "YDATA") " that contains uniformly sampled values of a function " (tt "y = f(x)") ", where " (tt "X") " has an initial value of " (tt "START") " (default 0)  and is incremented by " (tt "STEP") " amount. The returned procedure performs interpolation using the given " (tt "METHOD") " procedure, while the window is shifted forwards by the appropriate amount if " (tt "X") " is outside the current window range. Backward shifting is not supported.") (p "Argument " (tt "METHOD") " is one of the interpolation procedures above.") (p "Optional argument " (tt "START") " specifies the initial (smallest) " (tt "X") " and defaults to 0.") (p "Optional arguments " (tt "CAR") ", " (tt "CDR") ", " (tt "NULL?") " are used to access " (tt "YDATA") " and default to the standard list procedures. If the input sequence is not a list (e.g. an SRFI-40 stream), these arguments can be used to specify the appropriate accessors and predicates.") (p "Optional arguments " (tt "DELTA-WINDOW-LEN") " and " (tt "MAX-WINDOW-LEN") " specify the window increment (default 4) and maximum window size (default 128)."))
(def (sig (procedure "interp1d:lbound:: XDATA * YDATA * X  -> Y" (id interp1d:lbound))) (p "Returns the value of the data point nearest to " (tt "X") " that does not exceed the value of " (tt "X") "."))
(def (sig (procedure "interp1d:ubound:: XDATA * YDATA * X  -> Y" (id interp1d:ubound))) (p "Returns the value of the data point nearest to " (tt "X") " that is larger than " (tt "X") "."))

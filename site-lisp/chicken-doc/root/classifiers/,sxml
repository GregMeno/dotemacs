((section 2 "Classifiers" (p "Some algorithms to develop " (link "http://en.wikipedia.org/wiki/Statistical_classification" "classification") " models of data. This library uses " (int-link "dataset-utils") "; another classification algorithm is provided in " (int-link "libsvm") ".") (section 3 "Exported Procedures" (p "The classifiers are constructed using a " (tt "(build-X training-data target-class)") " procedure.  Training data are a relation, as defined in " (int-link "dataset-utils") ", and " (tt "target-class") " is the name of the attribute to be used for the target classification.") (section 4 "Generic procedures" (def (sig (procedure "(classify-instance classifier instance)" (id classify-instance))) (p "Given a classifier and a data instance, returns a classification.")) (def (sig (procedure "(to-string classifier)" (id to-string))) (p "Given a classifier, returns a string representation of the classifier model."))) (section 4 "ZeroR" (p "A simple rule: always predicts the majority class of the training data.") (def (sig (procedure "(build-zero-r training-data target-class) " (id build-zero-r))) (p "Constructs an instance of a ZeroR classifier.  Training data are a relation, as defined in " (int-link "dataset-utils") ", and " (tt "target-class") " is the name of the attribute to be used for the target classification."))) (section 4 "OneR" (p "Finds the attribute which best predicts the training data.") (def (sig (procedure "(build-one-r training-data target-class)" (id build-one-r))) (p "Constructs an instance of a OneR classifier.  Training data are a relation, as defined in " (int-link "dataset-utils") ", and " (tt "target-class") " is the name of the attribute to be used for the target classification."))) (section 4 "ID3" (def (sig (procedure "(build-id3 training-data target-class)" (id build-id3))) (p "Constructs an instance of a decision-tree classifier using the ID3 algorithm.  Training data are a relation, as defined in " (int-link "dataset-utils") ", and " (tt "target-class") " is the name of the attribute to be used for the target classification.  All attributes must be nominal."))) (section 4 "Instance-based" (def (sig (procedure "(build-one-nn training-data target-class #!key metric)" (id build-one-nn))) (p "Constructs a simple instance-based classifier, which returns the class of nearest neighbour for any test instance. Training data are a relation, as defined in " (int-link "dataset-utils") ", and " (tt "target-class") " is the name of the attribute to be used for the target classification.   " (tt "metric") " is a function taking two instance definitions and returning a real number reflecting the distance between the instances; see " (int-link "dataset-utils") " for some standard metrics.  " (tt "metric") " defaults to " (tt "euclidean-distance") ".")))) (section 3 "Example" (pre "#;1> (use dataset-utils)\n#;2> (use classifiers)\n#;3> (use format)\n#;4> (define weather \n           (make-relation 'plays-tennis\n                 (list (make-nominal-attribute 'outlook 'sunny 'overcast 'rainy)\n                       (make-nominal-attribute 'temperature 'hot 'mild 'cool)\n                       (make-nominal-attribute 'humidity 'high 'normal)\n                       (make-nominal-attribute 'windy 'true 'false)\n                       (make-nominal-attribute 'play 'yes 'no))\n                 '((sunny hot high false no)\n                   (sunny hot high true no)\n                   (overcast hot high false yes)\n                   (rainy mild high false yes)\n                   (rainy cool normal false yes)\n                   (rainy cool normal true no)\n                   (overcast cool normal true yes)\n                   (sunny mild high false no)\n                   (sunny cool normal false yes)\n                   (rainy mild normal false yes)\n                   (sunny mild normal true yes)\n                   (overcast mild high true yes)\n                   (overcast hot normal false yes)\n                   (rainy mild high true no)))) \n#;5> (define one-r (build-one-r weather 'play))\n#;6> (format #t \"~a~&\" (to-string one-r))\nOneR: uses attribute outlook\n  : sunny => no\n  : rainy => yes\n  : overcast => yes\n\n#t\n#;7> (define id3 (build-id3 weather 'play))\n#;8> (format #t \"~a~&\" (to-string id3))\nID3\nNode: outlook\n value rainy\n  Node: windy\n   value false\n    Leaf: yes\n   value true\n    Leaf: no\n value overcast\n  Leaf: yes\n value sunny\n  Node: humidity\n   value normal\n    Leaf: yes\n   value high\n    Leaf: no\n#;9> (for-each (lambda (item) \n                    (format #t \"~a Prediction is: ~a~&\"\n                              item\n                              (classify-instance id3 item)))\n         (relation-data weather))\n(sunny hot high false no) Prediction is: no\n(sunny hot high true no) Prediction is: no\n(overcast hot high false yes) Prediction is: yes\n(rainy mild high false yes) Prediction is: yes\n(rainy cool normal false yes) Prediction is: yes\n(rainy cool normal true no) Prediction is: no\n(overcast cool normal true yes) Prediction is: yes\n(sunny mild high false no) Prediction is: no\n(sunny cool normal false yes) Prediction is: yes\n(rainy mild normal false yes) Prediction is: yes\n(sunny mild normal true yes) Prediction is: yes\n(overcast mild high true yes) Prediction is: yes\n(overcast hot normal false yes) Prediction is: yes\n(rainy mild high true no) Prediction is: no")) (section 3 "Author" (p (link "http://wiki.call-cc.org/users/peter-lane" "Peter Lane") ".")) (section 3 "License" (p "GPL version 3.0.")) (section 3 "Requirements" (p "Works with " (int-link "dataset-utils") ".")) (section 3 "Version History" (p "in trunk."))))
((tags "egg") (section 2 "defstruct" (toc) (section 3 "Description" (p "A more convenient form of " (tt "define-record"))) (section 3 "Author" (p "Dorai Sitaram, ported to CHICKEN by " (int-link "/users/felix winkelmann" "felix winkelmann") ", with improvements by " (int-link "/users/peter-bex" "Peter Bex"))) (section 3 "Requirements" (p "None")) (section 3 "Documentation" (def (sig (syntax "(defstruct NAME SLOT ...)" (id defstruct))) (p "Defines a record type with the name " (tt "NAME") ". " (tt "SLOT") " may be a symbol or a list of the form " (tt "(NAME INIT)") " where " (tt "INIT") " is the default value of the slot (the " (tt "INIT") " expression will only be evaluated when no value is given in the constructor procedure).  The " (tt "defstruct") " macro expands into predicate and accessor functions (just like the native " (tt "define-record") "):") (highlight scheme "(require-extension defstruct)\n\n(defstruct point x y)\n\n;; Creates code equivalent to the following:\n(begin\n  (define (point? x) ...)          ; is x a point?\n  (define (point-x p) ...)         ; return x slot of point p\n  (define (point-x-set! p n) ...)  ; change x slot of point p to n\n  ...)") (p "Additionally, a constructor procedure " (tt "make-STRUCTNAME") " is defined, which accepts initialization values for all slots specified as keyword arguments:") (highlight scheme "(make-point x: 99 y: 42)\n => ; a point with x = 99 and y = 42") (p "On Chicken 4 and higher, there are also two procedures " (tt "update-STRUCTNAME") " and " (tt "set-STRUCTNAME!") " defined for functionally and destructively updating selected values in an existing record:") (highlight scheme "(define p2 (update-point p1 x: 100))\np2\n => ; a point with x = 100 and y = 42\n\n(= p1-x 99)\n => #t\n\n(set-point! p1 x: 100)\n(= p1-x 100)\n => #t") (p "Additionally, there are two conversion procedures for converting to and from alists, " (tt "STRUCTNAME->alist") " and " (tt "alist->STRUCTNAME") ":") (highlight scheme "(define p3 (alist->point '((x . 1) (y . 2))))\np3\n => ; a point with x = 1 and y = 2\n\n(define p4 (make-point x: 123 y: 456))\n(point->alist p4)\n => ((x . 123) (y . 456))"))) (section 3 "Bugs and limitations" (ul (li "Just like with " (tt "define-record") " you cannot use field names ending with " (tt "-set!") " if you also have a similar field name not ending with " (tt "-set!") ".") (li "Just like with " (tt "define-record") " you should avoid defining record types with a name that is a prefix of another record type's name.") (li "You cannot use a field named " (tt ">alist") ".") (li "You should avoid defining record types named " (tt "make") " or " (tt "update") "."))) (section 3 "License" (pre " Copyright (c) 2005, Dorai Sitaram\n Copyright (c) 2005, Felix Winkelmann (Chicken port)\n Copyright (c) 2008-2010, Peter Bex (Hygienic Chicken port + extensions)\n All rights reserved.\n \n Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following\n conditions are met:\n \n   Redistributions of source code must retain the above copyright notice, this list of conditions and the following\n     disclaimer. \n   Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following\n     disclaimer in the documentation and/or other materials provided with the distribution. \n   Neither the name of the author nor the names of its contributors may be used to endorse or promote\n     products derived from this software without specific prior written permission. \n \n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS\n OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY\n AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR\n CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n POSSIBILITY OF SUCH DAMAGE."))))
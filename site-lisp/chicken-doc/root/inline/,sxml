((tags "egg") (section 2 "inline" (toc) (section 3 "Description" (p "Allows compiled C inside interpreter scripts.")) (section 3 "Author" (p (int-link "/users/felix winkelmann" "felix winkelmann"))) (section 3 "Requirements" (ul (li (int-link "bind")) (li (int-link "md5")))) (section 3 "Download" (p (link "http://www.call-with-current-continuation.org/eggs/inline.egg" "inline.egg"))) (section 3 "Documentation" (p "This extension library provides a simple macro for using C code in the Chicken interpreter (``csi'').  The program text is embedded into a thin Scheme wrapper and compiled on the fly into a dynamically loadable library. A local directory caches the compiled code and subsequent definitions of the same source text will load the already compiled library from the cache.") (p "Callbacks back into Scheme are not supported.") (def (sig (syntax "(inline STRING [OPTIONS])" (id inline))) (p "Expands into a call of " (tt "inline-compile") " and compiles the code given in " (tt "STRING") ".  If encountered in compiled code, then this form will directly expand into a " (tt "(bind* ...)") " form, effectively embedding the inline code in the compiled file (so no run-time compilation is needed).  The optional string argument " (tt "OPTIONS") " may contain additional compilation parameters (these are ignored, when " (tt "inline") " is used in compiled code).") (highlight scheme "(inline \"int foo(int n) { return(n * 2); }\") \n\n  ==> (inline-compile \"int foo(int n) { return(n * 2); }\") ; when interpreted\n  ==> (bind*                                             ; when compiled\n        \"int foo(int n) { return(n * 2); }\")")) (def (sig (procedure "(inline-compile STRING [OPTIONS])" (id inline-compile))) (p "Compiles the C source code in " (tt "STRING") " dynamically. If a compiled library with the same source text is currently loaded (and has been cached), then nothing is done. If it is not loaded, the " (i "inline cache") " is consulted, whether a compiled file for the same text is stored, and, if it is, it's loaded and the procedure is returned. If no such file exists, the compiler (``csc'') is invoked to create a compiled library (with any extra options passed in " (tt "OPTIONS") "), which is stored in the cache. The code will be compiled as if wrapped in " (tt "#>! ... <#") ". Note that you will have to shield " (tt "#include") " forms, if you don't want them to be processed by the FFI parser:") (highlight scheme "(inline #<<EOF\n#ifndef CHICKEN\n#include \"gd.h\"\n#include <stdio.h>\n#endif\n\nvoid genimages(int w, int h) {\n  gdImagePtr im;\n  FILE *pngout, *jpegout;\n  int black;\n  int white;\n\n  im = gdImageCreate(w, h);\n  black = gdImageColorAllocate(im, 0, 0, 0);\t\n  white = gdImageColorAllocate(im, 255, 255, 255);\t\n  gdImageLine(im, 0, 0, w - 1, h - 1, white);\t\n  pngout = fopen(\"test.png\", \"wb\");\n  jpegout = fopen(\"test.jpg\", \"wb\");\n  gdImagePng(im, pngout);\n  gdImageJpeg(im, jpegout, -1);\n  fclose(pngout);\n  fclose(jpegout);\n  gdImageDestroy(im);\n}\nEOF\n\"-L -lgd -L -lpng -L -lz -L -ljpeg -L -lfreetype\"\n)\n\n(genimages 64 64)")) (def (sig (parameter "inline-cache" (id inline-cache))) (p "Holds the name of the directory which is used as a cache for compiled code and defaults to " (tt "./.cache") "."))) (section 3 "Changelog" (ul (li "1.6 ported to CHICKEN 4 [felix]") (li "1.5 Fixed dependencies on new easyffi egg") (li "1.4 Fixed dependency on " (tt "utils") " unit [Thanks to Benedikt Rosenau]") (li "1.3 " (tt "inline-support") " wasn't installed properly [Thanks to Peter Wang]") (li "1.2 Adapted to new setup scheme") (li "1.1 Now uses easyffi stuff, which is much simpler and more powerful. Does the right thing when compiled.") (li "1.0 Initial release"))) (section 3 "License" (pre " Copyright (c) 2003-2007, Felix L. Winkelmann\n All rights reserved.\n \n Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following\n conditions are met:\n \n   Redistributions of source code must retain the above copyright notice, this list of conditions and the following\n     disclaimer. \n   Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following\n     disclaimer in the documentation and/or other materials provided with the distribution. \n   Neither the name of the author nor the names of its contributors may be used to endorse or promote\n     products derived from this software without specific prior written permission. \n \n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS\n OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY\n AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR\n CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n POSSIBILITY OF SUCH DAMAGE."))))
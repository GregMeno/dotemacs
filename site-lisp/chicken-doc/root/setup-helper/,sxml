((tags "egg") (section 2 "setup-helper" (toc)) (section 2 "Documentation" (p "Shortcut routines providing common install process patterns of Chicken extensions.") (section 3 "Extension Information" (p (tt "NAME") " is a " (tt "string") " or " (tt "symbol") ". The name of the extension.") (p (tt "VERSION") " is a " (tt "string") " or " (tt "number") ".") (p "(Note - " (b (tt "extension-name-and-version")) ", " (b (tt "extension-name")) " and " (b (tt "extension-version")) " are actually part of the " (b (tt "setup-api")) ".)") (section 4 "extension-name-and-version" (def (sig (parameter "(extension-name-and-version) => list" (id extension-name-and-version)) (parameter "(extension-name-and-version NAME+VERSION)" (id extension-name-and-version))) (p (tt "NAME+VERSION") " is " (tt "(list NAME VERSION)") "."))) (section 4 "extension-name" (def (sig (procedure "(extension-name) => string" (id extension-name))) (p "Returns the " (tt "extension-name") " component of " (tt "(extension-name-and-version)") "."))) (section 4 "extension-version" (def (sig (procedure "(extension-version [DEFAULT]) => string" (id extension-version))) (p "Returns the " (tt "extension-version") " component of " (tt "(extension-name-and-version)") ".") (p "Should the " (tt "(second (extension-name-and-version))") " be " (i "empty") " the " (tt "DEFAULT") " is returned."))) (section 4 "verify-extension-name" (def (sig (procedure "(verify-extension-name NAME)" (id verify-extension-name))) (p "Raises an error should " (b (tt "chicken-install")) " know the extension by a different name.") (p "Use when paranoid.")))) (section 3 "Filename Support" (p "Makes stereotypical " (tt "filenames") " & " (tt "pathnames") ".") (p (tt "FILE") " is a " (tt "string") " or " (tt "symbol") ".") (p (tt "EXTENSION") " is a " (tt "string") " or " (tt "symbol") ".") (p (tt "DIRECTORY") " is as " (tt "(make-pathname (pathname-directory DIRECTORY) (pathname-file DIRECTORY))") ".") (p (tt "FILENAME") " is as " (tt "(make-pathname #f FILE [EXTENSION])") ".") (p (tt "PATHNAME") " is as " (tt "(make-pathname DIRECTORY FILE [EXTENSION])") ".") (p (tt "INSTALL-REPOSITORY") " is the " (i "installation") " Chicken repository directory.") (p (tt "INSTALL-HOME") " is the " (i "installation") " Chicken home directory.") (section 4 "CHICKEN-SOURCE-EXTENSION") (section 4 "CHICKEN-IMPORT-EXTENSION") (section 4 "CHICKEN-INLINE-EXTENSION") (section 4 "HTML-EXTENSION") (section 4 "STATIC-ARCHIVE-EXTENSION") (section 4 "OBJECT-BINARY-EXTENSION") (section 4 "EXECUTABLE-EXTENSION" (p "Constants suitable for use as the " (tt "EXT") " argument to " (tt "make-pathname") ".")) (section 4 "DIRECTORY-SEPARATOR" (p "The platform specific directory separator " (tt "string") ". A constant.")) (section 4 "installation-chicken-home" (def (sig (procedure "(installation-chicken-home) => string" (id installation-chicken-home))) (p "Returns the " (tt "INSTALL-HOME") "."))) (section 4 "installation-repository-home" (def (sig (procedure "(installation-repository-path) => string" (id installation-repository-path))) (p "Returns the " (tt "INSTALL-REPOSITORY") "."))) (section 4 "directory-separator?" (def (sig (procedure "(directory-separator? X) => boolean" (id directory-separator?))) (p "Is " (tt "X") " a directory separator?") (p (tt "X") " is a " (tt "string") ", " (tt "character") ", or " (tt "symbol") "."))) (section 4 "filename" (def (sig (procedure "(filename FILE [EXTENSION]) => string" (id filename))) (p "Returns a filename for " (tt "FILE") " and " (tt "EXTENSION") "."))) (section 4 "make-directory-name" (def (sig (procedure "(make-directory-name DIRECTORY) => string" (id make-directory-name))) (p "Returns a dirname, ensuring no trailing directory separator.") (p (tt "DIRECTORY") " is a " (tt "string") ", " (tt "symbol") ", or a " (tt "list") "."))) (section 4 "document-filename" (def (sig (procedure "(document-filename FILE) => string" (id document-filename))) (p "Returns a \"html\" filename for " (tt "FILE") "."))) (section 4 "source-filename" (def (sig (procedure "(source-filename FILE) => string" (id source-filename))) (p "Returns \"scm\" filename for " (tt "FILE") "."))) (section 4 "shared-library-filename" (def (sig (procedure "(shared-library-filename FILE) => string" (id shared-library-filename))) (p "Returns a platform-specific dynamic-link-library filename for " (tt "FILE") "."))) (section 4 "shared-filename" (def (sig (procedure "(shared-filename FILE) => string" (id shared-filename))) (p "Returns a platform-specific dynamic-load-file filename for " (tt "FILE") ".") (p (i "Note") " this superfluous now as all shared binaries have the " (tt "\"so\"") " extension."))) (section 4 "static-library-filename" (def (sig (procedure "(static-library-filename FILE) => string" (id static-library-filename))) (p "Returns a platform-specific static-link-library filename for " (tt "FILE") "."))) (section 4 "static-filename" (def (sig (procedure "(static-filename FILE) => string" (id static-filename))) (p "Returns a platform-specific object-file filename for " (tt "FILE") "."))) (section 4 "import-filename" (def (sig (procedure "(import-filename FILE) => string" (id import-filename))) (p "Returns an \"import\" filename for " (tt "FILE") "."))) (section 4 "source-import-filename" (def (sig (procedure "(source-import-filename FILE) => string" (id source-import-filename))) (p "Returns an \"import.scm\" filename for " (tt "FILE") "."))) (section 4 "shared-import-filename" (def (sig (procedure "(shared-import-filename FILE) => string" (id shared-import-filename))) (p "Returns a platform-specific dynamic-load-file \"import\" filename for " (tt "FILE") "."))) (section 4 "inline-filename" (def (sig (procedure "(inline-filename FILE) => string" (id inline-filename))) (p "Returns an \"inline\" filename for " (tt "FILE") "."))) (section 4 "program-filename" (def (sig (procedure "(program-filename FILE) => string" (id program-filename))) (p "Returns a platform-specific executable filename for " (tt "FILE") "."))) (section 4 "make-home-pathname" (def (sig (procedure "(make-home-pathname FILE) => string" (id make-home-pathname))) (p "Returns a pathname for " (tt "FILE") " in the " (tt "INSTALL-HOME") "."))) (section 4 "make-repository-pathname" (def (sig (procedure "(make-repository-pathname FILE) => string" (id make-repository-pathname))) (p "Returns a pathname for " (tt "FILE") " in the " (tt "INSTALL-REPOSITORY") "."))) (section 4 "srfi-29-bundles-home" (def (sig (procedure "(srfi-29-bundles-home) => string" (id srfi-29-bundles-home))) (p "Returns the root dirname for SRFI 29 bundles.") (p "Please see the " (int-link "srfi-29") " extension documentation."))) (section 4 "make-srfi-29-bundle-directory-name" (def (sig (procedure "(make-srfi-29-bundle-directory-name SPEC) => string" (id make-srfi-29-bundle-directory-name))) (p "Returns the SRFI 29 bundle installation dirname for the supplied " (tt "SPEC") ".") (p (tt "SPEC") " is a " (tt "list BUNDLE-SPECIFICATION-COMPONENT...") ".") (p "Please see the " (int-link "srfi-29") " extension documentation.")))) (section 3 "File Copy Support" (p "Copy local file (local to the building egg directory) to some directory. These use the " (tt "copy-file") " setup-api routine.") (section 4 "copy-file-relative" (def (sig (procedure "(copy-file-relative FILENAME DIRECTORY)" (id copy-file-relative))) (p "Copies the file " (tt "FILENAME") " to the " (tt "DIRECTORY") ". The " (tt "DIRECTORY") " be relative."))) (section 4 "copy-file-absolute" (def (sig (procedure "(copy-file-absolute FILENAME DIRECTORY)" (id copy-file-absolute))) (p "Copies the file " (tt "FILENAME") " to the " (tt "DIRECTORY") ". Should the " (tt "DIRECTORY") " be relative it will be coerced to absolute (by " (tt "copy-file") ")."))) (section 4 "copy-to-repository" (def (sig (procedure "(copy-to-repository FILENAME)" (id copy-to-repository))) (p "Copies the local file " (tt "FILENAME") " to the " (i (tt "(chicken-repository)")) "."))) (section 4 "copy-to-home" (def (sig (procedure "(copy-to-home FILENAME)" (id copy-to-home))) (p "Copies the local file " (tt "FILENAME") " to the directory " (i (tt "(installation-prefix) share chicken")) ". This is usually the same as " (tt "(chicken-home)") ".")))) (section 3 "Compile Support" (p "Compiles the source-file " (tt "NAME") ". " (tt "NAME") " is the basename of the source-file.") (p (tt "COMPILE-OPTIONS") " is a " (tt "(list-of COMPILE-OPTION ...)") ". " (tt "COMPILE-OPTION") " is any object acceptable as a " (b (tt "compile")) " option. The " (tt "COMPILE-OPTIONS") " are always expanded in the " (tt "comple") " command in the last position.") (p (tt "INLINE?") " is a " (tt "boolean") " indicating whether a global inline is created. The inline file is named " (tt "(make-pathname #f NAME \"inline\")") ". Does not enable cross-module inlining.") (section 4 "compile-static" (def (sig (procedure "(compile-static NAME [#:options COMPILE-OPTIONS] [#:inline? INLINE?])" (id compile-static))) (p "Compiles to object file with unit-name " (tt "NAME") ".") (p "No linking is performed!"))) (section 4 "compile-shared" (def (sig (procedure "(compile-shared NAME [#:options COMPILE-OPTIONS] [#:inline? INLINE?])" (id compile-shared))) (p "Compiles to shared file."))) (section 4 "compile-shared-module" (def (sig (procedure "(compile-shared-module NAME [#:options COMPILE-OPTIONS] [#:inline? INLINE?])" (id compile-shared-module))) (p "Compiles source and import to shared files.")))) (section 3 "Install Support" (p "Installs the compiled-extension for " (tt "NAME") ".") (p (tt "INSTALL-OPTION") " is any object acceptable as an " (tt "install-extension") " command options list option.") (p (tt "INSTALL-OPTIONS") " is " (tt "(list-of INSTALL-OPTION ...)") ".") (p "The " (tt "INSTALL-OPTIONS") " is always expanded in the " (tt "install-extension") " command options list in the last position.") (p (tt "FILENAMES") " is a " (tt "(list-of FILENAME ...)") ". These name local files (local to the building egg directory) that are to expanded in the " (tt "install-extension") " command files list.") (section 4 "install-in-repository" (def (sig (procedure "(install-in-repository FILENAME)" (id install-in-repository))) (p "Like " (tt "copy-to-repository") " but observes the " (i "no-install") " status."))) (section 4 "install-in-home" (def (sig (procedure "(install-in-home FILENAME)" (id install-in-home))) (p "Like " (tt "copy-to-home") " but observes the " (i "no-install") " status."))) (section 4 "install-srfi-29-bundle" (def (sig (procedure "(install-srfi-29-bundle NAME [BUNDLE-SPECIFICATION-COMPONENT...])" (id install-srfi-29-bundle))) (p "Copies the local SRFI 29 bundle to the " (tt "(srfi-29-bundle-directory)") ".") (p "The bundle is a single file with " (tt "NAME") " that may be at the bottom of a " (tt "BUNDLE-SPECIFICATION-COMPONENT") " hierarchy."))) (section 4 "install-static-extension" (def (sig (procedure "(install-static-extension NAME VERSION [#:options INSTALL-OPTIONS] [#:files FILENAMES])" (id install-static-extension))) (p "Installs a compiled-static-extension."))) (section 4 "install-shared-extension" (def (sig (procedure "(install-shared-extension NAME VERSION [#:options INSTALL-OPTIONS] [#:files FILENAMES])" (id install-shared-extension))) (p "Installs a compiled-shared-extension."))) (section 4 "install-shared-extension-module" (def (sig (procedure "(install-shared-extension-module NAME VERSION [#:options INSTALL-OPTIONS] [#:files FILENAMES])" (id install-shared-extension-module))) (p "Installs a compiled-shared-extension-module."))) (section 4 "install-shared+static-extension-module" (def (sig (procedure "(install-shared+static-extension-module NAME VERSION [#:options INSTALL-OPTIONS] [#:files FILENAMES])" (id install-shared+static-extension-module))) (p "Installs a compiled-shared-extension-module and a compiled-static-extension."))) (section 4 "install-extension-tag" (def (sig (procedure "(install-extension-tag NAME VERSION)" (id install-extension-tag))) (p "Installs an empty extension with " (tt "NAME") " and " (tt "VERSION") ".")))) (section 3 "Setup Support" (p "Compiles & installs the extension for " (tt "NAME") ".") (section 4 "setup-static-extension" (def (sig (procedure "(setup-static-extension NAME VERSION [#:compile-options COMPILE-OPTIONS] [#:inline? INLINE?] [#:install-options INSTALL-OPTIONS] [#:files FILENAMES])" (id setup-static-extension))) (p "Compiles & installs a static-extension."))) (section 4 "setup-shared-extension" (def (sig (procedure "(setup-shared-extension NAME VERSION [#:compile-options COMPILE-OPTIONS] [#:inline? INLINE?] [#:install-options INSTALL-OPTIONS] [#:files FILENAMES])" (id setup-shared-extension))) (p "Compiles & installs a shared-extension."))) (section 4 "setup-shared-extension-module" (def (sig (procedure "(setup-shared-extension-module NAME VERSION [#:compile-options COMPILE-OPTIONS] [#:inline? INLINE?] [#:install-options INSTALL-OPTIONS] [#:files FILENAMES])" (id setup-shared-extension-module))) (p "Compiles & installs a shared-extension-module."))) (section 4 "setup-shared+static-extension-module" (def (sig (procedure "(setup-shared+static-extension-module NAME VERSION [#:shared-compile-options COMPILE-OPTIONS] [#:shared-inline? INLINE?] [#:static-compile-options COMPILE-OPTIONS] [#:static-inline? INLINE?] [#:install-options INSTALL-OPTIONS] [#:files FILENAMES])" (id setup-shared+static-extension-module))) (p "Compiles & installs a shared-extension-module and a static-extension."))))) (section 2 "Parameters" (section 3 "Compile Support" (p "These are " (b "always") " expanded in the " (tt "comple") " command in the first position.") (section 4 "default-static-compile-options" (def (sig (parameter "(default-static-compile-options) => list" (id default-static-compile-options)) (parameter "(default-static-compile-options COMPILE-OPTIONS)" (id default-static-compile-options))) (p "Built-in is " (tt "(-c -optimize-leaf-routines -inline)") "."))) (section 4 "default-shared-compile-options" (def (sig (parameter "(default-shared-compile-options) => list" (id default-shared-compile-options)) (parameter "(default-shared-compile-options COMPILE-OPTIONS)" (id default-shared-compile-options))) (p "Built-in is " (tt "(-shared -optimize-leaf-routines -inline)") "."))) (section 4 "default-import-compile-options" (def (sig (parameter "(default-import-compile-options) => list" (id default-import-compile-options)) (parameter "(default-import-compile-options COMPILE-OPTIONS)" (id default-import-compile-options))) (p "Built-in is " (tt "(-shared -optimize-leaf-routines -inline -local -no-trace -no-lambda-info)") ".")))) (section 3 "Install Support" (p "These are " (b "always") " expanded in the " (tt "install-extension") " command options list in the first position.") (section 4 "default-static-install-options" (def (sig (parameter "(default-static-install-options) => list" (id default-static-install-options)) (parameter "(default-static-install-options INSTALL-OPTIONS)" (id default-static-install-options))))) (section 4 "default-shared-install-options" (def (sig (parameter "(default-static-install-options) => list" (id default-static-install-options)) (parameter "(default-static-install-options INSTALL-OPTIONS)" (id default-static-install-options))))) (section 4 "default-shared-module-install-options" (def (sig (parameter "(default-shared-module-install-options) => list" (id default-shared-module-install-options)) (parameter "(default-shared-module-install-options INSTALL-OPTIONS)" (id default-shared-module-install-options))))) (section 4 "default-shared+static-module-install-options" (def (sig (parameter "(default-shared+static-module-install-options) => list" (id default-shared+static-module-install-options)) (parameter "(default-shared+static-module-install-options INSTALL-OPTIONS)" (id default-shared+static-module-install-options))))))) (section 2 "Usage" (highlight scheme "(include \"setup-helper\")")) (section 2 "Examples" (highlight scheme ";;;; example.setup -*- Hen -*-\n\n(include \"setup-helper\")\n\n; Paranoid\n(verify-extension-name \"example\")\n\n(setup-shared-extension-module 'example (extension-version \"1.0.0\")\n  compile-options: '(-extend easyffi)\n  install-options: '((syntax)))")) (section 2 "Bugs and Limitations" (ul (li "Static extension support is untested.") (li "Global inline support is untested.") (li "This extension is not compiled."))) (section 2 "Author" (p (int-link "/users/kon-lovett" "Kon Lovett"))) (section 2 "Version history" (dl (dt "1.3.0") (dd "Deprecated " (tt "copy-file-to-directory") ". Documented more of the exposed API.") (dt "1.2.0") (dd "Addd " (tt "install-in-home") " & " (tt "install-in-repository") ". " (tt "install-srfi-29-bundle") " observes " (i "no-install") " status.") (dt "1.1.4") (dd "Fix for 'copy-to-home' when '(installation-prefix)' is #f. [Ivan Raikov]") (dt "1.1.3") (dd "Fix for 'copy-to-home' when '(chicken-home)' is not proper location of \".../share/chicken\". [Ivan Raikov]") (dt "1.1.2") (dd "Need for explicit use of \"setup-api\". [Ivan Raikov]") (dt "1.1.1") (dd "Fix for SRFI 29 bundle directory support.") (dt "1.1.0") (dd "Added 'install-extension-tag'.") (dt "1.0.0") (dd "Initial release."))) (section 2 "License" (p "Copyright (C) 2009-2010 Kon Lovett.  All rights reserved.") (p "Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the Software), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:") (p "The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.") (p "THE SOFTWARE IS PROVIDED ASIS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.")))
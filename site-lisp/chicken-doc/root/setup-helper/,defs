(index ("extension-name-and-version" 0) ("extension-name-and-version" 0) ("extension-name" 245) ("extension-version" 416) ("verify-extension-name" 727) ("installation-chicken-home" 934) ("installation-repository-path" 1072) ("directory-separator?" 1222) ("filename" 1439) ("make-directory-name" 1588) ("document-filename" 1837) ("source-filename" 1976) ("shared-library-filename" 2108) ("shared-filename" 2289) ("static-library-filename" 2551) ("static-filename" 2731) ("import-filename" 2887) ("source-import-filename" 3025) ("shared-import-filename" 3181) ("inline-filename" 3368) ("program-filename" 3506) ("make-home-pathname" 3663) ("make-repository-pathname" 3826) ("srfi-29-bundles-home" 4007) ("make-srfi-29-bundle-directory-name" 4215) ("copy-file-relative" 4567) ("copy-file-absolute" 4766) ("copy-to-repository" 5029) ("copy-to-home" 5201) ("compile-static" 5441) ("compile-shared" 5650) ("compile-shared-module" 5797) ("install-in-repository" 5977) ("install-in-home" 6150) ("install-srfi-29-bundle" 6305) ("install-static-extension" 6648) ("install-shared-extension" 6836) ("install-shared-extension-module" 7024) ("install-shared+static-extension-module" 7233) ("install-extension-tag" 7488) ("setup-static-extension" 7657) ("setup-shared-extension" 7907) ("setup-shared-extension-module" 8157) ("setup-shared+static-extension-module" 8428) ("default-static-compile-options" 8820) ("default-static-compile-options" 8820) ("default-shared-compile-options" 9089) ("default-shared-compile-options" 9089) ("default-import-compile-options" 9363) ("default-import-compile-options" 9363) ("default-static-install-options" 9670) ("default-static-install-options" 9670) ("default-static-install-options" 9872) ("default-static-install-options" 9872) ("default-shared-module-install-options" 10074) ("default-shared-module-install-options" 10074) ("default-shared+static-module-install-options" 10304) ("default-shared+static-module-install-options" 10304))
(def (sig (parameter "(extension-name-and-version) => list" (id extension-name-and-version)) (parameter "(extension-name-and-version NAME+VERSION)" (id extension-name-and-version))) (p (tt "NAME+VERSION") " is " (tt "(list NAME VERSION)") "."))
(def (sig (procedure "(extension-name) => string" (id extension-name))) (p "Returns the " (tt "extension-name") " component of " (tt "(extension-name-and-version)") "."))
(def (sig (procedure "(extension-version [DEFAULT]) => string" (id extension-version))) (p "Returns the " (tt "extension-version") " component of " (tt "(extension-name-and-version)") ".") (p "Should the " (tt "(second (extension-name-and-version))") " be " (i "empty") " the " (tt "DEFAULT") " is returned."))
(def (sig (procedure "(verify-extension-name NAME)" (id verify-extension-name))) (p "Raises an error should " (b (tt "chicken-install")) " know the extension by a different name.") (p "Use when paranoid."))
(def (sig (procedure "(installation-chicken-home) => string" (id installation-chicken-home))) (p "Returns the " (tt "INSTALL-HOME") "."))
(def (sig (procedure "(installation-repository-path) => string" (id installation-repository-path))) (p "Returns the " (tt "INSTALL-REPOSITORY") "."))
(def (sig (procedure "(directory-separator? X) => boolean" (id directory-separator?))) (p "Is " (tt "X") " a directory separator?") (p (tt "X") " is a " (tt "string") ", " (tt "character") ", or " (tt "symbol") "."))
(def (sig (procedure "(filename FILE [EXTENSION]) => string" (id filename))) (p "Returns a filename for " (tt "FILE") " and " (tt "EXTENSION") "."))
(def (sig (procedure "(make-directory-name DIRECTORY) => string" (id make-directory-name))) (p "Returns a dirname, ensuring no trailing directory separator.") (p (tt "DIRECTORY") " is a " (tt "string") ", " (tt "symbol") ", or a " (tt "list") "."))
(def (sig (procedure "(document-filename FILE) => string" (id document-filename))) (p "Returns a \"html\" filename for " (tt "FILE") "."))
(def (sig (procedure "(source-filename FILE) => string" (id source-filename))) (p "Returns \"scm\" filename for " (tt "FILE") "."))
(def (sig (procedure "(shared-library-filename FILE) => string" (id shared-library-filename))) (p "Returns a platform-specific dynamic-link-library filename for " (tt "FILE") "."))
(def (sig (procedure "(shared-filename FILE) => string" (id shared-filename))) (p "Returns a platform-specific dynamic-load-file filename for " (tt "FILE") ".") (p (i "Note") " this superfluous now as all shared binaries have the " (tt "\"so\"") " extension."))
(def (sig (procedure "(static-library-filename FILE) => string" (id static-library-filename))) (p "Returns a platform-specific static-link-library filename for " (tt "FILE") "."))
(def (sig (procedure "(static-filename FILE) => string" (id static-filename))) (p "Returns a platform-specific object-file filename for " (tt "FILE") "."))
(def (sig (procedure "(import-filename FILE) => string" (id import-filename))) (p "Returns an \"import\" filename for " (tt "FILE") "."))
(def (sig (procedure "(source-import-filename FILE) => string" (id source-import-filename))) (p "Returns an \"import.scm\" filename for " (tt "FILE") "."))
(def (sig (procedure "(shared-import-filename FILE) => string" (id shared-import-filename))) (p "Returns a platform-specific dynamic-load-file \"import\" filename for " (tt "FILE") "."))
(def (sig (procedure "(inline-filename FILE) => string" (id inline-filename))) (p "Returns an \"inline\" filename for " (tt "FILE") "."))
(def (sig (procedure "(program-filename FILE) => string" (id program-filename))) (p "Returns a platform-specific executable filename for " (tt "FILE") "."))
(def (sig (procedure "(make-home-pathname FILE) => string" (id make-home-pathname))) (p "Returns a pathname for " (tt "FILE") " in the " (tt "INSTALL-HOME") "."))
(def (sig (procedure "(make-repository-pathname FILE) => string" (id make-repository-pathname))) (p "Returns a pathname for " (tt "FILE") " in the " (tt "INSTALL-REPOSITORY") "."))
(def (sig (procedure "(srfi-29-bundles-home) => string" (id srfi-29-bundles-home))) (p "Returns the root dirname for SRFI 29 bundles.") (p "Please see the " (int-link "srfi-29") " extension documentation."))
(def (sig (procedure "(make-srfi-29-bundle-directory-name SPEC) => string" (id make-srfi-29-bundle-directory-name))) (p "Returns the SRFI 29 bundle installation dirname for the supplied " (tt "SPEC") ".") (p (tt "SPEC") " is a " (tt "list BUNDLE-SPECIFICATION-COMPONENT...") ".") (p "Please see the " (int-link "srfi-29") " extension documentation."))
(def (sig (procedure "(copy-file-relative FILENAME DIRECTORY)" (id copy-file-relative))) (p "Copies the file " (tt "FILENAME") " to the " (tt "DIRECTORY") ". The " (tt "DIRECTORY") " be relative."))
(def (sig (procedure "(copy-file-absolute FILENAME DIRECTORY)" (id copy-file-absolute))) (p "Copies the file " (tt "FILENAME") " to the " (tt "DIRECTORY") ". Should the " (tt "DIRECTORY") " be relative it will be coerced to absolute (by " (tt "copy-file") ")."))
(def (sig (procedure "(copy-to-repository FILENAME)" (id copy-to-repository))) (p "Copies the local file " (tt "FILENAME") " to the " (i (tt "(chicken-repository)")) "."))
(def (sig (procedure "(copy-to-home FILENAME)" (id copy-to-home))) (p "Copies the local file " (tt "FILENAME") " to the directory " (i (tt "(installation-prefix) share chicken")) ". This is usually the same as " (tt "(chicken-home)") "."))
(def (sig (procedure "(compile-static NAME [#:options COMPILE-OPTIONS] [#:inline? INLINE?])" (id compile-static))) (p "Compiles to object file with unit-name " (tt "NAME") ".") (p "No linking is performed!"))
(def (sig (procedure "(compile-shared NAME [#:options COMPILE-OPTIONS] [#:inline? INLINE?])" (id compile-shared))) (p "Compiles to shared file."))
(def (sig (procedure "(compile-shared-module NAME [#:options COMPILE-OPTIONS] [#:inline? INLINE?])" (id compile-shared-module))) (p "Compiles source and import to shared files."))
(def (sig (procedure "(install-in-repository FILENAME)" (id install-in-repository))) (p "Like " (tt "copy-to-repository") " but observes the " (i "no-install") " status."))
(def (sig (procedure "(install-in-home FILENAME)" (id install-in-home))) (p "Like " (tt "copy-to-home") " but observes the " (i "no-install") " status."))
(def (sig (procedure "(install-srfi-29-bundle NAME [BUNDLE-SPECIFICATION-COMPONENT...])" (id install-srfi-29-bundle))) (p "Copies the local SRFI 29 bundle to the " (tt "(srfi-29-bundle-directory)") ".") (p "The bundle is a single file with " (tt "NAME") " that may be at the bottom of a " (tt "BUNDLE-SPECIFICATION-COMPONENT") " hierarchy."))
(def (sig (procedure "(install-static-extension NAME VERSION [#:options INSTALL-OPTIONS] [#:files FILENAMES])" (id install-static-extension))) (p "Installs a compiled-static-extension."))
(def (sig (procedure "(install-shared-extension NAME VERSION [#:options INSTALL-OPTIONS] [#:files FILENAMES])" (id install-shared-extension))) (p "Installs a compiled-shared-extension."))
(def (sig (procedure "(install-shared-extension-module NAME VERSION [#:options INSTALL-OPTIONS] [#:files FILENAMES])" (id install-shared-extension-module))) (p "Installs a compiled-shared-extension-module."))
(def (sig (procedure "(install-shared+static-extension-module NAME VERSION [#:options INSTALL-OPTIONS] [#:files FILENAMES])" (id install-shared+static-extension-module))) (p "Installs a compiled-shared-extension-module and a compiled-static-extension."))
(def (sig (procedure "(install-extension-tag NAME VERSION)" (id install-extension-tag))) (p "Installs an empty extension with " (tt "NAME") " and " (tt "VERSION") "."))
(def (sig (procedure "(setup-static-extension NAME VERSION [#:compile-options COMPILE-OPTIONS] [#:inline? INLINE?] [#:install-options INSTALL-OPTIONS] [#:files FILENAMES])" (id setup-static-extension))) (p "Compiles & installs a static-extension."))
(def (sig (procedure "(setup-shared-extension NAME VERSION [#:compile-options COMPILE-OPTIONS] [#:inline? INLINE?] [#:install-options INSTALL-OPTIONS] [#:files FILENAMES])" (id setup-shared-extension))) (p "Compiles & installs a shared-extension."))
(def (sig (procedure "(setup-shared-extension-module NAME VERSION [#:compile-options COMPILE-OPTIONS] [#:inline? INLINE?] [#:install-options INSTALL-OPTIONS] [#:files FILENAMES])" (id setup-shared-extension-module))) (p "Compiles & installs a shared-extension-module."))
(def (sig (procedure "(setup-shared+static-extension-module NAME VERSION [#:shared-compile-options COMPILE-OPTIONS] [#:shared-inline? INLINE?] [#:static-compile-options COMPILE-OPTIONS] [#:static-inline? INLINE?] [#:install-options INSTALL-OPTIONS] [#:files FILENAMES])" (id setup-shared+static-extension-module))) (p "Compiles & installs a shared-extension-module and a static-extension."))
(def (sig (parameter "(default-static-compile-options) => list" (id default-static-compile-options)) (parameter "(default-static-compile-options COMPILE-OPTIONS)" (id default-static-compile-options))) (p "Built-in is " (tt "(-c -optimize-leaf-routines -inline)") "."))
(def (sig (parameter "(default-shared-compile-options) => list" (id default-shared-compile-options)) (parameter "(default-shared-compile-options COMPILE-OPTIONS)" (id default-shared-compile-options))) (p "Built-in is " (tt "(-shared -optimize-leaf-routines -inline)") "."))
(def (sig (parameter "(default-import-compile-options) => list" (id default-import-compile-options)) (parameter "(default-import-compile-options COMPILE-OPTIONS)" (id default-import-compile-options))) (p "Built-in is " (tt "(-shared -optimize-leaf-routines -inline -local -no-trace -no-lambda-info)") "."))
(def (sig (parameter "(default-static-install-options) => list" (id default-static-install-options)) (parameter "(default-static-install-options INSTALL-OPTIONS)" (id default-static-install-options))))
(def (sig (parameter "(default-static-install-options) => list" (id default-static-install-options)) (parameter "(default-static-install-options INSTALL-OPTIONS)" (id default-static-install-options))))
(def (sig (parameter "(default-shared-module-install-options) => list" (id default-shared-module-install-options)) (parameter "(default-shared-module-install-options INSTALL-OPTIONS)" (id default-shared-module-install-options))))
(def (sig (parameter "(default-shared+static-module-install-options) => list" (id default-shared+static-module-install-options)) (parameter "(default-shared+static-module-install-options INSTALL-OPTIONS)" (id default-shared+static-module-install-options))))

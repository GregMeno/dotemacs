((tags "egg") (toc) (section 2 "couchdb" (section 3 "Introduction" (p (link "http://couchdb.apache.org/" "Apache CouchDB") " is a document-oriented database that can be queried and indexed in a MapReduce fashion using JavaScript. CouchDB also offers incremental replication with bi-directional conflict detection and resolution.") (p "The couchdb egg provides a scheme interface to couchdb's RESTful JSON API.") (p "If you are looking for a method of writing couchdb views, i.e server side code in scheme see the " (int-link "couchdb-view-server") " egg.")) (section 3 "Requirements" (p (int-link "http-client") " " (int-link "intarweb") " " (int-link "json") " " (int-link "uri-common") " " (int-link "defstruct"))) (section 3 "Documentation" (p "As said above a CouchDB server will use the " (link "http://json.org" "JSON") " format for encoding responses. The " (int-link "json") " egg manages the marshalling and unmarshalling. See there for the correct type conversions. As a convenience function " (i "json-ref") " is provided by this egg.") (p "Querys to the database are encoded in URIs. Depending on the setup of the CouchDB server username and password may have to be encoded in the URI. This applys to database creation / deletion mostly.") (section 4 "Error handling" (p "All procedures return " (i "#f") " on error. The last error is provided with the utility procedure " (i "last-error") ".")) (section 4 "CouchDB connection procedures" (p "For identifying connections a connection record has to be created first.") (section 5 "make-connection" (def (sig (procedure "(make-connection DATABASE-STRING URI-STRING)" (id make-connection))) (p "Creates a connection record for the desired " (i "DATABASE-STRING") " on the CouchDB located at the specified URI string."))) (section 5 "Connection accessors / setters" (def (sig (procedure "(connection-uri connection)" (id connection-uri)) (procedure "(connection-database connection)" (id connection-database))) (p "Accessors for the CouchDB egg connection record.")) (def (sig (procedure "(update-connection connection #!keyword database connection)" (id #f))) (p "Update function for the connection record."))) (section 5 "get-server-info" (def (sig (procedure "(get-server-info connection)" (id get-server-info))) (p "Returns the couchdb version information as the json egg parses the response.") (highlight scheme "CSI> (get-server-info (make-connection \"\" \"http://localhost:5984\"))\n#((\"couchdb\" . \"Welcome\") (\"version\" . \"0.11.0\"))")))) (section 4 "Database handling" (def (sig (procedure "(create-database connection)" (id create-database))) (p "Creates a database as specified in the connection record " (i "connection") ".  Use " (i "(make-connection database-string couchdb-uri-string)") " to create a connection object.") (p "Returns #t or #f. Verbose error message can be retrieved with ''last-error'.")) (def (sig (procedure "(delete-database connection)" (id delete-database))) (p "Deletes the database as specified in the connection record " (i "connection") ".  Use " (i "(make-connection database-string couchdb-uri-string)") " to create a connection object.") (p "Returns #t or #f. Verbose error message can be retrieved with ''last-error'.")) (def (sig (procedure "(get-database-info connection)" (id get-database-info))) (p "Returns the database information for a given connection record.  Use " (i "(make-connection database-string couchdb-uri-string)") " to create a connection record."))) (section 4 "Document handling" (p "The central entity in a CouchDB is a so called document. A CouchDB document is an object that consists of named fields. Field values may be strings, numbers, dates, or even ordered lists and associative maps, all encoded in JSON.") (p "However there are at least two mandatory fields in each document:") (dl (dt (i "id")) (dd "unique id within the database") (dt (i "rev")) (dd "revision of that document")) (section 5 "Document datatype" (def (sig (procedure "(make-document id revision #!optional (body '#()))" (id make-document))) (p "The couchdb uses a record to represent the contents of a document. The mandatory elements have distinct slots whereas the rest of the fiels is accessible in a vector called " (i "body") ".")) (def (sig (procedure "(document? doc)" (id document?))) (p "Type checking predicate for a document record.")) (def (sig (procedure "(document-id doc)" (id document-id)) (procedure "(document-rev doc)" (id document-rev)) (procedure "(document-body doc)" (id document-body)) (procedure "(update-document doc #!keyword id rev body)" (id #f))) (p "Accessors for the " (i "id") " " (i "rev") " and " (i "body") " slots of a document record.")) (def (sig (procedure "(document-attribute? document name)" (id document-attribute?))) (p "Predicate indicating wether " (i "document") " does contain a attribute " (i "name") ".")) (def (sig (procedure "(document-attribute document name)" (id document-attribute))) (p "Returns the value for " (i "name") " if it is contained in " (i "document") "."))) (section 5 "Document retrieval / storage" (def (sig (procedure "(get-document connection id)" (id get-document))) (p "Requests the document with id " (i "id") " and returns that or #f.")) (def (sig (procedure "(save-document connection document)" (id save-document))) (p "Stores the document in the database and returns it with updated id and revision attributes. If the document does not exist in the database it is created.")) (def (sig (procedure "(delete-document connection document)" (id delete-document))) (p "Deletes the document form the database.")) (def (sig (procedure "(get-all-documents connection #!optional (query '()))" (id get-all-documents))) (p "Returns all documents in the database. The output can be quite large! You can pass any valid query URI part for the optional " (i "query") " parameter.")))) (section 4 "View Handling" (def (sig (procedure "(get-view connection view-string #!optional (query '()))" (id get-view))) (p "Returns the results of the requested " (i "view") ". View can be either a string depicting an explicit path or a list of strings which in the latter case is treated as " (i "(list design-document view-name)") ".  The query parameter is an alist containing " (i "(parameter-name . value)") " pairs.") (p "<Procedure>(send-temp-view-request connection view method #!key query)</procedure>"))) (section 4 "Utility functions" (def (sig (procedure "(json-ref name object)" (id json-ref))) (p "Retrieves a field " (i "name") " from a JSON object " (i "object") ". This is a convenience function to ease the access of the vector / hash-table mix the json egg generates.")) (def (sig (parameter "(last-error #f)" (id last-error))) (p "Will be set on errors. Returns a descriptive error string.")))) (section 3 "Author" (p (int-link "/users/Moritz-Heidkamp" "Moritz Heidkamp"))) (section 3 "License" (pre "Apache CouchDB client library\n\nCopyright (C) 2009 Moritz Heidkamp\n\nThis program is free software; you can redistribute it and/or\nmodify it under the terms of the GNU Lesser General Public License\nas published by the Free Software Foundation; either version 3 of\nthe License, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\nLesser General Public License for more details.\n\nYou can find a copy of the GNU Lesser General Public License at\nhttp://www.gnu.org/licenses/")) (section 3 "Version History" (dl (dt "0.1") (dd "initial release")))))
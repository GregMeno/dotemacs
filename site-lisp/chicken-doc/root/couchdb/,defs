(index ("make-connection" 0) ("connection-uri" 220) ("connection-database" 220) ("get-server-info" 421) ("create-database" 732) ("delete-database" 1075) ("get-database-info" 1420) ("make-document" 1669) ("document?" 1960) ("document-id" 2070) ("document-rev" 2070) ("document-body" 2070) ("document-attribute?" 2399) ("document-attribute" 2580) ("get-document" 2750) ("save-document" 2896) ("delete-document" 3137) ("get-all-documents" 3268) ("get-view" 3529) ("json-ref" 4019) ("last-error" 4263))
(def (sig (procedure "(make-connection DATABASE-STRING URI-STRING)" (id make-connection))) (p "Creates a connection record for the desired " (i "DATABASE-STRING") " on the CouchDB located at the specified URI string."))
(def (sig (procedure "(connection-uri connection)" (id connection-uri)) (procedure "(connection-database connection)" (id connection-database))) (p "Accessors for the CouchDB egg connection record."))
(def (sig (procedure "(get-server-info connection)" (id get-server-info))) (p "Returns the couchdb version information as the json egg parses the response.") (highlight scheme "CSI> (get-server-info (make-connection \"\" \"http://localhost:5984\"))\n#((\"couchdb\" . \"Welcome\") (\"version\" . \"0.11.0\"))"))
(def (sig (procedure "(create-database connection)" (id create-database))) (p "Creates a database as specified in the connection record " (i "connection") ".  Use " (i "(make-connection database-string couchdb-uri-string)") " to create a connection object.") (p "Returns #t or #f. Verbose error message can be retrieved with ''last-error'."))
(def (sig (procedure "(delete-database connection)" (id delete-database))) (p "Deletes the database as specified in the connection record " (i "connection") ".  Use " (i "(make-connection database-string couchdb-uri-string)") " to create a connection object.") (p "Returns #t or #f. Verbose error message can be retrieved with ''last-error'."))
(def (sig (procedure "(get-database-info connection)" (id get-database-info))) (p "Returns the database information for a given connection record.  Use " (i "(make-connection database-string couchdb-uri-string)") " to create a connection record."))
(def (sig (procedure "(make-document id revision #!optional (body '#()))" (id make-document))) (p "The couchdb uses a record to represent the contents of a document. The mandatory elements have distinct slots whereas the rest of the fiels is accessible in a vector called " (i "body") "."))
(def (sig (procedure "(document? doc)" (id document?))) (p "Type checking predicate for a document record."))
(def (sig (procedure "(document-id doc)" (id document-id)) (procedure "(document-rev doc)" (id document-rev)) (procedure "(document-body doc)" (id document-body)) (procedure "(update-document doc #!keyword id rev body)" (id #f))) (p "Accessors for the " (i "id") " " (i "rev") " and " (i "body") " slots of a document record."))
(def (sig (procedure "(document-attribute? document name)" (id document-attribute?))) (p "Predicate indicating wether " (i "document") " does contain a attribute " (i "name") "."))
(def (sig (procedure "(document-attribute document name)" (id document-attribute))) (p "Returns the value for " (i "name") " if it is contained in " (i "document") "."))
(def (sig (procedure "(get-document connection id)" (id get-document))) (p "Requests the document with id " (i "id") " and returns that or #f."))
(def (sig (procedure "(save-document connection document)" (id save-document))) (p "Stores the document in the database and returns it with updated id and revision attributes. If the document does not exist in the database it is created."))
(def (sig (procedure "(delete-document connection document)" (id delete-document))) (p "Deletes the document form the database."))
(def (sig (procedure "(get-all-documents connection #!optional (query '()))" (id get-all-documents))) (p "Returns all documents in the database. The output can be quite large! You can pass any valid query URI part for the optional " (i "query") " parameter."))
(def (sig (procedure "(get-view connection view-string #!optional (query '()))" (id get-view))) (p "Returns the results of the requested " (i "view") ". View can be either a string depicting an explicit path or a list of strings which in the latter case is treated as " (i "(list design-document view-name)") ".  The query parameter is an alist containing " (i "(parameter-name . value)") " pairs.") (p "<Procedure>(send-temp-view-request connection view method #!key query)</procedure>"))
(def (sig (procedure "(json-ref name object)" (id json-ref))) (p "Retrieves a field " (i "name") " from a JSON object " (i "object") ". This is a convenience function to ease the access of the vector / hash-table mix the json egg generates."))
(def (sig (parameter "(last-error #f)" (id last-error))) (p "Will be set on errors. Returns a descriptive error string."))

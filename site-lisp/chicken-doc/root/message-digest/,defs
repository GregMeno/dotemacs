(index ("message-digest-primitive?" 0) ("check-message-digest-primitive" 0) ("error-message-digest-primitive" 0) ("message-digest-primitive-context-info" 294) ("message-digest-primitive-digest-length" 294) ("message-digest-primitive-init" 294) ("message-digest-primitive-update" 294) ("message-digest-primitive-final" 294) ("message-digest-primitive-name" 294) ("make-message-digest-primitive" 892) ("message-digest-chunk-read-maker" 3598) ("message-digest-chunk-read-maker" 3598) ("message-digest-chunk-size" 4281) ("message-digest-chunk-size" 4281) ("message-digest-chunk-converter" 4708) ("message-digest-chunk-converter" 4708) ("initialize-message-digest" 5315) ("message-digest?" 5603) ("check-message-digest" 5683) ("error-message-digest" 5683) ("message-digest-algorithm" 5849) ("finalize-message-digest" 6136) ("message-digest-update-object" 6518) ("message-digest-update-bytevector" 6687) ("message-digest-update-blob" 7159) ("message-digest-update-string" 7317) ("message-digest-update-substring" 7483) ("message-digest-update-u8vector" 7685) ("message-digest-update-subu8vector" 7859) ("message-digest-update-char-u8" 8069) ("message-digest-update-char" 8243) ("message-digest-update-char-be" 8539) ("message-digest-update-char-le" 8760) ("message-digest-update-u8" 8984) ("message-digest-update-u16" 9149) ("message-digest-update-u16-be" 9421) ("message-digest-update-u16-le" 9618) ("message-digest-update-u32" 9818) ("message-digest-update-u32-be" 10090) ("message-digest-update-u32-le" 10287) ("message-digest-update-u64" 10487) ("message-digest-update-u64-be" 10759) ("message-digest-update-u64-le" 10956) ("message-digest-update-procedure" 11156) ("message-digest-update-port" 11423) ("message-digest-update-file" 11750) ("message-digest-object" 11935) ("message-digest-string" 12284) ("message-digest-blob" 12633) ("message-digest-u8vector" 12976) ("message-digest-file" 13335) ("pack-u8" 13695) ("pack-u16" 13963) ("pack-u32" 14279) ("pack-u64" 14595) ("pack-integer" 14911) ("make-binary-message-digest" 15221) ("make-message-digest" 15943) ("message-digest-primitive-apply" 16238) ("digest-output-port?" 16446) ("check-digest-output-port" 16446) ("error-digest-output-port" 16446) ("digest-output-port-name" 16446) ("open-output-digest" 16788) ("close-output-digest" 17015) ("get-output-digest-string" 17303) ("get-output-digest-byte-string" 17303) ("get-output-digest-hexstring" 17602) ("get-output-digest-blob" 17838) ("get-output-digest-u8vector" 18033) ("call-with-output-digest" 18244) ("with-output-to-digest" 18610))
(def (sig (procedure "(message-digest-primitive? OBJ) => boolean" (id message-digest-primitive?)) (procedure "(check-message-digest-primitive LOC OBJ [NAM])" (id check-message-digest-primitive)) (procedure "(error-message-digest-primitive LOC OBJ [NAM])" (id error-message-digest-primitive))))
(def (sig (procedure "(message-digest-primitive-context-info PRIMITIVE)" (id message-digest-primitive-context-info)) (procedure "(message-digest-primitive-digest-length PRIMITIVE)" (id message-digest-primitive-digest-length)) (procedure "(message-digest-primitive-init PRIMITIVE)" (id message-digest-primitive-init)) (procedure "(message-digest-primitive-update PRIMITIVE)" (id message-digest-primitive-update)) (procedure "(message-digest-primitive-final PRIMITIVE)" (id message-digest-primitive-final)) (procedure "(message-digest-primitive-name PRIMITIVE)" (id message-digest-primitive-name))))
(def (sig (procedure "(make-message-digest-primitive CONTEXT-INFO DIGEST-LENGTH INIT UPDATE FINAL [NAME]) => message-digest-primitive" (id make-message-digest-primitive))) (p "Create a " (tt "message-digest-primitive") " object. The reification of a message digest algorithm.") (p (tt "CONTEXT-INFO") " is either a " (tt "(procedure () <context>)") ", or an " (tt "integer") ". When an " (tt "integer") " a memory-block of length " (tt "CONTEXT-INFO") " is allocated (and automatically free'ed).") (p (tt "<context>") " is an opaque object, except when the " (tt "CONTEXT-INFO") " is an integer. In which case it is known that the object is a " (tt "pointer") " to a block of non-garbage collected memory.") (p "The " (tt "<context>") " must always be a " (b "new") " object.") (p (tt "DIGEST-LENGTH") " is the count of bytes in the result " (tt "string") ".") (p "The processing of a message digest is split into three phases: initialization, update & finalization. These are represented by three procedures: " (tt "INIT") ", " (tt "UPDATE") " & " (tt "FINAL") ", respectively.") (p (tt "INIT") " is a " (tt "(procedure (<context>))") ". Sets up the " (tt "<context>") ". (Technically the creation of a new " (tt "<context>") " is part of the initialization phase but this detail is hidden from the user.)") (p (tt "UPDATE") " is a " (tt "(procedure (<context> <bytevector> <count>))") ". Must accumulate the " (tt "<bytevector>") ", where " (tt "<bytevector>") " is a " (tt "string") " or " (tt "blob") ". Will be called one or more times.") (p "The foreign type specifier " (tt "scheme-pointer") " is suitable as a foreign-lambda argument type for the " (tt "<bytevector>") " argument since the data-region of both is a bytevector.") (p (tt "<count>") " is the actual number of bytes in the " (tt "<bytevector>") ". Since this value is supplied it means only the first " (tt "<count>") " bytes in the " (tt "<bytevector>") " are valid.") (p (tt "FINAL") " is a " (tt "(procedure (<context> <bytevector>))") ". Must build the message-digest result in the supplied result " (tt "<bytevector>") " of length at least " (tt "DIGEST-LENGTH") ".") (p "Currently the result " (tt "<bytevector>") " will " (b "only") " be a " (tt "string") " but developers should accept a " (tt "string") " or " (tt "blob") ".") (p "(" (b "Note") " that " (tt "INIT") ", " (tt "UPDATE") " & " (tt "FINAL") " are side-effecting procedures!)") (p (tt "NAME") " must be a " (tt "symbol") " or a " (tt "string") " and identifies the message digest algorithm. The suggested form is " (tt "<algorithm name>-primitive") ". Example: " (tt "'md5-primitive") ". The default is a nearly useless generated, uninterned " (tt "symbol") "."))
(def (sig (procedure "(message-digest-chunk-read-maker) => (procedure (input-port) (procedure () <byte-source>))" (id message-digest-chunk-read-maker)) (procedure "(message-digest-chunk-read-maker CONSTRUCTOR)" (id message-digest-chunk-read-maker))) (p "Supplies the procedure used to create an input procedure.") (p (tt "CONSTRUCTOR") " is a " (tt "(procedure (input-port #!optional positive-integer) (procedure () <byte-source>))") ". The first argument is the chunk source port and the second argument is the size of chunks.") (p "The default " (tt "CONSTRUCTOR") " will return a procedure that reads from " (tt "INPUT-PORT") " in " (tt "(message-digest-chunk-size)") " bytes."))
(def (sig (procedure "(message-digest-chunk-size) => positive-integer" (id message-digest-chunk-size)) (procedure "(message-digest-chunk-size [SIZE])" (id message-digest-chunk-size))) (p "The number of bytes to read from a binary-stream during the message-digest update phase. Used by the default " (tt "message-digest-chunk-read-maker") ".") (p (tt "SIZE") " is a " (tt "positive integer") ", with default " (tt "1024") "."))
(def (sig (procedure "(message-digest-chunk-converter) => (procedure (*) <byte-source>)" (id message-digest-chunk-converter)) (procedure "(message-digest-chunk-converter [CONVERTER])" (id message-digest-chunk-converter))) (p "The procedure used to translate an arbitrary object into something suitable for an " (tt "UPDATE") " procedure. See " (tt "make-message-digest-primitive") ".") (p (tt "CONVERTER") " is a " (tt "(procedure (*) <byte-source>)") ".") (p "Should the " (tt "CONVERTER") " be " (tt "#f") " or return " (tt "#f") " then no translation is attempted.") (p "The default is " (tt "#f") "."))
(def (sig (procedure "(initialize-message-digest PRIMITIVE) => message-digest" (id initialize-message-digest))) (p "Returns a new, initialized " (tt "message-digest") " for the supplied algorithm " (tt "PRIMITIVE") ".") (p "Initialized here means the intialization phase is completed."))
(def (sig (procedure "(message-digest? OBJ) => boolean" (id message-digest?))))
(def (sig (procedure "(check-message-digest LOC OBJ [NAM])" (id check-message-digest)) (procedure "(error-message-digest LOC OBJ [NAM])" (id error-message-digest))))
(def (sig (procedure "(message-digest-algorithm DIGEST) => message-digest-primitive" (id message-digest-algorithm))) (p "Returns the message digest algorithm used by this " (tt "DIGEST") ".") (p "Mostly for use when developing an update operation.") (p "Do not mess with this object!"))
(def (sig (procedure "(finalize-message-digest DIGEST [RESULT-FORM]) => <result>" (id finalize-message-digest))) (p "Finalize the " (tt "DIGEST") " and return the " (tt "<result>") " in the " (tt "RESULT-FORM") ".") (p (tt "RESULT-FORM") " default is " (tt "'hex") ".") (p "Finalize here means the finalization phase is completed. The " (tt "DIGEST") " is not in a useful state."))
(def (sig (procedure "(message-digest-update-object DIGEST SOURCE)" (id message-digest-update-object))) (p "Update the " (tt "DIGEST") " with some " (tt "SOURCE") "."))
(def (sig (procedure "(message-digest-update-bytevector DIGEST BYTEVECTOR [LENGTH])" (id message-digest-update-bytevector))) (p "Update the " (tt "DIGEST") " with the " (tt "BYTEVECTOR") ", a " (tt "blob") " or " (tt "string") ".") (p "The " (tt "LENGTH") " is the byte count. Default is the size in bytes of the " (tt "BYTEVECTOR") ".") (p "Using some other " (i "vector-like") " object for the " (tt "BYTEVECTOR") " than the documented is performed at your own risk."))
(def (sig (procedure "(message-digest-update-blob DIGEST BLOB)" (id message-digest-update-blob))) (p "Update the " (tt "DIGEST") " with a " (tt "BLOB") "."))
(def (sig (procedure "(message-digest-update-string DIGEST STRING)" (id message-digest-update-string))) (p "Update the " (tt "DIGEST") " with a " (tt "STRING") "."))
(def (sig (procedure "(message-digest-update-substring DIGEST STRING START END)" (id message-digest-update-substring))) (p "Update the " (tt "DIGEST") " with a substring " (tt "STRING START END") "."))
(def (sig (procedure "(message-digest-update-u8vector DIGEST U8VECTOR)" (id message-digest-update-u8vector))) (p "Update the " (tt "DIGEST") " with a " (tt "U8VECTOR") "."))
(def (sig (procedure "(message-digest-update-subu8vector DIGEST U8VECTOR START END)" (id message-digest-update-subu8vector))) (p "Update the " (tt "DIGEST") " with a subvector " (tt "U8VECTOR START END") "."))
(def (sig (procedure "(message-digest-update-char-u8 DIGEST CHAR)" (id message-digest-update-char-u8))) (p "Update the " (tt "DIGEST") " with a character " (tt "CHAR") "."))
(def (sig (procedure "(message-digest-update-char DIGEST CHAR [ENDIAN])" (id message-digest-update-char))) (p "Update the " (tt "DIGEST") " with a the character " (tt "CHAR") " 32-bit integer value treated as " (tt "ENDIAN") ".") (p (tt "ENDIAN") " default is " (tt "(machine-byte-order)") "."))
(def (sig (procedure "(message-digest-update-char-be DIGEST CHAR)" (id message-digest-update-char-be))) (p "Update the " (tt "DIGEST") " with a the character " (tt "CHAR") " 32-bit integer value treated as big-endian."))
(def (sig (procedure "(message-digest-update-char-le DIGEST CHAR)" (id message-digest-update-char-le))) (p "Update the " (tt "DIGEST") " with a the character " (tt "CHAR") " 32-bit integer value treated as little-endian."))
(def (sig (procedure "(message-digest-update-u8 DIGEST U8)" (id message-digest-update-u8))) (p "Update the " (tt "DIGEST") " with an 8-bit integer " (tt "U8") "."))
(def (sig (procedure "(message-digest-update-u16 DIGEST U16 [ENDIAN])" (id message-digest-update-u16))) (p "Update the " (tt "DIGEST") " with a 16-bit integer " (tt "U16") " treated as " (tt "ENDIAN") ".") (p (tt "ENDIAN") " default is " (tt "(machine-byte-order)") "."))
(def (sig (procedure "(message-digest-update-u16-be DIGEST U16)" (id message-digest-update-u16-be))) (p "Update the " (tt "DIGEST") " with a 16-bit integer " (tt "U16") " treated as big-endian."))
(def (sig (procedure "(message-digest-update-u16-le DIGEST U16)" (id message-digest-update-u16-le))) (p "Update the " (tt "DIGEST") " with a 16-bit integer " (tt "U16") " treated as little-endian."))
(def (sig (procedure "(message-digest-update-u32 DIGEST U32 [ENDIAN])" (id message-digest-update-u32))) (p "Update the " (tt "DIGEST") " with a 32-bit integer " (tt "U32") " treated as " (tt "ENDIAN") ".") (p (tt "ENDIAN") " default is " (tt "(machine-byte-order)") "."))
(def (sig (procedure "(message-digest-update-u32-be DIGEST U32)" (id message-digest-update-u32-be))) (p "Update the " (tt "DIGEST") " with a 32-bit integer " (tt "U32") " treated as big-endian."))
(def (sig (procedure "(message-digest-update-u32-le DIGEST U32)" (id message-digest-update-u32-le))) (p "Update the " (tt "DIGEST") " with a 32-bit integer " (tt "U32") " treated as little-endian."))
(def (sig (procedure "(message-digest-update-u64 DIGEST U64 [ENDIAN])" (id message-digest-update-u64))) (p "Update the " (tt "DIGEST") " with a 64-bit integer " (tt "U64") " treated as " (tt "ENDIAN") ".") (p (tt "ENDIAN") " default is " (tt "(machine-byte-order)") "."))
(def (sig (procedure "(message-digest-update-u64-be DIGEST U64)" (id message-digest-update-u64-be))) (p "Update the " (tt "DIGEST") " with a 64-bit integer " (tt "U64") " treated as big-endian."))
(def (sig (procedure "(message-digest-update-u64-le DIGEST U64)" (id message-digest-update-u64-le))) (p "Update the " (tt "DIGEST") " with a 64-bit integer " (tt "U64") " treated as little-endian."))
(def (sig (procedure "(message-digest-update-procedure DIGEST THUNK)" (id message-digest-update-procedure))) (p "Update the " (tt "DIGEST") " with a " (tt "THUNK") " until it returns " (tt "#f") ".") (p (tt "THUNK") " is a " (tt "(procedure () <byte-source>)") "."))
(def (sig (procedure "(message-digest-update-port DIGEST INPUT-PORT)" (id message-digest-update-port))) (p "Update the " (tt "DIGEST") " with " (tt "<byte-source>") " from an " (tt "INPUT-PORT") " until " (tt "#!eof") " encountered.") (p "Uses the " (tt "message-digest-chunk-read-maker") " to create a reader for the port."))
(def (sig (procedure "(message-digest-update-file DIGEST FILENAME)" (id message-digest-update-file))) (p "Update the " (tt "DIGEST") " with the contents of file " (tt "FILENAME") "."))
(def (sig (procedure "(message-digest-object PRIMITIVE SOURCE [RESULT-FORM]) => <result>" (id message-digest-object))) (p "Returns the " (tt "RESULT") " for the digest algorithm " (tt "PRIMITIVE") " applied to " (tt "SOURCE") " in the " (tt "RESULT-FORM") ".") (p (tt "RESULT-FORM") " default is " (tt "'hex") ".") (p "Performs all three phases."))
(def (sig (procedure "(message-digest-string PRIMITIVE STRING [RESULT-FORM]) => <result>" (id message-digest-string))) (p "Returns the " (tt "RESULT") " for the digest algorithm " (tt "PRIMITIVE") " applied to " (tt "STRING") " in the " (tt "RESULT-FORM") ".") (p (tt "RESULT-FORM") " default is " (tt "'hex") ".") (p "Performs all three phases."))
(def (sig (procedure "(message-digest-blob PRIMITIVE BLOB [RESULT-FORM]) => <result>" (id message-digest-blob))) (p "Returns the " (tt "<result>") " for the digest algorithm " (tt "PRIMITIVE") " applied to " (tt "BLOB") " in the " (tt "RESULT-FORM") ".") (p (tt "RESULT-FORM") " default is " (tt "'hex") ".") (p "Performs all three phases."))
(def (sig (procedure "(message-digest-u8vector PRIMITIVE U8VECTOR [RESULT-FORM]) => <result>" (id message-digest-u8vector))) (p "Returns the " (tt "<result>") " for the digest algorithm " (tt "PRIMITIVE") " applied to " (tt "U8VECTOR") " in the " (tt "RESULT-FORM") ".") (p (tt "RESULT-FORM") " default is " (tt "'hex") ".") (p "Performs all three phases."))
(def (sig (procedure "(message-digest-file PRIMITIVE FILENAME [RESULT-FORM]) => <result>" (id message-digest-file))) (p "Returns the " (tt "<result>") " for the digest algorithm " (tt "PRIMITIVE") " applied to the file " (tt "FILENAME") " in the " (tt "RESULT-FORM") ".") (p (tt "RESULT-FORM") " default is " (tt "'hex") ".") (p "Performs all three phases."))
(def (sig (procedure "(pack-u8 N (#:buffer BUFFER) (#:start START))) => <byte-buffer>" (id pack-u8))) (p "Returns the " (tt "BUFFER") " with the low-order 8 bits of the integer " (tt "N") " packed at index " (tt "START") ". " (tt "SIZE") " is assumed " (tt "1") "."))
(def (sig (procedure "(pack-u16 N (#:buffer BUFFER) (#:start START) (#:order ORDER))) => <byte-buffer>" (id pack-u16))) (p "Returns the " (tt "BUFFER") " with the low-order 16 bits of the integer " (tt "N") " packed at index " (tt "START") " in the byte " (tt "ORDER") ". " (tt "SIZE") " is assumed " (tt "2") "."))
(def (sig (procedure "(pack-u32 N (#:buffer BUFFER) (#:start START) (#:order ORDER))) => <byte-buffer>" (id pack-u32))) (p "Returns the " (tt "BUFFER") " with the low-order 32 bits of the integer " (tt "N") " packed at index " (tt "START") " in the byte " (tt "ORDER") ". " (tt "SIZE") " is assumed " (tt "4") "."))
(def (sig (procedure "(pack-u64 N (#:buffer BUFFER) (#:start START) (#:order ORDER))) => <byte-buffer>" (id pack-u64))) (p "Returns the " (tt "BUFFER") " with the low-order 64 bits of the integer " (tt "N") " packed at index " (tt "START") " in the byte " (tt "ORDER") ". " (tt "SIZE") " is assumed " (tt "8") "."))
(def (sig (procedure "(pack-integer N (#:buffer BUFFER) (#:start START) (#:order ORDER) (#:size SIZE))) => <byte-buffer>" (id pack-integer))) (p "Returns the " (tt "BUFFER") " with the low-order " (tt "SIZE") " bits of the integer " (tt "N") " packed at index " (tt "START") " in the byte " (tt "ORDER") "."))
(def (sig (procedure "(make-binary-message-digest SOURCE CONTEXT-INFO DIGEST-LENGTH INIT UPDATE FINAL [CALLER]) => string" (id make-binary-message-digest))) (p "Returns the message-digest for " (tt "SOURCE") " as a string of bytes.") (p (tt "SOURCE") " is a Scheme-object.") (p "The meaning of the other fields are as for " (tt "make-message-digest-primitive") ".") (p "The optional " (tt "CALLER") " is for identification.") (p "See " (tt "message-digest-chunk-size") " to set the number of bytes read from a port.") (p "See " (tt "message-digest-chunk-read-maker") " to set the chunk reader procedure creator.") (p "See " (tt "message-digest-chunk-converter") " to set the chunk representation translation procedure."))
(def (sig (procedure "(make-message-digest SOURCE CONTEXT-INFO DIGEST-LENGTH INIT UPDATE FINAL [CALLER]) => string" (id make-message-digest))) (p "Exactly as " (tt "make-binary-message-digest") " but returns the message-digest for " (tt "SOURCE") " using " (tt "byte-string->hexadecimal") "."))
(def (sig (procedure "(message-digest-primitive-apply PRIMITIVE SOURCE [CALLER])" (id message-digest-primitive-apply))) (p "Returns a binary-message-digest of " (tt "SOURCE") " using " (tt "PRIMITIVE") "."))
(def (sig (procedure "(digest-output-port? OBJ) => boolean" (id digest-output-port?)) (procedure "(check-digest-output-port LOC OBJ [NAM])" (id check-digest-output-port)) (procedure "(error-digest-output-port LOC OBJ [NAM])" (id error-digest-output-port)) (procedure "(digest-output-port-name PORT) => string" (id digest-output-port-name))))
(def (sig (procedure "(open-output-digest PRIMITIVE) => digest-output-port" (id open-output-digest))) (p "Returns a message digest output port for the supplied algorithm " (tt "PRIMITIVE") ".") (p "The initialization phase."))
(def (sig (procedure "(close-output-digest PORT [RESULT-FORM]) => <result>" (id close-output-digest))) (p "Closes the " (tt "PORT") " and returns the " (tt "<result>") " in the " (tt "RESULT-FORM") ".") (p (tt "RESULT-FORM") " default is " (tt "'hex") ".") (p "The finalization phase."))
(def (sig (procedure "(get-output-digest-string PORT) => string" (id get-output-digest-string)) (procedure "(get-output-digest-byte-string PORT) => string" (id get-output-digest-byte-string))) (p "Closes the " (tt "PORT") " and returns the result " (tt "string") ".") (p "The finalization phase."))
(def (sig (procedure "(get-output-digest-hexstring PORT) => string" (id get-output-digest-hexstring))) (p "Closes the " (tt "PORT") " and returns the result as a " (tt "string") " of hexadecimal digits.") (p "The finalization phase."))
(def (sig (procedure "(get-output-digest-blob PORT) => blob" (id get-output-digest-blob))) (p "Closes the " (tt "PORT") " and returns the result " (tt "blob") ".") (p "The finalization phase."))
(def (sig (procedure "(get-output-digest-u8vector PORT) => u8vector" (id get-output-digest-u8vector))) (p "Closes the " (tt "PORT") " and returns the result " (tt "u8vector") ".") (p "The finalization phase."))
(def (sig (procedure "(call-with-output-digest PRIMITIVE PROCEDURE/1 [RESULT-FORM]) => <result>" (id call-with-output-digest))) (p "Invoke the procedure " (tt "PROCEDURE PORT") " with " (tt "digest-output-port") " and return " (tt "<result>") " in the " (tt "RESULT-FORM") ".") (p (tt "RESULT-FORM") " default is " (tt "'hex") ".") (p "Performs all three phases."))
(def (sig (procedure "(with-output-to-digest PRIMITIVE THUNK [RESULT-FORM]) => <result>" (id with-output-to-digest))) (p "Invoke the procedure " (tt "THUNK") " with " (tt "(current-output-port)") " bound to a " (tt "digest-output-port") " and return " (tt "<result>") " in the " (tt "RESULT-FORM") ".") (p (tt "RESULT-FORM") " default is " (tt "'hex") ".") (p "Performs all three phases."))

(index ("make-string*" 0) ("string->hex" 269) ("ascii-codepoint?" 533) ("unicode-char->string" 616) ("unicode-string" 965) ("unicode-make-string" 1327) ("unicode-surrogate?" 1774) ("unicode-surrogates->codepoint" 1860) ("str_to_hex" 2114) ("blob_to_hex" 2494) ("u8vec_to_hex" 2650) ("s8vec_to_hex" 2812) ("mem_to_hex" 2974))
(def (sig (procedure "(make-string* COUNT [FILL]) => string" (id make-string*))) (p "A " (i "tabling") " " (tt "make-string") ".") (p (tt "FILL") " is any valid " (tt "char") ", including codepoints outside of the ASCII range. As such UTF-8 strings can be memoized."))
(def (sig (procedure "(string->hex STRING [START [END]]) => string" (id string->hex))) (p "Returns a hexadecimal represenation of " (tt "STRING") ". " (tt "START") " and " (tt "END") " are substring limits.") (p (tt "STRING") " is treated as a string of bytes."))
(def (sig (procedure "(ascii-codepoint? CHAR) => boolean" (id ascii-codepoint?))))
(def (sig (procedure "(unicode-char->string CHAR) => string" (id unicode-char->string))) (p "Returns a string formed from Unicode codepoint " (tt "CHAR") ".") (p (i "Note") " that the " (tt "(string-length)") " (except under " (int-link "utf-8") ") may not be equal to " (tt "1") ".") (p "Generates an error should the codepoint be out-of-range."))
(def (sig (procedure "(unicode-string [CHAR...]) => string" (id unicode-string))) (p "Returns a string formed from Unicode codepoints " (tt "CHAR...")) (p (i "Note") " that the " (tt "(string-length)") " (except under " (int-link "utf-8") ") may not be equal to the length of " (tt "CHAR...") ".") (p "Generates an error should the codepoint be out-of-range."))
(def (sig (procedure "(unicode-make-string COUNT [FILL]) => string" (id unicode-make-string))) (p "Returns a string formed from " (tt "COUNT") " occurrences of the Unicode codepoint " (tt "FILL") ". The " (tt "FILL") " default is " (tt "#\\space") ".") (p (i "Note") " that the " (tt "(string-length)") " (except under " (int-link "utf-8") ") may not be equal to " (tt "COUNT") ".") (p "Generates an error should the codepoint be out-of-range."))
(def (sig (procedure "(unicode-surrogate? NUM) => boolean" (id unicode-surrogate?))))
(def (sig (procedure "(unicode-surrogates->codepoint HIGH LOW) => (union boolean fixnum)" (id unicode-surrogates->codepoint))) (p "Returns the codepoint for the valid surrogate pair " (tt "HIGH") " and " (tt "LOW") ". Otherwise returns " (tt "#f") "."))
(def (sig (procedure "(str_to_hex OUT IN OFF LEN)" (id str_to_hex))) (p "Writes the ASCII hexadecimal representation of " (tt "IN") " to " (tt "OUT") ".") (p (tt "IN") " is a " (tt "nonnull-string") ".") (p (tt "OFF") " is the byte offset.") (p (tt "LEN") " is the length of the bytes at " (tt "OFF") ".") (p (tt "OUT") " is a " (tt "string") " of length " (tt "(+ LEN 2)") "."))
(def (sig (procedure "(blob_to_hex OUT IN OFF LEN)" (id blob_to_hex))) (p "Like " (tt "str_to_hex") " except " (tt "IN") " is a " (tt "nonnull-blob") "."))
(def (sig (procedure "(u8vec_to_hex OUT IN OFF LEN)" (id u8vec_to_hex))) (p "Like " (tt "str_to_hex") " except " (tt "IN") " is a " (tt "nonnull-u8vector") "."))
(def (sig (procedure "(s8vec_to_hex OUT IN OFF LEN)" (id s8vec_to_hex))) (p "Like " (tt "str_to_hex") " except " (tt "IN") " is a " (tt "nonnull-s8vector") "."))
(def (sig (procedure "(mem_to_hex OUT IN OFF LEN)" (id mem_to_hex))) (p "Like " (tt "str_to_hex") " except " (tt "IN") " is a " (tt "nonnull-c-pointer") "."))

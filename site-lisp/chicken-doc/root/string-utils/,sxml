((tags "egg") (section 2 "string-utils" (toc)) (section 2 "Documentation" (section 3 "Memoized String" (section 4 "Usage" (highlight scheme "(require-extension memoized-string)")) (section 4 "make-string*" (def (sig (procedure "(make-string* COUNT [FILL]) => string" (id make-string*))) (p "A " (i "tabling") " " (tt "make-string") ".") (p (tt "FILL") " is any valid " (tt "char") ", including codepoints outside of the ASCII range. As such UTF-8 strings can be memoized.")))) (section 3 "String Hexadecimal" (section 4 "Usage" (highlight scheme "(require-extension string-hexadecimal)")) (section 4 "string->hex" (def (sig (procedure "(string->hex STRING [START [END]]) => string" (id string->hex))) (p "Returns a hexadecimal represenation of " (tt "STRING") ". " (tt "START") " and " (tt "END") " are substring limits.") (p (tt "STRING") " is treated as a string of bytes.")))) (section 3 "Unicode Utilities" (p "The name of this extension is misleading. Only UTF-8 is currently supported.") (p "For a better treatment of UTF-8 see the " (int-link "utf-8") " extension.") (section 4 "Usage" (highlight scheme "(require-extension unicode-utils)")) (section 4 "ascii-codepoint?" (def (sig (procedure "(ascii-codepoint? CHAR) => boolean" (id ascii-codepoint?))))) (section 4 "unicode-char->string" (def (sig (procedure "(unicode-char->string CHAR) => string" (id unicode-char->string))) (p "Returns a string formed from Unicode codepoint " (tt "CHAR") ".") (p (i "Note") " that the " (tt "(string-length)") " (except under " (int-link "utf-8") ") may not be equal to " (tt "1") ".") (p "Generates an error should the codepoint be out-of-range."))) (section 4 "unicode-string" (def (sig (procedure "(unicode-string [CHAR...]) => string" (id unicode-string))) (p "Returns a string formed from Unicode codepoints " (tt "CHAR...")) (p (i "Note") " that the " (tt "(string-length)") " (except under " (int-link "utf-8") ") may not be equal to the length of " (tt "CHAR...") ".") (p "Generates an error should the codepoint be out-of-range."))) (section 4 "unicode-make-string" (def (sig (procedure "(unicode-make-string COUNT [FILL]) => string" (id unicode-make-string))) (p "Returns a string formed from " (tt "COUNT") " occurrences of the Unicode codepoint " (tt "FILL") ". The " (tt "FILL") " default is " (tt "#\\space") ".") (p (i "Note") " that the " (tt "(string-length)") " (except under " (int-link "utf-8") ") may not be equal to " (tt "COUNT") ".") (p "Generates an error should the codepoint be out-of-range."))) (section 4 "unicode-surrogate?" (def (sig (procedure "(unicode-surrogate? NUM) => boolean" (id unicode-surrogate?))))) (section 4 "unicode-surrogates->codepoint" (def (sig (procedure "(unicode-surrogates->codepoint HIGH LOW) => (union boolean fixnum)" (id unicode-surrogates->codepoint))) (p "Returns the codepoint for the valid surrogate pair " (tt "HIGH") " and " (tt "LOW") ". Otherwise returns " (tt "#f") ".")))) (section 3 "String Utilities" (p "Reexports all of the above."))) (section 2 "Usage" (highlight scheme "(require-extension string-utils)") (section 3 "Bytes to Hexadecimal" (p "A common bytevector-like object to hexadecimal string facility.") (p "No error checking is performed!") (section 4 "Usage" (highlight scheme "(require-extension to-hex)")) (section 4 "str_to_hex" (def (sig (procedure "(str_to_hex OUT IN OFF LEN)" (id str_to_hex))) (p "Writes the ASCII hexadecimal representation of " (tt "IN") " to " (tt "OUT") ".") (p (tt "IN") " is a " (tt "nonnull-string") ".") (p (tt "OFF") " is the byte offset.") (p (tt "LEN") " is the length of the bytes at " (tt "OFF") ".") (p (tt "OUT") " is a " (tt "string") " of length " (tt "(+ LEN 2)") "."))) (section 4 "blob_to_hex" (def (sig (procedure "(blob_to_hex OUT IN OFF LEN)" (id blob_to_hex))) (p "Like " (tt "str_to_hex") " except " (tt "IN") " is a " (tt "nonnull-blob") "."))) (section 4 "u8vec_to_hex" (def (sig (procedure "(u8vec_to_hex OUT IN OFF LEN)" (id u8vec_to_hex))) (p "Like " (tt "str_to_hex") " except " (tt "IN") " is a " (tt "nonnull-u8vector") "."))) (section 4 "s8vec_to_hex" (def (sig (procedure "(s8vec_to_hex OUT IN OFF LEN)" (id s8vec_to_hex))) (p "Like " (tt "str_to_hex") " except " (tt "IN") " is a " (tt "nonnull-s8vector") "."))) (section 4 "mem_to_hex" (def (sig (procedure "(mem_to_hex OUT IN OFF LEN)" (id mem_to_hex))) (p "Like " (tt "str_to_hex") " except " (tt "IN") " is a " (tt "nonnull-c-pointer") "."))))) (section 2 "Requirements" (p (int-link "check-errors") " " (int-link "lookup-table"))) (section 2 "Author" (p (int-link "/users/kon-lovett" "Kon Lovett"))) (section 2 "Version history" (dl (dt "1.2.0") (dd "Added \"generic\" bytes to hexadecimal string.") (dt "1.1.0") (dd "Split into separate modules. Added some UTF-8 support.") (dt "1.0.0") (dd "Hello"))) (section 2 "License" (p "Copyright (C) 2010 Kon Lovett.  All rights reserved.") (p "Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the Software), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:") (p "The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.") (p "THE SOFTWARE IS PROVIDED ASIS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.")))
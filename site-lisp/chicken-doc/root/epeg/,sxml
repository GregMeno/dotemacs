((tags "egg") (section 2 "epeg" (toc) (section 3 "Description" (p "Chicken bindings for the epeg thumbnailer library from the " (link "http://www.enlightenment.org" "enlightenment") " project.")) (section 3 "Author" (p (int-link "/users/peter-bex" "Peter Bex"))) (section 3 "Requirements" (p "None")) (section 3 "Documentation" (p "Epeg works by first opening a file, then setting the desired properties of the scaled image.  Upon encoding, these properties are taken into account.  Decoding is deferred until encoding of the new image takes place for optimal speed.") (section 4 "Image creation, destruction and friends" (def (sig (procedure "(image-open filename) => image" (id image-open))) (p "Returns a new epeg image object which describes the image stored in the file " (tt "filename") ".")) (def (sig (procedure "(image? img) => boolean" (id image?))) (p "Determine if " (tt "img") " is an epeg image object.")) (def (sig (procedure "(image-close img)" (id image-close))) (p "Destroy the image and close the associated file.")) (def (sig (procedure "(image-encode img)" (id image-encode))) (p "Store the encoded image on disk. The filename is determined by " (tt "image-file-output-set!") ". Other properties of the image can be set by the procedures described below."))) (section 4 "Image properties" (def (sig (procedure "(image-size img) => integer integer" (id image-size))) (p "Returns 2 values: the width and height of the " (i "original") " image.")) (def (sig (procedure "(image-file-output-set! img filename)" (id image-file-output-set!))) (p "Set the output file for subsequent calls to " (tt "image-encode") ".")) (def (sig (procedure "(image-size-set! img width height)" (id image-size-set!))) (p "Set the size of the new image, in pixels.  The original image is decoded into this size.")) (def (sig (procedure "(image-bounds-set! img x y width height)" (id image-bounds-set!))) (p "Set the bounds of the image to be decoded.  This is like cropping the image upon loading it.")) (def (sig (procedure "(image-colorspace-set! img colorspace)" (id image-colorspace-set!))) (p "Set the colorspace for decoding.  This is one of the following:")) (def (sig (constant "colorspace-gray8" (id colorspace-gray8)) (constant "colorspace-yuv8" (id colorspace-yuv8)) (constant "colorspace-rgb8" (id colorspace-rgb8)) (constant "colorspace-bgr8" (id colorspace-bgr8)) (constant "colorspace-rgba8" (id colorspace-rgba8)) (constant "colorspace-bgra8" (id colorspace-bgra8)) (constant "colorspace-argb32" (id colorspace-argb32)) (constant "colorspace-cmyk" (id colorspace-cmyk)))) (def (sig (procedure "(image-colorspace img) => colorspace" (id image-colorspace))) (p "Returns the current colorspace value to use for decoding. The values returned by this is any of the constants described under " (tt "image-colorspace-set!") ".")) (def (sig (procedure "(image-comment-set! img comment)" (id image-comment-set!))) (p "Set the comment string for encoding.  By default, this is not written to the thumbnail! Use " (tt "image-comment-enable") " to enable this.")) (def (sig (procedure "(image-comment img) => string" (id image-comment))) (p "Returns the comment string to use for encoding, or " (tt "#f") " if none was set.")) (def (sig (procedure "(image-comment-enable img)" (id image-comment-enable))) (p "Enable comment field for the thumbnail.")) (def (sig (procedure "(image-comment-disable img)" (id image-comment-disable))) (p "Disable comment field for the thumbnail.  The default setting for comments is disabled.")) (def (sig (procedure "(image-thumbnail-info img) => string string string string" (id image-thumbnail-info))) (p "Returns the 4 values: the uri field, width, height and mimetype of the thumbnail that will be written.")) (def (sig (procedure "(image-quality-set! img percentage)" (id image-quality-set!))) (p "Set the thumbnail's image quality (0 - 100).")) (def (sig (procedure "(image-trim img)" (id image-trim))) (p "Undocumented.") (pre "     "))) (section 4 "Pixel query procedures" (p "Currently, the pixel query procedures are not available."))) (section 3 "Example" (p "What follows is an almost literal translation of src/bin/epeg_main.c from the epeg distribution tarball.") (highlight scheme "(use epeg)\n\n(unless (= (length (argv)) 3)\n  (printf \"Usage: ~A input.jpg thumb.jpg\\n\" (car (argv)))\n  (exit 0))\n\n; This will throw an i/o file exception if the file can't be opened\n(define im (image-open (list-ref (argv) 1)))\n\n(let ((com (image-comment im)))\n  (when com (printf \"Comment: ~A\\n\" com)))\n\n(call-with-values\n    (lambda ()\n      (image-thumbnail-info im))\n  (lambda (uri width height mimetype)\n    (when mimetype\n\t  (printf \"Thumb Mimetype: ~A\\n\" mimetype)\n\t  (when uri\n\t    (printf \"Thumb URI: ~A\\n\" uri))\n\t  (printf \"Thumb Mtime: \\n\")\n\t  (printf \"Thumb Width: ~A\\n\" width)\n\t  (printf \"Thumb Height: ~A\\n\" height))))\n\n(call-with-values\n    (lambda ()\n      (image-size im))\n  (lambda (width height)\n    (printf \"Image size: ~Ax~A\\n\" width height)))\n\n(image-size-set! im 128 96)\n(image-quality-set! im 80)\n(image-comment-enable im)\n(image-comment-set! im \"Smelly pants!\")\n(image-file-output-set! im (list-ref (argv) 2))\n(image-encode im)\n(image-close im)  ; Not required, cleanup on GC\n\n(exit 0)")) (section 3 "Changelog" (ul (li "2.3 Make use of epeg-config") (li "2.2 Port to Chicken 4, renamed procedures and removed epeg: prefix, converted to wiki documentation") (li "2.1 Fix epeg:file-open failure when file not found") (li "2.0 Change API to use " (tt "epeg:") " prefix for procedures. Change to eggdoc documentation format. Use GC finalizers.") (li "1.1 Added checks so (where it's possible) exceptions get thrown instead of segfaulting.") (li "1.0 initial release."))) (section 3 "License" (pre " Copyright (c) 2004-2008, Peter Bex\n All rights reserved.\n \n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are\n met:\n \n Redistributions of source code must retain the above copyright\n notice, this list of conditions and the following disclaimer.\n \n Redistributions in binary form must reproduce the above copyright\n notice, this list of conditions and the following disclaimer in the\n documentation and/or other materials provided with the distribution.\n \n Neither the name of the author nor the names of its contributors may\n be used to endorse or promote products derived from this software\n without specific prior written permission.\n \n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n OF THE POSSIBILITY OF SUCH DAMAGE."))))
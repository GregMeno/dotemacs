(index ("image-open" 0) ("image?" 177) ("image-close" 298) ("image-encode" 414) ("image-size" 657) ("image-file-output-set!" 813) ("image-size-set!" 980) ("image-bounds-set!" 1157) ("image-colorspace-set!" 1346) ("colorspace-gray8" 1508) ("colorspace-yuv8" 1508) ("colorspace-rgb8" 1508) ("colorspace-bgr8" 1508) ("colorspace-rgba8" 1508) ("colorspace-bgra8" 1508) ("colorspace-argb32" 1508) ("colorspace-cmyk" 1508) ("image-colorspace" 1930) ("image-comment-set!" 2181) ("image-comment" 2410) ("image-comment-enable" 2573) ("image-comment-disable" 2698) ("image-thumbnail-info" 2873) ("image-quality-set!" 3092) ("image-trim" 3229))
(def (sig (procedure "(image-open filename) => image" (id image-open))) (p "Returns a new epeg image object which describes the image stored in the file " (tt "filename") "."))
(def (sig (procedure "(image? img) => boolean" (id image?))) (p "Determine if " (tt "img") " is an epeg image object."))
(def (sig (procedure "(image-close img)" (id image-close))) (p "Destroy the image and close the associated file."))
(def (sig (procedure "(image-encode img)" (id image-encode))) (p "Store the encoded image on disk. The filename is determined by " (tt "image-file-output-set!") ". Other properties of the image can be set by the procedures described below."))
(def (sig (procedure "(image-size img) => integer integer" (id image-size))) (p "Returns 2 values: the width and height of the " (i "original") " image."))
(def (sig (procedure "(image-file-output-set! img filename)" (id image-file-output-set!))) (p "Set the output file for subsequent calls to " (tt "image-encode") "."))
(def (sig (procedure "(image-size-set! img width height)" (id image-size-set!))) (p "Set the size of the new image, in pixels.  The original image is decoded into this size."))
(def (sig (procedure "(image-bounds-set! img x y width height)" (id image-bounds-set!))) (p "Set the bounds of the image to be decoded.  This is like cropping the image upon loading it."))
(def (sig (procedure "(image-colorspace-set! img colorspace)" (id image-colorspace-set!))) (p "Set the colorspace for decoding.  This is one of the following:"))
(def (sig (constant "colorspace-gray8" (id colorspace-gray8)) (constant "colorspace-yuv8" (id colorspace-yuv8)) (constant "colorspace-rgb8" (id colorspace-rgb8)) (constant "colorspace-bgr8" (id colorspace-bgr8)) (constant "colorspace-rgba8" (id colorspace-rgba8)) (constant "colorspace-bgra8" (id colorspace-bgra8)) (constant "colorspace-argb32" (id colorspace-argb32)) (constant "colorspace-cmyk" (id colorspace-cmyk))))
(def (sig (procedure "(image-colorspace img) => colorspace" (id image-colorspace))) (p "Returns the current colorspace value to use for decoding. The values returned by this is any of the constants described under " (tt "image-colorspace-set!") "."))
(def (sig (procedure "(image-comment-set! img comment)" (id image-comment-set!))) (p "Set the comment string for encoding.  By default, this is not written to the thumbnail! Use " (tt "image-comment-enable") " to enable this."))
(def (sig (procedure "(image-comment img) => string" (id image-comment))) (p "Returns the comment string to use for encoding, or " (tt "#f") " if none was set."))
(def (sig (procedure "(image-comment-enable img)" (id image-comment-enable))) (p "Enable comment field for the thumbnail."))
(def (sig (procedure "(image-comment-disable img)" (id image-comment-disable))) (p "Disable comment field for the thumbnail.  The default setting for comments is disabled."))
(def (sig (procedure "(image-thumbnail-info img) => string string string string" (id image-thumbnail-info))) (p "Returns the 4 values: the uri field, width, height and mimetype of the thumbnail that will be written."))
(def (sig (procedure "(image-quality-set! img percentage)" (id image-quality-set!))) (p "Set the thumbnail's image quality (0 - 100)."))
(def (sig (procedure "(image-trim img)" (id image-trim))) (p "Undocumented.") (pre "     "))

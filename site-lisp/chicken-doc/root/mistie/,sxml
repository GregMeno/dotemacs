((tags "egg") (section 2 "Mistie" (toc) (section 3 "Description" (p "Mistie is a programmable filter.  Its primary aim is to let the user define a document's markup using Scheme.")) (section 3 "Author" (p "Dorai Sitaram")) (section 3 "Requirements" (p "None")) (section 3 "Documentation" (p "By itself, Mistie does not require any style of markup or format of either its input or its output. It simply copies its standard input to standard output as is.  E.g.,") (pre " csi -R mistie -e '(mistie-main)' < input.doc > output.doc") (p "produces an " (tt "output.doc") " that is indistinguishable from " (tt "input.doc") ".") (p (tt "mistie-main") " can be given a file's name as argument, in which case it reads that file instead of standard input.  Thus, the above command is equivalent to") (pre " csi -R mistie -e '(mistie-main \"input.doc\")' > output.doc") (p "To make Mistie do something more interesting than copying input verbatim to output, the user must supply a " (i "format file") ".  A format file is a Scheme file that describes the markup of the input document in terms of the desired output format.  Format files are normal Scheme files and can be loaded with " (tt "mistie-load") ". E.g.,") (pre " csi -R mistie myformat.mistie -e '(mistie-main)' < input.doc") (p "produces a formatted version of " (tt "input.doc") ", the formatting being dictated by the format file " (tt "myformat.mistie") ".  The formatted version may either go to standard output or to some file depending on " (tt "myformat.mistie") ".  We will use the " (tt ".mistie") " extension for Scheme files used as format files, but this is just a convention.") (p "In general, a format file will  use the Mistie infrastructure to define a particular markup, deciding both what the input document should look like and what kind of output to emit.  Format authors are " (i "not") " limited to a specialized sublanguage -- they can use full Scheme, including all the nonstandard features of the particular Scheme dialect they have at their disposal.") (p "Writing a format file requires some Scheme programming skill.  If you're already a Scheme programmer, you are all set.  If not, you can rely on format files written by people whose taste you trust. If it helps, Mistie is somewhat like TeX in its mode of operation (though not in its domain), with the \"macro\" language being Scheme.  The analogy is not perfect though: There are no predefined primitives (everything must be supplied via a format file), and the output style is CFD (completely format dependent) rather than some DVI (device independent). (Hope that wasn't too mistie-rious.)") (p "The distribution includes several sample format files: Format files may be combined in the call to " (tt "mistie.scm") ", e.g.,") (pre " csi -R mistie plain.mistie footnote.mistie -e '(mistie-main \"file.doc\")' > file.html\n csi -R mistie plain.mistie multipage.mistie -e '(mistie-main \"file.doc\")'") (p "Alternatively, a new combination format file can be written that loads other format files.  E.g., the following format file " (tt "basic.mistie") "  combines within itself the effects of " (tt "plain.mistie") ", " (tt "scmhilit.mistie") ", and " (tt "multipage.mistie") ":") (highlight scheme "; File: basic.mistie\n\n(mistie-load \"plain.mistie\") ;or use `load' with full pathnames\n(mistie-load \"scmhilit.mistie\")\n(mistie-load \"multipage.mistie\")") (p "It is invoked in the usual manner:") (pre " csi -R mistie basic.mistie -e '(mistie-main \"file.doc\")'") (p "Note that the format file " (tt "multipage.mistie") " creates a set of " (tt ".html") " files whose names are based on the name of the input document.  Therefore, when using this format file, whether explicitly or implicitly, redirection of standard input or standard output is inappropriate.") (p "The name Mistie stands for " (i "Markup In Scheme That Is Extensible") ". Possible pronunciations are " (i "miss-tea") " and " (i "miss-tie") ".") (section 4 "Writing Mistie formats" (def (sig (procedure "(mistie-def-char CHAR OUTPUT-PROC)" (id mistie-def-char))) (p "A typical intent of a format file is to cause certain characters in the input document to trigger non-trivial changes in the output document. E.g., if the output is to be HTML, we'd like the characters " (tt "<") ", " (tt ">") ", " (tt "&") ", and " (tt "\"") "  in the input to come out as " (tt "&lt;") ", " (tt "&gt;") ", " (tt "&amp;") ", and " (tt "&quot;") ", respectively.") (p "The Mistie procedure " (tt "mistie-def-char") " can be used for this:") (highlight scheme "(mistie-def-char #\\< \n  (lambda ()\n    (display \"&lt;\")))\n\n(mistie-def-char #\\> \n  (lambda ()\n    (display \"&gt;\")))\n\n(mistie-def-char #\\& \n  (lambda ()\n    (display \"&amp;\")))\n\n(mistie-def-char #\\\" \n  (lambda ()\n    (display \"&quot;\")))") (p (tt "mistie-def-char") " takes two arguments:  The first is the character that is defined, and the second is the procedure associated with it.  Here, the procedure writes the HTML encoded version of the character.") (p "Suppose we want a contiguous sequence of blank lines to be come out as the paragraph separator, " (tt "<p>") ".  We could " (tt "mistie-def-char") " the newline character as follows:") (highlight scheme "(mistie-def-char #\\newline\n  (lambda ()\n    (newline)\n    (let* ((s (h-read-whitespace))\n           (n (h-number-of-newlines s)))\n      (if (> n 0)\n          (begin (display \"<p>\")\n            (newline) (newline))\n          (display s)))))") (p "This will cause newline to read up all the following whitespace, and then check to see how many further newlines it picked up.  If there was at least one, it outputs the paragraph separator, viz., " (tt "<p>") " followed by two newlines (added for human readability).  Otherwise, it merely prints the picked up whitespace as is.") (p "The help procedures " (tt "h-read-whitespace") " and " (tt "h-number-of-newlines") " in the code above are ordinary Scheme procedures:") (highlight scheme "(define h-read-whitespace\n  (lambda ()\n    (let loop ((r '()))\n      (let ((c (peek-char)))\n        (if (or (eof-object? c) (not (char-whitespace? c)))\n            (list->string (reverse r))\n            (loop (cons (read-char) r)))))))\n\n(define h-number-of-newlines\n  (lambda (ws)\n    (let ((n (string-length ws)))\n      (let loop ((i 0) (k 0))\n        (if (>= i n) k\n            (loop (+ i 1)\n              (if (char=? (string-ref ws i) #\\newline)\n                  (+ k 1) k)))))))")) (section 5 "Control sequences" (def (sig (procedure "(mistie-def-ctl-seq SEQ WRITER)" (id mistie-def-ctl-seq))) (p "This Mistie procedure defines " (i "control sequences") ". A control sequence is a sequence of letters (alphabetic characters), and is invoked in the input document by prefixing the sequence with an " (i "escape character") ". The case of the letters is insignificant.") (p (tt "mistie-def-ctl-seq") " associates a procedure with a control sequence -- when the control sequence " (tt "SEQ") " occurs in the input document, it causes the procedure " (tt "WRITER") " to be applied.") (p "The following defines the control sequence " (tt "br") ", which emits the HTML tag " (tt "<br>") ":") (highlight scheme "(mistie-def-ctl-seq 'br\n  (lambda ()\n    (display \"<br>\")))") (p "Before a control sequence can be used, we must fix the escape character.  The following sets it to backslash:") (highlight scheme "(set! mistie-escape-char #\\\\)") (p "We can now invoke the " (tt "br") " control sequence as " (tt "\\br") ".")) (def (sig (parameter "mistie-escape-char" (id mistie-escape-char))) (p "Not a true SRFI-39 parameter, but a regular variable which you can " (tt "set!") " to a value.  The value of this variable determines what character causes the string following it to be interpreted as a control sequence."))) (section 5 "Frames" (p "However, we can do better and get automatic line breaks with a more powerful control sequence.  Let's say text between " (tt "\\obeylines") " and " (tt "\\endobeylines") " should have automatic line breaks.  We define the control sequences " (tt "obeylines") " and " (tt "endobeylines") " as follows:") (highlight scheme "(mistie-def-ctl-seq 'obeylines\n  (lambda ()\n    (mistie-push-frame)\n    (mistie-def-char #\\newline\n      (lambda ()\n        (display \"<br>\")\n        (newline)))\n\n    (mistie-def-ctl-seq 'endobeylines\n      (lambda ()\n        (mistie-pop-frame)))))") (p "The " (tt "obeylines") " control sequence first pushes a new frame on to the Mistie environment, using the Mistie procedure " (tt "mistie-push-frame") ".") (def (sig (procedure "(mistie-push-frame)" (id mistie-push-frame))) (p "This Mistie procedure causes any definitions (whether " (tt "mistie-def-char") " or " (tt "mistie-def-ctl-seq") ") to shadow existing definitions.")) (def (sig (procedure "(mistie-pop-frame)" (id mistie-pop-frame))) (p "This Mistie procedure exits the frame entered by the most recent call to " (tt "mistie-push-frame") ", causing the older definitions to take effect again.") (p "In this case, we create a shadowing " (tt "mistie-def-char") " for newline, so that it will emit " (tt "<br>") " instead of performing its default action (which, as we described above, was to look for paragraph separation). We also define a control sequence " (tt "endobeylines") " which will pop the frame pushed by " (tt "obeylines") ".  With this definition in place, any text sandwiched between " (tt "\\obeylines") " and " (tt "\\endobeylines") " (assuming " (tt "\\") " is the escape character) will be output with a " (tt "<br>") " at the end of each of its lines."))) (section 5 "Calling Scheme from within the document" (p "We can define a control sequence " (tt "eval") " that will allow the input document to explicitly evaluate Scheme expressions, without having to put them all in a format file.") (highlight scheme "(mistie-def-ctl-seq 'eval\n  (lambda ()\n    (eval (read))))") (p "This will cause " (tt "\\eval") " followed by a Scheme expression to evaluate that Scheme expression.") (p "E.g.,") (pre " \\eval (display (+ 21 21))") (p "will cause " (tt "42") " to be printed at the point where the " (tt "\\eval") "  statement is placed.  Of course, once you have arbitrary access to Scheme within your document, the amount of kooky intertextual stuff you can do is limited only by your imagination.  A mundane use for " (tt "\\eval") " is to  reset the escape character at arbitrary locations in the document, should the existing character be needed (temporarily or permanently) for something else."))) (section 4 "Utilities" (def (sig (procedure "(mistie-load FILENAME ...)" (id mistie-load))) (p "This procedure loads a " (tt ".mistie") " file. It will search the working directory and the directory given in the parameter " (tt "mistie-path") ".")) (def (sig (parameter "(mistie-path PATH)" (id mistie-path))) (p "This defines the path which mistie will search when you issue a call to " (tt "mistie-load") ".  It defaults to the value of " (tt "(repository-path)") ", the path where " (tt "chicken-setup") " will install the initially provided " (tt ".mistie") " files.")) (def (sig (procedure "(mistie-main [FILENAME])" (id mistie-main))) (p "This procedure will invoke the filtering process."))) (section 4 "Sample format files" (p "Several example format files are included in the Mistie distribution.   They are:") (section 5 (tt "plain.mistie") (p (tt "plain.mistie") " is a basic format file.  It specifies a minimal markup that produces HTML.  Example usage:") (pre " mistie.scm -f plain.mistie input.doc > input.html") (p (tt "plain") " converts the characters " (tt "<") ", " (tt ">") ", " (tt "&") ", and " (tt "\"") " to their HTML encodings.  One or more blank lines are treated as paragraph separation.") (p (tt "plain") " also provides a small set of control sequences geared for manual writing.  The default escape character is " (tt "\\") " (backslash).  Typically, " (i "arguments") " of " (tt "plain") "'s control sequences are specified within braces ({...}), as in TeX or LaTeX.") (p (tt "\\i") "  typesets its argument in italic.  E.g.,") (pre " \\i{italic}") (p "produces " (i "italic") ".  Other control sequences in this vein are " (tt "\\b") " for bold and " (tt "\\small") " for small print.") (p (tt "\\p") " puts its argument in monospace fixed font and is used for program code.  If it is not convenient to enclose " (tt "\\p") "'s argument in braces (e.g., the enclosed code contains non-matching braces), then the argument may be specified by the placing the same character on each side.   (This is like LaTeX's " (tt "\\verb") ".)  Another useful feature of the " (tt "\\p") " control sequence:  If its argument starts with a newline, it is displayed with the linebreaks preserved.") (p "Use " (tt "\\title") " for specifying a document's title, which is used as both the internal title and the external (bookmarkable) title.") (pre " \\stylesheet{file.css}") (p "causes the resulting HTML file to use the file " (tt "file.css") " as its style sheet.  A sample style sheet " (tt "mistie.css") " is included in the distribution.") (p (tt "\\section") ", " (tt "\\subsection") ", " (tt "\\subsubsection") " produce numbered section headers of the appropriate depth.") (p (tt "\\section*") ", etc., produce unnumbered sections.") (pre " \\urlh{URL}{TEXT}") (p "typesets TEXT as a link to URL.") (pre " \\obeylines{...}") (p "preserves linebreaks for its argument. Note that this is dissimilar in call, though not in function, to TeX's") (pre " {\\obeylines ...}") (p (tt "\\flushright") " is like " (tt "\\obeylines") ", but sets its argument lines flush right.") (pre " \\input FILE") (p "or") (pre " \\input{FILE}") (p "includes the contents of " (tt "FILE") ".") (p (tt "\\eval") " evaluates the following Scheme expression.")) (section 5 (tt "footnote.mistie") (p "This format supplies the " (tt "\\footnote") " control sequence, which makes a footnote out of its (brace-delimited) argument.  Footnotes are numbered from 1, and the footnote text is placed on the bottom of the same page as the footnote call.")) (section 5 (tt "scmhilit.mistie") (p "This format provides the " (tt "\\q") " control sequence which is used exactly like " (tt "\\p") ", except that it syntax-highlights the enclosed code. (" (tt "q") " is " (tt "p") " with a twist.)") (p "Used for Scheme and Common Lisp code.") (p (tt "scmhilit") "  distinguishes between syntactic keywords (i.e., special forms and macros), user-defined constants, variables, booleans, characters, numbers, strings, comments, and background punctuation.  You can add your own keywords and constants with " (tt "\\scmkeyword") " and " (tt "\\scmconstant") ",") (p "e.g.,") (pre " \\scmkeyword (prog1 block)\n \\scmconstant (true false)") (p "A style sheet (see " (tt "plain.mistie") ") is used to set the colors.  The style sheet " (tt "mistie.css") ", provided with this distribution, has the following " (i "style class") " settings:") (highlight css ".scheme {\n  color: brown;\n}\n\n.scheme .keyword {\n  color: #cc0000;\n  font-weight: bold;\n}\n\n.scheme .variable {\n  color: navy;\n}\n\n.scheme .number,.string,.char,.boolean,.constant {\n  color: green;\n}\n\n.scheme .comment {\n  color: teal;\n}") (p "The class " (tt ".scheme") " specifies the background punctuation style, and the various subclasses -- " (tt ".keyword") ", " (tt ".variable") ", etc. -- specify the styles for the various syntactic categories.  Note that we have combined the subclasses for numbers, strings, etc., into one, but you can separate them out if you want to distinguish between them.") (p "You may wish to modify these settings for your documents.  Additionally, there are browser-specific ways you can use to override the settings of other authors' documents.")) (section 5 (tt "multipage.mistie") (p "This format provides the " (tt "\\pagebreak") " control sequence, which causes a fresh HTML page to used for subsequent text.  The names of the HTML pages depend on the name of the input file, which means that standard input/output redirection on Mistie doesn't make sense when using this format.") (p "Navigation bars at the bottom allow the user to travel across the pages.")) (section 5 (tt "xref.mistie") (p "This provides LaTeX-like cross-references.") (pre " \\label{LABEL}") (p "associates " (tt "LABEL") " with the nearest section (or footnote) number.") (pre " \\ref{LABEL}") (p "rints the number associated with " (tt "LABEL") ".") (pre " \\bibitem") (p "can be used to enumerate bibliographic entries.") (pre " \\cite{BIBKEY}") (p "points to the entry introduced by") (pre " \\bibitem{BIBKEY}") (p (tt "\\cite") "'s argument can list multiple keys, with comma as the separator.")) (section 5 (tt "timestamp.mistie") (p "This prints the date of last modification at the bottom of the (first) page.")))) (section 3 "Changelog" (ul (li "1.0 Initial release"))) (section 3 "License" (pre " Copyright (c) 2006, Dorai Sitaram.  All rights reserved.\n \n Permission is hereby granted, free of charge, to any person obtaining a\n copy of this software and associated documentation files (the Software),\n to deal in the Software without restriction, including without limitation\n the rights to use, copy, modify, merge, publish, distribute, sublicense,\n and/or sell copies of the Software, and to permit persons to whom the\n Software is furnished to do so, subject to the following conditions:\n \n The above copyright notice and this permission notice shall be included\n in all copies or substantial portions of the Software.\n \n THE SOFTWARE IS PROVIDED ASIS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\n OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n OTHER DEALINGS IN THE SOFTWARE."))))
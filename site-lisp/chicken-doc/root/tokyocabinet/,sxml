((section 2 "tokyocabinet" (toc) (section 3 "Description" (p (link "http://tokyocabinet.sourceforge.net/index.html" "Tokyo Cabinet DBM") " bindings for Chicken.")) (section 3 "Author" (p (int-link "Alex Shinn"))) (section 3 "Requirements" (p "None")) (section 3 "Documentation" (p "The following flags and procedures are defined (currently only the hash database API is provided - B-trees and fixed-length databases may be provided later). For more information, consult the " (tt "tokyocabinet(3)") " manual pages.") (section 4 "tc-hdb-open" (def (sig (procedure "(tc-hdb-open FILE #!key FLAGS TUNE-OPTS MUTEX? NUM-BUCKETS RECORD-ALIGNMENT NUM-FREE-BLOCKS CACHE-LIMIT MMAP-SIZE)" (id tc-hdb-open))) (p "Returns a " (tt "HDB") " object as a c-pointer.  FLAGS specifies creation and locking behavior; by default files are opened for reading (TC_HDBOREADER), writing (TC_HDBOWRITER) and creating (TC_HDBOCREAT).") (p "TUNE-OPTS, along with the other keywords specify options to the " (tt "tchdbtune") " function.  MUTEX? opens the file under mutex mode (as with " (tt "tchdbsetmutex") ").")) (def (sig (constant "TC_HDBOWRITER" (id TC_HDBOWRITER)) (constant "TC_HDBOREADER" (id TC_HDBOREADER)) (constant "TC_HDBOCREAT" (id TC_HDBOCREAT)) (constant "TC_HDBOTRUNC" (id TC_HDBOTRUNC)) (constant "TC_HDBONOLCK" (id TC_HDBONOLCK)) (constant "TC_HDBOLCKNB" (id TC_HDBOLCKNB))) (p "These flags to " (tt "tc-hdb-open") " specify creation and locking behavior."))) (section 4 "tc-hdb-close" (def (sig (procedure "(tc-hdb-close HDB)" (id tc-hdb-close))) (p "Closes and frees the database handle."))) (section 4 "tc-hdb-put!" (def (sig (procedure "(tc-hdb-put! HDB KEY VALUE)" (id tc-hdb-put!))) (p "Put (KEY, VALUE) into hash database HDB."))) (section 4 "tc-hdb-delete!" (def (sig (procedure "(tc-hdb-delete! HDB KEY)" (id tc-hdb-delete!))) (p "Delete KEY from hash database HDB."))) (section 4 "tc-hdb-get" (def (sig (procedure "(tc-hdb-get HDB KEY)" (id tc-hdb-get))) (p "Returns the string VALUE associated with KEY in hash database HDB, or " (tt "#f") " if KEY does not exist."))) (section 4 "tc-hdb-iter-init" (def (sig (procedure "(tc-hdb-iter-init HDB)" (id tc-hdb-iter-init))))) (section 4 "tc-hdb-iter-next" (def (sig (procedure "(tc-hdb-iter-next HDB)" (id tc-hdb-iter-next))) (p "Returns a " (tt "STRING")))) (section 4 "tc-hdb-fold" (def (sig (procedure "(tc-hdb-fold HDB KONS KNIL)" (id tc-hdb-fold))) (p "Returns the accumulated result.  Specify " (tt "ALIST-CONS") " for the " (tt "KONS") " to get an alist representation of the database.")))) (section 3 "Limitations" (p "Procedures which accept or return strings, such as " (int-link "#tc-hdb-get" "tc-hdb-get") " and " (int-link "#tc-hdb-put" "tc-hdb-put") ", are subject to the maximum string length limit imposed by Chicken.  On 32-bit platforms, this is 16 megabytes.  On a 64-bit platform, it is 72 petabytes.  If you try to store or retrieve objects exceeding this limit, an error will occur.")) (section 3 "Changelog" (ul (li "1.0 Initial release"))) (section 3 "License" (pre " Copyright (c) 2008, Alex Shinn\n All rights reserved.\n \n Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following\n conditions are met:\n \n   Redistributions of source code must retain the above copyright notice, this list of conditions and the following\n     disclaimer. \n   Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following\n     disclaimer in the documentation and/or other materials provided with the distribution. \n   Neither the name of the author nor the names of its contributors may be used to endorse or promote\n     products derived from this software without specific prior written permission. \n \n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS\n OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY\n AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR\n CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n POSSIBILITY OF SUCH DAMAGE."))))
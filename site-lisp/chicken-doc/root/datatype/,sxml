((tags "egg") (section 2 "datatype" (toc) (section 3 "Description" (p "A facility for creating and using variant records, as described in the book \"Essentials of Programming Languages\" by Friedman, Wand and Haynes.")) (section 3 "Author" (p (int-link "/users/felix winkelmann" "felix winkelmann"))) (section 3 "Requirements" (p "None")) (section 3 "Documentation" (def (sig (syntax "(define-datatype TYPENAME [PREDICATE] VARIANT ...)" (id define-datatype))) (p "Defines a record type named " (tt "TYPENAME") ", where " (tt "VARIANT ...") " defines one or more constructors for instances of this type. " (tt "VARIANT") " should be of the form") (pre " VARIANT = (CONSTRUCTOR (FIELDNAME FIELDPRED) ...)") (p (tt "CONSTRUCTOR") " is the name of a constructor procedure that will be defined with as many arguments as fields are specified. " (tt "(FIELDNAME FIELDPRED) ...") " specify the name for each field and a procedure of one argment that should return a true value for legal field values.") (p "The optional " (tt "PREDICATE") " should be the name of a procedure that will be defined and which returns " (tt "#t") " when applied to an instance of this variant record.")) (def (sig (syntax "(cases TYPENAME EXP CLAUSE ...)" (id cases))) (p "A facility for matching and deconstructing the instance " (tt "EXP") " of the variant record with the name " (tt "TYPENAME") ". Each " (tt "CLAUSE") " specifies a constructor with field-names and a body to execute when the constructor matches the record instance:") (pre " CLAUSE = (CONSTRUCTOR (FIELDNAME ...) BODY ...)\n        | (else BODY ...)")) (section 4 "Example" (highlight scheme "; A simple binary tree with numbers:\n\n(require-for-syntax 'datatype)\n\n(define-datatype tree tree?\n  (leaf (n number?))\n  (branch (left tree?) (right tree?)) )\n\n(define t (branch (branch (leaf 33) (leaf 44)) (leaf 55)))\n\n(define (listify t)\n  (cases tree t\n    (leaf (n) n)\n    (branch (left right) (cons (listify left) (listify right))) ) )\n\n(listify t)\n => ((33 . 44) . 55)"))) (section 3 "Changelog" (ul (li "1.3 Uses fixnum operators internally") (li "1.2 Added missing " (tt "datatype.html") " [Thanks to Ivan Raikov]") (li "1.1 Adapted to new setup scheme") (li "1.0"))) (section 3 "License" (pre " Copyright (c) 2003-2010, Felix L. Winkelmann\n All rights reserved.\n \n Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following\n conditions are met:\n \n   Redistributions of source code must retain the above copyright notice, this list of conditions and the following\n     disclaimer. \n   Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following\n     disclaimer in the documentation and/or other materials provided with the distribution. \n   Neither the name of the author nor the names of its contributors may be used to endorse or promote\n     products derived from this software without specific prior written permission. \n \n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS\n OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY\n AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR\n CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n POSSIBILITY OF SUCH DAMAGE."))))
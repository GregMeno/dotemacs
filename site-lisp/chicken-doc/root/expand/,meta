(type unit)
(signature "Unit expand")
(timestamp 1284450063.0)
(sxml ((tags "manual") (toc) (section 2 "Unit expand" (p "This unit has support for syntax- and module handling. This unit is used by default, unless the program is compiled with the " (tt "-explicit-use") " option.") (section 3 "Macros" (section 4 "get-line-number" (def (sig (procedure "(get-line-number EXPR)" (id get-line-number))) (p "If " (tt "EXPR") " is a pair with the car being a symbol, and line-number information is available for this expression, then this procedure returns the associated source file and line number as a string. If line-number information is not available, then " (tt "#f") " is returned. Note that line-number information for expressions is only available in the compiler."))) (section 4 "expand" (def (sig (procedure "(expand X)" (id expand))) (p "If " (tt "X") " is a macro-form, expand the macro (and repeat expansion until expression is a non-macro form).  Returns the resulting expression."))) (section 4 "syntax-error" (def (sig (procedure "(syntax-error [LOCATION] MESSAGE ARGUMENT ...)" (id syntax-error))) (p "Signals an exception of the kind " (tt "(exn syntax)") ". Otherwise identical to " (tt "error") "."))) (section 4 "er-macro-transformer" (def (sig (procedure "(er-macro-transformer TRANSFORMER)" (id er-macro-transformer))) (p "This procedure does nothing and is available for writing low-level macros in a more portable fashion, without hard-coding the signature of a transformer procedure.")) (hr) (p "Previous: " (int-link "Unit library")) (p "Next: " (int-link "Unit data-structures")))))))

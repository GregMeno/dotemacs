((toc) (tags "egg") (section 3 "Introduction" (p "Very efficient generic functions over arbitrary types.")) (section 3 "Documentation" (section 4 "define-generic" (def (sig (syntax "(define-generic (NAME ARGUMENT ...) BODY ...)" (id define-generic))) (p "Defines a generic function with the given name, specialized to argument-types as described by " (tt "ARGUMENT ...") ". " (tt "ARGUMENT") " should be either a symbol or a list of the form " (tt "(TYPE SYMBOL)") " where a symbol is equivalent to " (tt "(any SYMBOL)") ".") (p "Calls to " (tt "NAME") " textually following this generic definition will be dispatched to the first registered generic with this name that matches the types of the arguments given in the procedure call."))) (section 4 "define-type" (def (sig (syntax "(define-type TYPENAME PREDICATE [BASETYPE])" (id define-type))) (p "Defines a named type for objects that satisfy " (tt "PREDICATE") " (a procedure of one argument that returns either true or false). If " (tt "BASETYPE") " is given, it designates the parent type of " (tt "TYPENAME") ". Thus types may form a hierarchy. If " (tt "BASETYPE") " is not given, " (tt "any") " is assumed.") (p "The predicate should be referentially transparent and not cause any side- effects."))) (section 4 "any" (pre " [type] any") (p "The universal base type for objects that satisfy " (tt "any?") ", that is, all objects."))) (section 3 "Restrictions" (ul (li "Generic functions can be exported but type-information and -specialization is not visible outside of the current compilation unit or module (if inside a module).") (li "Calls to generic functions dispatch according to the generic definitions that occur textually before the call, so it is advisable to define all specializations of generic functions first before defining code that calls them.") (li "Generic functions may not return multiple values and do not accept optional, keyword or rest-arguments.") (li "All type-dispatching is done at the call-site of a generic function, which provides many opportunities for the compiler to optimize, but may lead to code-bloat if generic functions with long argument lists are used heavily."))) (section 3 "More information" (p "The author of the original implementation describes the implementation of an older version of this code in a paper that can be found " (link "http://chicken.kitten-technologies.co.uk/svn/release/4/fast-generic/doc/p45-tessman.pdf" "here") ".")) (section 3 "Author" (p "Thant Tessman, ported to CHICKEN by " (int-link "/users/felix winkelmann" "felix"))) (section 3 "License" (pre "Copyright (c) Thant Tessman\nAll rights reserved.") (pre "Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following\nconditions are met:") (pre "  Redistributions of source code must retain the above copyright notice, this list of conditions and the following\n    disclaimer. \n  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following\n    disclaimer in the documentation and/or other materials provided with the distribution. \n  Neither the name of the author nor the names of its contributors may be used to endorse or promote\n    products derived from this software without specific prior written permission. ") (pre "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS\nOR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR\nCONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\nCONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\nOTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.")) (section 3 "Version History" (dl (dt "0.4") (dd "fixed broken result check and testcases") (dt "0.3") (dd "slight dispatch optimization; basetype argument to " (tt "define-type") " wasnÄt quoted") (dt "0.1") (dd "initial release"))))
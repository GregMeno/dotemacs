((tags "eggs" "s11n" "php" "php-s11n") (toc) (section 2 "PHP serialization" (p "This egg provides serialization/unserialization of Scheme values in a format compatible with the ubiquitous " (link "http://php.net/" "PHP") " scripting language. This can be useful for communicating with PHP applications (such as the popular " (link "http://drupal.org/" "Drupal") " or WordPress) over a socket or HTTP connection, or for directly reading and writing existing serialized PHP application data in files or DBMS columns.") (section 3 "Data types" (p "PHP's " (link "http://es.php.net/manual/en/language.types.php" "native data types") " are rather limited, meaning that only some of the basic Scheme types can be serialized into and from this format. Scheme values are mapped to PHP equivalents (or substitutes) as follows:") (table (tr "\n" (th "Scheme") "\n" (th "PHP") "\n") "\n" (tr "\n" (td "void") "\n" (td (link "http://php.net/manual/en/language.types.null.php" "NULL")) "\n") "\n" (tr "\n" (td "boolean") "\n" (td (link "http://php.net/manual/en/language.types.boolean.php" "boolean")) "\n") "\n" (tr "\n" (td "integer") "\n" (td (link "http://php.net/manual/en/language.types.integer.php" "integer") " (platform-dependent, but assume 32-bit signed)") "\n") "\n" (tr "\n" (td "flonum") "\n" (td (link "http://php.net/manual/en/language.types.float.php" "float") " (platform-dependent, but assume 64-bit double precision)") "\n") "\n" (tr "\n" (td "string") "\n" (td (link "http://php.net/manual/en/language.types.string.php" "string")) "\n") "\n" (tr "\n" (td "character") "\n" (td "string") "\n") "\n" (tr "\n" (td "symbol") "\n" (td "string") "\n") "\n" (tr "\n" (td "vector") "\n" (td (link "http://php.net/manual/en/language.types.array.php" "array") " (contiguous numerical indexing from 0..n-1)") "\n") "\n" (tr "\n" (td "alist") "\n" (td (link "http://php.net/manual/en/language.types.array.php" "array") " (associative, numeric or string keys)") "\n") "\n" (tr "\n" (td "hash-table") "\n" (td "array (associative, numeric or string keys)") "\n") "\n" (tr "\n" (td "N/A") "\n" (td (link "http://php.net/manual/en/language.types.object.php" "object")) "\n")) (p "As the table above demonstrates, Scheme types such as characters and symbols must be coerced into strings since PHP lacks the requisite equivalent types, and Scheme's numeric types may be truncated or lose precision when serialized into PHP format. In other words, PHP's native types form a minimal subset of Scheme's, so while unserializing PHP data in Scheme will always work, you have to be mindful when serializing out of Scheme.") (p "Special consideration is due PHP's arrays. In PHP, there are no distinct indexed and associative array types; instead, there is a single array type, which can contain both integer and string indices. This means PHP's arrays are actually ordered maps of keys to values, and can serve both as vectors and as hash tables depending on what you put into them.") (p "There is also a special caveat in that while keys can be integers and strings both, those strings which can be read as integers are automagically coerced into a numeric type (e.g. \"7\" becomes 7). " (tt "php-s11n-write") " follows this behavior so as to produce output as identical as possible to what PHP's native " (tt "serialize()") " function would spew out.") (p "The obvious Scheme equivalent to PHP's associative arrays is the association list (i.e., lists of the form " (tt "((k1 . v1) (k2 . v2) ...)") "), which is what " (tt "php-s11n-read") " will return by default when unserializing a PHP array.") (p "There is one exception to the above: if all the indices of the array being unserialized are numerical and form a contiguous range from 0..n-1, then the PHP array will be returned as a Scheme vector. This allows dealing with vector-like PHP arrays in a half-way sane manner. As " (tt "php-s11n-write") " also takes care to serialize Scheme vectors into PHP arrays indexed using this very same method, it follows that a read-write equivalence holds for Scheme vectors.") (p "If this default behavior is undesirable, array handling in the serialization and unserialization process can be fully customized and extended through the parameters " (tt "php-s11n-writer") " and " (tt "php-s11n-array-reader") ". (See the Examples section, below.)") (p "Not wishing to be tied into any particular add-on object system for Scheme, this egg does not by default handle serialization and unserialization of PHP " (link "http://php.net/manual/en/language.types.object.php" "object types") ". Attempting to unserialize a PHP object will raise an error. However, the parameters " (tt "php-s11n-writer") " and " (tt "php-s11n-object-reader") " allow you to bolt on application-specific object type support in a seamless and facile manner.")) (section 3 "Examples" (section 4 "Serializing to PHP format" (highlight scheme "\n#;1> (use php-s11n)\n\n#;2> (php-serialize #t)\n\"b:1;\"\n\n#;3> (php-serialize 3.1415)\n\"d:3.1415;\"\n\n#;4> (php-serialize '#(\"a\" \"b\" \"c\"))\n\"a:3:{i:0;s:1:\\\"a\\\";i:1;s:1:\\\"b\\\";i:2;s:1:\\\"c\\\";}\"\n\n#;5> (php-serialize '((first_name . \"Random\") (last_name . \"Hacker\")))\n\"a:2:{s:10:\\\"first_name\\\";s:6:\\\"Random\\\";s:9:\\\"last_name\\\";s:6:\\\"Hacker\\\";}\"\n\n#;6> (php-serialize (void))\n\"N;\"\n")) (section 4 "Unserializing from PHP format" (highlight scheme "\n#;1> (use php-s11n)\n\n#;2> (php-unserialize \"a:3:{i:1;s:1:\\\"a\\\";i:2;s:1:\\\"b\\\";i:3;s:1:\\\"c\\\";}\")\n((1 . \"a\") (2 . \"b\") (3 . \"c\"))\n\n#;3> (php-unserialize (php-serialize '((a . orange) (b . banana) (c . apple))))\n((\"a\" . \"orange\") (\"b\" . \"banana\") (\"c\" . \"apple\"))\n\n#;4> (php-unserialize (php-serialize '#(1 2 3 5 8 13 21 34)))\n#(1 2 3 5 8 13 21 34)\n")) (section 4 "Mapping PHP associative arrays to Scheme key-value lists" (p "Because the interpretation of PHP's " (link "http://php.net/manual/en/language.types.array.php" "associative arrays") " can be ambigious and application-dependent, the " (tt "php-s11n") " egg provides a number of parameters for hooking into and extending the serialization/unserialization process.") (p "As an example of how to use this, say that you wanted to represent associative arrays using key-value lists as provided by the " (int-link "kvlists") " egg. First, you would define a custom writer and reader as follows:") (highlight scheme "\n(use php-s11n kvlists)\n\n(define (php-s11n-write-array/kvlist value port)\n  (if (kvlist? value)\n      (php-s11n-write (kvlist->alist value))\n      (error 'php-s11n-write \"unable to serialize object\" value)))\n\n(define (php-s11n-read-array/kvlist port)\n  (alist->kvlist (map (lambda (pair)\n                        (cons (string->symbol (->string (car pair)))\n                              (cdr pair)))\n                      (php-s11n-read-array/alist port))))\n\n(php-s11n-writer php-s11n-write-array/kvlist)\n(php-s11n-array-reader php-s11n-read-array/kvlist)\n") (p "Now, after loading the above code, you could use key-value lists like follows:") (highlight scheme "\n#;1> (php-unserialize (php-serialize '(a: orange b: banana c: apple)))\n(a: \"orange\" b: \"banana\" c: \"apple\")\n"))) (section 3 "Author" (p (int-link "/users/arto-bendiken" "Arto Bendiken"))) (section 3 "Requires" (ul (li (int-link "regex-literals") " (compile-time only)"))) (section 3 "Serialization and unserialization" (section 4 "php-serialize" (def (sig (procedure "(php-serialize VALUE)" (id php-serialize))) (p "Returns a string containing the serialized PHP representation of the Scheme value " (tt "VALUE") ". This is a convenience wrapper around " (tt "php-s11n-write") ", the latter doing all the actual work."))) (section 4 "php-unserialize" (def (sig (procedure "(php-unserialize STRING)" (id php-unserialize))) (p "Reads a serialized PHP literal from " (tt "STRING") " and returns it as a Scheme value. This is a convenience wrapper around " (tt "php-s11n-read") ", the latter doing all the actual work.")))) (section 3 "Parameters" (section 4 "php-s11n-writer" (def (sig (parameter "php-s11n-writer" (id php-s11n-writer))) (p "Sets the procedure to call for serializing any Scheme values not included in the default data type mappings built into the " (tt "php-s11n") " egg. The procedure will be invoked with two arguments, " (tt "VALUE") " and " (tt "PORT") ".") (p "The parameter defaults to " (tt "#f") ", raising an error when trying to serialize an unsupported data type."))) (section 4 "php-s11n-reader" (def (sig (parameter "php-s11n-reader" (id php-s11n-reader))) (p "Sets a procedure to call for unserializing any unknown data types encountered in the input. The procedure will be invoked with one argument, " (tt "PORT") ". Note that you should never need to handle this case unless PHP's serialization format substantially changes.") (p "The parameter defaults to " (tt "#f") ", raising an error if the serialized input contains unknown data type specifiers."))) (section 4 "php-s11n-array-reader" (def (sig (parameter "php-s11n-array-reader" (id php-s11n-array-reader))) (p "Sets a procedure to call for unserializing any PHP array encountered in the input. The procedure will be invoked with one argument, " (tt "PORT") ".") (p "The parameter defaults to " (tt "php-s11n-read-array") "."))) (section 4 "php-s11n-object-reader" (def (sig (parameter "php-s11n-object-reader" (id php-s11n-object-reader))) (p "Sets a procedure to call for unserializing any PHP object encountered in the input. The procedure will be invoked with one argument, " (tt "PORT") ".") (p "The parameter defaults to " (tt "php-s11n-read-object") ".")))) (section 3 "Output" (section 4 "php-s11n-write" (def (sig (procedure "(php-s11n-write VALUE [PORT])" (id php-s11n-write))) (p "Writes a serialized PHP representation of " (tt "VALUE") " to " (tt "PORT") ", which defaults to the value of " (tt "(current-output-port)") ".")))) (section 3 "Input" (section 4 "php-s11n-read" (def (sig (procedure "(php-s11n-read [PORT])" (id php-s11n-read))) (p "Reads a serialized PHP literal from " (tt "PORT") " and returns it as a Scheme value. " (tt "PORT") " defaults to the value of " (tt "(current-input-port)") "."))) (section 4 "php-s11n-read-null" (def (sig (procedure "(php-s11n-read-null PORT)" (id php-s11n-read-null))) (p "Reads a serialized PHP " (tt "NULL") " literal from " (tt "PORT") ", returning " (tt "(void)") "."))) (section 4 "php-s11n-read-boolean" (def (sig (procedure "(php-s11n-read-boolean PORT)" (id php-s11n-read-boolean))) (p "Reads a serialized PHP boolean literal from " (tt "PORT") ", returning " (tt "#t") " or " (tt "#f") "."))) (section 4 "php-s11n-read-integer" (def (sig (procedure "(php-s11n-read-integer PORT)" (id php-s11n-read-integer))) (p "Reads a serialized PHP integer literal from " (tt "PORT") ", returning a Scheme integer. The string representation of the integer is converted to a number using " (tt "string->number") "."))) (section 4 "php-s11n-read-float" (def (sig (procedure "(php-s11n-read-float PORT)" (id php-s11n-read-float))) (p "Reads a serialized PHP float literal from " (tt "PORT") ", returning a Scheme flonum or the value " (tt "+nan") ". The string representation of the integer is converted to a number using " (tt "string->number") "."))) (section 4 "php-s11n-read-string" (def (sig (procedure "(php-s11n-read-string PORT)" (id php-s11n-read-string))) (p "Reads a serialized PHP string literal from " (tt "PORT") ", returning a Scheme string."))) (section 4 "php-s11n-read-array" (def (sig (procedure "(php-s11n-read-array PORT)" (id php-s11n-read-array))) (p "Reads a serialized PHP array from " (tt "PORT") ", returning either a Scheme vector or association list."))) (section 4 "php-s11n-read-array/alist" (def (sig (procedure "(php-s11n-read-array/alist PORT)" (id php-s11n-read-array/alist))) (p "Reads a serialized PHP associative array from " (tt "PORT") ", returning a Scheme association list."))) (section 4 "php-s11n-read-array/hash-table" (def (sig (procedure "(php-s11n-read-array/hash-table PORT)" (id php-s11n-read-array/hash-table))) (p "Reads a serialized PHP associative array from " (tt "PORT") ", returning a " (link "http://srfi.schemers.org/srfi-69/" "SRFI-69") " hash table object."))) (section 4 "php-s11n-read-object" (def (sig (procedure "(php-s11n-read-object PORT)" (id php-s11n-read-object))) (p "Reads a serialized PHP object from " (tt "PORT") ", raising an error. Use the parameter " (tt "php-s11n-object-reader") " to override this functionality if you need to unserialize PHP object types.")))) (section 3 "License" (pre " Copyright (c) 2006-2007 Arto Bendiken.\n \n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to\n deal in the Software without restriction, including without limitation the\n rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n sell copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n \n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n \n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n IN THE SOFTWARE.")) (section 3 "Version history" (dl (dt "1.0.0") (dd "Initial release of the " (tt "php-s11n") " egg.")))))
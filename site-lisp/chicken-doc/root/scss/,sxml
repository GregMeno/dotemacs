((tags "egg") (section 2 "scss" (toc) (section 3 "Description" (p "An implementation of the s-expression based CSS notation SCSS. It slightly modifies and extends the original implementation of the " (link "http://celtic.benderweb.net/webit/" "WebIt!") " (site seems defunct) framework.")) (section 3 "Author" (p (int-link "/users/moritz-heidkamp" "Moritz Heidkamp"))) (section 3 "Documentation" (p "Only the emitter side is implemented at the moment.") (section 4 "Syntax" (pre "stylesheet ::= (css <import-clause>* <rule>+)\n\nimport-clause ::= (import <string>)\n\nrule ::= (<complex-selector> <declaration>+)\n\ncomplex-selector ::= <single-selector> |\n                     <grouping-selector>\n\nsimple-selector ::= <symbol> |\n                    (= class <symbol>) |\n                    (= class <simple-selector> <symbol>) |\n                    (= pclass <symbol>) |\n                    (= pclass <simple-selector> <symbol>) |\n                    (= id <symbol>) |\n                    (= id <simple-selector> <symbol>)\n\npath-selector ::= (<combinator> <single-selector>+)\n\ncombinator ::= // | + | >\n\nsingle-selector ::= <simple-selector> |\n                    <path-selector>\n\ngrouping-selector ::= (<single-selector>+)\n\ndeclaration ::= (<symbol> <scheme-expression>) |\n                (! (<symbol> <scheme-expression>))") (p "Alternatively the following extended syntax dubbed " (i "SCSS Plus") " is available:") (pre "stylesheet ::= (css+ <import-clause>* <rule>+)\n\nimport-clause ::= (import <string>)\n\nrule ::= (<complex-selector> [<declaration> | <nested-rule>]+)\n\nnested-rule ::= (<path-selector> [<declaration> | <nested-rule>]+)\n\ncomplex-selector ::= <single-selector> |\n                     <grouping-selector>\n\nsimple-selector ::= <symbol> |\n                    (= class <symbol>) |\n                    (= class <simple-selector> <symbol>) |\n                    (= pclass <symbol>) |\n                    (= pclass <simple-selector> <symbol>) |\n                    (= id <symbol>) |\n                    (= id <simple-selector> <symbol>)\n\npath-selector ::= (<combinator> <single-selector>+)\n\ncombinator ::= // | + | > | &\n\nsingle-selector ::= <simple-selector> |\n                    <path-selector>\n\ngrouping-selector ::= (<single-selector>+)\n\ndeclaration ::= (<symbol> <scheme-expression>) |\n                (! (<symbol> <scheme-expression>))") (p "The two differences are that you can nest rules which results in much more compact stylesheets as well as use the " (tt "&") " combinator which will concatenate nested selectors.")) (section 4 "Emitter" (def (sig (procedure "(scss->css scss [port])" (id scss->css))) (p "Write the CSS translation of " (tt "scss") " (which is a list following the syntax described under " (int-link "#syntax" "Syntax") ") to " (tt "port") "."))) (section 4 "scss2css" (p (tt "scss2css") " is a program that is installed with this egg. It takes a file name argument which should contain an SCSS document. If no file name is given it will read from standard input instead. The document will be " (tt "read") " and " (tt "eval") "ed. The result of that is passed to " (tt "scss->css") " which in turn writes the resulting CSS to standard output. When the " (tt "-n") " option is passed the document won't be " (tt "eval") "ed."))) (section 3 "Examples" (section 4 "Basic " (highlight scheme "(scss->css '(css (p (text-align center))))") (p "=>") (highlight css "p { text-align: center } ")) (section 4 "More Complex" (highlight scheme "(scss->css '(css (((= class p note) (+ p p))\n                  (font-style italic)\n                  (background-color \"#ccc\"))\n                 (|#content| \n                  (width 100em))))") (p "=>") (highlight css "p.note, p + p { font-style: italic; background-color: #ccc }\n#content { width: 100em }")) (section 4 "SCSS Plus" (highlight scheme "(scss->css '(css+ ((= id main)\n                   (display block)\n                   ((// p)\n                    (font-size 1em)\n                    ((& .error)\n                     (! (color red)))))))") (p "=>") (highlight css "#main { display: block }\n#main p { font-size: 1em }\n#main p.error { color: red !important }"))) (section 3 "License" (pre " Copyright (c) 2010, Moritz Heidkamp\n All rights reserved.\n \n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n \n 1. Redistributions of source code must retain the above copyright\n    notice, this list of conditions and the following disclaimer.\n \n 2. Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in the\n    documentation and/or other materials provided with the distribution.\n \n 3. Neither the name of the <organization> nor the\n    names of its contributors may be used to endorse or promote products\n    derived from this software without specific prior written permission.\n \n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."))))
(index ("graph->ssa-graph" 0) ("graph-ssa-find-joins" 211))
(def (sig (procedure "graph->ssa-graph:: G -> SSA-GRAPH" (id graph->ssa-graph))) (p "Computes the dominance frontiers of the nodes in the graph, and returns the list of nodes augmented with this information."))
(def (sig (procedure "graph-ssa-find-joins:: SSA-GRAPH -> NODES" (id graph-ssa-find-joins))) (p "Given a list of SSA nodes, returns the list of nodes " (tt "N") " for which there are (at least) two paths " (tt "... N_0 M_0 ... M_i N") " and " (tt " ... N_1 P_0 ... P_j N") " such that " (tt "N_0") " and " (tt "N_1") " are distinct members of " (tt "NODES") " and the M's and P's are disjoint sets."))

(index ("make-progress-bar" 0) ("progress-bar?" 709) ("progress-bar-value" 886) ("show-progress-bar" 1163) ("advance-progress-bar!" 1288) ("make-spinner" 1521) ("spinner?" 1913) ("advance-spinner!" 2075) ("finish-spinner!" 2212))
(def (sig (procedure "(make-progress-bar #!key fill empty head frame value max width port end-message)" (id make-progress-bar))) (p "Creates an object representing a progress-bar. The keyword arguments customize the appearance of the progress-bar, when it is shown and default to the following values:") (table (tr (td (tt "fill")) (td (tt "#\\="))) "\n" (tr (td (tt "empty")) (td (tt "#\\space"))) "\n" (tr (td (tt "head")) (td (tt "#\\>"))) "\n" (tr (td (tt "frame")) (td (tt "\"[~a~a~a~a|~a]\""))) "\n" (tr (td (tt "max")) (td (tt "100"))) "\n" (tr (td (tt "width")) (td (tt "60"))) "\n" (tr (td (tt "port")) (td (tt "(current-output-port)"))) "\n" (tr (td (tt "end-message")) (td (tt "\" finished\"")))))
(def (sig (procedure "(progress-bar? X)" (id progress-bar?))) (p "Returns " (tt "#t") " if " (tt "X") " is an object representing a progress-bar, or " (tt "#f") " otherwise."))
(def (sig (procedure "(progress-bar-value PBAR)" (id progress-bar-value))) (p "Returns the current value of the given progress bar. You can also use SRFI-17 \"setter\" syntax to modify the current value (causing a redisplay):") (pre " (set! (progress-bar-value PBAR) VALUE)"))
(def (sig (procedure "(show-progress-bar PBAR)" (id show-progress-bar))) (p "Redisplays the progress-bar " (tt "PBAR") "."))
(def (sig (procedure "(advance-progress-bar! PBAR [AMOUNT])" (id advance-progress-bar!))) (p "Increases the current value of the progress-bar " (tt "PBAR") " by " (tt "AMOUNT") ", which defaults to " (tt "1") " and redisplays it."))
(def (sig (procedure "(make-spinner #!key value port steps)" (id make-spinner))) (p "Creates an object representing a \"spinner\" progress-indicator.  The keyword arguments customize the appearance of the progress-bar, when it is shown and default to the following values:") (table (tr (td (tt "steps")) (td (tt "\"|/-\\\\\""))) "\n" (tr (td (tt "port")) (td (tt "(current-output-port)")))))
(def (sig (procedure "(spinner? X)" (id spinner?))) (p "Returns " (tt "#t") " if " (tt "X") " is an object representing a spinner, or " (tt "#f") " otherwise."))
(def (sig (procedure "(advance-spinner! SPINNER)" (id advance-spinner!))) (p "Advances the given spinner by 1 step and redisplays it."))
(def (sig (procedure "(finish-spinner! SPINNER)" (id finish-spinner!))) (p "Clears the spinner. It should not be used after this procedure has been called."))

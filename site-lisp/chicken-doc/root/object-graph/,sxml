((tags "egg") (section 2 "object-graph" (p "Graph description generator for graphs of arbitrary Scheme objects.") (toc)) (section 2 "Usage" (p "(require-extension object-graph)")) (section 2 "Documentation" (p "The " (tt "object-graph") " library is a graph generator that accepts Scheme objects as nodes, and produces descriptions for the " (link "http://tulip.labri.fr/T" "Tulip") " and " (int-link "GraphViz" "http://www.graphviz.org/") " graph visualization frameworks. It is based on the " (tt "bouquet") " Common Lisp package by Eugene Zaikonnikov.") (p (tt "object-graph") " maintains the nodes and edges of the current graph instance in Chicken parameters that are manipulated via the procedures in this library. These procedures are destructive; they implicitly modify the current graph instance.") (p "The node representation of a Scheme object in the graph is computed by first obtaining its string representation with " (tt "->string") " and then by computing the hash of the string. The hash value is used as the node number in the graph.") (p "The above means that by default all instances of a record type will have the same node representation, because they have the same string representation. In those cases, you must use " (tt "define-record-printer") " to create distinct representations of distinct record instances.") (section 3 "Library procedures" (section 4 "Graph construction" (def (sig (procedure "reset-graph:: UNDEFINED -> UNDEFINED" (id reset-graph))) (p "Resets the current graph instance and sets the lists of nodes and edges to empty lists.")) (def (sig (procedure "register-node:: OBJECT -> NODE" (id register-node))) (p "Creates node instance and associates it with the given object. Returns the newly constructed node instance.")) (def (sig (procedure "register-node-unless-exists:: OBJECT -> NODE" (id register-node-unless-exists))) (p "Registers the given node only if it does not already exist in the graph.")) (def (sig (procedure "register-edge:: FROM-OBJECT TO-OBJECT -> EDGE" (id register-edge))) (p "Registers a directed edge between " (tt "FROM") " and " (tt "TO") ", and returns the resulting edge."))) (section 4 "Node and edge lookup operations" (def (sig (procedure "assoc-node:: NODE -> (HASH . NODE) " (id assoc-node))) (p "Looks up a node in the current graph instance and if found, returns a pair containing the hash value associated with this node, and the node instance. If not found, returns " (tt "#f") ".")) (def (sig (procedure "lookup-node:: NODE -> NODE  " (id lookup-node))) (p "Looks up a node in the current graph instance and if found, returns the node instance.")) (def (sig (procedure "lookup-object-node:: OBJECT -> NODE  " (id lookup-object-node))) (p "Given an object, computes its hash, looks up that hash value in the current graph instance and if found, returns the corresponding node instance.")) (def (sig (procedure "assoc-edge:: EDGE -> EDGE  " (id assoc-edge))) (p "Looks up an edge in the current graph instance and if found, returns a pair containing the hash value associated with this edge, and the edge instance. If not found, returns " (tt "#f") ".")) (def (sig (procedure "lookup-edge:: FROM TO -> EDGE  " (id lookup-edge))) (p "Given objects or node instances " (tt "FROM") " and " (tt "TO") ", looks up the corresponding edge in the graph and if found, returns the edge instance, " (tt "#f") " otherwise."))) (section 4 "Cluster operations" (def (sig (procedure "new-cluster:: NAME [nodes: NODE-LIST] [edges: EDGE-LIST] [subclusters: CLUSTER-LIST] -> CLUSTER" (id new-cluster))) (p "Creates a new cluster instance in the current graph. The optional arguments can be used to supply a list of nodes, edges and subclusters that belong to this cluster. Returns the newly created cluster instance.")) (def (sig (procedure "add-to-cluster:: CLUSTER OBJECT -> OBJECT  " (id add-to-cluster))) (p "Adds a node or an edge to the given cluster instance. If the given object is not a node or an edge instance, its hash is computed, and a new node is added to the graph and the cluster.")) (def (sig (procedure "lookup-cluster:: NAME -> CLUSTER  " (id lookup-cluster))) (p "Looks up the given cluster name in the current graph and if found, returns the cluster instance, " (tt "#f") " otherwise."))) (section 4 "Operations with node and edge properties" (def (sig (procedure "new-property:: NAME TYPE CLUSTER [nodes-default: VALUE] [edges-default: VALUE] -> PROPERTY  " (id new-property))) (p "Registers a new property type in the current graph instance. " (tt "TYPE") " is currently a Tulip property type, such as " (b "string") " or " (b "size") ". The optional arguments can be used to supply default values for this type of property. The default values are currently only used by the Tulip renderer.")) (def (sig (procedure "set-node-property:: PROPERTY NODE VALUE -> PROPERTY  " (id set-node-property)))) (def (sig (procedure "set-edge-property:: PROPERTY EDGE VALUE -> PROPERTY  " (id set-edge-property)))) (def (sig (procedure "reset-property:: PROPERTY -> PROPERTY " (id reset-property)))) (def (sig (procedure "set-label:: OBJECT VALUE -> PROPERTY  " (id set-label)))) (def (sig (procedure "label:: OBJECT -> LABEL  " (id label)))) (def (sig (procedure "lookup-property:: NAME -> PROPERTY  " (id lookup-property)))) (def (sig (procedure "lookup-node-property:: NAME NODE -> PROPERTY  " (id lookup-node-property)))) (def (sig (procedure "lookup-edge-property:: NAME EDGE -> PROPERTY " (id lookup-edge-property))))) (section 4 "Graph rendering" (def (sig (procedure "render-graph/tlp:: PORT -> UNDEFINED " (id render-graph/tlp))) (p "Outputs a textual description of the current graph in Tulip TLP format.")) (def (sig (procedure "render-graph/dot:: PORT -> UNDEFINED " (id render-graph/dot))) (p "Outputs a textual description of the current graph in GraphViz DOT format."))))) (section 2 "Examples" (pre "(use object-graph)\n\n(reset-graph)\n(register-node 'a)\n(set-label 'a \"Start\")") (pre "(register-node 'b)\n(register-node 'c)\n(set-label 'c \"Finish\")\n\n\n(register-edge 'a 'b)\n(set-label (register-edge 'b 'c) \"woo oho\")\n\n(register-edge 'b 'c)\n\n(new-cluster \"sniff\" \n      nodes: (list (lookup-object-node 'a) (lookup-object-node 'c)) \n      edges: (list (lookup-edge 'b 'c)))\n \n(new-cluster \"puff\")\n \n(add-to-cluster (lookup-cluster \"puff\") (lookup-object-node 'a))\n(add-to-cluster (lookup-cluster \"puff\") (lookup-object-node 'b))\n \n(with-output-to-file \"test.tlp\"\n  (lambda () (render-graph/tlp (current-output-port))))")) (section 2 "About this egg" (section 3 "Author" (p (int-link "/users/ivan-raikov" "Ivan Raikov"))) (section 3 "Version history" (dl (dt "1.0") (dd "Initial release"))) (section 3 "License" (pre "Copyright 2010 Ivan Raikov and the Okinawa Institute of Science and Technology\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or (at\nyour option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nGeneral Public License for more details.\n\nA full copy of the GPL license can be found at\n<http://www.gnu.org/licenses/>."))))
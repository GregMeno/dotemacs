(index ("reset-graph" 0) ("register-node" 174) ("register-node-unless-exists" 364) ("register-edge" 547) ("assoc-node" 745) ("lookup-node" 1017) ("lookup-object-node" 1182) ("assoc-edge" 1422) ("lookup-edge" 1687) ("new-cluster" 1946) ("add-to-cluster" 2301) ("lookup-cluster" 2582) ("new-property" 2791) ("set-node-property" 3244) ("set-edge-property" 3347) ("reset-property" 3450) ("set-label" 3535) ("label" 3615) ("lookup-property" 3678) ("lookup-node-property" 3762) ("lookup-edge-property" 3861) ("render-graph/tlp" 3959) ("render-graph/dot" 4123))
(def (sig (procedure "reset-graph:: UNDEFINED -> UNDEFINED" (id reset-graph))) (p "Resets the current graph instance and sets the lists of nodes and edges to empty lists."))
(def (sig (procedure "register-node:: OBJECT -> NODE" (id register-node))) (p "Creates node instance and associates it with the given object. Returns the newly constructed node instance."))
(def (sig (procedure "register-node-unless-exists:: OBJECT -> NODE" (id register-node-unless-exists))) (p "Registers the given node only if it does not already exist in the graph."))
(def (sig (procedure "register-edge:: FROM-OBJECT TO-OBJECT -> EDGE" (id register-edge))) (p "Registers a directed edge between " (tt "FROM") " and " (tt "TO") ", and returns the resulting edge."))
(def (sig (procedure "assoc-node:: NODE -> (HASH . NODE) " (id assoc-node))) (p "Looks up a node in the current graph instance and if found, returns a pair containing the hash value associated with this node, and the node instance. If not found, returns " (tt "#f") "."))
(def (sig (procedure "lookup-node:: NODE -> NODE  " (id lookup-node))) (p "Looks up a node in the current graph instance and if found, returns the node instance."))
(def (sig (procedure "lookup-object-node:: OBJECT -> NODE  " (id lookup-object-node))) (p "Given an object, computes its hash, looks up that hash value in the current graph instance and if found, returns the corresponding node instance."))
(def (sig (procedure "assoc-edge:: EDGE -> EDGE  " (id assoc-edge))) (p "Looks up an edge in the current graph instance and if found, returns a pair containing the hash value associated with this edge, and the edge instance. If not found, returns " (tt "#f") "."))
(def (sig (procedure "lookup-edge:: FROM TO -> EDGE  " (id lookup-edge))) (p "Given objects or node instances " (tt "FROM") " and " (tt "TO") ", looks up the corresponding edge in the graph and if found, returns the edge instance, " (tt "#f") " otherwise."))
(def (sig (procedure "new-cluster:: NAME [nodes: NODE-LIST] [edges: EDGE-LIST] [subclusters: CLUSTER-LIST] -> CLUSTER" (id new-cluster))) (p "Creates a new cluster instance in the current graph. The optional arguments can be used to supply a list of nodes, edges and subclusters that belong to this cluster. Returns the newly created cluster instance."))
(def (sig (procedure "add-to-cluster:: CLUSTER OBJECT -> OBJECT  " (id add-to-cluster))) (p "Adds a node or an edge to the given cluster instance. If the given object is not a node or an edge instance, its hash is computed, and a new node is added to the graph and the cluster."))
(def (sig (procedure "lookup-cluster:: NAME -> CLUSTER  " (id lookup-cluster))) (p "Looks up the given cluster name in the current graph and if found, returns the cluster instance, " (tt "#f") " otherwise."))
(def (sig (procedure "new-property:: NAME TYPE CLUSTER [nodes-default: VALUE] [edges-default: VALUE] -> PROPERTY  " (id new-property))) (p "Registers a new property type in the current graph instance. " (tt "TYPE") " is currently a Tulip property type, such as " (b "string") " or " (b "size") ". The optional arguments can be used to supply default values for this type of property. The default values are currently only used by the Tulip renderer."))
(def (sig (procedure "set-node-property:: PROPERTY NODE VALUE -> PROPERTY  " (id set-node-property))))
(def (sig (procedure "set-edge-property:: PROPERTY EDGE VALUE -> PROPERTY  " (id set-edge-property))))
(def (sig (procedure "reset-property:: PROPERTY -> PROPERTY " (id reset-property))))
(def (sig (procedure "set-label:: OBJECT VALUE -> PROPERTY  " (id set-label))))
(def (sig (procedure "label:: OBJECT -> LABEL  " (id label))))
(def (sig (procedure "lookup-property:: NAME -> PROPERTY  " (id lookup-property))))
(def (sig (procedure "lookup-node-property:: NAME NODE -> PROPERTY  " (id lookup-node-property))))
(def (sig (procedure "lookup-edge-property:: NAME EDGE -> PROPERTY " (id lookup-edge-property))))
(def (sig (procedure "render-graph/tlp:: PORT -> UNDEFINED " (id render-graph/tlp))) (p "Outputs a textual description of the current graph in Tulip TLP format."))
(def (sig (procedure "render-graph/dot:: PORT -> UNDEFINED " (id render-graph/dot))) (p "Outputs a textual description of the current graph in GraphViz DOT format."))

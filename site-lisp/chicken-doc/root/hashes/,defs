(index ("*" 0) ("HASH" 175) ("HASH" 438) ("make-TWUserMixHash-primitive-procedure" 579) ("make-TWUserMixHash" 1025) ("current-hash-seed" 1239) ("make-fixnum-bounded-hash" 1404) ("make-bounded-hash" 1857) ("make-seeded-hash" 2294) ("make-mask-hash" 2542) ("make-range-hash" 2730) ("make-real-hash" 3041) ("make-hash-procedure" 3270) ("make-hash-message-digest-procedures" 3589) ("make-range-restriction" 3841) ("make-fixnum-range-restriction" 4157) ("unsigned-integer32-ref" 4544) ("unsigned-integer32-set!" 4851) ("make-rabin-karp-string-search" 5158))
(def (sig (procedure "(*{{HASH}} STRING LENGTH SEED) => unsigned-integer32" (id *))) (p "Returns the hash of " (tt "STRING") " of " (tt "LENGTH") ", using " (tt "SEED") "."))
(def (sig (procedure "({{HASH}} STRING [LENGTH [SEED]]) => unsigned-integer32" (id HASH))) (p "Returns the hash of " (tt "STRING") ". When " (tt "LENGTH") " is missing (string-length " (tt "STRING") ") is assumed. When " (tt "SEED") " is missing 0 is assumed."))
(def (sig (procedure "({{HASH}}-primitive) => message-digest-primitive" (id HASH))) (p "Returns the hash message-digest-primitive object."))
(def (sig (procedure "(make-TWUserMixHash-primitive-procedure MIXER [UNSAFE #f]) => procedure" (id make-TWUserMixHash-primitive-procedure))) (p "Returns a hash primitive procedure, " (tt "(procedure (scheme-object unsigned-integer32 unsigned-integer32) unsigned-integer32)") ", for the procedure " (tt "MIXER") ", " (tt "(procedure (unsigned-integer32) unsigned-integer32)") ".") (p "When " (tt "UNSAFE") " no exception checking is performed."))
(def (sig (procedure "(make-TWUserMixHash MIXER [UNSAFE #f]) => (procedure procedure procedure)" (id make-TWUserMixHash))) (p "Returns 3 values: " (tt "*HASH") ", " (tt "HASH") ", and " (tt "HASH-primitive") "."))
(def (sig (parameter "(current-hash-seed [NEW-SEED]) => integer" (id current-hash-seed))) (p "Gets or sets the current default hash seed. The initial value is 0."))
(def (sig (procedure "(make-fixnum-bounded-hash HASH [GETLEN string-length] [GETINT 0]) => procedure" (id make-fixnum-bounded-hash))) (p "Returns a hash function with a SRFI-69 signature, but with a fixnum domain; i.e. " (tt "(procedure (* #!optional positive-fixnum) fixnum)") ".") (p "The " (tt "GETLEN") " will be used to aquire the " (tt "OBJECT") " length for the " (tt "HASH") ".") (p "The " (tt "GETINT") " will supply the initial hash value."))
(def (sig (procedure "(make-bounded-hash HASH [GETLEN string-length] [GETINT 0]) => procedure" (id make-bounded-hash))) (p "Returns a hash function with a SRFI-69 signature, but with a real domain; i.e. " (tt "(procedure (* #!optional positive-number) number)") ".") (p "The " (tt "GETLEN") " will be used to aquire the " (tt "OBJECT") " length for the " (tt "HASH") ".") (p "The " (tt "GETINT") " will supply the initial hash value."))
(def (sig (procedure "(make-seeded-hash HASH [SEED]) => procedure" (id make-seeded-hash))) (p "Returns a curried " (tt "HASH") " of 1 or 2 arguments with the supplied " (tt "SEED") ". When the seed is missing the (current-hash-seed) is assumed."))
(def (sig (procedure "(make-mask-hash HASH MASK) => procedure" (id make-mask-hash))) (p "Returns a " (tt "HASH") " with the hash value bitwise and'ed with the supplied " (tt "MASK") "."))
(def (sig (procedure "(make-range-hash HASH UPPER [LOWER]) => procedure" (id make-range-hash))) (p "Returns a " (tt "HASH") " with the hash value restricted to the supplied exact interval, " (tt "[LOWER UPPER]") ". When " (tt "LOWER") " is missing 0 is assumed. The signature is that of the " (tt "HASH") "."))
(def (sig (procedure "(make-real-hash HASH) => procedure" (id make-real-hash))) (p "Returns a " (tt "HASH") " with the hash value restricted to the interval, " (tt "[0.0 1.0]") ". The signature is that of the " (tt "HASH") "."))
(def (sig (procedure "(make-hash-procedure HASH-PRIM [BYTE-LENGTH string-length]) => procedure" (id make-hash-procedure))) (p "Returns a hash procedure, " (tt "(procedure (scheme-object #!optional unsigned-integer32 unsigned-integer32) unsigned-integer32)") ", for the hash primitive procedure " (tt "HASH-PRIM") "."))
(def (sig (procedure "(make-hash-message-digest-procedures HASH-PRIM) => message-digest-primitive" (id make-hash-message-digest-procedures))) (p "Returns the " (tt "message-digest-primitive") " for the hash primitive procedure " (tt "HASH-PRIM") "."))
(def (sig (procedure "(make-range-restriction UPPER [LOWER]) => procedure" (id make-range-restriction))) (p "Returns a procedure of 1 argument, " (tt "(procedure (number) number)") ". The arguments will be swapped if necessary so the range is " (tt "[LOWER UPPER]") ". When " (tt "LOWER") " missing 0 is assumed."))
(def (sig (procedure "(make-fixnum-range-restriction UPPER [LOWER]) => procedure" (id make-fixnum-range-restriction))) (p "Returns a procedure of 1 argument, " (tt "(procedure (number) fixnum)") ". The arguments will be swapped if necessary so the range is " (tt "[LOWER UPPER]") ". When " (tt "LOWER") " missing 0 is assumed.") (p (tt "LOWER") " & {UPPER} must be " (tt "fixnum") "."))
(def (sig (procedure "(unsigned-integer32-ref OBJECT [INDEX])" (id unsigned-integer32-ref))) (p "Returns the 32-bits at " (tt "INDEX") " from " (tt "OBJECT") " as an unsigned-integer32. " (tt "INDEX") " defaults to " (tt "0") ".") (p (tt "INDEX") " is a " (i "word") " index, not a " (i "byte") " index."))
(def (sig (procedure "(unsigned-integer32-set! OBJECT NUMBER [INDEX])" (id unsigned-integer32-set!))) (p "Sets the 32-bits at " (tt "INDEX") " in " (tt "OBJECT") " to " (tt "NUMBER") ". " (tt "INDEX") " defaults to " (tt "0") ".") (p (tt "INDEX") " is a " (i "word") " index, not a " (i "byte") " index."))
(def (sig (procedure "(make-rabin-karp-string-search SUBSTRINGS [TEST [HASH]])" (id make-rabin-karp-string-search))) (p "Returns a procedure of one argument, the search string, and two optional arguments, the start and end positions within the string. The search procedure returns a list of the matched substring and a list of the start and end positions of the match in the search string. Returns #f when no match found. Similar to the regex unit string-match procedure.") (p (tt "SUBSTRINGS") " is a list of strings. " (tt "TEST") " is an equivalence procedure. " (tt "HASH") " is a SRFI-69 compliant hash procedure."))

((tags "egg") (section 2 "hashes" (p "Miscellaneous Hash Functions") (toc)) (section 2 "Documentation" (p "A suite of hash procedures. All have the same signature. All return hash values in an unsigned 32-bit range. Not a one of these is suitable for cryptographic work!") (p "The " (tt "HASH") " name refers to one of the hash algorithm names below.") (section 4 "Usage" (highlight scheme "(require-extension {{HASH}})")) (section 4 "Signatures" (def (sig (procedure "(*{{HASH}} STRING LENGTH SEED) => unsigned-integer32" (id *))) (p "Returns the hash of " (tt "STRING") " of " (tt "LENGTH") ", using " (tt "SEED") ".")) (def (sig (procedure "({{HASH}} STRING [LENGTH [SEED]]) => unsigned-integer32" (id HASH))) (p "Returns the hash of " (tt "STRING") ". When " (tt "LENGTH") " is missing (string-length " (tt "STRING") ") is assumed. When " (tt "SEED") " is missing 0 is assumed.")) (def (sig (procedure "({{HASH}}-primitive) => message-digest-primitive" (id HASH))) (p "Returns the hash message-digest-primitive object."))) (section 3 "Hash Procedures" (dl (dt (tt "HASH")) (dd "Description.") (dt "RJMXHash") (dd "Bob Jenkins' MIX Lookup 2 hash function.") (dt "RJL3Hash") (dd "Bob Jenkins' MIX Lookup 3 hash function.") (dt "TWMXHash") (dd "Thomas Wang's hash function with original MIX.") (dt "TWSHMXHash") (dd "Thomas Wang's hash function with shift MIX.") (dt "TWSHMLMXHash") (dd "Thomas Wang's hash function with shift-multiply MIX.") (dt "TWMGMXHash") (dd "Thomas Wang's hash function with Magic MIX.") (dt "FNVHash") (dd "Fowler/Noll/Vo 1 hash function. Substitutes the algorithm's initial value when the " (tt "SEED") " is non-zero.") (dt "FNVAHash") (dd "Fowler/Noll/Vo 1a hash function. Substitutes the algorithm's initial value when the " (tt "SEED") " is non-zero.") (dt "PHSFHash") (dd "Paul Hsieh's SuperFast hash function. Substitutes the algorithm's initial value when the " (tt "SEED") " is non-zero.") (dt "RSHash") (dd "Robert Sedgwick's \"Algorithms in C\" hash function.") (dt "JSHash") (dd "A bitwise hash function written by Justin Sobel. Ignores the " (tt "SEED") " when 0.") (dt "PJWHash") (dd "Hash algorithm is based on work by Peter J. Weinberger of AT&T Bell Labs.") (dt "ELFHash") (dd "Similar to the PJW Hash function, but tweaked for 32-bit processors. It's the hash function widely used on most UNIX systems.") (dt "BKDRHash") (dd "This hash function comes from Brian Kernighan and Dennis Ritchie's book \"The C Programming Language\". It is a simple hash function using a strange set of possible seeds which all constitute a pattern of 31....31...31 etc, it seems to be very similar to the DJB hash function") (dt "SDBMHash") (dd "This is the algorithm of choice which is used in the open source SDBM project. The hash function seems to have a good over-all distribution for many different data sets. It seems to work well in situations where there is a high variance in the MSBs of the elements in a data set.") (dt "DJBHash") (dd "An algorithm produced by Professor Daniel J. Bernstein and shown first to the world on the usenet newsgroup comp.lang.c. It is one of the most efficient hash functions ever published. Substitutes the algorithm's initial value when the " (tt "SEED") " is non-zero.") (dt "NDJBHash") (dd "Now favored by Bernstein. Substitutes the algorithm's initial value when the " (tt "SEED") " is non-zero.") (dt "DEKHash") (dd "An algorithm proposed by Donald E. Knuth in \"The Art Of Computer Programming, Volume 3\", under the topic of sorting and search chapter 6.4. Substitutes the algorithm's initial value when the " (tt "SEED") " is non-zero.") (dt "APHash") (dd "Arash Partow's hash function. A hybrid rotative and additive hash function algorithm based around four primes 3, 5, 7, and 11.") (dt "BRPHash") (dd "A hash function by Bruno R. Preiss.") (dt "PYHash") (dd "The Python String Object hash function.") (dt "ISPLHash") (dd "The ISpell hash function.") (dt "CRCHash") (dd "The crc32 procedure wrapped as above. Ignores the " (tt "SEED") " when 0."))) (section 3 "TWUserMixHash Procedures" (p "Thomas Wang's hash function with a user supplied MIX procedure.") (section 4 "Usage" (highlight scheme "(require-extension TWUserMixHash)")) (section 4 "make-TWUserMixHash-primitive-procedure" (def (sig (procedure "(make-TWUserMixHash-primitive-procedure MIXER [UNSAFE #f]) => procedure" (id make-TWUserMixHash-primitive-procedure))) (p "Returns a hash primitive procedure, " (tt "(procedure (scheme-object unsigned-integer32 unsigned-integer32) unsigned-integer32)") ", for the procedure " (tt "MIXER") ", " (tt "(procedure (unsigned-integer32) unsigned-integer32)") ".") (p "When " (tt "UNSAFE") " no exception checking is performed."))) (section 4 "make-TWUserMixHash" (def (sig (procedure "(make-TWUserMixHash MIXER [UNSAFE #f]) => (procedure procedure procedure)" (id make-TWUserMixHash))) (p "Returns 3 values: " (tt "*HASH") ", " (tt "HASH") ", and " (tt "HASH-primitive") ".")))) (section 3 "Hash Utilities" (p (i "Note") " the domain " (tt "number") " below means " (tt "flonum") " or " (tt "fixnum") ", not the full numeric tower.") (section 4 "Usage" (highlight scheme "(require-extension hash-utils)")) (section 4 "current-hash-seed" (def (sig (parameter "(current-hash-seed [NEW-SEED]) => integer" (id current-hash-seed))) (p "Gets or sets the current default hash seed. The initial value is 0."))) (section 4 "make-fixnum-bounded-hash" (def (sig (procedure "(make-fixnum-bounded-hash HASH [GETLEN string-length] [GETINT 0]) => procedure" (id make-fixnum-bounded-hash))) (p "Returns a hash function with a SRFI-69 signature, but with a fixnum domain; i.e. " (tt "(procedure (* #!optional positive-fixnum) fixnum)") ".") (p "The " (tt "GETLEN") " will be used to aquire the " (tt "OBJECT") " length for the " (tt "HASH") ".") (p "The " (tt "GETINT") " will supply the initial hash value."))) (section 4 "make-bounded-hash" (def (sig (procedure "(make-bounded-hash HASH [GETLEN string-length] [GETINT 0]) => procedure" (id make-bounded-hash))) (p "Returns a hash function with a SRFI-69 signature, but with a real domain; i.e. " (tt "(procedure (* #!optional positive-number) number)") ".") (p "The " (tt "GETLEN") " will be used to aquire the " (tt "OBJECT") " length for the " (tt "HASH") ".") (p "The " (tt "GETINT") " will supply the initial hash value."))) (section 4 "make-seeded-hash" (def (sig (procedure "(make-seeded-hash HASH [SEED]) => procedure" (id make-seeded-hash))) (p "Returns a curried " (tt "HASH") " of 1 or 2 arguments with the supplied " (tt "SEED") ". When the seed is missing the (current-hash-seed) is assumed."))) (section 4 "make-mask-hash" (def (sig (procedure "(make-mask-hash HASH MASK) => procedure" (id make-mask-hash))) (p "Returns a " (tt "HASH") " with the hash value bitwise and'ed with the supplied " (tt "MASK") "."))) (section 4 "make-range-hash" (def (sig (procedure "(make-range-hash HASH UPPER [LOWER]) => procedure" (id make-range-hash))) (p "Returns a " (tt "HASH") " with the hash value restricted to the supplied exact interval, " (tt "[LOWER UPPER]") ". When " (tt "LOWER") " is missing 0 is assumed. The signature is that of the " (tt "HASH") "."))) (section 4 "make-real-hash" (def (sig (procedure "(make-real-hash HASH) => procedure" (id make-real-hash))) (p "Returns a " (tt "HASH") " with the hash value restricted to the interval, " (tt "[0.0 1.0]") ". The signature is that of the " (tt "HASH") "."))) (section 4 "make-hash-procedure" (def (sig (procedure "(make-hash-procedure HASH-PRIM [BYTE-LENGTH string-length]) => procedure" (id make-hash-procedure))) (p "Returns a hash procedure, " (tt "(procedure (scheme-object #!optional unsigned-integer32 unsigned-integer32) unsigned-integer32)") ", for the hash primitive procedure " (tt "HASH-PRIM") "."))) (section 4 "make-hash-message-digest-primitive" (def (sig (procedure "(make-hash-message-digest-procedures HASH-PRIM) => message-digest-primitive" (id make-hash-message-digest-procedures))) (p "Returns the " (tt "message-digest-primitive") " for the hash primitive procedure " (tt "HASH-PRIM") "."))) (section 4 "make-range-restriction" (def (sig (procedure "(make-range-restriction UPPER [LOWER]) => procedure" (id make-range-restriction))) (p "Returns a procedure of 1 argument, " (tt "(procedure (number) number)") ". The arguments will be swapped if necessary so the range is " (tt "[LOWER UPPER]") ". When " (tt "LOWER") " missing 0 is assumed."))) (section 4 "make-fixnum-range-restriction" (def (sig (procedure "(make-fixnum-range-restriction UPPER [LOWER]) => procedure" (id make-fixnum-range-restriction))) (p "Returns a procedure of 1 argument, " (tt "(procedure (number) fixnum)") ". The arguments will be swapped if necessary so the range is " (tt "[LOWER UPPER]") ". When " (tt "LOWER") " missing 0 is assumed.") (p (tt "LOWER") " & {UPPER} must be " (tt "fixnum") "."))) (section 4 "unsigned-integer32-ref" (def (sig (procedure "(unsigned-integer32-ref OBJECT [INDEX])" (id unsigned-integer32-ref))) (p "Returns the 32-bits at " (tt "INDEX") " from " (tt "OBJECT") " as an unsigned-integer32. " (tt "INDEX") " defaults to " (tt "0") ".") (p (tt "INDEX") " is a " (i "word") " index, not a " (i "byte") " index."))) (section 4 "unsigned-integer32-set!" (def (sig (procedure "(unsigned-integer32-set! OBJECT NUMBER [INDEX])" (id unsigned-integer32-set!))) (p "Sets the 32-bits at " (tt "INDEX") " in " (tt "OBJECT") " to " (tt "NUMBER") ". " (tt "INDEX") " defaults to " (tt "0") ".") (p (tt "INDEX") " is a " (i "word") " index, not a " (i "byte") " index.")))) (section 3 "Hash Search")) (section 2 "Usage" (highlight scheme "(require-extension rabin-karp)") (section 4 "make-rabin-karp-string-search" (def (sig (procedure "(make-rabin-karp-string-search SUBSTRINGS [TEST [HASH]])" (id make-rabin-karp-string-search))) (p "Returns a procedure of one argument, the search string, and two optional arguments, the start and end positions within the string. The search procedure returns a list of the matched substring and a list of the start and end positions of the match in the search string. Returns #f when no match found. Similar to the regex unit string-match procedure.") (p (tt "SUBSTRINGS") " is a list of strings. " (tt "TEST") " is an equivalence procedure. " (tt "HASH") " is a SRFI-69 compliant hash procedure.")))) (section 2 "Requirements" (p (int-link "miscmacros") " " (int-link "moremacros") " " (int-link "message-digest") " " (int-link "box") " " (int-link "crc"))) (section 2 "Bugs and Limitations" (ul (li "The hash values are platform specific."))) (section 2 "Author" (p (int-link "/users/kon-lovett" "kon lovett"))) (section 2 "Version history" (dl (dt "1.1.0") (dd "Added optional index to " (tt "unsigned-integer32-ref") " & " (tt "unsigned-integer32-set!") ".") (dt "1.0.0") (dd "A Chicken 4 version of the Chicken 3 egg, with minor changes."))) (section 2 "License" (p "Copyright (C) 2010 Kon Lovett.  All rights reserved.") (p "Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the Software), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:") (p "The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.") (p "THE SOFTWARE IS PROVIDED ASIS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.")))
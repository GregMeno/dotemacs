((toc) (section 2 "Uri-dispatch" (section 3 "Introduction" (p "uri-dispatch is a simple mechanism to dispatch uris to procedures. This is useful for webprogramming where you might want to map uris of a certain kind to procedures that implement the logic for those uris.")) (section 3 "Examples" (highlight scheme "(use spiffy intarweb uri-common uri-dispatch)\n\n(define (my-dispatch-error . path)\n  (send-status 404 (sprintf \"My Dispatch-error ~A\" path)))\n\n(module example\n  (echo tabulate)\n  (import scheme chicken srfi-1 extras)\n  (require-library spiffy)\n  (import (only spiffy send-status))\n\n  (define (tabulate #!optional (start \"0\") (steps \"10\") #!rest rest)\n    (send-status 200 (sprintf \"tabulate called: ~A\" (iota (string->number steps) (string->number start)))))\n\n  (define (echo . args)\n    (send-status 200 (sprintf \"echo: ~A\" args))))\n\n(define (outsidemodule . args) (send-status 200 \"Outside module\")) \n\n(vhost-map `((\"localhost\" . ,(lambda (continue)\n                              (parameterize ((handle-not-found  (lambda (path) (dispatch-uri (request-uri (current-request)))))\n                                             (dispatch-error (lambda path (send-status 404 (sprintf \"Path not found: ~A\" path)))))\n                                (continue))))))\n(start-server)\n\n\n;;Now start the server and visit the following pages:\n;;* http://localhost:8080/example/tabulate/2/10/\n;;* http://localhost:8080/example/tabulate/2/20/\n;;* http://localhost:8080/example/echo/this/please\n;;* http://localhost:8080/outsidemodule\n;;* http://localhost:8080/i/do/not/exist")) (section 3 "Authors" (p (int-link "David Krentzlin"))) (section 3 "License" (pre "  Copyright (c) <2009> David Krentzlin <david@lisp-unleashed.de>\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation\n  files (the \"Software\"), to deal in the Software without\n  restriction, including without limitation the rights to use,\n  copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the\n  Software is furnished to do so, subject to the following\n  conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n  OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n  OTHER DEALINGS IN THE SOFTWARE.")) (section 3 "Requirements" (p "Requires the " (int-link "uri-common") " and " (int-link "environments") " extensions.")) (section 3 "Documentation" (def (sig (procedure "(dispatch-uri URI)" (id dispatch-uri))) (p "The main interface to dispatch-uri. This procedure invokes the dispatch-mechanism with the supplied uri. The dispatch-algorithm is implemented as follows:") (p "(" (b "Note") " See also the whitelisting-section, to learn how to limit the exposure of procdures)") (ul (li "The path is empty. It checks if " (b "default-dispatch-target") " is bound to a procedure. If it is, then it is invoked. If it is not, then " (b "dispatch-error") " is invoked.") (li "The path has exactly one element. It assumes that this element is the name of a thunk that was defined outside a module. If such a thunk exists it is invoked. If no such a thunk exists " (b "dispatch-error") ".is invoked.") (li "The path contains at least two elements. " (ul (li "It checks if the second element is a procedure defined in a module named by the first element. So if it sees (foo bar) it tries to find the procedure bar inside the module foo. If the procedure exists it is invoked with the rest of the elements as arguments.") (li "If it does not exist, it interpretes the first element as the name of a procedure that was defined outside any module. If such a procedure exists, it is invoked passing the rest of the elements as arguments. If no such procedure exists " (b "dispatch-error") " is invoked with the full path as arguments. The path is applied to the procedure so you can use for example dsssl-style lambda-lists to declare optional arguments or a rest-argument.")))) (p "All those lookups are done in the current " (b "dispatch-environment") ", which can be parameterized.")) (section 4 "Whitelisting " (p "Though nice for development it is not advisable to allow everybody out there to invoke abritary procedures of your application. So you might want to whitelist only those procedures that really acts as the interface of your application.") (p "To enable whitelisting you simply parameterize the " (b "whitelist") " parameter with your whitelisting-specification. If a procedure is requested that does exist but is not whitelisted " (b "dispatch-error") " is invoked.") (p (b "Whitelisting specification")) (p "The whitelist allows to selectivly whitelist procedures modules and procedures inside modules. The examples explain all three cases") (pre "(whitelist '(proc1 proc2 proc3)) ") (p "This will whitelist the procedures proc1..proc3. Those procedures must be defined outside a module.") (pre "(whitelist '((mod1 . (proc1 proc2))") (p "This will whitelist the procedures proc1 and proc2 that must reside inside the module mod1.") (pre "(whitelist '((mod1 . *))") (p "This will whitelist all procedures inside the module mod1.") (p "Of course you can mix those declarations.") (def (sig (parameter "whitelist" (id whitelist))) (p "The parameter holding the whitelist. It defaults to #f which means whitelisting is disabled.")) (def (sig (parameter "dispatch-error" (id dispatch-error))) (p "If no handler for a uri can be found, the dispatcher will invoke the procedure that dispatch-error is currently parameterized with. " (b "NOTE") " dispatch-error is also invoked if the requested handler exists but is not whitelisted. Defaults to (constantly #f).")) (def (sig (parameter "default-dispatch-target" (id default-dispatch-target))) (p "A thunk that is invoke when the uri-path was empty. If set to #f then an empty path leads to the invocation of dispatch-error. Defaults to #f.")) (def (sig (parameter "dispatch-environment" (id dispatch-environment))) (p "The environment that is used to lookup the procedures. It defaults to " (b "interaction-environment") ".")))) (section 3 "Versionhistory")))
((tags "egg") (section 2 "Linenoise" (toc) (section 3 "Description" (p "A minimal, zero-config, BSD licensed, readline replacement.") (p "From the " (link "http://github.com/antirez/linenoise/blob/master/README.markdown" "author's readme") ":") (p "Line editing with some support for history is a really important feature for command line utilities. Instead of retyping almost the same stuff again and again it's just much better to hit the up arrow and edit on syntax errors, or in order to try a slightly different command. But apparently code dealing with terminals is some sort of Black Magic: readline is 30k lines of code, libedit 20k. Is it reasonable to link small utilities to huge libraries just to get a minimal support for line editing?") (p "(...)") (ul (li "Linux text only console ($TERM = linux)") (li "Linux KDE terminal application ($TERM = xterm)") (li "Linux xterm ($TERM = xterm)") (li "Mac OS X iTerm ($TERM = xterm)") (li "Mac OS X default Terminal.app ($TERM = xterm)") (li "OpenBSD 4.5 through an OSX Terminal.app ($TERM = screen)") (li "IBM AIX 6.1") (li "FreeBSD xterm ($TERM = xterm)")) (p "This information has been collected on 2010-06-13.")) (section 3 "Author" (p "Salvatore Sanfilippo <antirez@gmail.com>, ported to chicken by " (int-link "/users/Christian Kellermann" "Christian Kellermann"))) (section 3 "Interface" (p "The library is very small and exposes three procedures:") (def (sig (procedure "(linenoise prompt)" (id linenoise))) (p "Prompts the user for a line of input. Returns the entered line as a string or #f if the user aborted.")) (def (sig (procedure "(history-add line)" (id history-add))) (p "Adds the string line to the internal history.")) (def (sig (procedure "(set-history-length! number)" (id set-history-length!))) (p "Sets the number of maximum entries in the history. Linenoise is initialised with 100 lines of history.")) (def (sig (procedure "(save-history-to-file filename)" (id save-history-to-file))) (p "Saves the current history buffer to filename.")) (def (sig (procedure "(load-history-from-file filename)" (id load-history-from-file))) (p "Loads the history from file.")) (def (sig (procedure "(make-linenoise-port)" (id make-linenoise-port))) (p "Returns an input port connected to a linenoise prompt. Useful for inserting it into CSI (see below)."))) (section 3 "Controls" (ul (li "arrow keys move the cursor, as well as ctrl-b, ctrl-f (back and forward), ctrl-p and ctrl-n (up / down)") (li "ctrl-d and enter will finish the input and a string containing the current line will be returned.") (li "ctrl-c aborts input and the linenoise procedure will return " (tt "#f")) (li "Deletion of one character is done by pressing backspace or ctrl-h") (li "ctrl-u deletes the whole line") (li "ctrl-k deletes from point (the cursor) to the end of the line") (li "ctrl-a moves to the beginning of the line") (li "ctrl-e moves to the end of the line") (li "ctrl-t permutes the char after the cursor with the one under the cursor"))) (section 3 "Currently missing features" (ul (li "No searching of history") (li "No deletion of whole words (ctrl-w)") (li "No tab completion"))) (section 3 "Example" (p "This example shows a minimal prompt loop echoing all user input:") (highlight scheme "(use linenoise)\n\n(set-history-length! 300)\n\n(load-history-from-file \".linenoise-history\")\n\n(let loop ((l (linenoise \"> \")))\n   (cond ((equal? l \"bye\")\n       (save-history-to-file \".linenoise-history\")\n       \"Bye!\")\n       (else\n          (display l)\n          (newline)\n          (history-add l)\n          (loop (linenoise \"> \")))))")) (section 3 "Using linenoise in csi" (p "Since version 0.4 linenoise can be used as editing help in csi. Simply add the following to your " (tt ".csirc")) (highlight scheme "(use linenoise)\n(current-input-port (make-linenoise-port))")) (section 3 "Changelog" (dl (dt "0.5 Merge with upstream sources (2010-09-24)") (dt "0.4 Provide a input port for csi") (dt "0.3 Get rid of easyffi dependency") (dt "0.2 Update from upstream sources (2010-08-29)") (dt "0.1 Initial release"))) (section 3 "License" (pre "Copyright (c) 2010, Salvatore Sanfilippo <antirez at gmail dot com>\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright notice,\n    this list of conditions and the following disclaimer.\n  * Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in the\n    documentation and/or other materials provided with the distribution.\n  * Neither the name of Redis nor the names of its contributors may be used\n    to endorse or promote products derived from this software without\n    specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\nLIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\nCONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\nSUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\nINTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\nCONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE."))))
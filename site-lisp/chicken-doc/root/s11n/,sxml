((tags "egg") (section 2 "s11n" (toc) (section 3 "Description" (p "Serialization and deserialization of arbitrary objects.")) (section 3 "Author" (p (int-link "felix winkelmann"))) (section 3 "Requirements" (p "None")) (section 3 "Usage" (p "This extension allows serializing and deserializing arbitrary data (including procedures and continuations) into/from ports. Circular data is support as well as uninterned symbols. Foreign-pointer objects and ports other than the default input-, output- and error-ports can not be serialized. Threads may be serialized provided they are not running or ready (this means suspended or created but not yet started threads).") (p "The serialized data is endianness- and word-size dependent. Compiled procedures and continuations can be deserialized, provided that the same executable or libraries are loaded/linked - the compiled code must be available so that the deserialization process can find the associated code.)  Continuations can be serialized but care has to be taken about what exactly is stored in such an object. Every invocation of " (tt "call-with-current-continuation") " includes the complete list of pending " (tt "dynamic-wind") " thunks (and their dynamic environment) which is likely to include non-serializable state.") (section 4 "serialize" (def (sig (procedure "(serialize X [PORT [SERIALIZER]])" (id serialize))) (p "Writes a binary representation of " (tt "X") " into " (tt "PORT") " which defaults to the value of " (tt "(current-output-port)") ". If the serialization is unable to handle some object, the procedure " (tt "SERIALIZER") " is invoked with that object as it's sole argument.  The procedure should either signal an error or return a placeholder object that is to be serialized instead. If no serializer is specified, an error will be signalled."))) (section 4 "deserialize" (def (sig (procedure "(deserialize [PORT [DESERIALIZER]])" (id deserialize))) (p "Reads a binary representation of a Scheme data object from " (tt "PORT") " which defaults to the value of " (tt "(current-input-port)") ". The deserialized object is returned.") (p "If " (tt "DESERIALIZER") " is given, then it will be called for procedure objects that can not be deserialized (normally because a serialized file was generated by a different version of CHICKEN) with the procedure-id (internal name) and the deserialized closure object as argument."))) (section 4 "chicken-dump" (p "A separate tool is also available, named " (tt "chicken-dump") " that writes a description about the contents of a serialized file. Just invoke") (pre " chicken-dump FILENAME") (p "on the command prompt."))) (section 3 "History" (dl (dt "0.9.3") (dd (tt "chicken-dump") " dumps file until eof") (dt "0.9.2") (dd "ported to CHICKEN 4") (dt "0.9") (dd "doesn't use easyffi anymore") (dt "0.8") (dd "Made fallback-handler more useful and fixed a bug [Thanks to Daishi Kato]") (dt "0.7") (dd "Added fallback-handler to " (tt "deserialize")) (dt "0.6") (dd "Nasty little bug in backreferences fixed") (dt "0.5") (dd "Hash-table-deserialization bug reported by Kabir Soorya") (dt "0.4") (dd "Fixed small bug in port-serialization; added note about continuations") (dt "0.3") (dd "Serialization of hash-tables is more storage efficient; added " (tt "chicken-dump") " program") (dt "0.2") (dd "Failure handling for some cases was invalid") (dt "0.1") (dd "Initial release"))) (section 3 "License" (pre " Copyright (c) 2005, Felix Winkelmann.  All rights reserved.") (pre " Permission is hereby granted, free of charge, to any person obtaining a\n copy of this software and associated documentation files (the Software),\n to deal in the Software without restriction, including without limitation\n the rights to use, copy, modify, merge, publish, distribute, sublicense,\n and/or sell copies of the Software, and to permit persons to whom the\n Software is furnished to do so, subject to the following conditions:") (pre " The above copyright notice and this permission notice shall be included\n in all copies or substantial portions of the Software.") (pre " THE SOFTWARE IS PROVIDED ASIS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\n OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n OTHER DEALINGS IN THE SOFTWARE."))))
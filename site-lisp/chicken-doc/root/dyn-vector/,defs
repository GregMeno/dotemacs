(index ("dynvector-ref" 0) ("dynvector-set!" 234) ("dynvector-clear!" 492) ("dynvector-extend!" 680) ("dynvector-tabulate" 836) ("list->dynvector" 1076) ("dynvector?" 1319) ("dynvector-tabulate" 1475) ("list->dynvector" 1852) ("make-dynvector" 2159) ("dynvector-clear!" 2341) ("dynvector-length" 2532) ("dynvector-ref" 2664) ("dynvector-set!" 2824) ("dynvector-expand!" 3176) ("dynvector-for-each" 3340) ("dynvector-map" 3696) ("dynvector-copy" 4003) ("dynvector-fold" 4129) ("dynvector-fold-right" 4633) ("dynvector-index" 5149) ("dynvector-any" 5444) ("dynvector-every" 5771) ("dynvector->list" 6136))
(def (sig (procedure "dynvector-ref vect i" (id dynvector-ref))) (p "If the index " (tt "i") " is greater than the current size of the vector, this procedure returns the default value specified when the dynamic vector was created."))
(def (sig (procedure "dynvector-set! vect i e" (id dynvector-set!))) (p "If the index " (tt "i") " is greater than the current size of the vector, the vector size is increased to " (tt "max(2*N,i+1)") " and the new element is then inserted in the vector."))
(def (sig (procedure "dynvector-clear! vect n" (id dynvector-clear!))) (p "This procedure removes all elements from the dynamic vector, and sets the size of the vector to " (tt "n") "."))
(def (sig (procedure "dynvector-extend! vect n" (id dynvector-extend!))) (p "This procedure explicitly resizes the dynamic vector to the specified size."))
(def (sig (procedure "dynvector-tabulate f len [dflt]" (id dynvector-tabulate))) (p "If the optional argument " (tt "dflt") " is specified, it is used as default value, otherwise the first element in the vector is used as default value."))
(def (sig (procedure "list->dynvector lst [dflt] -> dynvector" (id list->dynvector))) (p "If the optional argument " (tt "dflt") " is specified, it is used as default value, otherwise the first element in the list is used as default value."))
(def (sig (procedure "dynvector? x -> boolean" (id dynvector?))) (p "Returns " (tt "#t") " if " (tt "x") " is a dynamic vector, " (tt "#f") " otherwise."))
(def (sig (procedure "dynvector-tabulate f len [dflt]" (id dynvector-tabulate))) (p "Creates a new dynamic vector of length " (tt "len") " and iterates across each index, applying f at each iteration to the current index; if the optional argument " (tt "dflt") " is specified, it is used as default value, otherwise the first element in the vector is used as default value."))
(def (sig (procedure "list->dynvector lst [dflt] -> dynvector" (id list->dynvector))) (p "Creates a dynamic vector with the elements of the given list; if the optional argument " (tt "dflt") " is specified, it is used as default value, otherwise the first element in the vector is used as default value."))
(def (sig (procedure "make-dynvector n default -> dynvector" (id make-dynvector))) (p "Creates a dynamic vector of length " (tt "n") " and fills it with value " (tt "default") "."))
(def (sig (procedure "dynvector-clear! x n -> unspecified" (id dynvector-clear!))) (p "Removes all elements from the given dynamic vector, and sets the size of the vector to " (tt "n") "."))
(def (sig (procedure "dynvector-length x -> integer" (id dynvector-length))) (p "Returns the length of the given dynamic vector."))
(def (sig (procedure "dynvector-ref x i -> value" (id dynvector-ref))) (p "Returns the element at index " (tt "i") "of the given dynamic vector" (tt "x") "."))
(def (sig (procedure "dynvector-set! x i e -> unspecified" (id dynvector-set!))) (p "Updates the element at index " (tt "i") "of the given dynamic vector" (tt "x") "; if the index " (tt "i") " is greater than the current size of the vector, the vector size is increased to " (tt "max(2*N,i+1)") " and the new element is then inserted in the vector."))
(def (sig (procedure "dynvector-expand! x  n -> unspecified" (id dynvector-expand!))) (p "Expands the size of the dynamic vector to the given size " (tt "n") "."))
(def (sig (procedure "dynvector-for-each f x1 ... -> unspecified" (id dynvector-for-each))) (p "Dynamic vector iterator: applies " (tt "f") "to each index in the  range " (tt "[0, k)") ", where " (tt "k") " is the length of the smallest dynamic vector argument passed, and the respective list of parallel elements from " (tt "x1") " ...  at that index."))
(def (sig (procedure "dynvector-map f x1 ... -> dynvector" (id dynvector-map))) (p "Constructs a new dynamic vector of the shortest size of the given dynamic vector; each element at index " (tt "i") " of the new dynamic vector is mapped from the old vectors by " (tt "f i  (dynvector-ref  x1 i) ...") "."))
(def (sig (procedure "dynvector-copy x -> dynvector" (id dynvector-copy))) (p "Creates a copy of the given dynamic vector."))
(def (sig (procedure "dynvector-fold f initial x1 ... -> state" (id dynvector-fold))) (p "Left-to-right dynamic vector iterator with state. " (tt "f") " is iterated over each index in all of the vectors, stopping at the end of the shortest; " (tt "f") " is applied as  " (tt "(f i state  (dynvector-ref  x1 i) ...)") " where state is the current state value, which begins with " (tt "initial") " and becomes whatever " (tt "f") "returns at the respective iteration; " (tt "i") " is the current index."))
(def (sig (procedure "dynvector-fold-right f initial x1 ... -> state" (id dynvector-fold-right))) (p "Right-to-left dynamic vector iterator with state. " (tt "f") " is iterated over each index in all of the vectors, stopping at the end of the shortest; " (tt "f") " is applied as  " (tt "(f i state  (dynvector-ref  x1 i) ...)") " where state is the current state value, which begins with " (tt "initial") " and becomes whatever " (tt "f") "returns at the respective iteration; " (tt "i") " is the current index."))
(def (sig (procedure "dynvector-index pred? x1 ... -> integer or #f" (id dynvector-index))) (p "Finds and returns the index of the first elements in " (tt "x1 ...") " that satisfy " (tt "pred?") "; if no matching element is found by the end of the shortest vector, " (tt "#f") " is returned."))
(def (sig (procedure "dynvector-any pred? x1 ... -> value or #f" (id dynvector-any))) (p "Finds the first set of elements in " (tt "x1 ... ") "for which " (tt "pred?") " returns a true value. If such a parallel set of elements exists, this procedure returns the value that " (tt "pred?") "returned for that set of elements."))
(def (sig (procedure "dynvector-every pred? x1 ... -> value or #f" (id dynvector-every))) (p "If, for every index " (tt "i") " between 0 and the length of the shortest vector argument, the set of elements " (tt "(dynvector-ref x1 i) ...") " satisfies " (tt "pred?") ", this procedure returns the value that " (tt "pred?") "returned for the last set of elements."))
(def (sig (procedure "dynvector->list x1 -> list" (id dynvector->list))) (p "Returns a list containing all the elements in the given dynamic vector."))

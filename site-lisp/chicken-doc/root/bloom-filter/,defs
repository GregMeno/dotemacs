(index ("make-bloom-filter" 0) ("bloom-filter-n" 901) ("bloom-filter-m" 1051) ("bloom-filter-k" 1171) ("bloom-filter-p-false-positive" 1296) ("bloom-filter-set!" 1513) ("bloom-filter-exists?" 1686) ("optimum-k" 1891) ("optimum-m" 2070) ("p-false-positive" 2259) ("desired-m" 2496) ("actual-k" 3025) ("p-random-one-bit" 3201))
(def (sig (procedure "(make-bloom-filter M MESSAGE-DIGEST-PRIMITIVES [K])" (id make-bloom-filter))) (p "Returns a bloom-filter object with " (tt "M") " bits of discrimination and a set of hash functions built from the supplied " (tt "MESSAGE-DIGEST-PRIMITIVES") ".") (p "The number of hash functions, k, is not necessarily the same as the number of message-digests. A hash function is defined as returning an unsigned 32 bit integer. Most message-digests return more 32 bits of hash. The actual length of the hash is divided into 32 bit blocks to get the individual hash functions.") (p "The argument " (tt "K") " will restrict the actual number of hash functions to the \"first\" k, no matter how many more the supplied message-digests create. First in the order of " (tt "MESSAGE-DIGEST-PRIMITIVES") ".") (p "Selecting the optimal set of message-digests is beyond the scope of make-bloom-filter."))
(def (sig (procedure "(bloom-filter-n BLOOM-FILTER)" (id bloom-filter-n))) (p "The current population - the number of objects added to the filter."))
(def (sig (procedure "(bloom-filter-m BLOOM-FILTER)" (id bloom-filter-m))) (p "The number of bits of discrimination."))
(def (sig (procedure "(bloom-filter-k BLOOM-FILTER)" (id bloom-filter-k))) (p "The number of hash functions. (See above.)"))
(def (sig (procedure "(bloom-filter-p-false-positive BLOOM-FILTER [N])" (id bloom-filter-p-false-positive))) (p "The probability of false positives for the given population size. The current population is assumed."))
(def (sig (procedure "(bloom-filter-set! BLOOM-FILTER OBJECT)" (id bloom-filter-set!))) (p "Add the specified " (tt "OBJECT") " to the indicated " (tt "BLOOM-FILTER") "."))
(def (sig (procedure "(bloom-filter-exists? BLOOM-FILTER OBJECT)" (id bloom-filter-exists?))) (p "Is the specified " (tt "OBJECT") " in the indicated " (tt "BLOOM-FILTER") ".") (p "Auxillary Procedures"))
(def (sig (procedure "(optimum-k N M)" (id optimum-k))) (p "Optimal count of hash functions for the given population size " (tt "N") " and " (tt "M") " bits of discrimination."))
(def (sig (procedure "(optimum-m K N)" (id optimum-m))) (p "Optimal count of bits of discrimination for the given population size " (tt "N") " and " (tt "K") " number of hash functions."))
(def (sig (procedure "(p-false-positive K N M)" (id p-false-positive))) (p "What is the probability of false positives for the population size " (tt "N") " assuming " (tt "K") " hash functions and " (tt "M") " bits of discrimination."))
(def (sig (procedure "(desired-m P N [K])" (id desired-m))) (p "Calculates a near-optimal number of bits of discrimination to meet the desired probability of false positives " (tt "P") ", with the given population size " (tt "N") " and number of hash functions " (tt "K") ". When the " (tt "K") " parameter is missing " (tt "optimum-k") " is used to calculate a value.") (p "A multi-valued return of the calculated " (tt "M") ", " (tt "K") ", and " (tt "P") " values. The calculated probability may be lower than the desired."))
(def (sig (procedure "(actual-k MESSAGE-DIGEST-PRIMITIVES)" (id actual-k))) (p "Calculates the actual number of hash functions for the " (tt "MESSAGE-DIGEST-PRIMITIVES") "."))
(def (sig (procedure "(p-random-one-bit K N M)" (id p-random-one-bit))) (p "Calculates the probablility of a random set bit for the given number of hash functions " (tt "K") ", population size " (tt "N") ", and bits of discrimination " (tt "M") "."))

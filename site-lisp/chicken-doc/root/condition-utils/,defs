(index ("make-exn-condition" 0) ("make-exn-condition+" 528) ("make-condition+" 886) ("condition-predicate*" 1048) ("make-condition-predicate" 1237) ("condition-property-accessor*" 1423) ("make-condition-property-accessor" 1651))
(def (sig (procedure "(make-exn-condition [LOC [MSG [ARGS]]]) => property-condition" (id make-exn-condition))) (p "Returns an " (tt "exn") " " (tt "property-condition") " with optional " (tt "location") ", " (tt "message") " and " (tt "arguments") " property values.") (p "Defaults:") (dl (dt (tt "LOC")) (dd (tt "#f")) (dt (tt "MSG")) (dd (tt "\"\"")) (dt (tt "ARGS")) (dd (tt "'()"))) (p "Will always include " (tt "location") ", " (tt "message") " and " (tt "arguments") " properties in the " (tt "property-condition") "."))
(def (sig (procedure "(make-exn-condition+ LOC MSG ARGS [COND...]) => property-condition" (id make-exn-condition+))) (p "Returns a " (tt "composite-condition") " " (tt "exn COND...") ".") (p "When one-of " (tt "LOC") ", " (tt "MSG") ", or " (tt "ARGS") " is without a useful value in the error context be sure to use " (tt "#f") " as the actual argument."))
(def (sig (procedure "(make-condition+ COND...) => property-condition" (id make-condition+))) (p "Returns a " (tt "composite-condition") " " (tt "COND...") "."))
(def (sig (procedure "(condition-predicate* KIND) => (procedure (*) boolean)" (id condition-predicate*))) (p "Returns a \"memioized\" " (tt "condition-predicate") " for " (tt "KIND") "."))
(def (sig (syntax "(make-condition-predicate KIND...) => (procedure (*) boolean)" (id make-condition-predicate))) (p "Returns a " (tt "condition-predicate") " for " (tt "KIND...") "."))
(def (sig (procedure "(condition-property-accessor* KIND PROP [DEFAULT]) => (procedure (*) boolean)" (id condition-property-accessor*))) (p "Returns a \"memioized\" " (tt "condition-property-accessor") " for " (tt "KIND") "."))
(def (sig (syntax "(make-condition-property-accessor KIND PROP [DEFAULT]) => (procedure (*) boolean)" (id make-condition-property-accessor))) (p "Returns a " (tt "condition-property-accessor") " for " (tt "KIND PROP") "."))

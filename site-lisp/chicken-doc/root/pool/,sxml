((tags "egg") (section 2 "Pool" (toc) (section 3 "Description" (p "A library providing a pool datatype and functions for handling them in a thread-safe manner.")) (section 3 "Author" (p (int-link "/users/Moritz Heidkamp" "Moritz Heidkamp"))) (section 3 "Documentation" (p "A pool is a set of values which are supposed to be used by multiple threads in an arbitrary order. It is commonly used for scarce resources which must be used by many consumers at the same time, e.g. database connections shared in a multi threaded web server.") (section 4 "Procedures" (def (sig (procedure "(make-pool values)" (id make-pool))) (p "Returns a pool of the given list of " (tt "values") ".")) (def (sig (procedure "(call-with-value-from-pool pool proc)" (id call-with-value-from-pool))) (p "Locks one value in the given " (tt "pool") " (possibly waiting in case all values are currently locked) and calls " (tt "proc") " with this value as its argument.")) (def (sig (procedure "(call-with-value-from-pool-in-thread pool proc)" (id call-with-value-from-pool-in-thread))) (p "Does the same as " (tt "call-with-value-from-pool") " but runs " (tt "proc") " in a new thread and returns the respective thread.")))) (section 3 "Examples" (highlight scheme "(use pool srfi-18)\n\n;; create a pool with some values\n(define pool (make-pool '(foo bar baz)))\n\n;; we want to use a value from the pool\n(call-with-value-from-pool pool \n  ;; a is the first available value from the pool locked by a mutex\n  ;; while this lambda is executed\n  (lambda (a)\n    ;; so this would print \"foo\"\n    (print a)\n    (thread-join! (call-with-value-from-pool-in-thread pool\n\t\t    (lambda (b)\n\t\t      ;; since the first value in the pool is still locked and we\n\t\t      ;; are now in a different thread, we get the next available\n\t\t      ;; value, in this case \"bar\", again locked by a mutex\n\t\t      (print b)))))\n\n  (call-with-value-from-pool pool \n    (lambda (c)\n      ;; we are back in the primordial thread here so we'll get foo\n      ;; again since we already have a lock on it\n      (print c))))\n")) (section 3 "License" (pre " Copyright (c) 2010, Moritz Heidkamp\n All rights reserved.\n \n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are\n met:\n \n Redistributions of source code must retain the above copyright\n notice, this list of conditions and the following disclaimer.\n \n Redistributions in binary form must reproduce the above copyright\n notice, this list of conditions and the following disclaimer in the\n documentation and/or other materials provided with the distribution.\n \n Neither the name of the author nor the names of its contributors may\n be used to endorse or promote products derived from this software\n without specific prior written permission.\n \n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n OF THE POSSIBILITY OF SUCH DAMAGE."))))
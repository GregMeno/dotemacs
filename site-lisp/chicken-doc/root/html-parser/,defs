(index ("make-html-parser" 0) ("html->sxml" 1603) ("html-strip" 1776))
(def (sig (procedure "(make-html-parser . keys)" (id make-html-parser))) (p "Returns a procedure of two arguments, an initial seed and an optional input port, which parses the HTML document from the port with the callbacks specified in the plist " (tt "KEYS") " (using normal, quoted symbols, for portability and to avoid making this a macro).  The following callbacks are recognized:") (pre " START: TAG ATTRS SEED VIRTUAL?\n     fdown in foldts, called when a start-tag is encountered.\n   TAG:         tag name\n   ATTRS:       tag attributes as a alist\n   SEED:        current seed value\n   VIRTUAL?:    #t iff this start tag was inserted to fix the HTML tree") (pre " END: TAG ATTRS PARENT-SEED SEED VIRTUAL?\n     fup in foldts, called when an end-tag is encountered.\n   TAG:         tag name\n   ATTRS:       tag attributes of the corresponding start tag\n   PARENT-SEED: parent seed value (i.e. seed passed to the start tag)\n   SEED:        current seed value\n   VIRTUAL?:    #t iff this end tag was inserted to fix the HTML tree") (pre " TEXT: TEXT SEED\n     fhere in foldts, called when any text is encountered.  May be\n     called multiple times between a start and end tag, so you need\n     to string-append yourself if desired.\n   TEXT:        entity-decoded text\n   SEED:        current seed value") (pre " COMMENT: TEXT SEED\n     fhere on comment data") (pre " DECL: NAME ATTRS SEED\n     fhere on declaration data\n     \n PROCESS: LIST SEED\n     fhere on process-instruction data") (p "In addition, entity-mappings may be overriden with the " (tt "ENTITIES:") " keyword."))
(def (sig (procedure "(html->sxml [port])" (id html->sxml))) (p "Returns the SXML representation of the document from " (tt "PORT") ", using the default parsing options."))
(def (sig (procedure "(html-strip [port])" (id html-strip))) (p "Returns a string representation of the document from PORT with all tags removed.  No whitespace reduction or other rendering is done."))

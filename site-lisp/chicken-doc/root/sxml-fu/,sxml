((tags "egg") (section 2 "sxml-fu" (toc) (section 3 "Description" (p "A collection of useful SXML procedures and rulesets.") (p "(includes the SXML stuff from the old " (int-link "/eggref/3/spiffy-utils" "spiffy-utils") ", which are now no longer specific to spiffy)")) (section 3 "Author" (p (int-link "/users/peter-bex" "Peter Bex"))) (section 3 "Requirements" (p "Requires the " (int-link "sxml-transforms") ", " (int-link "matchable") " and " (int-link "uri-common") " eggs.")) (section 3 "Documentation" (p "sxml-fu consists of several modules, which are documented below.")) (section 3 "sxml-fu" (p "This module contains useful procedures that allow you to use the other modules more easily.") (def (sig (procedure "(output-xml tree rulesets)" (id output-xml))) (p "Output the sxml in " (tt "tree") " to the current output port, after folding over the rulesets using " (tt "sxml-fold-rules") ".")) (def (sig (procedure "(output-xml* tree rulesets)" (id output-xml*))) (p "Same as " (tt "output-xml") ", for starred rules.")) (def (sig (procedure "(sxml-fold-rules tree rulesets)" (id sxml-fold-rules))) (p "Fold over the list of " (tt "rulesets") " by calling " (tt "pre-post-order") " on each, in turn, starting with the " (tt "tree") " input.  The final output of " (tt "pre-post-order") " on the last ruleset is returned.")) (def (sig (procedure "(sxml-fold-rules* tree rulesets)" (id sxml-fold-rules*))) (p "Same as " (tt "sxml-fold-rules") ", for starred rules.")) (def (sig (procedure "(normal->starred-transformation-rules rules)" (id normal->starred-transformation-rules))) (p "Convert traditional sxml transformation rules (where handlers accept a fixed number of arguments corresponding to the element and its child nodes) to their \"starred\" equivalents (where handlers accept two arguments; the element and a list of its child nodes).") (p "See " (int-link "sxml-transforms#starred-versions" "the sxml-transforms egg manual") " for more information about \"starred rules\".") (p "This will " (i "not") " make these handlers magically accept huge nodes. This is merely for convenience when you want to convert some legacy rules to fit into an application based on starred rules.")) (def (sig (procedure "(starred->normal-transformation-rules rules)" (id starred->normal-transformation-rules))) (p "Convert \"starred\" sxml transformation rules (where handlers accept two arguments; the element and a list of its child nodes) to their traditional equivalents (where handlers accept a fixed number of arguments corresponding to the element and its child nodes).") (p "This procedure is useful for integrating new rules into legacy applications.  Note that after applying this the handlers will have limited node size accepted."))) (section 3 "sxml-pagination" (def (sig (constant "pagination-rules" (id pagination-rules)) (constant "pagination-rules*" (id pagination-rules*))) (p "Pagination can performed by a combination of parameters, functions and sxml tag-rules.  The collection of these rules is available as " (tt "pagination-rules") " or " (tt "pagination-rules*") " for the \"starred\" version. Using these rules requires threading the result through " (tt "shortcut-rules") "/" (tt "shortcut-rules*") " or rules that expect the same elements and structure.  When trying to get a big picture of how these work together, take a look at the examples listed at the end of this document.")) (section 4 "Parameters" (p "These parameters can be utilised to get multiple pages on one HTML page (by calling " (tt "pre-post-order") " more than once) or getting different defaults.") (def (sig (parameter "(base-uri [uri-reference])" (id base-uri))) (p "This is the base URI to use for the pagination links. It must be an " (int-link "uri-common") " object.")) (def (sig (parameter "(page-size [number])" (id page-size))) (p "The size of a page/the number of entries on a page. Defaults to: 20")) (def (sig (parameter "(page-var [symbol])" (id page-var))) (p "The GET variable to use for this page. Defaults to: " (tt "'page")))) (section 4 "Tags" (pre "  Tag: (paginate-list sxml-code list)\n  ") (p "By far the easiest pagination tag to use.  This just paginates all entries in the list using the sxml-code as template.  See also " (tt "entries") ".  The example should be clarifying.") (pre "  Tag: (paginate sxml-code entries entries-length)") (p "Basic pagination.  This automates only the templating, it requires you to pass it " (b "only") " the entries on the current page and the total number of entries on all pages.  See also " (tt "entries") ".  This tag is especially useful if generating every entry on every call is too expensive (ie, grabbing entries from a database).  Use the functions " (tt "first-entry") " and " (tt "last-entry") " to get the current entries to use.") (pre "  Tag: (entries sxml-code)") (p "This tag delimits the part of the template that is to be repeated for every entry that is displayed on the page.") (section 5 "Tags below 'entries'" (p "These tags are available only as descendents of an " (tt "entries") " tag.") (pre "  Tag: (pagination-links)") (p "Shows links to the first, previous, next, last and all page numbers in between.") (pre "  Tag: (current-page)") (p "The number of the page that's currently being viewed.  See also the procedure " (tt "determine-page") ".") (pre "  Tag: (first-entry)") (p "The first entry on the page that's currently being viewed. See also the procedure " (tt "first-entry") ".") (pre "  Tag: (last-entry)") (p "The last entry on the page that's currently being viewed. See also the procedure " (tt "last-entry") ".") (pre "  Tag: (page-count)") (p "The total number of pages required to fit all the entries on. See also the procedure " (tt "page-count") "."))) (section 4 "Procedures" (p "All these procedures assume the parameters listed above are correctly set (ie, match the value when calling " (tt "pre-post-order") " on the tags.") (def (sig (procedure "(determine-page num-entries)" (id determine-page))) (p "Determine the number of the page currently being viewed.  The total number of entries on all pages is required.")) (def (sig (procedure "(page-count num-entries)" (id page-count))) (p "Returns the total number of pages.  The total number of entries on all pages is required.")) (def (sig (procedure "(first-entry num-entries)" (id first-entry))) (p "Returns the position of the first entry on the page currently being viewed.")) (def (sig (procedure "(last-entry num-entries)" (id last-entry))) (p "Returns the position of the last entry on the page currently being viewed."))) (section 4 "Example" (highlight scheme ";; A quick example of how to use pagination-rules\n(use sxml-pagination sxml-shortcuts sxml-transforms doctype srfi-1)\n\n(define my-conversion-rules\n  `((doctype . ,(lambda (doctype) xhtml-1.0-strict))\n    ,@universal-conversion-rules))\n\n(define content\n  (lambda ()\n  `((doctype)\n    (html\n     (head\n      (title \"Showing page\" ,(determine-page 109) \" of \" ,(page-count 109)))\n     (body\n      (paginate-list\n       (div (@ (class \"paginated-stuff\"))\n\t    (p \"Click on a number to flip to the corresponding page:\")\n\t    (pagination-links)\n\t    (p \"Below we see something that is shown only once per page \"\n\t       \"(the UL), which has subentries that are shown many times \"\n\t       \"per page, ie the entries on the page (the LIs):\")\n\t    (ul\n\t     (entries\n\t      (li (entry))))\n\t    (p \"As we can see, every part of the page that has to be \"\n\t       \"for every entry is enclosed by the (entries) 'tag'.\"\n\t       \"We can also show the same entries twice or more:\")\n\t    (ol\n\t     (entries\n\t      (li (entry))))\n\t    (p \"Showing entry\" (first-entry) \" through \" (last-entry) \" on \"\n\t       \"page \" (current-page) \" of \" (page-count) \".\"))\n       ,(iota 109))\n      (p \"We are showing entry \" ,(first-entry 109) \" through \"\n\t ,(last-entry 109) \".\")\n      (p \"Note that it is necessary to pass the total number of entries \"\n\t \"to every pagination function, but not the actual tags within \"\n\t \"(pagination).  This is because the paginator has no way of \"\n\t \"determining this outside of the (paginate-list) 'tag'.\"))))))\n\n(parameterize ((base-uri (request-uri (current-request))))\n  (output-xml (content)\n              (list pagination-rules shortcut-rules my-conversion-rules)))"))) (section 3 "sxml-shortcuts" (def (sig (constant "shortcut-rules" (id shortcut-rules)) (constant "shortcut-rules*" (id shortcut-rules*))) (p "These are some convenience functions that simplify common tags, described below.") (pre "  Tag: (url href . code)") (p "Short for " (tt "`(a (@ (href ,href)) ,code...)") ". " (tt "href") " can be a string or a " (int-link "uri-common") " object.") (pre "  Tag: (pic src alt [title] . rest)") (p "Short for " (tt "`(img (@ (src ,src) (alt ,alt) (title ,title) ,@rest))") ". " (tt "src") " can be a string or a " (int-link "uri-common") " object.") (p "If " (tt "title") " is not provided, it is equal to " (tt "alt") ".") (pre "  Tag: (movie src title . rest)") (p "Short for:") (highlight scheme "`(object (@ (type \"video/quicktime\"))\n   (param (@ (name \"src\") (value ,src)))\n   (param (@ (name \"controller\") (value \"true\")))\n   ,@rest\n   (url ,src ,title))") (p "That is, it shows the movie pointed to by " (tt "src") " embedded in the browser.  If the browser does not support it, an url with the description " (tt "title") " is provided.") (p (tt "src") " can be a string or a " (int-link "uri-common") " object."))) (section 3 "Changelog" (ul (li "trunk Add conversion procedures between starred and nonstarred forms and add output rules for starred rules. Convert shortcut and pagination rules to starred forms.") (li "0.2 Add procedures in " (tt "sxml-fu") " module") (li "0.1 Initial release (port of " (int-link "/eggref/3/spiffy-utils" "spiffy-utils") ")"))) (section 3 "License" (pre " Copyright (c) 2004-2010, Peter Bex\n All rights reserved.\n \n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are\n met:\n \n Redistributions of source code must retain the above copyright\n notice, this list of conditions and the following disclaimer.\n \n Redistributions in binary form must reproduce the above copyright\n notice, this list of conditions and the following disclaimer in the\n documentation and/or other materials provided with the distribution.\n \n Neither the name of the author nor the names of its contributors may\n be used to endorse or promote products derived from this software\n without specific prior written permission.\n \n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n OF THE POSSIBILITY OF SUCH DAMAGE."))))
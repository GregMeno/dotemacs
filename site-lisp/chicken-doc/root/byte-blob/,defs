(index ("byte-blob?" 0) ("byte-blob-empty?" 154) ("byte-blob-empty" 325) ("byte-blob-replicate" 437) ("byte-blob-cons" 613) ("blob->byte-blob" 818) ("list->byte-blob" 970) ("string->byte-blob" 1123) ("byte-blob-car" 1284) ("byte-blob-cdr" 1482) ("byte-blob-ref" 1741) ("byte-blob-append" 1877) ("byte-blob-reverse" 2017) ("byte-blob-intersperse" 2203) ("byte-blob-map" 2406) ("byte-blob->list" 2592) ("byte-blob->string" 2861) ("byte-blob-take" 3021) ("byte-blob-drop" 3181) ("byte-blob-span" 3356) ("byte-blob-fold-left" 3563) ("byte-blob-fold-right" 3563) ("byte-blob-find" 3932) ("file->byte-blob" 4494) ("byte-blob-read" 4644) ("byte-blob-write" 4795) ("u8vector->byte-blob" 4940) ("s8vector->byte-blob" 4940) ("u16vector->byte-blob" 4940) ("s16vector->byte-blob" 4940) ("u32vector->byte-blob" 4940) ("s32vector->byte-blob" 4940) ("f32vector->byte-blob" 4940) ("f64vector->byte-blob" 4940) ("byte-blob->u8vector" 4940) ("byte-blob->s8vector" 4940) ("byte-blob->u16vector" 4940) ("byte-blob->s16vector" 4940) ("byte-blob->u32vector" 4940) ("byte-blob->s32vector" 4940) ("byte-blob->f32vector" 4940) ("byte-blob->f64vector" 4940))
(def (sig (procedure "(byte-blob? X) => BOOL" (id byte-blob?))) (p "Returns " (tt "#t") " if the given object is a byte-blob, " (tt "#f") " otherwise."))
(def (sig (procedure "(byte-blob-empty? BYTE-BLOB) => BOOL" (id byte-blob-empty?))) (p "Returns " (tt "#t") " if the given byte-blob is empty, " (tt "#f") " otherwise."))
(def (sig (procedure "(byte-blob-empty) => BYTE-BLOB" (id byte-blob-empty))) (p "Returns an empty byte-blob."))
(def (sig (procedure "(byte-blob-replicate N V) => BYTE-BLOB" (id byte-blob-replicate))) (p "Returns a byte-blob of length " (tt "N") ", where each element is " (tt "V") "."))
(def (sig (procedure "(byte-blob-cons X BYTE-BLOB) => BYTE-BLOB" (id byte-blob-cons))) (p "Analogous to list cons, but of complexity O(N), as it requires copying the elements of the byte-blob argument."))
(def (sig (procedure "(blob->byte-blob BLOB) => BYTE-BLOB" (id blob->byte-blob))) (p "Returns a byte-blob containing the elements of the given blob."))
(def (sig (procedure "(list->byte-blob LIST) => BYTE-BLOB" (id list->byte-blob))) (p "Returns a byte-blob containing the elements of " (tt "LIST") "."))
(def (sig (procedure "(string->byte-blob STRING) => BYTE-BLOB" (id string->byte-blob))) (p "Returns a byte-blob containing the elements of " (tt "STRING") "."))
(def (sig (procedure "(byte-blob-car BYTE-BLOB) => X" (id byte-blob-car))) (p "Returns the first element of a byte-blob. The argument byte-blob must be non-empty, or an exception will be thrown."))
(def (sig (procedure "(byte-blob-cdr BYTE-BLOB) => BYTE-BLOB" (id byte-blob-cdr))) (p "Returns a byte-blob that contains the elements after the first element of the given byte-blob. The argument byte-blob must be non-empty, or an exception will be thrown."))
(def (sig (procedure "(byte-blob-ref BYTE-BLOB I) => BYTE" (id byte-blob-ref))) (p "Returns the i-th element of the given byte-blob."))
(def (sig (procedure "(byte-blob-append BYTE-BLOB BYTE-BLOB) => BYTE-BLOB " (id byte-blob-append))) (p "Appends two byte-blobs together."))
(def (sig (procedure "(byte-blob-reverse BYTE-BLOB) => BYTE-BLOB" (id byte-blob-reverse))) (p "Returns a byte-blob that contains the elements of the given byte-blob in reverse order."))
(def (sig (procedure "(byte-blob-intersperse BYTE-BLOB BYTE) => BYTE-BLOB" (id byte-blob-intersperse))) (p "Returns a byte-blob with the given byte placed between the elements of the given byte-blob."))
(def (sig (procedure "(byte-blob-map F BYTE-BLOB) => BYTE-BLOB" (id byte-blob-map))) (p "Returns a byte-blob obtained by applying " (tt "F") " to each element of the given byte-blob."))
(def (sig (procedure "(byte-blob->list BYTE-BLOB [F]) => LIST" (id byte-blob->list))) (p "Returns a list containing the elements of the given byte-blob. If procedure " (tt "F") " is provided as a second argument, it is applied to every element of the returned list."))
(def (sig (procedure "(byte-blob->string BYTE-BLOB) => STRING" (id byte-blob->string))) (p "Returns a string containing the elements of the given byte-blob."))
(def (sig (procedure "(byte-blob-take BYTE-BLOB N) => BYTE-BLOB" (id byte-blob-take))) (p "Returns the prefix of the given byte-blob of length " (tt "N") "."))
(def (sig (procedure "(byte-blob-drop BYTE-BLOB N) => BYTE-BLOB" (id byte-blob-drop))) (p "Returns the suffix of the given byte-blob after the first " (tt "N") " elements."))
(def (sig (procedure "(byte-blob-span BYTE-BLOB START END) => BYTE-BLOB" (id byte-blob-span))) (p "Returns the subsequence of the give byte-blob from position " (tt "START") " to position " (tt "END") "."))
(def (sig (procedure "(byte-blob-fold-left F INIT BYTE-BLOB) => VALUE" (id byte-blob-fold-left)) (procedure "(byte-blob-fold-right F INIT BYTE-BLOB) => VALUE" (id byte-blob-fold-right))) (p "Given a procedure of two arguments, a starting value, and a byte-blob, reduces the byte-blob using the supplied procedure, from left to right, or right to left, respectively."))
(def (sig (procedure "(byte-blob-find NEEDLE HAYSTACK) => LIST" (id byte-blob-find))) (p "Finds all non-overlapping instances of the byte-blob " (tt "NEEDLE") " in the byte-blob " (tt "HAYSTACK") ". The first element of the returned list is the prefix of " (tt "HAYSTACK") " prior to any matches of " (tt "NEEDLE") ".  The second is a list of lists.") (p "The first element of each pair in the list is a span from the beginning of a match to the beginning of the next match, while the second is a span from the beginning of the match to the end of the input."))
(def (sig (procedure "(file->byte-blob FILENAME) => BYTE-BLOB" (id file->byte-blob))) (p "Returns a byte-blob with the contents of the given file."))
(def (sig (procedure "(byte-blob-read PORT N) => BYTE-BLOB" (id byte-blob-read))) (p "Reads a byte-blob of length " (tt "N") " from the given port."))
(def (sig (procedure "(byte-blob-write PORT BYTE-BLOB) => UNDEFINED" (id byte-blob-write))) (p "Writes the given byte-blob to the given port."))
(def (sig (procedure "(u8vector->byte-blob   U8VECTOR) => BYTE-BLOB" (id u8vector->byte-blob)) (procedure "(s8vector->byte-blob   S8VECTOR) => BYTE-BLOB" (id s8vector->byte-blob)) (procedure "(u16vector->byte-blob  U16VECTOR) => BYTE-BLOB" (id u16vector->byte-blob)) (procedure "(s16vector->byte-blob  S16VECTOR) => BYTE-BLOB" (id s16vector->byte-blob)) (procedure "(u32vector->byte-blob  U32VECTOR) => BYTE-BLOB" (id u32vector->byte-blob)) (procedure "(s32vector->byte-blob  S32VECTOR) => BYTE-BLOB" (id s32vector->byte-blob)) (procedure "(f32vector->byte-blob  F32VECTOR) => BYTE-BLOB" (id f32vector->byte-blob)) (procedure "(f64vector->byte-blob  F64VECTOR) => BYTE-BLOB" (id f64vector->byte-blob)) (procedure "(byte-blob->u8vector  BYTE-BLOB) => U8VECTOR" (id byte-blob->u8vector)) (procedure "(byte-blob->s8vector  BYTE-BLOB) => S8VECTOR" (id byte-blob->s8vector)) (procedure "(byte-blob->u16vector BYTE-BLOB) => U16VECTOR" (id byte-blob->u16vector)) (procedure "(byte-blob->s16vector BYTE-BLOB) => S16VECTOR" (id byte-blob->s16vector)) (procedure "(byte-blob->u32vector BYTE-BLOB) => U32VECTOR" (id byte-blob->u32vector)) (procedure "(byte-blob->s32vector BYTE-BLOB) => S32VECTOR" (id byte-blob->s32vector)) (procedure "(byte-blob->f32vector BYTE-BLOB) => F32VECTOR" (id byte-blob->f32vector)) (procedure "(byte-blob->f64vector BYTE-BLOB) => F64VECTOR" (id byte-blob->f64vector))))

((section 2 "Introduction" (p "An interface to User Datagram Protocol sockets.")) (section 2 "Example" (highlight scheme "(use udp)\n\n(begin\n (define s (udp-open-socket))\n (udp-bind! s #f 0)\n (udp-connect! s \"localhost\" 13)  ; daytime service\n (udp-send s \"\\n\")\n (receive (n data from-host from-port) (udp-recvfrom s 64)\n          (print* n \" bytes from \" from-host \":\" from-port \": \" data))\n (udp-close-socket s))\n ;; Prints the following:\n ;; 26 bytes from 127.0.0.1:13: Wed Dec 24 11:53:14 2003")) (section 2 "Author" (p "Category 5, with several enhancements by Daishi Kato")) (section 2 "Documentation" (def (sig (procedure "(udp-open-socket)" (id udp-open-socket))) (p "Returns a new UDP socket object.")) (def (sig (procedure "(udp-open-socket*)" (id udp-open-socket*))) (p "Returns a new nonblocking UDP socket object.")) (def (sig (procedure "(udp-bind! SOCKET HOST PORT)" (id udp-bind!))) (p "Binds a UDP socket to an address and port as specified by " (tt "HOST") " and " (tt "PORT") ". " (tt "HOST") " may be a string consisting of an IP address or hostname, or " (tt "#f") ", in which case " (tt "INADDR_ANY") " is used.  If " (tt "PORT") " is 0, a port will be allocated by the system automatically.")) (def (sig (procedure "(udp-connect! SOCKET HOST PORT)" (id udp-connect!))) (p "Connect a socket.  In the case of UDP this does nothing more than associate a peer address with the socket in the kernel for use with later calls to " (tt "send(2)") ".  UDP is a connectionless protocol.")) (def (sig (procedure "(udp-send SOCKET STRING)" (id udp-send))) (p "Send the bytes in " (tt "STRING") " through " (tt "SOCKET") " to its peer, as specified with a previous call to " (tt "udp-connect!") ".  If the socket is not connected, the system will return an error.")) (def (sig (procedure "(udp-sendto SOCKET HOST PORT STRING)" (id udp-sendto))) (p "Send the bytes in " (tt "STRING") " through " (tt "SOCKET") " to " (tt "PORT") " on " (tt "HOST") ".")) (def (sig (procedure "(udp-recv SOCKET LENGTH)" (id udp-recv))) (p "Receive a packet and store the data in string of size " (tt "LENGTH") ".  Returns two values: the number of bytes received and the string consisting the message.")) (def (sig (procedure "(udp-recvfrom SOCKET LENGTH)" (id udp-recvfrom))) (p "Same as " (tt "udp-recv") " except that two additional values are returned: the host string and port number from which the packet was received.")) (def (sig (procedure "(udp-close-socket SOCKET)" (id udp-close-socket))) (p "Close a socket.")) (def (sig (procedure "(udp-socket? THING)" (id udp-socket?))) (p "Test whether " (tt "THING") " is a UDP socket.")) (def (sig (procedure "(udp-bound? SOCKET)" (id udp-bound?))) (p "Test whether a UDP socket is bound to a local address and port.")) (def (sig (procedure "(udp-connected? SOCKET)" (id udp-connected?))) (p "Test whether a peer address and port has been associated with a UDP socket with a call to " (tt "udp-connect!") ".")) (def (sig (procedure "(udp-bound-port SOCKET)" (id udp-bound-port))) (p "Returns the port to which the socket is bound.")) (def (sig (procedure "(udp-set-multicast-interface SOCKET ADDRESS)" (id udp-set-multicast-interface))) (p "Specify the " (tt "ADDRESS") " of the interface to send a multicast packet. This procedure might not be needed if there is only one network interface.")) (def (sig (procedure "(udp-join-multicast-group SOCKET ADDRESS GROUP [JOIN])" (id udp-join-multicast-group))) (p "Join a multicast " (tt "GROUP") " with the interface of the " (tt "ADDRESSS") " which can be " (tt "#f") " for " (tt "INADDR_ANY") ". If the optional argument " (tt "JOIN") " is set and " (tt "#f") ", the multicast group is dropped."))) (section 2 "Version History" (ul (li "1.14: Ported to Chicken 4") (li "1.12: Didn't include signal.h on UNIX [felix]") (li "1.11: More Win32 support [Daishi Kato]") (li "1.10: Multicast support [Daishi Kato]") (li "1.9: Win32 socket-header fun") (li "1.8: Hopefully succeeded in actually fixing that cygwin problem (which wasn't a cygwin problem after all, but a broken declaration of " (tt "##net#recvfrom") ")") (li "1.7: Fixed cygwin problem [thanks to Daishi Kato]") (li "1.6: #includes ws2tcpip.h instead of winsock2.h [Thanks to Graham Fawcett]") (li "1.5: Small fix (uses srfi-18 unit, now)") (li "1.4: " (tt "udp-bound-port") " [Contributed by Daishi Kato]") (li "1.3: Yet another bugfix for better Windows support by Daishi Kato") (li "1.2: Daishi Kato fixed several bugs") (li "1.1"))) (section 2 "License" (p "Copyright (c) 2004, Category 5 All rights reserved.") (p "Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:") (ul (li "Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.") (li "Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.") (li "Neither the name of the author nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.")) (p "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.")))
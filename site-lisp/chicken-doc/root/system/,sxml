((tags "egg") (section 2 "system" (toc) (section 3 "Description" (p "Load and optionally compile groups of files.")) (section 3 "Author" (p (int-link "/users/felix winkelmann" "felix winkelmann"))) (section 3 "Requirements" (p (int-link "coops") ", " (int-link "shell"))) (section 3 "Documentation" (p "A " (i "system") " is a group of files, loaded and/or compiled together, possibly with interdependencies between particular files. This facility is heavily inspired by the Common Lisp " (tt "DEFSYSTEM") " macro.") (p "A " (i "component") " is part of a system, usually a source-file.") (p "Systems can be loaded into the interpreter or a compiled application. Re-loading will automatically track dependencies and source-file timestamps to compile and reload only files that have been modified, or which depend on other files that have been modified.") (section 4 "define-system" (def (sig (syntax "(define-system NAME COMPONENT ...)" (id define-system))) (p "Defines a system with the given name and components. This form expands roughly into:") (highlight scheme "(define NAME\n  (make <system> ...))") (p (tt "NAME") " should be a symbol, " (tt "COMPONENT") " should either be an instance of " (tt "<file>") " (or one of its subclasses) or a string or symbol, which is an abbreviation of " (tt "(scheme-file COMPONENT)") "."))) (section 4 "load-system" (def (sig (procedure "(load-system SYSTEM #!key quiet force)" (id load-system))) (p "Loads changed components in " (tt "SYSTEM") ". If the system hasn't been loaded before, all components will be loaded, in the order given in the " (tt "define-system") " form, possibly modified by interdependencies between components. By default components of class " (tt "<scheme-file>") " will not be compiled, only loaded. Components of class " (tt "<compiled-scheme-file>") " will always be compiled and loaded, if necessary. Components of class " (tt "<file>") " will be ignored."))) (section 4 "compile-system" (def (sig (procedure "(compile-system SYSTEM #!key quiet force)" (id compile-system))) (p "Compiles components of " (tt "SYSTEM") " that are components of class " (tt "<scheme-file>") " or one of its subclasses using " (tt "compile-file") " and loads them after successfull compilation unless a compiled version of the component is already loaded and none of its dependencies or included files have changed."))) (section 4 "clean-system" (def (sig (procedure "(clean-system SYSTEM)" (id clean-system))) (p "Clears the state of all files in " (tt "SYSTEM") ", so a following " (tt "load-system") " or " (tt "compile-system") " will reload/compile everything."))) (section 4 "build-system" (def (sig (procedure "(build-system SYSTEM)" (id build-system))) (p "Compiles components that are subclasses of " (tt "<scheme-file>") " to dynamically loadable object files (using " (tt "csc -s ...") "). Note that these files are ignored by " (tt "load-system") " or " (tt "compile-system") ", since these are not re-loadable on all supported platforms.") (p "Use this operation for building compiled code that is installed as an extension or explicitly loaded by an application or Scheme script. In such a situation, " (tt "build-system") " is similar to the " (tt "make(1)") " tool or the " (tt "make") " macro provided by the " (tt "setup-api") " module."))) (section 4 "File constructors" (p "File-constructors create components that are used inside a system definition or when specifying dependencies or included files.") (def (sig (procedure "(file NAME #!key depends includes path)" (id file)) (procedure "(scheme-file NAME #!key depends includes path)" (id scheme-file)) (procedure "(compiled-scheme-file NAME #!key depends includes path)" (id compiled-scheme-file))) (p "Construct instances of " (tt "<file>") ", " (tt "<scheme-file>") " and " (tt "compiled-scheme-file") ", respectively."))) (section 4 "Toplevel commands" (p "The following toplevel commands are defined when this extension is loaded into " (tt "csi") ":") (pre " ,sys EXPRESSION") (p "Evaluates " (tt "EXPRESSION") " and sets an internal parameter, marking this as the " (i "current") " system.") (pre " ,ls") (p "Loads the current system, using " (tt "load-system") ".") (pre " ,cs") (p "Compiles the currents system, using " (tt "compile-system") ".")) (section 4 "Programming interface" (p "This extension exposes various classes and generic functions that allow customization and subclassing of components and systems. For more information, consult the source code."))) (section 3 "Examples" (p "Provided we have this system definition in " (tt "xyz.system") ":") (highlight scheme ";;;; xyz.system\n\n(define-system xyz\n  (file \"z\")\n  (scheme-file \"y\" includes: '(\"z\"))\n  (compiled-scheme-file \"x\" depends: '(\"y\")))") (p "Using the system in " (tt "csi") ":") (highlight scheme "> (use system posix)\n> (load \"xyz.system\")\n> (load-system xyz)\n; xyz: file \"y\" needs to be reloaded because it hasn't been loaded yet\n; loading y.scm ...\n; including z.scm ...\n; xyz: dependency of \"x\" changed\n; compiling x.scm ...\n; loading /tmp/temp317d.so ...\n> (load-system xyz)\n; xyz: nothing to do.\n> (define (touch . files)\n    (for-each\n      (lambda (f) (set! (file-modification-time f) (current-seconds)))\n      files))\n> (sleep 2)\n> (touch \"z.scm\")\n> (load-system xyz)\n; xyz: file \"y\" needs to be reloaded because included file has changed\n; loading y.scm ...\n; including z.scm ...\n; xyz: dependency of \"x\" changed\n; compiling x.scm ...\n; loading /tmp/tempcaf8.so ...\n> (load-system xyz)\n; xyz: nothing to do.\n> (load-system xyz force: #t)\n; xyz: file \"y\" needs to be reloaded because it hasn't been loaded yet\n; loading y.scm ...\n; including z.scm ...\n; xyz: dependency of \"x\" changed\n; compiling x.scm ...\n; loading /tmp/temp8a25.so ...")) (section 3 "History" (ul (li "0.5 Added " (tt "shell") " dependency") (li "0.4 ,ls and ,cs toplevel commands ask for system expression if none has been previously defined with ,sys") (li "0.3 Fixed bug in handling of changed in dependencies") (li "0.2 Added " (tt "build-system") " and documented file-constructors") (li "0.1 Initial release"))) (section 3 "License" (pre " Copyright (c) 2010, Felix L. Winkelmann\n All rights reserved.\n \n Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following\n conditions are met:\n \n   Redistributions of source code must retain the above copyright notice, this list of conditions and the following\n     disclaimer. \n   Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following\n     disclaimer in the documentation and/or other materials provided with the distribution. \n   Neither the name of the author nor the names of its contributors may be used to endorse or promote\n     products derived from this software without specific prior written permission. \n \n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS\n OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY\n AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR\n CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n POSSIBILITY OF SUCH DAMAGE."))))
((tags "egg") (section 2 "check-errors" (p "Argument checks & errors.") (toc)) (section 2 "Documentation" (section 3 "Arugment Conventions" (p (tt "LOC") " is a " (tt "symbol") ", or " (tt "#f") ". The symbolic naming of the " (i "location") " detecting the problem. As in the " (tt "error") " form.") (p (tt "OBJ") " is any Scheme " (tt "object") ".") (p (tt "ARGNAM") " is a " (tt "string") " or " (tt "symbol") " naming the argument list element corresponding to the " (tt "OBJ") ". The default is the type-name.")) (section 3 "Type Checks" (p "Performs the minimal constraint check and raises an error condition upon failure. The " (i "mimimal constraint") " proviso is important for understanding the behavior of the checking routines. Unless otherwise specified no additional constraints are verified.") (p "So the " (tt "check-...-interval") " routines, for example, do not verify the types of the arugments, only the interval constraint.") (p "When the " (tt "unsafe") " feature is defined the check procedures are no-ops.") (p (i "Note") " that the full-numeric-tower is not supported.") (p "All " (tt "check-...") " routines return the checked object; unless a type-error exception is raised, obviously.") (section 4 "Usage" (highlight scheme "(require-extension type-checks)")) (section 4 "check-defined-value" (def (sig (procedure "(check-defined-value LOC OBJ [ARGNAM]) => *" (id check-defined-value))) (p "Ensures the " (tt "OBJ") " is non-void, i.e. not an undefined-value."))) (section 4 "check-bound-value" (def (sig (procedure "(check-bound-value LOC OBJ [ARGNAM]) => *" (id check-bound-value))) (p "Ensures the " (tt "OBJ") " is the value of a bound variable.") (p (i "Only") " for use in rather unsafe calling envrionments where some explicit checking is necessary."))) (section 4 "check-fixnum" (def (sig (procedure "(check-fixnum LOC OBJ [ARGNAM]) => *" (id check-fixnum))))) (section 4 "check-positive-fixnum" (def (sig (procedure "(check-positive-fixnum LOC OBJ [ARGNAM]) => *" (id check-positive-fixnum))))) (section 4 "check-natural-fixnum" (def (sig (procedure "(check-natural-fixnum LOC OBJ [ARGNAM]) => *" (id check-natural-fixnum))))) (section 4 "check-flonum" (def (sig (procedure "(check-flonum LOC OBJ [ARGNAM]) => *" (id check-flonum))))) (section 4 "check-integer" (def (sig (procedure "(check-integer LOC OBJ [ARGNAM]) => *" (id check-integer))))) (section 4 "check-positive-integer" (def (sig (procedure "(check-positive-integer LOC OBJ [ARGNAM]) => *" (id check-positive-integer))))) (section 4 "check-natural-integer" (def (sig (procedure "(check-natural-integer LOC OBJ [ARGNAM]) => *" (id check-natural-integer))))) (section 4 "check-number" (def (sig (procedure "(check-number LOC OBJ [ARGNAM]) => *" (id check-number))))) (section 4 "check-positive-number" (def (sig (procedure "(check-positive-number LOC OBJ [ARGNAM]) => *" (id check-positive-number))))) (section 4 "check-natural-number" (def (sig (procedure "(check-natural-number LOC OBJ [ARGNAM]) => *" (id check-natural-number))))) (section 4 "check-procedure" (def (sig (procedure "(check-procedure LOC OBJ [ARGNAM]) => *" (id check-procedure))))) (section 4 "check-input-port" (def (sig (procedure "(check-input-port LOC OBJ [ARGNAM]) => *" (id check-input-port))))) (section 4 "check-output-port" (def (sig (procedure "(check-output-port LOC OBJ [ARGNAM]) => *" (id check-output-port))))) (section 4 "check-list" (def (sig (procedure "(check-list LOC OBJ [ARGNAM]) => *" (id check-list))))) (section 4 "check-pair" (def (sig (procedure "(check-pair LOC OBJ [ARGNAM]) => *" (id check-pair))))) (section 4 "check-blob" (def (sig (procedure "(check-blob LOC OBJ [ARGNAM]) => *" (id check-blob))))) (section 4 "check-vector" (def (sig (procedure "(check-vector LOC OBJ [ARGNAM]) => *" (id check-vector))))) (section 4 "check-structure" (def (sig (procedure "(check-structure LOC OBJ TAG [ARGNAM]) => *" (id check-structure)) (procedure "(check-record LOC OBJ TAG [ARGNAM]) => *" (id check-record)) (procedure "(check-record-type LOC OBJ TAG [ARGNAM]) => *" (id check-record-type))) (p (tt "check-record") " and " (tt "check-record-type") " are essentially synonyms."))) (section 4 "check-symbol" (def (sig (procedure "(check-symbol LOC OBJ [ARGNAM]) => *" (id check-symbol))))) (section 4 "check-keyword" (def (sig (procedure "(check-keyword LOC OBJ [ARGNAM]) => *" (id check-keyword))))) (section 4 "check-string" (def (sig (procedure "(check-string LOC OBJ [ARGNAM]) => *" (id check-string))))) (section 4 "check-char" (def (sig (procedure "(check-char LOC OBJ [ARGNAM]) => *" (id check-char))))) (section 4 "check-boolean" (def (sig (procedure "(check-boolean LOC OBJ [ARGNAM]) => *" (id check-boolean))))) (section 4 "check-alist" (def (sig (procedure "(check-alist LOC OBJ [ARGNAM]) => *" (id check-alist))))) (section 4 "check-minimum-argument-count" (def (sig (procedure "(check-minimum-argument-count LOC ARGC MINARGC) => *" (id check-minimum-argument-count))) (p "Does not verify the type of " (tt "ARGC") ", or " (tt "MINARGC") "."))) (section 4 "check-argument-count" (def (sig (procedure "(check-argument-count LOC ARGC MAXARGC) => *" (id check-argument-count))) (p "Does not verify the type of " (tt "ARGC") ", or " (tt "MAXARGC") "."))) (section 4 "check-open-interval" (def (sig (procedure "(check-open-interval LOC NUM MINNUM MAXNUM [ARGNAM]) => *" (id check-open-interval))) (p (tt "NUM") " in " (tt "]MINNUM MAXNUM[") ".") (p "Does not verify the type of " (tt "NUM") ", " (tt "MINNUM") ", or " (tt "MAXNUM") "."))) (section 4 "check-closed-interval" (def (sig (procedure "(check-closed-interval LOC NUM MINNUM MAXNUM [ARGNAM]) => *" (id check-closed-interval))) (p (tt "NUM") " in " (tt "[MINNUM MAXNUM]") ".") (p "Does not verify the type of " (tt "NUM") ", " (tt "MINNUM") ", or " (tt "MAXNUM") "."))) (section 4 "check-half-open-interval" (def (sig (procedure "(check-half-open-interval LOC NUM MINNUM MAXNUM [ARGNAM]) => *" (id check-half-open-interval))) (p (tt "NUM") " in " (tt "]MINNUM MAXNUM]") ".") (p "Does not verify the type of " (tt "NUM") ", " (tt "MINNUM") ", or " (tt "MAXNUM") "."))) (section 4 "check-half-closed-interval" (def (sig (procedure "(check-half-closed-interval LOC NUM MINNUM MAXNUM [ARGNAM]) => *" (id check-half-closed-interval))) (p (tt "NUM") " in " (tt "[MINNUM MAXNUM[") ".") (p "Does not verify the type of " (tt "NUM") ", " (tt "MINNUM") ", or " (tt "MAXNUM") "."))) (section 4 "define-check-type" (def (sig (syntax "(define-check-type TYPNAM [TYPE-PRED])" (id define-check-type))) (p "Creates a procedure definition for " (tt "check-TYPNAM} with the signature of the above check procedures. The type-predicate is either {{TYPE-PRED") ", when present, or " (tt "TYPNAM?") ".") (p (tt "TYPNAM") " is an unquoted " (tt "symbol") ".") (highlight scheme "(define-check-type hash-table)\n;=>\n;(define (check-hash-table loc obj #!optional argnam)\n;  (unless (hash-table? obj)\n;    (error-hash-table loc obj argnam))\n;  obj )"))) (section 4 "define-check+error-type" (def (sig (syntax "(define-check+error-type TYPNAM [TYPE-PRED [TYPMSG]])" (id define-check+error-type))) (p "Creates a procedure definition for " (tt "check-TYPNAM} with the signature of the above check procedures. The type-predicate is either {{TYPE-PRED") ", when present, or " (tt "TYPE?") ". The error message type-name is either the " (tt "TYPMSG") ", when present, or " (tt "\"TYPNAM\"") "\".") (p (tt "TYPNAM") " is an unquoted " (tt "symbol") ".") (highlight scheme "(define-check+error-type hash-table)\n;=>\n;(define-error-type loc obj 'hash-table)\n;(define (check-hash-table loc obj #!optional argnam)\n;  (unless (hash-table? obj)\n;    (error-hash-table loc obj argnam))\n;  obj )")))) (section 3 "Type Errors" (section 4 "Argument Conventions" (p (tt "TYPNAM") " is a " (tt "symbol") " or " (tt "string") ", unless otherwise indicated.") (p (tt "ARGNAM") " is a " (tt "symbol") ", " (tt "string") ", or " (tt "#f") ". Default is " (tt "#f") ".")) (section 4 "Usage" (highlight scheme "(require-extension type-errors)")) (section 4 "make-bad-argument-message" (def (sig (procedure "(make-bad-argument-message [ARGNAM]) => string" (id make-bad-argument-message))) (p "Returns an argument type error message for the, optional, " (tt "ARGNAM") ".") (p "Example:") (highlight scheme "(make-bad-argument-message \"count\") ;=> \"bad `count' argument\"\n(make-bad-argument-message) ;=> \"bad argument\""))) (section 4 "make-type-name-message" (def (sig (procedure "(make-type-name-message TYPNAM) => string" (id make-type-name-message))) (p "Returns an argument type message for the " (tt "TYPNAM") ".") (p "Example:") (highlight scheme "(make-type-name-message integer) ;=> an integer\"\n(make-type-name-message \"symbol in {foo bar baz}\") ;=> \"a symbol in {foo bar baz}\"") (p (i "Note") " that " (tt "make-type-name-message") " is suitable " (b "only") " for English. It supplies a suitable article for the type-name."))) (section 4 "make-error-type-message" (def (sig (procedure "(make-error-type-message TYPNAM [ARGNAM]) => string" (id make-error-type-message))) (p "Returns a type error message from the " (tt "TYPNAM} and optional {{ARGNAM") ".") (p "Uses " (tt "make-bad-argument-message") " and " (tt "make-type-name-message") " to build the message components.") (p "Example:") (highlight scheme "(make-error-type-message 'integer \"count\") ;=> \"bad `count' argument type - not an integer\""))) (section 4 "signal-type-error" (def (sig (procedure "(signal-type-error LOC MSG OBJ...)" (id signal-type-error))) (p "Raises a non-continuable type error - (({exn type)}}."))) (section 4 "error-argument-type" (def (sig (procedure "(error-argument-type LOC OBJ TYPNAM [ARGNAM])" (id error-argument-type))) (p "Raises a " (tt "type-error") " where is message is constructed from the " (tt "TYPNAM} and {{ARGNAM") ".") (p "Uses " (tt "signal-type-error") " and " (tt "make-error-type-message") "."))) (section 4 "warning-argument-type" (def (sig (procedure "(warning-argument-type LOC OBJ TYPNAM [ARGNAM])" (id warning-argument-type))) (p "A warning is issued with a message similar to that of " (tt "error-argument-type") "."))) (section 4 "error-defined-value" (def (sig (procedure "(error-defined-value LOC OBJ [ARGNAM])" (id error-defined-value))))) (section 4 "error-bound-value" (def (sig (procedure "(error-bound-value LOC OBJ [ARGNAM])" (id error-bound-value))))) (section 4 "error-fixnum" (def (sig (procedure "(error-fixnum LOC OBJ [ARGNAM])" (id error-fixnum))))) (section 4 "error-positive-fixnum" (def (sig (procedure "(error-positive-fixnum LOC OBJ [ARGNAM])" (id error-positive-fixnum))))) (section 4 "error-natural-fixnum" (def (sig (procedure "(error-natural-fixnum LOC OBJ [ARGNAM])" (id error-natural-fixnum))))) (section 4 "error-flonum" (def (sig (procedure "(error-flonum LOC OBJ [ARGNAM])" (id error-flonum))))) (section 4 "error-integer" (def (sig (procedure "(error-integer LOC OBJ [ARGNAM])" (id error-integer))))) (section 4 "error-positive-integer" (def (sig (procedure "(error-positive-integer LOC OBJ [ARGNAM])" (id error-positive-integer))))) (section 4 "error-natural-integer" (def (sig (procedure "(error-natural-integer LOC OBJ [ARGNAM])" (id error-natural-integer))))) (section 4 "error-number" (def (sig (procedure "(error-number LOC OBJ [ARGNAM])" (id error-number))))) (section 4 "error-positive-number" (def (sig (procedure "(error-positive-number LOC OBJ [ARGNAM])" (id error-positive-number))))) (section 4 "error-natural-number" (def (sig (procedure "(error-natural-number LOC OBJ [ARGNAM])" (id error-natural-number))))) (section 4 "error-procedure" (def (sig (procedure "(error-procedure LOC OBJ [ARGNAM])" (id error-procedure))))) (section 4 "error-input-port" (def (sig (procedure "(error-input-port LOC OBJ [ARGNAM])" (id error-input-port))))) (section 4 "error-output-port" (def (sig (procedure "(error-output-port LOC OBJ [ARGNAM])" (id error-output-port))))) (section 4 "error-list" (def (sig (procedure "(error-list LOC OBJ [ARGNAM])" (id error-list))))) (section 4 "error-pair" (def (sig (procedure "(error-pair LOC OBJ [ARGNAM])" (id error-pair))))) (section 4 "error-blob" (def (sig (procedure "(error-blob LOC OBJ [ARGNAM])" (id error-blob))))) (section 4 "error-vector" (def (sig (procedure "(error-vector LOC OBJ [ARGNAM])" (id error-vector))))) (section 4 "error-structure" (def (sig (procedure "(error-structure LOC OBJ TAG [ARGNAM])" (id error-structure))) (p (tt "error-record") " and " (tt "error-record-type") " are essentially synonyms."))) (section 4 "error-symbol" (def (sig (procedure "(error-symbol LOC OBJ [ARGNAM])" (id error-symbol))))) (section 4 "error-keyword" (def (sig (procedure "(error-keyword LOC OBJ [ARGNAM])" (id error-keyword))))) (section 4 "error-string" (def (sig (procedure "(error-string LOC OBJ [ARGNAM])" (id error-string))))) (section 4 "error-char" (def (sig (procedure "(error-char LOC OBJ [ARGNAM])" (id error-char))))) (section 4 "error-boolean" (def (sig (procedure "(error-boolean LOC OBJ [ARGNAM])" (id error-boolean))))) (section 4 "error-alist" (def (sig (procedure "(error-alist LOC OBJ [ARGNAM])" (id error-alist))))) (section 4 "error-minimum-argument-count" (def (sig (procedure "(error-minimum-argument-count LOC ARGC MINARGC)" (id error-minimum-argument-count))))) (section 4 "error-argument-count" (def (sig (procedure "(error-argument-count LOC ARGC MAXARGC)" (id error-argument-count))))) (section 4 "error-open-interval" (def (sig (procedure "(error-open-interval LOC NUM MINNUM MAXNUM [ARGNAM])" (id error-open-interval))))) (section 4 "error-closed-interval" (def (sig (procedure "(error-closed-interval LOC NUM MINNUM MAXNUM [ARGNAM])" (id error-closed-interval))))) (section 4 "error-half-open-interval" (def (sig (procedure "(error-half-open-interval LOC NUM MINNUM MAXNUM [ARGNAM])" (id error-half-open-interval))))) (section 4 "error-half-closed-interval" (def (sig (procedure "(error-half-closed-interval LOC NUM MINNUM MAXNUM [ARGNAM])" (id error-half-closed-interval))))) (section 4 "error-interval" (def (sig (procedure "(error-interval LOC NUM LEFT MINNUM MAXNUM RIGHT [ARGNAM])" (id error-interval))) (p (tt "LEFT") " is a " (tt "character") ", " (tt "symbol") ", or " (tt "string") " that denotes the symbolic opening of an interval.") (p (tt "RIGHT") " is a " (tt "character") ", " (tt "symbol") ", or " (tt "string") " that denotes the symbolic closing of an interval."))) (section 4 "define-error-type" (def (sig (syntax "(define-error-type TYPNAM [TYPMSG])" (id define-error-type))) (p (tt "TYPNAM") " is a " (tt "symbol") ".") (p (tt "TYPMSG") " is a " (tt "symbol") " or " (tt "string") ".") (p "Creates a procedure definition for " (tt "error-TYPNAM} with the signature of the above error procedures. The type-name is either {{TYPMSG") ", when present, or " (tt "\"TYPNAM\"") ".") (highlight scheme "(define-error-type hash-table)\n;=>\n;(define (error-hash-table loc obj #!optional argnam)\n;  (error-argument-type loc obj \"hash-table\" argnam) )\n\n(define-error-type byte-order \"symbol in {big-endian little-endian}\")\n;=>\n;(define (error-byte-order loc obj #!optional argnam)\n;  (error-argument-type loc obj \"symbol in {big-endian little-endian}\" argnam) )")))) (section 3 "SRFI 4 Checks" (section 4 "Usage" (highlight scheme "(require-extension srfi-4-checks)")) (section 4 "check-s8vector" (def (sig (procedure "(check-s8vector LOC OBJ [ARGNAM]) => *" (id check-s8vector))))) (section 4 "check-u8vector" (def (sig (procedure "(check-u8vector LOC OBJ [ARGNAM]) => *" (id check-u8vector))))) (section 4 "check-s16vector" (def (sig (procedure "(check-s16vector LOC OBJ [ARGNAM]) => *" (id check-s16vector))))) (section 4 "check-u16vector" (def (sig (procedure "(check-u16vector LOC OBJ [ARGNAM]) => *" (id check-u16vector))))) (section 4 "check-s32vector" (def (sig (procedure "(check-s32vector LOC OBJ [ARGNAM]) => *" (id check-s32vector))))) (section 4 "check-u32vector" (def (sig (procedure "(check-u32vector LOC OBJ [ARGNAM]) => *" (id check-u32vector))))) (section 4 "check-s64vector" (def (sig (procedure "(check-s64vector LOC OBJ [ARGNAM]) => *" (id check-s64vector))))) (section 4 "check-u64vector" (def (sig (procedure "(check-u64vector LOC OBJ [ARGNAM]) => *" (id check-u64vector))))) (section 4 "check-f32vector" (def (sig (procedure "(check-f32vector LOC OBJ [ARGNAM]) => *" (id check-f32vector))))) (section 4 "check-f64vector" (def (sig (procedure "(check-f64vector LOC OBJ [ARGNAM]) => *" (id check-f64vector)))))) (section 3 "SRFI 4 Errors" (section 4 "Usage" (highlight scheme "(require-extension srfi-4-errors)")) (section 4 "error-s8vector" (def (sig (procedure "(error-s8vector LOC OBJ [ARGNAM])" (id error-s8vector))))) (section 4 "error-u8vector" (def (sig (procedure "(error-u8vector LOC OBJ [ARGNAM])" (id error-u8vector))))) (section 4 "error-s16vector" (def (sig (procedure "(error-s16vector LOC OBJ [ARGNAM])" (id error-s16vector))))) (section 4 "error-u16vector" (def (sig (procedure "(error-u16vector LOC OBJ [ARGNAM])" (id error-u16vector))))) (section 4 "error-s32vector" (def (sig (procedure "(error-s32vector LOC OBJ [ARGNAM])" (id error-s32vector))))) (section 4 "error-u32vector" (def (sig (procedure "(error-u32vector LOC OBJ [ARGNAM])" (id error-u32vector))))) (section 4 "error-s64vector" (def (sig (procedure "(error-s64vector LOC OBJ [ARGNAM])" (id error-s64vector))))) (section 4 "error-u64vector" (def (sig (procedure "(error-u64vector LOC OBJ [ARGNAM])" (id error-u64vector))))) (section 4 "error-f32vector" (def (sig (procedure "(error-f32vector LOC OBJ [ARGNAM])" (id error-f32vector))))) (section 4 "error-f64vector" (def (sig (procedure "(error-f64vector LOC OBJ [ARGNAM])" (id error-f64vector))))))) (section 2 "Notes" (ul (li (tt "s64vector") " and " (tt "u64vector") " are unsupported by the Chicken Unit srfi-4."))) (section 2 "Author" (p (int-link "/users/kon-lovett" "Kon Lovett"))) (section 2 "Version history" (dl (dt "1.12.3 ; Fix for " (tt "error-minimum-argument-coun") " and " (tt "error-argument-count") ".") (dt "1.12.2 ; Better " (i "no-install") " support.") (dt "1.12.1 ; Deprecated " (tt "...-cardinal-...") " in favor of " (tt "...-natural-...") ".") (dt "1.12.0 ; Removed " (i "error-utils") " & " (i "conditions") ".") (dt "1.11.0 ; Added " (i "error-utils") ".") (dt "1.10.0 ; The " (tt "check-...") " routines return the checked value.") (dt "1.8.0") (dd "Added srfi-4 support.") (dt "1.7.0") (dt "1.6.0") (dd "Added interval support.") (dt "1.5.0") (dd "Added alist and argument count support.") (dt "1.4.0") (dt "1.3.0") (dd "Added " (tt "warning-argument-type") ".") (dt "1.2.0") (dd "Added " (tt "make-error-type-message") " & fixed " (tt "define-check+error-type") ".") (dt "1.1.0") (dd "Added " (tt "make-condition+") ", " (tt "condition-property-accessor*") " and " (tt "make-condition-property-accessor") ".") (dt "1.0.0") (dd "Initial release."))) (section 2 "License" (p "Copyright (C) 2009-2010 Kon Lovett.  All rights reserved.") (p "Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the Software), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:") (p "The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.") (p "THE SOFTWARE IS PROVIDED ASIS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.")))
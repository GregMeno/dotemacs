(index ("check-defined-value" 0) ("check-bound-value" 170) ("check-fixnum" 435) ("check-positive-fixnum" 516) ("check-natural-fixnum" 615) ("check-flonum" 712) ("check-integer" 793) ("check-positive-integer" 876) ("check-natural-integer" 977) ("check-number" 1076) ("check-positive-number" 1157) ("check-natural-number" 1256) ("check-procedure" 1353) ("check-input-port" 1440) ("check-output-port" 1529) ("check-list" 1620) ("check-pair" 1697) ("check-blob" 1774) ("check-vector" 1851) ("check-structure" 1932) ("check-record" 1932) ("check-record-type" 1932) ("check-symbol" 2265) ("check-keyword" 2346) ("check-string" 2429) ("check-char" 2510) ("check-boolean" 2587) ("check-alist" 2670) ("check-minimum-argument-count" 2749) ("check-argument-count" 2936) ("check-open-interval" 3107) ("check-closed-interval" 3356) ("check-half-open-interval" 3609) ("check-half-closed-interval" 3868) ("define-check-type" 4131) ("define-check+error-type" 4659) ("make-bad-argument-message" 5357) ("make-type-name-message" 5697) ("make-error-type-message" 6180) ("signal-type-error" 6624) ("error-argument-type" 6768) ("warning-argument-type" 7056) ("error-defined-value" 7249) ("error-bound-value" 7339) ("error-fixnum" 7425) ("error-positive-fixnum" 7501) ("error-natural-fixnum" 7595) ("error-flonum" 7687) ("error-integer" 7763) ("error-positive-integer" 7841) ("error-natural-integer" 7937) ("error-number" 8031) ("error-positive-number" 8107) ("error-natural-number" 8201) ("error-procedure" 8293) ("error-input-port" 8375) ("error-output-port" 8459) ("error-list" 8545) ("error-pair" 8617) ("error-blob" 8689) ("error-vector" 8761) ("error-structure" 8837) ("error-symbol" 9009) ("error-keyword" 9085) ("error-string" 9163) ("error-char" 9239) ("error-boolean" 9311) ("error-alist" 9389) ("error-minimum-argument-count" 9463) ("error-argument-count" 9571) ("error-open-interval" 9663) ("error-closed-interval" 9767) ("error-half-open-interval" 9875) ("error-half-closed-interval" 9989) ("error-interval" 10107) ("define-error-type" 10485) ("check-s8vector" 11257) ("check-u8vector" 11342) ("check-s16vector" 11427) ("check-u16vector" 11514) ("check-s32vector" 11601) ("check-u32vector" 11688) ("check-s64vector" 11775) ("check-u64vector" 11862) ("check-f32vector" 11949) ("check-f64vector" 12036) ("error-s8vector" 12123) ("error-u8vector" 12203) ("error-s16vector" 12283) ("error-u16vector" 12365) ("error-s32vector" 12447) ("error-u32vector" 12529) ("error-s64vector" 12611) ("error-u64vector" 12693) ("error-f32vector" 12775) ("error-f64vector" 12857))
(def (sig (procedure "(check-defined-value LOC OBJ [ARGNAM]) => *" (id check-defined-value))) (p "Ensures the " (tt "OBJ") " is non-void, i.e. not an undefined-value."))
(def (sig (procedure "(check-bound-value LOC OBJ [ARGNAM]) => *" (id check-bound-value))) (p "Ensures the " (tt "OBJ") " is the value of a bound variable.") (p (i "Only") " for use in rather unsafe calling envrionments where some explicit checking is necessary."))
(def (sig (procedure "(check-fixnum LOC OBJ [ARGNAM]) => *" (id check-fixnum))))
(def (sig (procedure "(check-positive-fixnum LOC OBJ [ARGNAM]) => *" (id check-positive-fixnum))))
(def (sig (procedure "(check-natural-fixnum LOC OBJ [ARGNAM]) => *" (id check-natural-fixnum))))
(def (sig (procedure "(check-flonum LOC OBJ [ARGNAM]) => *" (id check-flonum))))
(def (sig (procedure "(check-integer LOC OBJ [ARGNAM]) => *" (id check-integer))))
(def (sig (procedure "(check-positive-integer LOC OBJ [ARGNAM]) => *" (id check-positive-integer))))
(def (sig (procedure "(check-natural-integer LOC OBJ [ARGNAM]) => *" (id check-natural-integer))))
(def (sig (procedure "(check-number LOC OBJ [ARGNAM]) => *" (id check-number))))
(def (sig (procedure "(check-positive-number LOC OBJ [ARGNAM]) => *" (id check-positive-number))))
(def (sig (procedure "(check-natural-number LOC OBJ [ARGNAM]) => *" (id check-natural-number))))
(def (sig (procedure "(check-procedure LOC OBJ [ARGNAM]) => *" (id check-procedure))))
(def (sig (procedure "(check-input-port LOC OBJ [ARGNAM]) => *" (id check-input-port))))
(def (sig (procedure "(check-output-port LOC OBJ [ARGNAM]) => *" (id check-output-port))))
(def (sig (procedure "(check-list LOC OBJ [ARGNAM]) => *" (id check-list))))
(def (sig (procedure "(check-pair LOC OBJ [ARGNAM]) => *" (id check-pair))))
(def (sig (procedure "(check-blob LOC OBJ [ARGNAM]) => *" (id check-blob))))
(def (sig (procedure "(check-vector LOC OBJ [ARGNAM]) => *" (id check-vector))))
(def (sig (procedure "(check-structure LOC OBJ TAG [ARGNAM]) => *" (id check-structure)) (procedure "(check-record LOC OBJ TAG [ARGNAM]) => *" (id check-record)) (procedure "(check-record-type LOC OBJ TAG [ARGNAM]) => *" (id check-record-type))) (p (tt "check-record") " and " (tt "check-record-type") " are essentially synonyms."))
(def (sig (procedure "(check-symbol LOC OBJ [ARGNAM]) => *" (id check-symbol))))
(def (sig (procedure "(check-keyword LOC OBJ [ARGNAM]) => *" (id check-keyword))))
(def (sig (procedure "(check-string LOC OBJ [ARGNAM]) => *" (id check-string))))
(def (sig (procedure "(check-char LOC OBJ [ARGNAM]) => *" (id check-char))))
(def (sig (procedure "(check-boolean LOC OBJ [ARGNAM]) => *" (id check-boolean))))
(def (sig (procedure "(check-alist LOC OBJ [ARGNAM]) => *" (id check-alist))))
(def (sig (procedure "(check-minimum-argument-count LOC ARGC MINARGC) => *" (id check-minimum-argument-count))) (p "Does not verify the type of " (tt "ARGC") ", or " (tt "MINARGC") "."))
(def (sig (procedure "(check-argument-count LOC ARGC MAXARGC) => *" (id check-argument-count))) (p "Does not verify the type of " (tt "ARGC") ", or " (tt "MAXARGC") "."))
(def (sig (procedure "(check-open-interval LOC NUM MINNUM MAXNUM [ARGNAM]) => *" (id check-open-interval))) (p (tt "NUM") " in " (tt "]MINNUM MAXNUM[") ".") (p "Does not verify the type of " (tt "NUM") ", " (tt "MINNUM") ", or " (tt "MAXNUM") "."))
(def (sig (procedure "(check-closed-interval LOC NUM MINNUM MAXNUM [ARGNAM]) => *" (id check-closed-interval))) (p (tt "NUM") " in " (tt "[MINNUM MAXNUM]") ".") (p "Does not verify the type of " (tt "NUM") ", " (tt "MINNUM") ", or " (tt "MAXNUM") "."))
(def (sig (procedure "(check-half-open-interval LOC NUM MINNUM MAXNUM [ARGNAM]) => *" (id check-half-open-interval))) (p (tt "NUM") " in " (tt "]MINNUM MAXNUM]") ".") (p "Does not verify the type of " (tt "NUM") ", " (tt "MINNUM") ", or " (tt "MAXNUM") "."))
(def (sig (procedure "(check-half-closed-interval LOC NUM MINNUM MAXNUM [ARGNAM]) => *" (id check-half-closed-interval))) (p (tt "NUM") " in " (tt "[MINNUM MAXNUM[") ".") (p "Does not verify the type of " (tt "NUM") ", " (tt "MINNUM") ", or " (tt "MAXNUM") "."))
(def (sig (syntax "(define-check-type TYPNAM [TYPE-PRED])" (id define-check-type))) (p "Creates a procedure definition for " (tt "check-TYPNAM} with the signature of the above check procedures. The type-predicate is either {{TYPE-PRED") ", when present, or " (tt "TYPNAM?") ".") (p (tt "TYPNAM") " is an unquoted " (tt "symbol") ".") (highlight scheme "(define-check-type hash-table)\n;=>\n;(define (check-hash-table loc obj #!optional argnam)\n;  (unless (hash-table? obj)\n;    (error-hash-table loc obj argnam))\n;  obj )"))
(def (sig (syntax "(define-check+error-type TYPNAM [TYPE-PRED [TYPMSG]])" (id define-check+error-type))) (p "Creates a procedure definition for " (tt "check-TYPNAM} with the signature of the above check procedures. The type-predicate is either {{TYPE-PRED") ", when present, or " (tt "TYPE?") ". The error message type-name is either the " (tt "TYPMSG") ", when present, or " (tt "\"TYPNAM\"") "\".") (p (tt "TYPNAM") " is an unquoted " (tt "symbol") ".") (highlight scheme "(define-check+error-type hash-table)\n;=>\n;(define-error-type loc obj 'hash-table)\n;(define (check-hash-table loc obj #!optional argnam)\n;  (unless (hash-table? obj)\n;    (error-hash-table loc obj argnam))\n;  obj )"))
(def (sig (procedure "(make-bad-argument-message [ARGNAM]) => string" (id make-bad-argument-message))) (p "Returns an argument type error message for the, optional, " (tt "ARGNAM") ".") (p "Example:") (highlight scheme "(make-bad-argument-message \"count\") ;=> \"bad `count' argument\"\n(make-bad-argument-message) ;=> \"bad argument\""))
(def (sig (procedure "(make-type-name-message TYPNAM) => string" (id make-type-name-message))) (p "Returns an argument type message for the " (tt "TYPNAM") ".") (p "Example:") (highlight scheme "(make-type-name-message integer) ;=> an integer\"\n(make-type-name-message \"symbol in {foo bar baz}\") ;=> \"a symbol in {foo bar baz}\"") (p (i "Note") " that " (tt "make-type-name-message") " is suitable " (b "only") " for English. It supplies a suitable article for the type-name."))
(def (sig (procedure "(make-error-type-message TYPNAM [ARGNAM]) => string" (id make-error-type-message))) (p "Returns a type error message from the " (tt "TYPNAM} and optional {{ARGNAM") ".") (p "Uses " (tt "make-bad-argument-message") " and " (tt "make-type-name-message") " to build the message components.") (p "Example:") (highlight scheme "(make-error-type-message 'integer \"count\") ;=> \"bad `count' argument type - not an integer\""))
(def (sig (procedure "(signal-type-error LOC MSG OBJ...)" (id signal-type-error))) (p "Raises a non-continuable type error - (({exn type)}}."))
(def (sig (procedure "(error-argument-type LOC OBJ TYPNAM [ARGNAM])" (id error-argument-type))) (p "Raises a " (tt "type-error") " where is message is constructed from the " (tt "TYPNAM} and {{ARGNAM") ".") (p "Uses " (tt "signal-type-error") " and " (tt "make-error-type-message") "."))
(def (sig (procedure "(warning-argument-type LOC OBJ TYPNAM [ARGNAM])" (id warning-argument-type))) (p "A warning is issued with a message similar to that of " (tt "error-argument-type") "."))
(def (sig (procedure "(error-defined-value LOC OBJ [ARGNAM])" (id error-defined-value))))
(def (sig (procedure "(error-bound-value LOC OBJ [ARGNAM])" (id error-bound-value))))
(def (sig (procedure "(error-fixnum LOC OBJ [ARGNAM])" (id error-fixnum))))
(def (sig (procedure "(error-positive-fixnum LOC OBJ [ARGNAM])" (id error-positive-fixnum))))
(def (sig (procedure "(error-natural-fixnum LOC OBJ [ARGNAM])" (id error-natural-fixnum))))
(def (sig (procedure "(error-flonum LOC OBJ [ARGNAM])" (id error-flonum))))
(def (sig (procedure "(error-integer LOC OBJ [ARGNAM])" (id error-integer))))
(def (sig (procedure "(error-positive-integer LOC OBJ [ARGNAM])" (id error-positive-integer))))
(def (sig (procedure "(error-natural-integer LOC OBJ [ARGNAM])" (id error-natural-integer))))
(def (sig (procedure "(error-number LOC OBJ [ARGNAM])" (id error-number))))
(def (sig (procedure "(error-positive-number LOC OBJ [ARGNAM])" (id error-positive-number))))
(def (sig (procedure "(error-natural-number LOC OBJ [ARGNAM])" (id error-natural-number))))
(def (sig (procedure "(error-procedure LOC OBJ [ARGNAM])" (id error-procedure))))
(def (sig (procedure "(error-input-port LOC OBJ [ARGNAM])" (id error-input-port))))
(def (sig (procedure "(error-output-port LOC OBJ [ARGNAM])" (id error-output-port))))
(def (sig (procedure "(error-list LOC OBJ [ARGNAM])" (id error-list))))
(def (sig (procedure "(error-pair LOC OBJ [ARGNAM])" (id error-pair))))
(def (sig (procedure "(error-blob LOC OBJ [ARGNAM])" (id error-blob))))
(def (sig (procedure "(error-vector LOC OBJ [ARGNAM])" (id error-vector))))
(def (sig (procedure "(error-structure LOC OBJ TAG [ARGNAM])" (id error-structure))) (p (tt "error-record") " and " (tt "error-record-type") " are essentially synonyms."))
(def (sig (procedure "(error-symbol LOC OBJ [ARGNAM])" (id error-symbol))))
(def (sig (procedure "(error-keyword LOC OBJ [ARGNAM])" (id error-keyword))))
(def (sig (procedure "(error-string LOC OBJ [ARGNAM])" (id error-string))))
(def (sig (procedure "(error-char LOC OBJ [ARGNAM])" (id error-char))))
(def (sig (procedure "(error-boolean LOC OBJ [ARGNAM])" (id error-boolean))))
(def (sig (procedure "(error-alist LOC OBJ [ARGNAM])" (id error-alist))))
(def (sig (procedure "(error-minimum-argument-count LOC ARGC MINARGC)" (id error-minimum-argument-count))))
(def (sig (procedure "(error-argument-count LOC ARGC MAXARGC)" (id error-argument-count))))
(def (sig (procedure "(error-open-interval LOC NUM MINNUM MAXNUM [ARGNAM])" (id error-open-interval))))
(def (sig (procedure "(error-closed-interval LOC NUM MINNUM MAXNUM [ARGNAM])" (id error-closed-interval))))
(def (sig (procedure "(error-half-open-interval LOC NUM MINNUM MAXNUM [ARGNAM])" (id error-half-open-interval))))
(def (sig (procedure "(error-half-closed-interval LOC NUM MINNUM MAXNUM [ARGNAM])" (id error-half-closed-interval))))
(def (sig (procedure "(error-interval LOC NUM LEFT MINNUM MAXNUM RIGHT [ARGNAM])" (id error-interval))) (p (tt "LEFT") " is a " (tt "character") ", " (tt "symbol") ", or " (tt "string") " that denotes the symbolic opening of an interval.") (p (tt "RIGHT") " is a " (tt "character") ", " (tt "symbol") ", or " (tt "string") " that denotes the symbolic closing of an interval."))
(def (sig (syntax "(define-error-type TYPNAM [TYPMSG])" (id define-error-type))) (p (tt "TYPNAM") " is a " (tt "symbol") ".") (p (tt "TYPMSG") " is a " (tt "symbol") " or " (tt "string") ".") (p "Creates a procedure definition for " (tt "error-TYPNAM} with the signature of the above error procedures. The type-name is either {{TYPMSG") ", when present, or " (tt "\"TYPNAM\"") ".") (highlight scheme "(define-error-type hash-table)\n;=>\n;(define (error-hash-table loc obj #!optional argnam)\n;  (error-argument-type loc obj \"hash-table\" argnam) )\n\n(define-error-type byte-order \"symbol in {big-endian little-endian}\")\n;=>\n;(define (error-byte-order loc obj #!optional argnam)\n;  (error-argument-type loc obj \"symbol in {big-endian little-endian}\" argnam) )"))
(def (sig (procedure "(check-s8vector LOC OBJ [ARGNAM]) => *" (id check-s8vector))))
(def (sig (procedure "(check-u8vector LOC OBJ [ARGNAM]) => *" (id check-u8vector))))
(def (sig (procedure "(check-s16vector LOC OBJ [ARGNAM]) => *" (id check-s16vector))))
(def (sig (procedure "(check-u16vector LOC OBJ [ARGNAM]) => *" (id check-u16vector))))
(def (sig (procedure "(check-s32vector LOC OBJ [ARGNAM]) => *" (id check-s32vector))))
(def (sig (procedure "(check-u32vector LOC OBJ [ARGNAM]) => *" (id check-u32vector))))
(def (sig (procedure "(check-s64vector LOC OBJ [ARGNAM]) => *" (id check-s64vector))))
(def (sig (procedure "(check-u64vector LOC OBJ [ARGNAM]) => *" (id check-u64vector))))
(def (sig (procedure "(check-f32vector LOC OBJ [ARGNAM]) => *" (id check-f32vector))))
(def (sig (procedure "(check-f64vector LOC OBJ [ARGNAM]) => *" (id check-f64vector))))
(def (sig (procedure "(error-s8vector LOC OBJ [ARGNAM])" (id error-s8vector))))
(def (sig (procedure "(error-u8vector LOC OBJ [ARGNAM])" (id error-u8vector))))
(def (sig (procedure "(error-s16vector LOC OBJ [ARGNAM])" (id error-s16vector))))
(def (sig (procedure "(error-u16vector LOC OBJ [ARGNAM])" (id error-u16vector))))
(def (sig (procedure "(error-s32vector LOC OBJ [ARGNAM])" (id error-s32vector))))
(def (sig (procedure "(error-u32vector LOC OBJ [ARGNAM])" (id error-u32vector))))
(def (sig (procedure "(error-s64vector LOC OBJ [ARGNAM])" (id error-s64vector))))
(def (sig (procedure "(error-u64vector LOC OBJ [ARGNAM])" (id error-u64vector))))
(def (sig (procedure "(error-f32vector LOC OBJ [ARGNAM])" (id error-f32vector))))
(def (sig (procedure "(error-f64vector LOC OBJ [ARGNAM])" (id error-f64vector))))

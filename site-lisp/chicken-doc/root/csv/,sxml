((tags "eggs") (toc) (section 2 "csv" (section 3 "Description" (p "The " (tt "csv") " library contains procedures for parsing and formatting of comma-separated values (CSV) as described in " (link "http://tools.ietf.org/html/rfc4180" "RFC 4180") ". There are several differences with the RFC:") (ul (li "The RFC prescribes CRLF standard network line breaks, but many CSV files have platform-dependent line endings, so this library accepts any sequence of CRs and LFs as a line break.") (li "The format of header lines is exactly like a regular record and the presence of a header can only be determined from the mime type.  This library treats all lines as regular records.") (li "The formal grammar specifies that fields can contain only certain US ASCII characters, but the specification of the MIME type allows for other character sets. This library allow all characters in fields, except for the field delimiter character, CRs and LFs in unquoted fields.") (li "According to the RFC, the records all have to have the same length. This library allows variable length records.") (li "The delimiter character is specified by the user and can be a character other than comma, or an SRFI-14 character set."))) (section 3 "Library Procedures" (def (sig (procedure "(csv-record? X) => BOOL" (id csv-record?))) (p "Returns " (tt "#t") " if the given object is a " (tt "csv-record") ", " (tt "#f") " otherwise.")) (def (sig (procedure "(list->csv-record LIST) => CSV-RECORD" (id list->csv-record))) (p "Takes in a list of values and creates a " (tt "csv-record") " object.")) (def (sig (procedure "(csv-record->list CSV-RECORD) => LIST" (id csv-record->list))) (p "Returns the list of values contained in the given " (tt "csv-record") " object.")) (section 4 "Parsing procedures" (p "The parsing procedures of this library are provided as fields of the " (tt "<CSV>") " typeclass. Please see the " (int-link "typeclass") " library for information on type classes.") (p "The " (tt "<CSV>") " typeclass is intended to provide abstraction over different kinds of input sequences, e.g. character lists, strings, streams, etc. " (tt "<CSV>") " inherits from " (tt "<CoreABNF>") ", which provides the core parsing primitives used to build the CSV grammar parser (see the " (int-link "abnf") " library for more information).") (p "The following example illustrates the creation of an instance of " (tt "<CSV>") " specialized for character lists.") (highlight scheme "(require-extension typeclass input-classes abnf)\n\n(define char-list-<Input>\n  (make-<Input> null? car cdr))\n\n(define char-list-<Token>\n  (Input->Token char-list-<Input>))\n\n(define char-list-<CharLex>\n  (Token->CharLex char-list-<Token>))\n\n(define char-list-<CoreABNF>\n  (Token.CharLex->CoreABNF char-list-<Token> \n\t\t\t   char-list-<CharLex>))\n\n(define char-list-<CSV>\n  (CoreABNF->CSV char-list-<CoreABNF> ))\n\n(define parse-csv ((make-parser char-list-<CSV>) #\\|))") (def (sig (procedure "(make-parser CSV-INSTANCE) => (LAMBDA [DELIMITER]) => PARSER" (id make-parser))) (p "Once applied to an instance of the " (tt "<CSV>") " typeclass, " (tt "make-parser") " returns a constructor for the CSV parsing procedure. Optional argument " (tt "DELIMITER") " specifies the field delimiter (comma by default). " (tt "DELIMITER") " can be a character, or an SRFI-14 character set. The returned procedure takes in a string and returns a list of the form:") (pre " ((<#csv-record (FIELD1 FIELD2 ...)>) (<#csv-record ... >))") (p "where " (tt "FIELD") " represents the field values in a record."))) (section 4 "Formatting procedures" (def (sig (procedure "(make-format [DELIMITER]) => FORMAT-CELL * FORMAT-RECORD * FORMAT-CSV" (id make-format))) (p "Returns procedures for outputting individual field values, CSV records, and lists of CSV records, where each list is printed on a separate line.") (p "Procedure " (tt "FORMAT-CELL") " takes in a value, obtains its string representation via " (tt "format") ", and surrounds the string with quotes, if it contains characters that need to be escaped (such as quote characters, the delimiter character, or newlines).") (p "Procedure " (tt "FORMAT-RECORD") " takes in a record of type " (tt "csv-record") " and returns its string representation, based on the strings produced by " (tt "FORMAT-CELL") " and the delimiter character.") (p "Procedure " (tt "FORMAT-CSV") " takes in a list of " (tt "csv-record") " objects and produces a string representation using " (tt "FORMAT-RECORD") ".")))) (section 3 "Requires" (ul (li (int-link "abnf")) (li (int-link "typeclass")))) (section 3 "Version History" (ul (li "3.2 Fixes to reflect changes in the regex API in Chicken 4.6.0") (li "3.1 Added regex as an explicit dependency") (li "3.0 Implemented typeclass interface") (li "2.0 Added formatting routines") (li "1.0 Initial Release"))) (section 3 "License" (pre " Copyright 2009-2010 Ivan Raikov and the Okinawa Institute of Science and Technology.") (pre " This program is free software: you can redistribute it and/or\n modify it under the terms of the GNU General Public License as\n published by the Free Software Foundation, either version 3 of the\n License, or (at your option) any later version.") (pre " This program is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n General Public License for more details.") (pre " A full copy of the GPL license can be found at\n <http://www.gnu.org/licenses/>."))))
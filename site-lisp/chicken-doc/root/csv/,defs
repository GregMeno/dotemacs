(index ("csv-record?" 0) ("list->csv-record" 168) ("csv-record->list" 330) ("make-parser" 502) ("make-format" 1121))
(def (sig (procedure "(csv-record? X) => BOOL" (id csv-record?))) (p "Returns " (tt "#t") " if the given object is a " (tt "csv-record") ", " (tt "#f") " otherwise."))
(def (sig (procedure "(list->csv-record LIST) => CSV-RECORD" (id list->csv-record))) (p "Takes in a list of values and creates a " (tt "csv-record") " object."))
(def (sig (procedure "(csv-record->list CSV-RECORD) => LIST" (id csv-record->list))) (p "Returns the list of values contained in the given " (tt "csv-record") " object."))
(def (sig (procedure "(make-parser CSV-INSTANCE) => (LAMBDA [DELIMITER]) => PARSER" (id make-parser))) (p "Once applied to an instance of the " (tt "<CSV>") " typeclass, " (tt "make-parser") " returns a constructor for the CSV parsing procedure. Optional argument " (tt "DELIMITER") " specifies the field delimiter (comma by default). " (tt "DELIMITER") " can be a character, or an SRFI-14 character set. The returned procedure takes in a string and returns a list of the form:") (pre " ((<#csv-record (FIELD1 FIELD2 ...)>) (<#csv-record ... >))") (p "where " (tt "FIELD") " represents the field values in a record."))
(def (sig (procedure "(make-format [DELIMITER]) => FORMAT-CELL * FORMAT-RECORD * FORMAT-CSV" (id make-format))) (p "Returns procedures for outputting individual field values, CSV records, and lists of CSV records, where each list is printed on a separate line.") (p "Procedure " (tt "FORMAT-CELL") " takes in a value, obtains its string representation via " (tt "format") ", and surrounds the string with quotes, if it contains characters that need to be escaped (such as quote characters, the delimiter character, or newlines).") (p "Procedure " (tt "FORMAT-RECORD") " takes in a record of type " (tt "csv-record") " and returns its string representation, based on the strings produced by " (tt "FORMAT-CELL") " and the delimiter character.") (p "Procedure " (tt "FORMAT-CSV") " takes in a list of " (tt "csv-record") " objects and produces a string representation using " (tt "FORMAT-RECORD") "."))

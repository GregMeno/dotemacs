((tags "egg") (section 2 "binary-heap" (p "Binary heap.") (toc)) (section 2 "Usage" (p "(require-extension binary-heap)")) (section 2 "Documentation" (p "The " (tt "binary-heap") " library is based on the Ocaml heap implementation by Jean-Christophe Filliatre.") (p "Heaps are encoded as binary trees that have the heap property, namely the value of any node is greater or equal than the nodes in its left and right subtrees.") (p "A binary-heap object is created by procedure " (tt "make-binary-heap") ", the only user-visible procedure defined in this egg:") (def (sig (procedure "make-binary-heap:: KEY-COMPARE-PROC -> SELECTOR" (id make-binary-heap))) (p "where KEY-COMPARE-PROC is a user-supplied function that takes two keys and returns a negative, positive, or zero number depending on how the first key compares to the second.") (p "The returned selector procedure can take one of the following arguments:") (table (@ (class "symbol-table")) (tr (td "'get-max") (td "returns a (key . value) pair for an association in the heap with the largest key. If the heap is empty, an error is signalled.")) "\n" (tr (td "'delete-max") (td "removes the max key and the corresponding association from the heap. Returns a (key . value) pair of the removed association. If the heap is empty, an error is signalled.")) "\n" (tr (td "'empty?") (td "returns " (tt "#t") " if the heap is empty")) "\n" (tr (td "'size") (td "returns the size (the number of associations) in the heap")) "\n" (tr (td "'put") (td "pure variant of " (tt "PUT!") "; it returns a new heap object that contains the given association, while the original heap object is unmodified. ")) "\n" (tr (td "'for-each") (td "returns a procedure " (tt "LAMBDA PROC") " that will apply the given procedure PROC to each (key . value) association of the heap, from the one with the smallest key all the way to the one with the max key, in an ascending order of keys. ")) "\n" (tr (td "'fold") (td "returns a procedure " (tt "LAMBDA PROC INITIAL") " such that, given the associations in the heap ordered by the descending order of keys: " (tt "(key-n . value-n) ... (key-2 . value-2) (key-1 . value-1) ") " the procedure returns the result of the successive function applications " (tt "(PROC value-1 (PROC value-2 ... (PROC value-n INITIAL)") ". "))))) (section 2 "Examples") (section 2 "About this egg" (section 3 "Author" (p (int-link "/users/ivan-raikov" "Ivan Raikov"))) (section 3 "Version history" (dl (dt "1.1") (dd "Documentation converted to wiki format") (dt "1.0") (dd "Initial release"))) (section 3 "License" (pre "Copyright 2007-2010 Ivan Raikov.\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or (at\nyour option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nGeneral Public License for more details.\n\nA full copy of the GPL license can be found at\n<http://www.gnu.org/licenses/>."))))
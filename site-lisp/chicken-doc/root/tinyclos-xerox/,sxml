((section 2 "Tinyclos-xerox" (p "A very simple CLOS-like language, embedded in Scheme, with a simple MOP.") (section 3 "Documentation" (p (b "NOTE: Chicken is normally case-sensitive, and constructs depicted below in upper case for the purposes of exposition should be expressed in lower case during use.")) (pre "     ") (p "The features of the default base TinyCLOS language are:") (pre " * Classes, with instance slots, but no slot options.\n * Multiple-inheritance.\n * Generic functions with multi-methods and class specializers only.\n * Primary methods and call-next-method; no other method combination.\n * Uses Scheme's lexical scoping facilities as the class and generic\n   function naming mechanism.  Another way of saying this is that\n   class, generic function and methods are first-class (meta)objects.") (p "While the MOP is simple, it is essentially equal in power to both MOPs in AMOP.  This implementation is not at all optimized, but the MOP is designed so that it can be optimized.  In fact, this MOP allows better optimization of slot access extenstions than those in AMOP.") (p "In addition to calling a generic, the entry points to the default base language are:") (pre " (MAKE-CLASS list-of-superclasses list-of-slot-names)\n (MAKE-GENERIC)\n (MAKE-METHOD list-of-specializers procedure)\n (ADD-METHOD generic method)\n (MAKE class . initargs)\n (INITIALIZE instance initargs)            ;Add methods to this, don't call it directly.\n (SLOT-REF  object slot-name)\n (SLOT-SET! object slot-name new-value)") (p "So, for example, one might do:") (pre " (define  (make-class (list ) (list 'x 'y)))\n (add-method initialize\n     (make-method (list )\n       (lambda (call-next-method pos initargs)\n         (for-each (lambda (initarg-name slot-name)\n                     (slot-set! pos\n                                slot-name\n                                (getl initargs initarg-name 0)))\n                   '(x y)\n                   '(x y)))))\n (set! p1 (make  'x 1 'y 3))") (p "NOTE!  Do not use EQUAL? to compare objects!  Use EQ? or some hand written procedure.  Objects have a pointer to their class, and classes are circular structures, and ...") (p "The introspective part of the MOP looks like the following.  Note that these are ordinary procedures, not generics.") (pre " CLASS-DIRECT-SUPERS\n CLASS-DIRECT-SLOTS\n CLASS-CPL\n CLASS-SLOTS\n GENERIC-METHODS\n METHOD-SPECIALIZERS\n METHOD-PROCEDURE") (p "The intercessory protocol looks like (generics in uppercase):") (pre " make                        \n   ALLOCATE-INSTANCE\n   INITIALIZE                   (really a base-level generic)\n class initialization\n   COMPUTE-CPL\n   COMPUTE-SLOTS\n   COMPUTE-GETTER-AND-SETTER\n add-method                     (Notice this is not a generic!)\n   COMPUTE-APPLY-GENERIC\n     COMPUTE-METHODS\n       COMPUTE-METHOD-MORE-SPECIFIC?\n     COMPUTE-APPLY-METHODS") (p "As for the low-level memory system, assume the existence of:") (pre "%allocate-instance (nfields)\n%instance-ref      (instance field-number)\n%instance-set!     (instance field-number new)\n%allocate-entity   (nfields)\n%entity-ref        (instance field-number)\n%entity-set!       (instance field-number new)\nclass-of           (any-object)")) (section 3 "License" (pre " **********************************************************************\n Copyright (c) 1992 Xerox Corporation.  \n All Rights Reserved.  \n \n Use, reproduction, and preparation of derivative works are permitted.\n Any copy of this software or of any derivative work must include the\n above copyright notice of Xerox Corporation, this paragraph and the\n one after it.  Any distribution of this software or derivative works\n must comply with all applicable United States export control laws.\n \n This software is made available AS IS, and XEROX CORPORATION DISCLAIMS\n ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE\n IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY\n LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS\n EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING\n NEGLIGENCE) OR STRICT LIABILITY, EVEN IF XEROX CORPORATION IS ADVISED\n OF THE POSSIBILITY OF SUCH DAMAGES.\n **********************************************************************")) (section 3 "Edit history" (ul (li "10/**/92  Gregor  Originally Written") (li "1.0  11/10/92  Gregor  Changed names of generic invocation generics. Changed compute-getters-and-setters protocol. Made comments match the code. Changed maximum line width to 72.") (li "1.1  11/24/92  Gregor  Heavily edited to produce the reflective RPP processor program that is actually running. This is intended to be a tool for discussing what the language and protocol should be.  In the process of doing this, several small bugs were discovered, see the tiny-clos.scm file.") (li "1.2  12/02/92  Gregor  See tiny-clos.scm.") (li "1.3  12/08/92  Gregor  See tiny-clos.scm.")))))
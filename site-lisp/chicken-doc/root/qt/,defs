(index ("qt:init" 0) ("qt:run" 294) ("qt:widget" 588) ("qt:delete" 979) ("qt:show" 1153) ("qt:hide" 1239) ("qt:find" 1329) ("qt:pixmap" 1551) ("qt:update" 1689) ("qt:property" 1803) ("qt:receiver" 2619) ("qt:connect" 2827) ("qt:emit-signal" 3726) ("qt:invoke-method" 3876) ("qt:timer" 4105) ("qt:start" 4321) ("qt:stop" 4408) ("qt:clear" 4492) ("qt:add" 4640) ("qt:item" 4899) ("qt:set-headers" 5041) ("qt:selection" 5251) ("qt:insert" 5422) ("qt:message" 5555) ("qt:get-open-filename" 5768) ("qt:get-save-filename" 6206) ("qt:get-directory" 6374) ("qt:sound" 6535) ("qt:play" 6670) ("qt:stop" 6763) ("qt:shortcut" 6857) ("qt:add-action" 7253) ("qt:remove-action" 7378) ("qt:char-encoding" 7515) ("qt:gl" 7906) ("qt:classname" 8381) ("qt:dbus-connect" 8529) ("qt:session-bus" 8885) ("qt:system-bus" 8991) ("qt:list-names" 9094) ("qt:dbus-send-signal" 9363) ("qt:dbus-register-method" 9506) ("qt:dbus-call" 9795) ("qt:dbus-call-with-callback" 9959) ("qt:dbus-register-service" 10255) ("qt:dbus-unregister-service" 10385) ("qt:make-http" 10547) ("qt:destroy-http" 10692) ("qt:http-set-host" 10787) ("qt:http-get" 10913) ("qt:http-read-string" 11004) ("qt:make-variant-list" 11308) ("qt:variant-list-remove-front" 11488) ("qt:variant-list-insert-back" 11661) ("qt:list->variant-list" 11924) ("qt:variant-list->list" 12053) ("qt:variant-list-length" 12189))
(def (sig (procedure "(qt:init)" (id qt:init))) (p "Initializes Qt (including any command-line processing) and returns the application object, an instance of " (tt "<qt-application>") ". Performs an implicit") (pre "(qt:connect <application> \"lastWindowClosed()\" <application> \"quit()\")"))
(def (sig (procedure "(qt:run [ONCE])" (id qt:run))) (p "Runs the Qt event loop. If " (tt "ONCE") " is given and true, then the procedure returns once all pending events have been processed (use " (tt "(qt:run #t)") " in a loop when you want to do some custom idle processing, for example)."))
(def (sig (procedure "(qt:widget UIXML [PARENT])" (id qt:widget))) (p "Parses the UI description in the string " (tt "UIXML") ", which should be the XML representation of a user interface created by the Qt " (tt "designer") " application. Returns an instance of " (tt "<qt-widget>") ", the toplevel widget. If " (tt "PARENT") " is given, the newly created widget will be a child of this."))
(def (sig (procedure "(qt:delete OBJECT)" (id qt:delete))) (p "Deletes " (tt "OBJECT") ", which should be an instance of " (tt "<qt-object>") " or " (tt "<qt-pixmap>") "."))
(def (sig (procedure "(qt:show WIDGET)" (id qt:show))) (p "Shows the given widget."))
(def (sig (procedure "(qt:hide WIDGET)" (id qt:hide))) (p "Hides the widget from view."))
(def (sig (procedure "(qt:find WIDGET NAME)" (id qt:find))) (p "Returns the direct or indirect child widget of " (tt "WIDGET") " named " (tt "NAME") " (a string) or " (tt "#f") " if no such child widget could be found."))
(def (sig (procedure "(qt:pixmap FILENAME)" (id qt:pixmap))) (p "Loads an image file and returns an instance of " (tt "<qt-image>") "."))
(def (sig (procedure "(qt:update WIDGET)" (id qt:update))) (p "Schedules a repaint event for the given widget."))
(def (sig (procedure "(qt:property WIDGET PROP)" (id qt:property))) (pre " (set! (qt:property WIDGET PROP) VALUE)") (p "Get or set a widget property with the name " (tt "PROP") " (a string or symbol). See the Qt documentation for more information about which widget supports which properties. Value conversion is automatically, the following value types are supported:") (pre "Property (C++) type    Scheme type") (pre "QString                string\nint                    integer\ndouble                 number\nbool                   boolean\nchar                   char\nQPixmap                <qt-image>\nPoint                  s32vector\nSize                   s32vector\nRect                   s32vector\nPointF                 f64vector\nSizeF                  f64vector\nRectF                  f64vector"))
(def (sig (procedure "(qt:receiver THUNK)" (id qt:receiver))) (p "Returns an instance of " (tt "<qt-receiver>") " that when connected to a Qt signal will invoke " (tt "PROC") " once the signal is emitted."))
(def (sig (procedure "(qt:connect SOURCE SIGNAL DESTINATION [SLOT])" (id qt:connect))) (p "Connects the signal " (tt "SIGNAL") " from the " (tt "<qt-object>") " " (tt "SOURCE") " to the slot " (tt "SLOT") " from " (tt "DESTINATION") ".  If no slot is given then slot will have the same signature and name as the " (tt "SIGNAL") ".  Signals and slots should be strings and follow the normal syntax used by Qt. " (tt "DESTINATION") " can be a " (tt "<qt-object>") " or a scheme function. " (tt "SLOT") " can have any number of arguments as long as they can be marshalled back to scheme, the types currently are: int, string, bool, uint and double.  Dispatch is handled entirely by Qt using a fake object per call to qt:connect meaning that all of the rules for matching types and numbers of arguments still apply.  Returns a procedure that disconnects and frees the memory used by this connection."))
(def (sig (procedure "(qt:emit-signal OBJECT SLOT . ARGUMENTS)" (id qt:emit-signal))) (p "Emit a signal to an object with any number of arguments."))
(def (sig (procedure "(qt:invoke-method OBJECT SLOT [RESULT?] . ARGUMENTS)" (id qt:invoke-method))) (p "Emit a signal to an object, if a " (tt "RESULT?") " is true then the return value of the invoked singal will be returned."))
(def (sig (procedure "(qt:timer SECONDS)" (id qt:timer))) (p "Creates and returns a timer object which can be connected to a receiver and which will emit " (tt "\"timeout()\"") " signals every " (tt "SECONDS") "."))
(def (sig (procedure "(qt:start TIMER)" (id qt:start))) (p "Starts the given timer."))
(def (sig (procedure "(qt:stop TIMER)" (id qt:stop))) (p "Stops the given timer."))
(def (sig (procedure "(qt:clear WIDGET)" (id qt:clear))) (p "Clears all entries from " (tt "WIDGET") " which should be a " (tt "QListWidget") "."))
(def (sig (procedure "(qt:add WIDGET STRING)" (id qt:add))) (p "Adds a new entry to a " (tt "QListWidget") ", " (tt "QComboBox") " or " (tt "QTreeWidget") ". In the latter case, the columns should be separated by the " (tt "|") " character (vertical bar)."))
(def (sig (procedure "(qt:item WIDGET INDEX)" (id qt:item))) (p "Returns the text of the " (tt "QListWidget") " item with the given index."))
(def (sig (procedure "(qt:set-headers WIDGET STRING)" (id qt:set-headers))) (p "Sets the column headers in a " (tt "QTreeWidget") ". Columns should be separated by the " (tt "|") " character (vertical bar)."))
(def (sig (procedure "(qt:selection TEXTEDIT)" (id qt:selection))) (p "Returns the text of the currently active selection, or the empty string, if no text is selected."))
(def (sig (procedure "(qt:insert TEXTEDIT STRING)" (id qt:insert))) (p "Inserts " (tt "STRING") " at the current cursor location."))
(def (sig (procedure "(qt:message TEXT #!key caption parent button1 button2 button3)" (id qt:message))) (p "Opens a " (tt "QMessageBox") " with the given properties and returns the index of the pressed button."))
(def (sig (procedure "(qt:get-open-filename CAPTION DIRECTORY #!key parent options filter)" (id qt:get-open-filename))) (p "Shows a modal file-selection dialog and returns the selected filename (or \"\", if the dialog was canceled). " (tt "options") " should be a list with zero or more of the following keywords:") (pre "#:show-dirs-only\n#:dont-resolve-symlinks\n#:dont-confirm-overwrites\n#:dont-use-sheet\n#:dont-use-native-dialog"))
(def (sig (procedure "(qt:get-save-filename CAPTION DIRECTORY #!key parent options filter)" (id qt:get-save-filename))) (p "Shows a modal file-selection for saving."))
(def (sig (procedure "(qt:get-directory CAPTION DIRECTORY #!key parent options filter)" (id qt:get-directory))) (p "Shows a modal directory-selection dialog."))
(def (sig (procedure "(qt:sound FILENAME)" (id qt:sound))) (p "Loads a sound-file and returns an instance of " (tt "<qt-sound>") "."))
(def (sig (procedure "(qt:play SOUND)" (id qt:play))) (p "Plays the sound asynchronously."))
(def (sig (procedure "(qt:stop SOUND)" (id qt:stop))) (p "Stops a currently playing sound."))
(def (sig (procedure "(qt:shortcut KEY)" (id qt:shortcut))) (p "Creates a keyboard-shortcut action for " (tt "KEY") ", which should be a string naming a key-sequence, for example " (tt "\"Ctrl+E\"") ". See the Qt documentation for the interpretation of this string. " (tt "qt:shortcut") " returns an " (tt "<qt-action>") " instance that can be added to a widget with " (tt "qt:add-action") "."))
(def (sig (procedure "(qt:add-action WIDGET ACTION)" (id qt:add-action))) (p "Adds the given action to " (tt "WIDGET") "."))
(def (sig (procedure "(qt:remove-action WIDGET ACTION)" (id qt:remove-action))) (p "Removes " (tt "ACTION") " from " (tt "WIDGET") "."))
(def (sig (procedure "(qt:char-encoding [ENCODING])" (id qt:char-encoding))) (p "Selects the default character encoding for strings passed to and received from Qt. " (tt "ENCODING") " may be one of the symbols " (tt "ascii") ", " (tt "latin1") " or " (tt "utf8") ". The default is " (tt "latin1") ". If no argument is given, then " (tt "qt:char-encoding") " returns the current encoding."))
(def (sig (procedure "(qt:gl NAME PARENT INIT RESIZE PAINT)" (id qt:gl))) (p "Creates and returns a " (tt "QGLWidget") ". " (tt "INIT") " should be zero-argument procedure called to initialize the OpenGL context. " (tt "RESIZE") " should be a two-argument procedure called when the widget is resized and receives the new width and height. " (tt "PAINT") " is a zero-argument procedure called when the widget should repaint itself. GL output will be automatically flushed."))
(def (sig (procedure "(qt:classname OBJECT)" (id qt:classname))) (p "Returns the name of the Qt class of which " (tt "OBJECT") " is an instance."))
(def (sig (procedure "(qt:dbus-connect BUS SERVICE OBJECT INTERFACE SIGNAL TO [SLOT])" (id qt:dbus-connect))) (p "Unfortunately dbus connections are handled differently in Qt from regular singal/slot connections and this has leaked over. This function works indentically to " (tt "qt:connect") " and can connect to both Qt objects and scheme functions."))
(def (sig (procedure "(qt:session-bus)" (id qt:session-bus))) (p "Returns a handle to the session bus."))
(def (sig (procedure "(qt:system-bus)" (id qt:system-bus))) (p "Returns a handle to the system bus."))
(def (sig (procedure "(qt:list-names BUS)" (id qt:list-names))) (p "Returns the name of a bus (eg: (qt:dbus-list-names (qt:system-bus)) returns \"System bus\"). The unfortunate name of this function was the choice of the DBus API not the maintainer of the bindings."))
(def (sig (procedure "(qt:dbus-send-signal BUS OBJECT INTERFACE SIGNAL . ARGUMENTS)" (id qt:dbus-send-signal))) (p "Send a signal to a bus."))
(def (sig (procedure "(qt:dbus-register-method BUS PATH FUNCTION NAME)" (id qt:dbus-register-method))) (p "Register a function on a bus with a name and a path, the function must be a scheme function, but it can take arguments and name must conform to the standard Qt slot naming rules."))
(def (sig (procedure "(qt:dbus-call BUS SERVICE PATH INTERFACE METHOD . ARGUMENTS)" (id qt:dbus-call))) (p "Call a method on a bus with any number of arguments."))
(def (sig (procedure "(qt:dbus-call-with-callback BUS SERVICE PATH INTERFACE METHOD FUNCTION SLOT . ARGUMENTS)" (id qt:dbus-call-with-callback))) (p "Call a method on a bus with any number of arguments and connect the output to a function on a slot. The destination must be a scheme function."))
(def (sig (procedure "(qt:dbus-register-service bus service)" (id qt:dbus-register-service))) (p "Register a service on a bus."))
(def (sig (procedure "(qt:dbus-unregister-service bus service)" (id qt:dbus-unregister-service))) (pre "    ") (p "Unregister a service on a bus.") (pre "    "))
(def (sig (procedure "(qt:make-http)" (id qt:make-http))) (p "Make an http object, will have to be destroyed in the end with qt:destroy-http."))
(def (sig (procedure "(qt:destroy-http)" (id qt:destroy-http))) (p "Destroy an http object."))
(def (sig (procedure "(qt:http-set-host HTTP SERVER PORT)" (id qt:http-set-host))) (p "Set the host of an http connection."))
(def (sig (procedure "(qt:http-get HTTP PATH)" (id qt:http-get))) (p "Send an HTTP GET."))
(def (sig (procedure "(qt:http-read-string HTTP)" (id qt:http-read-string))) (p "Read back a string from the object, this is non-blocking. The best way to use this is to connect to \"done(bool)\" and possibly \"dataReadProgress(int,int)\" on the http object to be notified when the data is available."))
(def (sig (procedure "(qt:make-variant-list)" (id qt:make-variant-list))) (p "These will automatically be destroyed by the garbage collector when they are no longer referenced."))
(def (sig (procedure "(qt:variant-list-remove-front VARIANTLIST)" (id qt:variant-list-remove-front))) (p "Remove and return one element from the front of a variant list."))
(def (sig (procedure "(qt:variant-list-insert-back VARIANTLIST OBJ [SIGNED?])" (id qt:variant-list-insert-back))) (p "Insert one element to the back of a variant list. If " (tt "SIGNED?") " is not provided it is assumed to be true, this only affects integers."))
(def (sig (procedure "(qt:list->variant-list LIST)" (id qt:list->variant-list))) (p "Convert a scheme list to a variant list."))
(def (sig (procedure "(qt:variant-list->list VARIANTLIST)" (id qt:variant-list->list))) (p "Convert a variant list to a scheme list."))
(def (sig (procedure "(qt:variant-list-length VARIANTLIST)" (id qt:variant-list-length))) (p "Return the length of a variant list."))

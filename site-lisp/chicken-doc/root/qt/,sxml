((tags "egg" "gui") (toc) (section 2 "qt" (section 3 "Introduction" (p "This extension provides an easy to use interface to " (link "http://www.trolltech.com" "Trolltech's Qt 4") " toolkit. It provides bindings for the GUI side of Qt, as well as for Qt's builtin networking and dbus libraries. A great way to get started with using this API is to check out the unit tests bundled with this egg, in tests.scm. They provide an example of many of the API calls described here and all of the more complex ones.") (p "Memory management is completely manual (with the exception of child widgets, which are deleted when their parent is). To release the resources of a widget or other Qt objects, call " (tt "qt:delete") ".") (p "This Qt binding is necessarily incomplete since Qt is huge and testing every feature after adding it in would be too time consuming. If you miss certain functionality like widget-specific operations, contact the author. Most operations just need trivial 1 line changes to add.")) (section 3 "Installation" (p "The " (tt "QTDIR") " environment variable must be set to the installation directory of Qt, like this:") (pre "QTDIR=/usr/local/Trolltech/Qt-4.2.0 chicken-install qt") (section 4 "Windows" (p "This extension has been tested with the binary distribution of Qt, based on the mingw compiler included in the Qt distribution. It is recommended to use a custom build of CHICKEN that uses this particular gcc version and which is installed directly in the Qt installation directory. So assuming Qt is installed in `c:\\Qt\\2010.01`, do the following:") (pre " <obtain chicken sources, and cd to that directory>\n \n c:\\tmp\\chicken> mingw32-make PREFIX=c:/Qt/2010.01 PLATFORM=mingw\n c:\\tmp\\chicken> mingw32-make PREFIX=c:/Qt/2010.01 PLATFORM=mingw install\n c:\\tmp\\chicken> chicken-install qt") (p "Note that the author does not have a copy of Windows and as such will not provide any Windows support.")) (section 4 "N900" (p "This extension is known to work on at least one embedded device, the Nokia n900. More specific information is <a href=\"http://0xab.com/n900/\">available here</a>."))) (section 3 "Classes" (p "The following " (int-link "/eggref/4/protobj" "protobj") " classes are exposed:") (pre "<qt>\n <qt-action>\n <qt-dbus-connection>\n <qt-http>\n <qt-object>\n  <at-application>\n  <qt-widget>\n   <qt-text-edit>\n  <qt-receiver>\n  <qt-timer>\n  <qt-sound>\n <qt-pixmap>\n <qt-variant-list>")) (section 3 "General" (p "The basic mode of operation is that you create your UI using the qt designer, few bindings currently exist for creating widgets, and export them as an xml file. This file can then be read in to set up windows and widgets. By not having bindings for the widget creation routines we keep this egg at a manageable size, and the qt designer seems to be the best way to use Qt4 anyway. Widgets that must be created on the fly do have bindings.") (section 4 "qt:init" (def (sig (procedure "(qt:init)" (id qt:init))) (p "Initializes Qt (including any command-line processing) and returns the application object, an instance of " (tt "<qt-application>") ". Performs an implicit") (pre "(qt:connect <application> \"lastWindowClosed()\" <application> \"quit()\")"))) (section 4 "qt:run" (def (sig (procedure "(qt:run [ONCE])" (id qt:run))) (p "Runs the Qt event loop. If " (tt "ONCE") " is given and true, then the procedure returns once all pending events have been processed (use " (tt "(qt:run #t)") " in a loop when you want to do some custom idle processing, for example).")))) (section 3 "Widgets" (section 4 "qt:widget" (def (sig (procedure "(qt:widget UIXML [PARENT])" (id qt:widget))) (p "Parses the UI description in the string " (tt "UIXML") ", which should be the XML representation of a user interface created by the Qt " (tt "designer") " application. Returns an instance of " (tt "<qt-widget>") ", the toplevel widget. If " (tt "PARENT") " is given, the newly created widget will be a child of this."))) (section 4 "qt:delete" (def (sig (procedure "(qt:delete OBJECT)" (id qt:delete))) (p "Deletes " (tt "OBJECT") ", which should be an instance of " (tt "<qt-object>") " or " (tt "<qt-pixmap>") "."))) (section 4 "qt:show" (def (sig (procedure "(qt:show WIDGET)" (id qt:show))) (p "Shows the given widget."))) (section 4 "qt:hide" (def (sig (procedure "(qt:hide WIDGET)" (id qt:hide))) (p "Hides the widget from view."))) (section 4 "qt:find" (def (sig (procedure "(qt:find WIDGET NAME)" (id qt:find))) (p "Returns the direct or indirect child widget of " (tt "WIDGET") " named " (tt "NAME") " (a string) or " (tt "#f") " if no such child widget could be found."))) (section 4 "qt:pixmap" (def (sig (procedure "(qt:pixmap FILENAME)" (id qt:pixmap))) (p "Loads an image file and returns an instance of " (tt "<qt-image>") "."))) (section 4 "qt:update" (def (sig (procedure "(qt:update WIDGET)" (id qt:update))) (p "Schedules a repaint event for the given widget.")))) (section 3 "Properties" (section 4 "qt:property" (def (sig (procedure "(qt:property WIDGET PROP)" (id qt:property))) (pre " (set! (qt:property WIDGET PROP) VALUE)") (p "Get or set a widget property with the name " (tt "PROP") " (a string or symbol). See the Qt documentation for more information about which widget supports which properties. Value conversion is automatically, the following value types are supported:") (pre "Property (C++) type    Scheme type") (pre "QString                string\nint                    integer\ndouble                 number\nbool                   boolean\nchar                   char\nQPixmap                <qt-image>\nPoint                  s32vector\nSize                   s32vector\nRect                   s32vector\nPointF                 f64vector\nSizeF                  f64vector\nRectF                  f64vector")))) (section 3 "Signals and receivers" (section 4 "qt:receiver" (def (sig (procedure "(qt:receiver THUNK)" (id qt:receiver))) (p "Returns an instance of " (tt "<qt-receiver>") " that when connected to a Qt signal will invoke " (tt "PROC") " once the signal is emitted."))) (section 4 "qt:connect" (def (sig (procedure "(qt:connect SOURCE SIGNAL DESTINATION [SLOT])" (id qt:connect))) (p "Connects the signal " (tt "SIGNAL") " from the " (tt "<qt-object>") " " (tt "SOURCE") " to the slot " (tt "SLOT") " from " (tt "DESTINATION") ".  If no slot is given then slot will have the same signature and name as the " (tt "SIGNAL") ".  Signals and slots should be strings and follow the normal syntax used by Qt. " (tt "DESTINATION") " can be a " (tt "<qt-object>") " or a scheme function. " (tt "SLOT") " can have any number of arguments as long as they can be marshalled back to scheme, the types currently are: int, string, bool, uint and double.  Dispatch is handled entirely by Qt using a fake object per call to qt:connect meaning that all of the rules for matching types and numbers of arguments still apply.  Returns a procedure that disconnects and frees the memory used by this connection."))) (section 4 "qt:emit-signal" (def (sig (procedure "(qt:emit-signal OBJECT SLOT . ARGUMENTS)" (id qt:emit-signal))) (p "Emit a signal to an object with any number of arguments."))) (section 4 "qt:invoke-method" (def (sig (procedure "(qt:invoke-method OBJECT SLOT [RESULT?] . ARGUMENTS)" (id qt:invoke-method))) (p "Emit a signal to an object, if a " (tt "RESULT?") " is true then the return value of the invoked singal will be returned.")))) (section 3 "Timers" (section 4 "qt:timer" (def (sig (procedure "(qt:timer SECONDS)" (id qt:timer))) (p "Creates and returns a timer object which can be connected to a receiver and which will emit " (tt "\"timeout()\"") " signals every " (tt "SECONDS") "."))) (section 4 "qt:start" (def (sig (procedure "(qt:start TIMER)" (id qt:start))) (p "Starts the given timer."))) (section 4 "qt:stop" (def (sig (procedure "(qt:stop TIMER)" (id qt:stop))) (p "Stops the given timer.")))) (section 3 "Lists" (section 4 "qt:clear" (def (sig (procedure "(qt:clear WIDGET)" (id qt:clear))) (p "Clears all entries from " (tt "WIDGET") " which should be a " (tt "QListWidget") "."))) (section 4 "qt:add" (def (sig (procedure "(qt:add WIDGET STRING)" (id qt:add))) (p "Adds a new entry to a " (tt "QListWidget") ", " (tt "QComboBox") " or " (tt "QTreeWidget") ". In the latter case, the columns should be separated by the " (tt "|") " character (vertical bar)."))) (section 4 "qt:item" (def (sig (procedure "(qt:item WIDGET INDEX)" (id qt:item))) (p "Returns the text of the " (tt "QListWidget") " item with the given index."))) (section 4 "qt:set-headers" (def (sig (procedure "(qt:set-headers WIDGET STRING)" (id qt:set-headers))) (p "Sets the column headers in a " (tt "QTreeWidget") ". Columns should be separated by the " (tt "|") " character (vertical bar).")))) (section 3 "Text edit widgets" (section 4 "qt:selection" (def (sig (procedure "(qt:selection TEXTEDIT)" (id qt:selection))) (p "Returns the text of the currently active selection, or the empty string, if no text is selected."))) (section 4 "qt:insert" (def (sig (procedure "(qt:insert TEXTEDIT STRING)" (id qt:insert))) (p "Inserts " (tt "STRING") " at the current cursor location.")))) (section 3 "Dialogs" (section 4 "qt:message" (def (sig (procedure "(qt:message TEXT #!key caption parent button1 button2 button3)" (id qt:message))) (p "Opens a " (tt "QMessageBox") " with the given properties and returns the index of the pressed button.")) (def (sig (procedure "(qt:get-open-filename CAPTION DIRECTORY #!key parent options filter)" (id qt:get-open-filename))) (p "Shows a modal file-selection dialog and returns the selected filename (or \"\", if the dialog was canceled). " (tt "options") " should be a list with zero or more of the following keywords:") (pre "#:show-dirs-only\n#:dont-resolve-symlinks\n#:dont-confirm-overwrites\n#:dont-use-sheet\n#:dont-use-native-dialog")) (def (sig (procedure "(qt:get-save-filename CAPTION DIRECTORY #!key parent options filter)" (id qt:get-save-filename))) (p "Shows a modal file-selection for saving.")) (def (sig (procedure "(qt:get-directory CAPTION DIRECTORY #!key parent options filter)" (id qt:get-directory))) (p "Shows a modal directory-selection dialog.")))) (section 3 "Sound" (section 4 "qt:sound" (def (sig (procedure "(qt:sound FILENAME)" (id qt:sound))) (p "Loads a sound-file and returns an instance of " (tt "<qt-sound>") "."))) (section 4 "qt:play" (def (sig (procedure "(qt:play SOUND)" (id qt:play))) (p "Plays the sound asynchronously."))) (section 4 "qt:stop" (def (sig (procedure "(qt:stop SOUND)" (id qt:stop))) (p "Stops a currently playing sound.")))) (section 3 "Global keyboard shortcuts" (section 4 "qt:shortcut" (def (sig (procedure "(qt:shortcut KEY)" (id qt:shortcut))) (p "Creates a keyboard-shortcut action for " (tt "KEY") ", which should be a string naming a key-sequence, for example " (tt "\"Ctrl+E\"") ". See the Qt documentation for the interpretation of this string. " (tt "qt:shortcut") " returns an " (tt "<qt-action>") " instance that can be added to a widget with " (tt "qt:add-action") "."))) (section 4 "qt:add-action" (def (sig (procedure "(qt:add-action WIDGET ACTION)" (id qt:add-action))) (p "Adds the given action to " (tt "WIDGET") "."))) (section 4 "qt:remove-action" (def (sig (procedure "(qt:remove-action WIDGET ACTION)" (id qt:remove-action))) (p "Removes " (tt "ACTION") " from " (tt "WIDGET") ".")))) (section 3 "Miscellaneous" (section 4 "qt:char-encoding" (def (sig (procedure "(qt:char-encoding [ENCODING])" (id qt:char-encoding))) (p "Selects the default character encoding for strings passed to and received from Qt. " (tt "ENCODING") " may be one of the symbols " (tt "ascii") ", " (tt "latin1") " or " (tt "utf8") ". The default is " (tt "latin1") ". If no argument is given, then " (tt "qt:char-encoding") " returns the current encoding."))) (section 4 "qt:gl" (def (sig (procedure "(qt:gl NAME PARENT INIT RESIZE PAINT)" (id qt:gl))) (p "Creates and returns a " (tt "QGLWidget") ". " (tt "INIT") " should be zero-argument procedure called to initialize the OpenGL context. " (tt "RESIZE") " should be a two-argument procedure called when the widget is resized and receives the new width and height. " (tt "PAINT") " is a zero-argument procedure called when the widget should repaint itself. GL output will be automatically flushed."))) (section 4 "qt:classname" (def (sig (procedure "(qt:classname OBJECT)" (id qt:classname))) (p "Returns the name of the Qt class of which " (tt "OBJECT") " is an instance.")))) (section 3 "DBus" (p "Most of the functionality of the DBus API is exposed by these bindings.") (section 4 "qt:dbus-connect" (def (sig (procedure "(qt:dbus-connect BUS SERVICE OBJECT INTERFACE SIGNAL TO [SLOT])" (id qt:dbus-connect))) (p "Unfortunately dbus connections are handled differently in Qt from regular singal/slot connections and this has leaked over. This function works indentically to " (tt "qt:connect") " and can connect to both Qt objects and scheme functions."))) (section 4 "qt:session-bus" (def (sig (procedure "(qt:session-bus)" (id qt:session-bus))) (p "Returns a handle to the session bus."))) (section 4 "qt:system-bus" (def (sig (procedure "(qt:system-bus)" (id qt:system-bus))) (p "Returns a handle to the system bus."))) (section 4 "qt:dbus-list-names" (def (sig (procedure "(qt:list-names BUS)" (id qt:list-names))) (p "Returns the name of a bus (eg: (qt:dbus-list-names (qt:system-bus)) returns \"System bus\"). The unfortunate name of this function was the choice of the DBus API not the maintainer of the bindings."))) (section 4 "qt:dbus-send-signal" (def (sig (procedure "(qt:dbus-send-signal BUS OBJECT INTERFACE SIGNAL . ARGUMENTS)" (id qt:dbus-send-signal))) (p "Send a signal to a bus."))) (section 4 "qt:dbus-register-method" (def (sig (procedure "(qt:dbus-register-method BUS PATH FUNCTION NAME)" (id qt:dbus-register-method))) (p "Register a function on a bus with a name and a path, the function must be a scheme function, but it can take arguments and name must conform to the standard Qt slot naming rules."))) (section 4 "qt:dbus-call" (def (sig (procedure "(qt:dbus-call BUS SERVICE PATH INTERFACE METHOD . ARGUMENTS)" (id qt:dbus-call))) (p "Call a method on a bus with any number of arguments."))) (section 4 "qt:dbus-call-with-callback" (def (sig (procedure "(qt:dbus-call-with-callback BUS SERVICE PATH INTERFACE METHOD FUNCTION SLOT . ARGUMENTS)" (id qt:dbus-call-with-callback))) (p "Call a method on a bus with any number of arguments and connect the output to a function on a slot. The destination must be a scheme function."))) (section 4 "qt:dbus-register-service" (def (sig (procedure "(qt:dbus-register-service bus service)" (id qt:dbus-register-service))) (p "Register a service on a bus."))) (section 4 "qt:dbus-unregister-service" (def (sig (procedure "(qt:dbus-unregister-service bus service)" (id qt:dbus-unregister-service))) (pre "    ") (p "Unregister a service on a bus.") (pre "    ")))) (section 3 "Networking" (p "Currently their its infancy the networking bindings support only http. See the unit tests bundled in tests.scm for how to best use this functionality.") (section 4 "qt:make-http" (def (sig (procedure "(qt:make-http)" (id qt:make-http))) (p "Make an http object, will have to be destroyed in the end with qt:destroy-http."))) (section 4 "qt:destroy-http" (def (sig (procedure "(qt:destroy-http)" (id qt:destroy-http))) (p "Destroy an http object."))) (section 4 "qt:http-set-host" (def (sig (procedure "(qt:http-set-host HTTP SERVER PORT)" (id qt:http-set-host))) (p "Set the host of an http connection."))) (section 4 "qt:http-get" (def (sig (procedure "(qt:http-get HTTP PATH)" (id qt:http-get))) (p "Send an HTTP GET."))) (section 4 "qt:http-read-string" (def (sig (procedure "(qt:http-read-string HTTP)" (id qt:http-read-string))) (p "Read back a string from the object, this is non-blocking. The best way to use this is to connect to \"done(bool)\" and possibly \"dataReadProgress(int,int)\" on the http object to be notified when the data is available.")))) (section 3 "Variant list" (p "The basic way of exchanging data with Qt is through QtVariantList.") (section 4 "qt:make-variant-list" (def (sig (procedure "(qt:make-variant-list)" (id qt:make-variant-list))) (p "These will automatically be destroyed by the garbage collector when they are no longer referenced."))) (section 4 "qt:variant-list-remove-front" (def (sig (procedure "(qt:variant-list-remove-front VARIANTLIST)" (id qt:variant-list-remove-front))) (p "Remove and return one element from the front of a variant list."))) (section 4 "qt:variant-list-insert-back" (def (sig (procedure "(qt:variant-list-insert-back VARIANTLIST OBJ [SIGNED?])" (id qt:variant-list-insert-back))) (p "Insert one element to the back of a variant list. If " (tt "SIGNED?") " is not provided it is assumed to be true, this only affects integers."))) (section 4 "qt:list->variant-list" (def (sig (procedure "(qt:list->variant-list LIST)" (id qt:list->variant-list))) (p "Convert a scheme list to a variant list."))) (section 4 "qt:variant-list->list" (def (sig (procedure "(qt:variant-list->list VARIANTLIST)" (id qt:variant-list->list))) (p "Convert a variant list to a scheme list."))) (section 4 "qt:variant-list-length" (def (sig (procedure "(qt:variant-list-length VARIANTLIST)" (id qt:variant-list-length))) (p "Return the length of a variant list.")))) (section 3 "Example" (p "Given the file " (tt "hello.ui") ":") (pre "<ui version=\"4.0\" >\n <nowiki>&lt;class&gt;Form&lt;/class&gt;</nowiki>\n <widget class=\"QWidget\" name=\"Form\" >\n  <property name=\"geometry\" >\n   <rect>\n    <x>0</x>\n    <y>0</y>\n    <width>295</width>\n    <height>144</height>\n   </rect>\n  </property>\n  <property name=\"windowTitle\" >\n   <string/>\n  </property>\n  <widget class=\"QLabel\" name=\"label\" >\n   <property name=\"geometry\" >\n    <rect>\n     <x>40</x>\n     <y>30</y>\n     <width>121</width>\n     <height>31</height>\n    </rect>\n   </property>\n   <property name=\"font\" >\n    <font>\n     <pointsize>15</pointsize>\n     <weight>75</weight>\n     <bold>true</bold>\n    </font>\n   </property>\n   <property name=\"text\" >\n    <nowiki>&lt;string&gt;Hello, world!&lt;/string&gt;</nowiki>\n   </property>\n   <property name=\"alignment\" >\n    <set>Qt::AlignCenter</set>\n   </property>\n  </widget>\n  <widget class=\"QPushButton\" name=\"quitButton\" >\n   <property name=\"geometry\" >\n    <rect>\n     <x>180</x>\n     <y>90</y>\n     <width>75</width>\n     <height>31</height>\n    </rect>\n   </property>\n   <property name=\"text\" >\n    <nowiki>&lt;string&gt;Quit&lt;/string&gt;</nowiki>\n   </property>\n  </widget>\n </widget>\n <resources/>\n <connections/>\n</ui>") (p "Run this to display the Window:") (pre "(use qt utils)") (pre "(define a (qt:init))\n(define w (qt:widget (read-all \"hello.ui\")))\n(qt:connect (qt:find w \"quitButton\") \"clicked()\" a \"quit()\")\n(qt:show w)\n(qt:run)") (p "A more interesting example can be found here: " (link "http://www.call-with-current-continuation.org/egg-browser.zip" "egg-browser.zip") ".")) (section 3 "History" (dl (dt "1.0") (dd "revamped the qt egg") (dt "0.93") (dd "(hopefully) fixed more build problems (thanks to Mario)") (dt "0.9") (dd "fixed Linux build problems and added " (tt "qt:char-encoding")) (dt "0.8") (dd "I forgot what I did for 0.8") (dt "0.7") (dd "added support for Windows") (dt "0.6") (dd "qt.pro is generated by setup script to force usage of correct " (tt "csc") " (thanks to Mario Goulart)") (dt "0.5") (dd "fixed bug in string-result handling that caused random crashes (reported by Christian Kellermann and Mario Domenench Goulart)") (dt "0.4") (dd "ported to CHICKEN 4, removed Mac OS X support") (dt "0.3") (dd "generated application bundle on Mac OS X") (dt "0.2") (dd "added file dialogs and QSound support, fixed bug by making qt:show \"safe\"") (dt "0.1") (dd "initial release"))) (section 3 "License" (pre "Copyright (c) 2010, Andrei Barbu\nCopyright (c) 2006-2010, Felix L. Winkelmann\nAll rights reserved.") (pre "Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following\nconditions are met:") (pre "  Redistributions of source code must retain the above copyright notice, this list of conditions and the following\n    disclaimer. \n  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following\n    disclaimer in the documentation and/or other materials provided with the distribution. \n  Neither the name of the author nor the names of its contributors may be used to endorse or promote\n    products derived from this software without specific prior written permission. ") (pre "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS\nOR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR\nCONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\nCONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\nOTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.") (pre "Send bugs, suggestions and ideas to: ") (pre "andrei@0xab.com") (pre "Andrei Barbu\nPurdue University"))))
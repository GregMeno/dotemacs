((tags "egg") (section 2 "remote-mailbox-threads" (toc) (section 3 "Description" (p "This is an extension of the " (int-link "mailbox-threads") " egg to allow communication between remote threads via " (int-link "zmq") ". By default, the Scheme " (tt "write") "/" (tt "read") " procedures are used for serialization so not all objects can be sent. You may want to override the " (tt "serializer") "/" (tt "deserializer") " parameters to " (int-link "s11n") "'s " (tt "serialize") "/" (tt "deserialize") " functions to be able to send record, lambdas etc.")) (section 3 "Author" (p (int-link "/users/moritz-heidkamp" "Moritz Heidkamp"))) (section 3 "Requirements" (p (int-link "zmq") " and " (int-link "mailbox-threads"))) (section 3 "Documentation" (p "All procedures exported by " (int-link "mailbox-threads") " are also exported by " (tt "remote-mailbox-threads") ", the only difference being that " (tt "thread-send") " can also send messages to remote threads (see " (tt "connect-remote-thread") " on how to connect to a remote thread). The functions documented here are only those which are provided additionally.") (def (sig (procedure "(publish-thread! thread . endpoints)" (id publish-thread!))) (p "Publish " (tt "thread") " via " (tt "endpoints") " (a list of " (int-link "zmq") " endpoint strings). For each invocation of " (tt "publish-thread!") " a thread with a message loop for the given endpoints is started.")) (def (sig (procedure "(connect-remote-thread . endpoints)" (id connect-remote-thread))) (p "Connect to remote thread(s) at " (tt "endpoints") " (a list of " (int-link "zmq") " endpoint strings). The return value will be a " (tt "remote-thread") " record which can be sent messages just like normal threads using " (tt "thread-send") ".  The remote threads must be published by using " (tt "publish-thread!") " at the remote side. If more than one endpoint is given in " (tt "endpoints") ", messages will be sent round-robin style thus you should make sure that all messages sent to the remote thread can be handled by any of the given " (tt "endpoints") ".")) (def (sig (parameter "(serializer [FN])" (id serializer))) (p "The function used for serializing objects which are to be sent. It must accept one argument (the object to be serialized) and write the serialized representation to " (tt "(current-output-port)") ". Default: " (tt "write") ".")) (def (sig (parameter "(deserializer [FN])" (id deserializer))) (p "The function used for deserializing received messages. It should read the serialized data stream from " (tt "(current-input-port)") " and return the deserialized object. Default: " (tt "read") "."))) (section 3 "Example" (p "Consumer:") (highlight scheme "(use remote-mailbox-threads)\n\n(publish-thread! (current-thread) \n                 \"tcp://127.0.0.1:12345\"\n                 \"ipc:///tmp/nomnom\")\n\n(print \"waiting for things to consume\")\n\n(let loop ((msg (thread-receive)))\n  (display \"nom nom nom:\")\n  (print msg)\n  (loop (thread-receive)))\n") (p "Producer:") (highlight scheme "\n\n(use remote-mailbox-threads)\n\n(define consumer (connect-remote-thread \"tcp://127.0.0.1:12345\"))\n(define another-consumer (connect-remote-thread \"ipc:///tmp/nomnom\"))\n(thread-send consumer 'carrot)\n(thread-send another-consumer 'egg)\n") (p "Note that the producer connects to two different remote threads, both of which refer to the same exported thread of the producer.")) (section 3 "License" (pre " Copyright (c) 2010, Moritz Heidkamp\n All rights reserved.\n \n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n \n 1. Redistributions of source code must retain the above copyright\n    notice, this list of conditions and the following disclaimer.\n \n 2. Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in the\n    documentation and/or other materials provided with the distribution.\n \n 3. Neither the name of the <organization> nor the\n    names of its contributors may be used to endorse or promote products\n    derived from this software without specific prior written permission.\n \n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."))))
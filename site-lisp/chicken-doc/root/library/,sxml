((tags "manual") (toc) (section 2 "Unit library" (p "This unit contains basic Scheme definitions. This unit is used by default, unless the program is compiled with the " (tt "-explicit-use") " option.") (section 3 "Arithmetic" (section 4 "add1/sub1" (def (sig (procedure "(add1 N)" (id add1)) (procedure "(sub1 N)" (id sub1))) (p "Adds/subtracts 1 from " (tt "N") "."))) (section 4 "Binary integer operations" (def (sig (procedure "(bitwise-and N1 ...)" (id bitwise-and)) (procedure "(bitwise-ior N1 ...)" (id bitwise-ior)) (procedure "(bitwise-xor N1 ...)" (id bitwise-xor)) (procedure "(bitwise-not N)" (id bitwise-not)) (procedure "(arithmetic-shift N1 N2)" (id arithmetic-shift))) (p "Binary integer operations. " (tt "arithmetic-shift") " shifts the argument " (tt "N1") " by " (tt "N2") " bits to the left. If " (tt "N2") " is negative, then " (tt "N1") " is shifted to the right. These operations only accept exact integers or inexact integers in word range (32 bit signed on 32-bit platforms, or 64 bit signed on 64-bit platforms)."))) (section 4 "bit-set?" (def (sig (procedure "(bit-set? N INDEX)" (id bit-set?))) (p "Returns " (tt "#t") " if the bit at the position " (tt "INDEX") " in the integer " (tt "N") " is set, or " (tt "#f") " otherwise. The rightmost/least-significant bit is bit 0."))) (section 4 "Arithmetic fixnum operations" (def (sig (procedure "(fx+ N1 N2)" (id fx+)) (procedure "(fx- N1 N2)" (id fx-)) (procedure "(fx* N1 N2)" (id fx*)) (procedure "(fx/ N1 N2)" (id fx/)) (procedure "(fxmod N1 N2)" (id fxmod)) (procedure "(fxneg N)" (id fxneg)) (procedure "(fxmin N1 N2)" (id fxmin)) (procedure "(fxmax N1 N2)" (id fxmax)) (procedure "(fxand N1 N2)" (id fxand)) (procedure "(fxior N1 N2)" (id fxior)) (procedure "(fxxor N1 N2)" (id fxxor)) (procedure "(fxnot N)" (id fxnot)) (procedure "(fxshl N1 N2)" (id fxshl)) (procedure "(fxshr N1 N2)" (id fxshr))) (p (tt "fx+") " and friends are arithmetic fixnum operations.  These procedures do not check their arguments, so non-fixnum parameters will result in incorrect results. " (tt "fxneg") " negates its argument.") (p "On division by zero, " (tt "fx/") " and " (tt "fxmod") " signal a condition of kind " (tt "(exn arithmetic)") ".") (p (tt "fxshl") " and " (tt "fxshr") " perform arithmetic shift left and right, respectively."))) (section 4 "Fixnum comparison and predicates" (def (sig (procedure "(fxodd? N)" (id fxodd?)) (procedure "(fxeven? N)" (id fxeven?)) (procedure "(fx= N1 N2)" (id fx=)) (procedure "(fx> N1 N2)" (id fx>)) (procedure "(fx< N1 N2)" (id fx<)) (procedure "(fx>= N1 N2)" (id fx>=)) (procedure "(fx<= N1 N2)" (id fx<=))) (p "Comparison of fixnums and predicates on them."))) (section 4 "fixnum?" (def (sig (procedure "(fixnum? X)" (id fixnum?))) (p "Returns " (tt "#t") " if " (tt "X") " is a fixnum, or " (tt "#f") " otherwise."))) (section 4 "Fixnum limits" (def (sig (constant "most-positive-fixnum" (id most-positive-fixnum)) (constant "most-negative-fixnum" (id most-negative-fixnum)) (constant "fixnum-bits" (id fixnum-bits)) (constant "fixnum-precision" (id fixnum-precision))) (p "Platform-specific fixnum limits."))) (section 4 "Arithmetic floating-point operations" (def (sig (procedure "(fp+ X Y)" (id fp+)) (procedure "(fp- X Y)" (id fp-)) (procedure "(fp* X Y)" (id fp*)) (procedure "(fp/ X Y)" (id fp/)) (procedure "(fpneg X)" (id fpneg)) (procedure "(fpmin X Y)" (id fpmin)) (procedure "(fpmax X Y)" (id fpmax)) (procedure "(fp= X Y)" (id fp=)) (procedure "(fp> X Y)" (id fp>)) (procedure "(fp< X Y)" (id fp<)) (procedure "(fp>= X Y)" (id fp>=)) (procedure "(fp<= X Y)" (id fp<=)) (procedure "(fpfloor X)" (id fpfloor)) (procedure "(fpceiling X)" (id fpceiling)) (procedure "(fptruncate X)" (id fptruncate)) (procedure "(fpround X)" (id fpround)) (procedure "(fpsin X)" (id fpsin)) (procedure "(fpcos X)" (id fpcos)) (procedure "(fptan X)" (id fptan)) (procedure "(fpasin X)" (id fpasin)) (procedure "(fpacos X)" (id fpacos)) (procedure "(fpatan X)" (id fpatan)) (procedure "(fpatan2 X Y)" (id fpatan2)) (procedure "(fplog X)" (id fplog)) (procedure "(fpexp X)" (id fpexp)) (procedure "(fpexpt X Y)" (id fpexpt)) (procedure "(fpsqrt X)" (id fpsqrt)) (procedure "(fpabs X)" (id fpabs)) (procedure "(fpinteger? X)" (id fpinteger?))) (p "Arithmetic floating-point operations.") (p "In safe mode, these procedures throw a type error when given non-float arguments. In unsafe mode, these procedures do not check their arguments. A non-flonum argument in unsafe mode can crash the application.") (p "Note: " (tt "fpround") " uses the rounding mode that your C library implements, which is usually different from R5RS."))) (section 4 "flonum?" (def (sig (procedure "(flonum? X)" (id flonum?))) (p "Returns " (tt "#t") " if " (tt "X") " is a flonum, or " (tt "#f") " otherwise."))) (section 4 "Flonum limits" (def (sig (constant "maximum-flonum" (id maximum-flonum)) (constant "minimum-flonum" (id minimum-flonum)) (constant "flonum-radix" (id flonum-radix)) (constant "flonum-epsilon" (id flonum-epsilon)) (constant "flonum-precision" (id flonum-precision)) (constant "flonum-decimal-precision" (id flonum-decimal-precision)) (constant "flonum-maximum-exponent" (id flonum-maximum-exponent)) (constant "flonum-minimum-exponent" (id flonum-minimum-exponent)) (constant "flonum-maximum-decimal-exponent" (id flonum-maximum-decimal-exponent)) (constant "flonum-minimum-decimal-exponent" (id flonum-minimum-decimal-exponent))) (p "Platform-specific flonum limits."))) (section 4 "finite?" (def (sig (procedure "(finite? N)" (id finite?))) (p "Returns " (tt "#f") " if " (tt "N") " is negative or positive infinity, and " (tt "#t") " otherwise."))) (section 4 "signum" (def (sig (procedure "(signum N)" (id signum))) (p "Returns " (tt "1") " if " (tt "N") " is positive, " (tt "-1") " if " (tt "N") " is negative or " (tt "0") " if " (tt "N") " is zero. " (tt "signum") " is exactness preserving.")))) (section 3 "File Input/Output" (section 4 "current-output-port" (def (sig (procedure "(current-output-port [PORT])" (id current-output-port))) (p "Returns default output port. If " (tt "PORT") " is given, then that port is selected as the new current output port.") (p "Note that the default output port is not buffered. Use " (int-link "Unit posix#Setting the file buffering mode" ((tt "set-buffering-mode!"))) " if you need a different behavior."))) (section 4 "current-error-port" (def (sig (procedure "(current-error-port [PORT])" (id current-error-port))) (p "Returns default error output port. If " (tt "PORT") " is given, then that port is selected as the new current error output port.") (p "Note that the default error output port is not buffered. Use " (int-link "Unit posix#Setting the file buffering mode" ((tt "set-buffering-mode!"))) " if you need a different behavior."))) (section 4 "flush-output" (def (sig (procedure "(flush-output [PORT])" (id flush-output))) (p "Write buffered output to the given output-port. " (tt "PORT") " defaults to the value of " (tt "(current-output-port)") "."))) (section 4 "port-closed?" (def (sig (procedure "(port-closed? PORT)" (id port-closed?))) (p "Is the given " (tt "PORT") " closed?"))) (section 4 "port-name" (def (sig (procedure "(port-name [PORT])" (id port-name))) (p "Fetch filename from " (tt "PORT") ". This returns the filename that was used to open this file. Returns a special tag string, enclosed into parentheses for non-file ports. " (tt "PORT") " defaults to the value of " (tt "(current-input-port)") "."))) (section 4 "port-position" (def (sig (procedure "(port-position [PORT])" (id port-position))) (p "Returns the current position of " (tt "PORT") " as two values: row and column number. If the port does not support such an operation an error is signaled. This procedure is currently only available for input ports. " (tt "PORT") " defaults to the value of " (tt "(current-input-port)") "."))) (section 4 "set-port-name!" (def (sig (procedure "(set-port-name! PORT STRING)" (id set-port-name!))) (p "Sets the name of " (tt "PORT") " to " (tt "STRING") ".")))) (section 3 "Files" (section 4 "delete-file" (def (sig (procedure "(delete-file STRING)" (id delete-file))) (p "Deletes the file with the pathname " (tt "STRING") ". If the file does not exist, an error is signaled."))) (section 4 "directory-exists?" (def (sig (procedure "(directory-exists? STRING)" (id directory-exists?))) (p "Returns " (tt "STRING") " if a directory with the given pathname exists, or " (tt "#f") " otherwise."))) (section 4 "file-exists?" (def (sig (procedure "(file-exists? STRING)" (id file-exists?))) (p "Returns " (tt "STRING") " if a file or directory with the given pathname exists, or " (tt "#f") " otherwise."))) (section 4 "rename-file" (def (sig (procedure "(rename-file OLD NEW)" (id rename-file))) (p "Renames the file or directory with the pathname " (tt "OLD") " to " (tt "NEW") ". If the operation does not succeed, an error is signaled.")))) (section 3 "String ports" (section 4 "get-output-string" (def (sig (procedure "(get-output-string PORT)" (id get-output-string))) (p "Returns accumulated output of a port created with " (tt "(open-output-string)") "."))) (section 4 "open-input-string" (def (sig (procedure "(open-input-string STRING)" (id open-input-string))) (p "Returns a port for reading from " (tt "STRING") "."))) (section 4 "open-output-string" (def (sig (procedure "(open-output-string)" (id open-output-string))) (p "Returns a port for accumulating output in a string.")))) (section 3 "Feature identifiers" (p "CHICKEN maintains a global list of " (i "features") " naming functionality available in the current system. Additionally the " (tt "cond-expand") " form accesses this feature list to infer what features are provided. Predefined features are " (tt "chicken") ", and the SRFIs (Scheme Request For Implementation) provided by the base system: " (tt "srfi-23, srfi-30, srfi-39") ". If the " (tt "eval") " unit is used (the default), the features " (tt "srfi-0, srfi-2, srfi-6, srfi-8, srfi-9") " and " (tt "srfi-10") " are defined. When compiling code (during compile-time) the feature " (tt "compiling") " is registered. When evaluating code in the interpreter (csi), the feature " (tt "csi") " is registered.") (section 4 "features" (def (sig (procedure "(features)" (id features))) (p "Returns a list of all registered features that will be accepted as valid feature-identifiers by " (tt "cond-expand") "."))) (section 4 "feature?" (def (sig (procedure "(feature? ID ...)" (id feature?))) (p "Returns " (tt "#t") " if all features with the given feature-identifiers " (tt "ID ...") " are registered."))) (section 4 "register-feature!" (def (sig (procedure "(register-feature! FEATURE ...)" (id register-feature!))) (p "Register one or more features that will be accepted as valid feature-identifiers by " (tt "cond-expand") ". " (tt "FEATURE ...") " may be a keyword, string or symbol."))) (section 4 "unregister-feature!" (def (sig (procedure "(unregister-feature! FEATURE ...)" (id unregister-feature!))) (p "Unregisters the specified feature-identifiers. " (tt "FEATURE ...") " may be a keyword, string or symbol.")))) (section 3 "Keywords" (p "Keywords are special symbols prefixed with " (tt "#:") " that evaluate to themselves. Procedures can use keywords to accept optional named parameters in addition to normal required parameters. Assignment to and bindings of keyword symbols is not allowed. The parameter " (tt "keyword-style") " and the compiler/interpreter option " (tt "-keyword-style") " can be used to allow an additional keyword syntax, either compatible to Common LISP, or to DSSSL.  As long as this parameter is set to " (tt "#:suffix") ", Chicken conforms to " (link "http://srfi.schemers.org/srfi-88/srfi-88.html" "SRFI-88") ".") (section 4 "get-keyword" (def (sig (procedure "(get-keyword KEYWORD ARGLIST [THUNK])" (id get-keyword))) (p "Returns the argument from " (tt "ARGLIST") " specified under the keyword " (tt "KEYWORD") ". If the keyword is not found, then the zero-argument procedure " (tt "THUNK") " is invoked and the result value is returned. If " (tt "THUNK") " is not given, " (tt "#f") " is returned.") (highlight scheme "(define (increase x . args)\n  (+ x (get-keyword #:amount args (lambda () 1))) )\n(increase 123)                                      ==> 124\n(increase 123 #:amount 10)                          ==> 133") (p "Note: the " (tt "KEYWORD") " may actually be any kind of object."))) (section 4 "keyword?" (def (sig (procedure "(keyword? X)" (id keyword?))) (p "Returns " (tt "#t") " if " (tt "X") " is a keyword symbol, or " (tt "#f") " otherwise."))) (section 4 "keyword->string" (def (sig (procedure "(keyword->string KEYWORD)" (id keyword->string))) (p "Transforms " (tt "KEYWORD") " into a string."))) (section 4 "string->keyword" (def (sig (procedure "(string->keyword STRING)" (id string->keyword))) (p "Returns a keyword with the name " (tt "STRING") ".")))) (section 3 "Environment information and system interface" (section 4 "argv" (def (sig (procedure "(argv)" (id argv))) (p "Return a list of all supplied command-line arguments. The first item in the list is a string containing the name of the executing program. The other items are the arguments passed to the application. This list is freshly created on every invocation of " (tt "(argv)") ". It depends on the host-shell whether arguments are expanded ('globbed') or not."))) (section 4 "exit" (def (sig (procedure "(exit [CODE])" (id exit))) (p "Exit the running process and return exit-code, which defaults to 0 (Invokes " (tt "exit-handler") ").") (p "Note that pending " (tt "dynamic-wind") " thunks are " (i "not") " invoked when exiting your program in this way."))) (section 4 "build-platform" (def (sig (procedure "(build-platform)" (id build-platform))) (p "Returns a symbol specifying the toolset which has been used for building the executing system, which is one of the following:") (pre "cygwin\nmingw32\ngnu\nintel\nunknown"))) (section 4 "chicken-version" (def (sig (procedure "(chicken-version [FULL])" (id chicken-version))) (p "Returns a string containing the version number of the CHICKEN runtime system. If the optional argument " (tt "FULL") " is given and true, then a full version string is returned."))) (section 4 "errno" (def (sig (procedure "(errno)" (id errno))) (p "Returns the error code of the last system call."))) (section 4 "get-environment-variable" (def (sig (procedure "(get-environment-variable STRING)" (id get-environment-variable)) (procedure "(getenv STRING)" (id getenv))) (p "Returns the value of the environment variable " (tt "STRING") " or " (tt "#f") " if that variable is not defined. See also " (link "http://srfi.schemers.org/srfi-98/" "SRFI-98") ". " (tt "getenv") " is an alias for " (tt "get-environment-variable") "."))) (section 4 "machine-byte-order" (def (sig (procedure "(machine-byte-order)" (id machine-byte-order))) (p "Returns the symbol " (tt "little-endian") " or " (tt "big-endian") ", depending on the machine's byte-order."))) (section 4 "machine-type" (def (sig (procedure "(machine-type)" (id machine-type))) (p "Returns a symbol specifying the processor on which this process is currently running, which is one of the following:") (pre "alpha\nmips\nhppa\nultrasparc\nsparc\nppc\nppc64\nia64\nx86\nx86-64\nunknown"))) (section 4 "on-exit" (def (sig (procedure "(on-exit THUNK)" (id on-exit))) (p "Schedules the zero-argument procedures " (tt "THUNK") " to be executed before the process exits, either explicitly via " (tt "exit") " or implicitly after execution of the last top-level form. Note that finalizers for unreferenced finalized data are run before exit procedures."))) (section 4 "software-type" (def (sig (procedure "(software-type)" (id software-type))) (p "Returns a symbol specifying the operating system on which this process is currently running, which is one of the following:") (pre "windows\nunix\nmacos\necos\nunknown"))) (section 4 "software-version" (def (sig (procedure "(software-version)" (id software-version))) (p "Returns a symbol specifying the operating system version on which this process is currently running, which is one of the following:") (pre "linux\nfreebsd\nnetbsd\nopenbsd\nmacosx\nhpux\nsolaris\nsunos\nunknown"))) (section 4 "c-runtime" (def (sig (procedure "(c-runtime)" (id c-runtime))) (p "Returns a symbol that designates what kind of C runtime library has been linked with this version of the Chicken libraries. Possible return values are " (tt "static") ", " (tt "dynamic") " or " (tt "unknown") ". On systems not compiled with the Microsoft C compiler, " (tt "c-runtime") " always returns " (tt "unknown") "."))) (section 4 "system" (def (sig (procedure "(system STRING)" (id system))) (p "Execute shell command. The functionality offered by this procedure depends on the capabilities of the host shell. If the forking of a subprocess failed, an exception is raised. Otherwise the return status of the subprocess is returned unaltered.") (p "On a UNIX system, that value is the raw return value of waitpid(2), which contains signal, core dump and exit status.    It is 0 on success.  To pull out the signal number or exit status portably requires POSIX calls, but in a pinch you can use something like this:") (highlight scheme ";; Returns two values: #t if the process exited normally or #f otherwise;\n;; and either the exit status, or the signal number if terminated via signal.\n(define (process-status rc)\n  (define (wait-signaled? x) (not (= 0 (bitwise-and x 127))))\n  (define (wait-signal x) (bitwise-and x 127))\n  (define (wait-exit-status x) (arithmetic-shift x -8))\n  (if (wait-signaled? rc)\n      (values #f (wait-signal rc))\n      (values #t (wait-exit-status rc))))\n\n#;> (process-status (system \"exit 42\"))\n#t\n42")))) (section 3 "Execution time" (section 4 "cpu-time" (def (sig (procedure "(cpu-time)" (id cpu-time))) (p "Returns the used CPU time of the current process in milliseconds as two values: the time spent in user code, and the time spent in system code. On platforms where user and system time can not be differentiated, system time will be always be 0."))) (section 4 "current-milliseconds" (def (sig (procedure "(current-milliseconds)" (id current-milliseconds))) (p "Returns the number of milliseconds since process- or machine startup."))) (section 4 "current-seconds" (def (sig (procedure "(current-seconds)" (id current-seconds))) (p "Returns the number of seconds since midnight, Jan. 1, 1970."))) (section 4 "current-gc-milliseconds" (def (sig (procedure "(current-gc-milliseconds)" (id current-gc-milliseconds))) (p "Returns the number of milliseconds spent in major garbage collections since the last call of " (tt "current-gc-milliseconds") " and returns an exact integer.")))) (section 3 "Interrupts and error-handling" (section 4 "enable-warnings" (def (sig (procedure "(enable-warnings [BOOL])" (id enable-warnings))) (p "Enables or disables warnings, depending on wether " (tt "BOOL") " is true or false. If called with no arguments, this procedure returns " (tt "#t") " if warnings are currently enabled, or " (tt "#f") " otherwise. Note that this is not a parameter. The current state (whether warnings are enabled or disabled) is global and not thread-local."))) (section 4 "error" (def (sig (procedure "(error [LOCATION] [STRING] EXP ...)" (id error))) (p "Prints error message, writes all extra arguments to the value of " (tt "(current-error-port)") " and invokes the current exception-handler. This conforms to " (link "http://srfi.schemers.org/srfi-23/srfi-23.html" "SRFI-23") ". If " (tt "LOCATION") " is given and a symbol, it specifies the " (i "location") " (the name of the procedure) where the error occurred."))) (section 4 "get-call-chain" (def (sig (procedure "(get-call-chain [START [THREAD]])" (id get-call-chain))) (p "Returns a list with the call history. Backtrace information is only generated in code compiled without " (tt "-no-trace") " and evaluated code. If the optional argument " (tt "START") " is given, the backtrace starts at this offset, i.e. when " (tt "START") " is 1, the next to last trace-entry is printed, and so on. If the optional argument " (tt "THREAD") " is given, then the call-chain will only be constructed for calls performed by this thread."))) (section 4 "print-call-chain" (def (sig (procedure "(print-call-chain [PORT [START [THREAD [HEADER]]]])" (id print-call-chain))) (p "Prints a backtrace of the procedure call history to " (tt "PORT") ", which defaults to " (tt "(current-output-port)") ". The output is prefixed by the " (tt "HEADER") ", which defaults to " (tt "\"\\n\\tCall history:\\n\"") "."))) (section 4 "print-error-message" (def (sig (procedure "(print-error-message EXN [PORT [HEADER]])" (id print-error-message))) (p "Prints an appropriate error message to " (tt "PORT") " (which defaults to the value of " (tt "(current-output-port)") " for the object " (tt "EXN") ". " (tt "EXN") " may be a condition, a string or any other object. The output is prefixed by the " (tt "HEADER") ", which defaults to " (tt "\"Error:\"") "."))) (section 4 "procedure-information" (def (sig (procedure "(procedure-information PROC)" (id procedure-information))) (p "Returns an s-expression with debug information for the procedure " (tt "PROC") ", or " (tt "#f") ", if " (tt "PROC") " has no associated debug information."))) (section 4 "reset" (def (sig (procedure "(reset)" (id reset))) (p "Reset program (Invokes " (tt "reset-handler") ")."))) (section 4 "warning" (def (sig (procedure "(warning STRING EXP ...)" (id warning))) (p "Displays a warning message (if warnings are enabled with " (tt "enable-warnings") ") and continues execution."))) (section 4 "singlestep" (def (sig (procedure "(singlestep THUNK)" (id singlestep))) (p "Executes the code in the zero-procedure " (tt "THUNK") " in single-stepping mode.")))) (section 3 "Garbage collection" (section 4 "gc" (def (sig (procedure "(gc [FLAG])" (id gc))) (p "Invokes a garbage-collection and returns the number of free bytes in the heap. The flag specifies whether a minor (" (tt "#f") ") or major (" (tt "#t") ") GC is to be triggered. If no argument is given, " (tt "#t") " is assumed. An explicit " (tt "#t") " argument will cause all pending finalizers to be executed."))) (section 4 "memory-statistics" (def (sig (procedure "(memory-statistics)" (id memory-statistics))) (p "Performs a major garbage collection and returns a three element vector containing the total heap size in bytes, the number of bytes currently used and the size of the nursery (the first heap generation). Note that the actual heap is actually twice the size given in the heap size, because CHICKEN uses a copying semi-space collector."))) (section 4 "set-finalizer!" (def (sig (procedure "(set-finalizer! X PROC)" (id set-finalizer!))) (p "Registers a procedure of one argument " (tt "PROC") ", that will be called as soon as the non-immediate data object " (tt "X") " is about to be garbage-collected (with that object as its argument). Note that the finalizer will " (b "not") " be called while interrupts are disabled. This procedure returns " (tt "X") ".") (p "Finalizers are invoked asynchronously, in the thread that happens to be currently running."))) (section 4 "set-gc-report!" (def (sig (procedure "(set-gc-report! FLAG)" (id set-gc-report!))) (p "Print statistics after every GC, depending on " (tt "FLAG") ". A value of " (tt "#t") " shows statistics after every major GC. A true value different from " (tt "#t") " shows statistics after every minor GC. " (tt "#f") " switches statistics off.")))) (section 3 "Other control structures" (section 4 "promise?" (def (sig (procedure "(promise? X)" (id promise?))) (p "Returns " (tt "#t") " if " (tt "X") " is a promise returned by " (tt "delay") ", or " (tt "#f") " otherwise.")))) (section 3 "String utilities" (section 4 "reverse-list->string" (def (sig (procedure "(reverse-list->string LIST)" (id reverse-list->string))) (p "Returns a string with the characters in " (tt "LIST") " in reverse order. This is equivalent to " (tt "(list->string (reverse LIST))") ", but much more efficient.")))) (section 3 "Generating uninterned symbols" (section 4 "gensym" (def (sig (procedure "(gensym [STRING-OR-SYMBOL])" (id gensym))) (p "Returns a newly created uninterned symbol. If an argument is provided, the new symbol is prefixed with that argument."))) (section 4 "string->uninterned-symbol" (def (sig (procedure "(string->uninterned-symbol STRING)" (id string->uninterned-symbol))) (p "Returns a newly created, unique symbol with the name " (tt "STRING") "."))) (section 4 "symbol-append" (def (sig (procedure "(symbol-append SYMBOL1 ...)" (id symbol-append))) (p "Creates a new interned symbol from the concatenated names of the argument symbols " (tt "(SYMBOL1 ...)") ".")))) (section 3 "Standard Input/Output" (section 4 "port?" (def (sig (procedure "(port? X)" (id port?))) (p "Returns " (tt "#t") " if " (tt "X") " is a port object or " (tt "#f") " otherwise."))) (section 4 "print" (def (sig (procedure "(print [EXP1 ...])" (id print))) (p "Outputs the optional arguments " (tt "EXP1 ...") " using " (tt "display") " and writes a newline character to the port that is the value of " (tt "(current-output-port)") ". Returns " (tt "(void)") "."))) (section 4 "print*" (def (sig (procedure "(print* [EXP1 ...])" (id print*))) (p "Similar to " (tt "print") ", but does not output a terminating newline character and performs a " (tt "flush-output") " after writing its arguments.")))) (section 3 "User-defined named characters" (section 4 "char-name" (def (sig (procedure "(char-name SYMBOL-OR-CHAR [CHAR])" (id char-name))) (p "This procedure can be used to inquire about character names or to define new ones. With a single argument the behavior is as follows: If " (tt "SYMBOL-OR-CHAR") " is a symbol, then " (tt "char-name") " returns the character with this name, or " (tt "#f") " if no character is defined under this name. If " (tt "SYMBOL-OR-CHAR") " is a character, then the name of the character is returned as a symbol, or " (tt "#f") " if the character has no associated name.") (p "If the optional argument " (tt "CHAR") " is provided, then " (tt "SYMBOL-OR-CHAR") " should be a symbol that will be the new name of the given character. If multiple names designate the same character, then the " (tt "write") " will use the character name that was defined last.") (highlight scheme "(char-name 'space)                  ==> #\\space\n(char-name #\\space)                 ==> space\n(char-name 'bell)                   ==> #f\n(char-name (integer->char 7))       ==> #f\n(char-name 'bell (integer->char 7))\n(char-name 'bell)                   ==> #\\bell\n(char->integer (char-name 'bell))   ==> 7")))) (section 3 "Blobs" (p "\"blobs\" are collections of unstructured bytes. You can't do much with them, but allow conversion to and from SRFI-4 number vectors.") (section 4 "make-blob" (def (sig (procedure "(make-blob SIZE)" (id make-blob))) (p "Returns a blob object of " (tt "SIZE") " bytes, aligned on an 8-byte boundary, uninitialized."))) (section 4 "blob?" (def (sig (procedure "(blob? X)" (id blob?))) (p "Returns " (tt "#t") " if " (tt "X") " is a blob object, or " (tt "#f") " otherwise."))) (section 4 "blob-size" (def (sig (procedure "(blob-size BLOB)" (id blob-size))) (p "Returns the number of bytes in " (tt "BLOB") "."))) (section 4 "blob->string" (def (sig (procedure "(blob->string BLOB)" (id blob->string))) (p "Returns a string with the contents of " (tt "BLOB") "."))) (section 4 "string->blob" (def (sig (procedure "(string->blob STRING)" (id string->blob))) (p "Returns a blob with the contents of " (tt "STRING") "."))) (section 4 "blob=?" (def (sig (procedure "(blob=? BLOB1 BLOB2)" (id blob=?))) (p "Returns " (tt "#t") " if the two argument blobs are of the same size and have the same content.")))) (section 3 "Vectors" (section 4 "vector-copy!" (def (sig (procedure "(vector-copy! VECTOR1 VECTOR2 [COUNT])" (id vector-copy!))) (p "Copies contents of " (tt "VECTOR1") " into " (tt "VECTOR2") ". If the argument " (tt "COUNT") " is given, it specifies the maximal number of elements to be copied. If not given, the minimum of the lengths of the argument vectors is copied.") (p "Exceptions: " (tt "(exn bounds)")))) (section 4 "vector-resize" (def (sig (procedure "(vector-resize VECTOR N [INIT])" (id vector-resize))) (p "Creates and returns a new vector with the contents of " (tt "VECTOR") " and length " (tt "N") ". If " (tt "N") " is greater than the original length of " (tt "VECTOR") ", then all additional items are initialized to " (tt "INIT") ". If " (tt "INIT") " is not specified, the contents are initialized to some unspecified value.")))) (section 3 "The unspecified value" (section 4 "void" (def (sig (procedure "(void ARGUMENT ...)" (id void))) (p "Ignores " (tt "ARGUMENT ...") " and returns an unspecified value.")))) (section 3 "Continuations" (section 4 "call/cc" (def (sig (procedure "(call/cc PROCEDURE)" (id call/cc))) (p "An alias for " (tt "call-with-current-continuation") "."))) (section 4 "continuation-capture" (def (sig (procedure "(continuation-capture PROCEDURE)" (id continuation-capture))) (p "Creates a continuation object representing the current continuation and tail-calls " (tt "PROCEDURE") " with this continuation as the single argument.") (p "More information about this continuation API can be found in the paper " (link "http://repository.readscheme.org/ftp/papers/sw2001/feeley.pdf") " " (i "A Better API for first class Continuations") " by Marc Feeley."))) (section 4 "continuation?" (def (sig (procedure "(continuation? X)" (id continuation?))) (p "Returns " (tt "#t") " if " (tt "X") " is a continuation object, or " (tt "#f") " otherwise. Please note that this applies only to continuations created by the Continuation API, but not by call/cc, i.e.: " (tt "(call-with-current-continuation continuation?)") " returns " (tt "#f") ", whereas " (tt "(continuation-capture continuation?)") " returns " (tt "#t") "."))) (section 4 "continuation-graft" (def (sig (procedure "(continuation-graft CONT THUNK)" (id continuation-graft))) (p "Calls the procedure " (tt "THUNK") " with no arguments and the implicit continuation " (tt "CONT") "."))) (section 4 "continuation-return" (def (sig (procedure "(continuation-return CONT VALUE ...)" (id continuation-return))) (p "Returns the value(s) to the continuation " (tt "CONT") ". " (tt "continuation-return") " could be implemented like this:") (highlight scheme "(define (continuation-return k . vals)\n  (continuation-graft\n    k\n    (lambda () (apply values vals)) ) )")))) (section 3 "Setters" (p "SRFI-17 is fully implemented. For more information see: " (link "http://srfi.schemers.org/srfi-17/srfi-17.html" "SRFI-17") ".") (section 4 "setter" (def (sig (procedure "(setter PROCEDURE)" (id setter))) (p "Returns the setter-procedure of " (tt "PROCEDURE") ", or signals an error if " (tt "PROCEDURE") " has no associated setter-procedure.") (p "Note that " (tt "(set! (setter PROC) ...)") " for a procedure that has no associated setter procedure yet is a very slow operation (the old procedure is replaced by a modified copy, which involves a garbage collection)."))) (section 4 "getter-with-setter" (def (sig (procedure "(getter-with-setter GETTER SETTER)" (id getter-with-setter))) (p "Returns a copy of the procedure " (tt "GETTER") " with the associated setter procedure " (tt "SETTER") ". Contrary to the SRFI specification, the setter of the returned procedure may be changed.")))) (section 3 "Reader extensions" (section 4 "define-reader-ctor" (def (sig (procedure "(define-reader-ctor SYMBOL PROC)" (id define-reader-ctor))) (p "Define new read-time constructor for " (tt "#,") " read syntax. For further information, see the documentation for " (link "http://srfi.schemers.org/srfi-10/srfi-10.html" "SRFI-10") "."))) (section 4 "set-read-syntax!" (def (sig (procedure "(set-read-syntax! CHAR-OR-SYMBOL PROC)" (id set-read-syntax!))) (p "When the reader encounters the non-whitespace character " (tt "CHAR") " while reading an expression from a given port, then the procedure " (tt "PROC") " will be called with that port as its argument. The procedure should return a value that will be returned to the reader:") (highlight scheme " ; A simple RGB color syntax:\n\n (set-read-syntax! #\\%\n   (lambda (port)\n     (apply vector\n       (map (cut string->number <> 16)\n\t    (string-chop (read-string 6 port) 2) ) ) ) )\n\n (with-input-from-string \"(1 2 %f0f0f0 3)\" read)\n ; ==> (1 2 #(240 240 240) 3)") (p "If " (tt "CHAR-OR-SYMBOL") " is a symbol, then a so-called " (i "read-mark") " handler is defined. In that case the handler procedure will be called when a character-sequence of the form") (pre "#!SYMBOL") (p "is encountered.") (p "You can undo special handling of read-syntax by passing " (tt "#f") " as the second argument (if the syntax was previously defined via " (tt "set-read-syntax!") ").") (p "Note that all of CHICKEN's special non-standard read-syntax is handled directly by the reader. To disable built-in read-syntax, define a handler that triggers an error (for example)."))) (section 4 "set-sharp-read-syntax!" (def (sig (procedure "(set-sharp-read-syntax! CHAR-OR-SYMBOL PROC)" (id set-sharp-read-syntax!))) (p "Similar to " (tt "set-read-syntax!") ", but allows defining new " (tt "#<CHAR> ...") " reader syntax. If the first argument is a symbol, then this procedure is equivalent to " (tt "set-read-syntax!") "."))) (section 4 "set-parameterized-read-syntax!" (def (sig (procedure "(set-parameterized-read-syntax! CHAR-OR-SYMBOL PROC)" (id set-parameterized-read-syntax!))) (p "Similar to " (tt "set-sharp-read-syntax!") ", but intended for defining reader syntax of the form " (tt "#<NUMBER><CHAR> ...") ". The handler procedure " (tt "PROC") " will be called with two arguments: the input port and the number preceding the dispatching character. If the first argument is a symbol, then this procedure is equivalent to " (tt "set-read-syntax!") "."))) (section 4 "copy-read-table" (def (sig (procedure "(copy-read-table READ-TABLE)" (id copy-read-table))) (p "Returns a copy of the given read-table. You can access the currently active read-table with " (tt "(current-read-table)") ".")))) (section 3 "Property lists" (p "As in other Lisp dialects, CHICKEN supports \"property lists\" associated with symbols. Properties are accessible via a key that can be any kind of value but which will be compared using " (tt "eq?") ".") (section 4 "get" (def (sig (procedure "(get SYMBOL PROPERTY [DEFAULT])" (id get))) (p "Returns the value stored under the key " (tt "PROPERTY") " in the property list of " (tt "SYMBOL") ". If no such property is stored, returns " (tt "DEFAULT") ". The " (tt "DEFAULT") " is optional and defaults to " (tt "#f") "."))) (section 4 "put!" (def (sig (procedure "(put! SYMBOL PROPERTY VALUE)" (id put!))) (p "setter: (set! (get SYMBOL PROPERTY) VALUE)") (p "Stores " (tt "VALUE") " under the key " (tt "PROPERTY") " in the property list of " (tt "SYMBOL") " replacing any previously stored value."))) (section 4 "remprop!" (def (sig (procedure "(remprop! SYMBOL PROPERTY)" (id remprop!))) (p "Deletes the first property matching the key " (tt "PROPERTY") " in the property list of " (tt "SYMBOL") ". Returns " (tt "#t") " when a deletion performed, and " (tt "#f") " otherwise."))) (section 4 "symbol-plist" (def (sig (procedure "(symbol-plist SYMBOL)" (id symbol-plist))) (p "setter: (set! (symbol-plist SYMBOL) LST)") (p "Returns the property list of " (tt "SYMBOL") " or sets it."))) (section 4 "get-properties" (def (sig (procedure "(get-properties SYMBOL PROPERTIES)" (id get-properties))) (p "Searches the property list of " (tt "SYMBOL") " for the first property with a key in the list " (tt "PROPERTIES") ". Returns 3 values: the matching property key, value, and the tail of property list after the matching property. When no match found all values are " (tt "#f") ".") (p (tt "PROPERTIES") " may also be an atom, in which case it is treated as a list of one element.")) (hr) (p "Previous: " (int-link "Exceptions") " Next: " (int-link "Unit eval"))))))
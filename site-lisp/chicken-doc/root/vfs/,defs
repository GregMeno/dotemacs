(index ("<vfs:file-system>" 0) ("vfs:open-file" 139) ("vfs:open-input-file" 139) ("vfs:open-output-file" 139) ("vfs:file-exists?" 1141) ("vfs:delete-file" 1399) ("vfs:rename-file" 1611) ("vfs:register-file-system" 1749) ("vfs:unregister-file-system" 2273) ("<vfs:local-file-system>" 2407) ("vfs:current-file-system" 2630))
(def (sig (class "<vfs:file-system>" (id <vfs:file-system>))) (p "Represents an object that can be accessed via file-system operations."))
(def (sig (method "(vfs:open-file FILESYSTEM PATHNAME OUTPUT? MODES)" (id vfs:open-file)) (method "(vfs:open-input-file FILESYSTEM PATHNAME MODES)" (id vfs:open-input-file)) (method "(vfs:open-output-file FILESYSTEM PATHNAME MODES)" (id vfs:open-output-file))) (p "Called for " (tt "FILESYSTEM") " (an instance of " (tt "<vfs:file-system>") ") when a file should be opened for reading or writing. " (tt "PATHNAME") " is a string representing the path to the desired file. " (tt "MODES") " is a list of one or more keywords specifying extra attributes for the file to be opened which are:") (pre "#:append\n#:binary\n#:text") (p "See the " (int-link "/man/3" "The User's Manual") " for a description of these modes. If the " (tt "vfs:open-file") " method is not implemented for a given file system, then either " (tt "vfs:open-input-file") " or " (tt "vfs:open-output-file") " are called, depending on the boolean " (tt "OUTPUT?") ".") (p "All of these generic functions should return a port object."))
(def (sig (method "(vfs:file-exists? FILESYSTEM PATHNAME)" (id vfs:file-exists?))) (p "Called for " (tt "file-exists?") " when the given pathname refers to " (tt "FILESYSTEM") ". Should return true when the designated file exists or " (tt "#f") " if not."))
(def (sig (method "(vfs:delete-file FILESYSTEM PATHNAME)" (id vfs:delete-file))) (p "Called for " (tt "delete-file!") " and should delete the entity represented by " (tt "PATHNAME") " in the given filesystem."))
(def (sig (method "(vfs:rename-file FILESYSTEM OLDPATHNAME NEWPATHNAME)" (id vfs:rename-file))) (p "Called for " (tt "rename-file") "."))
(def (sig (procedure "(vfs:register-file-system SCHEME FILESYSTEM)" (id vfs:register-file-system))) (p "Registers a filesystem prefix named " (tt "SCHEME") " (a string) for " (tt "FILESYSTEM") ". Any of the above mentioned file operations that refer to a pathname prefixed with " (tt "<SCHEME>://") " will invoke the appropriate method implemented for " (tt "FILESYSTEM") " or a default method that signals an error. The actual path passed to the file operation methods will receive the pathname with the prefix removed."))
(def (sig (procedure "(vfs:unregister-file-system SCHEME)" (id vfs:unregister-file-system))) (p "Un-registers a filesystem prefix."))
(def (sig (class "<vfs:local-file-system>" (id <vfs:local-file-system>))) (p "A subclass of " (tt "<vfs:file-system>") " representing the default local, native fileystem. Implements all methods and does the usual stuff."))
(def (sig (parameter "vfs:current-file-system" (id vfs:current-file-system))) (p "Holds the current file system, which is used if a pathname has no filesystem prefix."))

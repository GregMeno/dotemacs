((tags "egg") (section 2 "amb" (p "The Non-Deterministic Backtracking Ambivalence Operator") (toc)) (section 2 "Documentation" (p "The " (tt "amb") " operator is a nice toy and sometimes a useful tool for lightweight logic programming. Its implementation is also a good exercise in the handling of continuations.") (p "Installs the " (i "amb") " and " (i "amb-extras") " extensions.") (section 3 "amb" (def (sig (syntax "(amb EXPRESSION...) => TOP" (id amb))) (p "If the " (tt "EXPRESSION") " has any parameters, the first one of them is evaluated and the result is returned. If a subsequent occurrence of " (tt "amb") " fails, though, backtracking may cause the second of the given " (tt "EXPRESSION...") " to be selected for evaluation, then the third and so forth until the whole program does not fail if at all possible.") (p "The form " (tt "(amb)") " always fails."))) (section 3 "amb/random" (def (sig (syntax "(amb/random EXPRESSION...) => TOP" (id amb/random))) (p "Works like " (tt "amb") " but the parameters are not selected in sequence but randomly. None of them is selected more than once, though."))) (section 3 "amb-find" (def (sig (syntax "(amb-find EXPRESSION [FAILURE-VALUE]) => *" (id amb-find))) (p "Evaluates " (tt "EXPRESSION") " returning its value if successful (possibly after backtracking).") (p "If " (tt "EXPRESSION") " cannot be evaluated successfully and the expression tree is exhausted, " (tt "FAILURE-VALUE") " is evaluated and the result is returned instead.") (p "If no " (tt "FAILURE-VALUE") " is specified, an exception occurs. See the " (tt "amb-failure-continuation") " parameter below for a description of the exception."))) (section 3 "amb-collect" (def (sig (syntax "(amb-collect EXPRESSION) => list" (id amb-collect))) (p "Evaluates " (tt "EXPRESSION") " and performs backtracking repeatedly until all possible values for it have been accumulated in a list, which is returned."))) (section 3 "amb-assert" (def (sig (syntax "(amb-assert OK?)" (id amb-assert))) (p "Evaluates " (tt "OK?") " and fails if it is " (tt "#f") "."))) (section 3 "amb-failure-continuation" (def (sig (procedure "(amb-failure-continuation) => STATUS-VARIABLE" (id amb-failure-continuation)) (procedure "(amb-failure-continuation STATUS-VARIABLE)" (id amb-failure-continuation))) (p "Seen in a global context, the " (tt "amb") " operator transforms the whole program that contains it into a depth first search for return values from " (tt "amb") " forms that will not cause failure.") (p "This is realized using a backtracking system that invokes previously stored continuations whenever an " (tt "amb") " expression fails. The " (tt "amb-failure-continuation") " parameter is the status variable for this system.") (p "At the start of the program, or when no further backtracking options are available, this is set to a procedure of no arguments that raises an exception condition " (tt "(exn amb)") " (except when a " (tt "amb-collect") " statement is being processed, where the parameter will point to a procedure signalling " (tt "amb-collect") " that there are no more backtracking options available).") (p "In all other cases this parameter is set to a procedure of no arguments that causes backtracking to the next possible alternative in the " (i "tree") ".") (p "If you want to restrict the scope of backtracking to something smaller than the whole past program, use " (tt "amb-find") " or " (tt "amb-collect") " which restore this parameter to its original value when they are done evaluating the expressions they were given."))) (section 3 "amb-thunks" (def (sig (procedure "(amb-thunks THUNKS) => TOP" (id amb-thunks))) (p "The backend of " (tt "amb") ".") (p (tt "amb") " wraps all its parameters into thunks and passes a list of them into this procedure, " (tt "amb/random") " shuffles the list first."))) (section 3 "amb-find-thunk" (def (sig (procedure "(amb-find-thunk THUNK [FAILURE]) => TOP" (id amb-find-thunk))) (p "The backend of " (tt "amb-find") ".") (p (tt "amb-find") " wraps its parameters into thunks and passes them into this procedure."))) (section 3 "amb-collect-thunk" (def (sig (procedure "(amb-collect-thunk THUNK) => list" (id amb-collect-thunk))) (p "The backend of " (tt "amb-collect") ".") (p (tt "amb-collect") " wraps its parameter into a thunk and passes it into this procedure."))) (section 3 ("Extension " (i "amb-extras"))) (section 3 "choose" (def (sig (syntax "(choose LIST) => TOP" (id choose))) (p (tt "amb/random") " but with a single list argument.")) (section 4 "one-of" (def (sig (syntax "(one-of EXPRESSION) => *" (id one-of))) (p (tt "amb-find") " synonym."))) (section 4 "all-of" (def (sig (syntax "(all-of EXPRESSION) => list" (id all-of))) (p (tt "amb-collect") " synonym.")))) (section 3 "required" (def (sig (syntax "(required EXPRESSION)" (id required))) (p (tt "amb-assert") " synonym."))) (section 3 "distinct?" (def (sig (procedure "(distinct? LIST [=? equal?]) => boolean" (id distinct?))) (p "Is " (tt "LIST") " a list of distinct elements, as determined by " (tt "=?") "?")))) (section 2 "Usage" (highlight scheme "(require-library amb)\n...\n(import amb)") (p "or") (highlight scheme "(require-extension amb)")) (section 2 "Examples" (highlight scheme "(require-extension amb amb-extras)\n\n;; Baker, Cooper, Fletcher, Miller, and Smith live on different\n;; floors of an apartment house that contains only five floors. Baker\n;; does not live on the top floor. Cooper does not live on the bottom\n;; floor. Fletcher does not live on either the top or the bottom\n;; floor. Miller lives on a higher floor than does Cooper. Smith does not\n;; live on a floor adjacent to Fletcher's. Fletcher does not live on a\n;; floor adjacent to Cooper's.\n;;\n;; Where does everyone live?\n\n(define (solve-dwelling-puzzle)\n\n  (let ((baker (amb 1 2 3 4 5))\n        (cooper (amb 1 2 3 4 5))\n        (fletcher (amb 1 2 3 4 5))\n        (miller (amb 1 2 3 4 5))\n        (smith (amb 1 2 3 4 5)))\n\n    ;; They live on different floors.\n    (required (distinct? (list baker cooper fletcher miller smith)))\n\n    ;; Baker does not live on the top floor.\n    (required (not (= baker 5)))\n\n    ;; Cooper does not live on the bottom floor.\n    (required (not (= cooper 1)))\n\n    ;; Fletcher does not live on either the top or the bottom floor.\n    (required (not (= fletcher 5)))\n    (required (not (= fletcher 1)))\n\n    ;; Miller lives on a higher floor than does Cooper.\n    (required (> miller cooper))\n\n    ;; Smith does not live on a floor adjacent to Fletcher's.\n    (required (not (= (abs (- smith fletcher)) 1)))\n\n    ;; Fletcher does not live on a floor adjacent to Cooper's.\n    (required (not (= (abs (- fletcher cooper)) 1)))\n\n    `((baker ,baker) (cooper ,cooper) (fletcher ,fletcher) (miller ,miller) (smith ,smith))) )\n\n(solve-dwelling-puzzle) ;=> ((baker 3) (cooper 2) (fletcher 4) (miller 5) (smith 1))")) (section 2 "Notes" (ul (li "The use of " (tt "amb") ", or " (tt "amb/random") ", without " (tt "amb-collect") " or " (tt "amb-find") " can be confusing. See the Chicken-users mailing list for the subject \"Using the amb egg\"."))) (section 2 "Requirements" (p (int-link "check-errors" "check-errors"))) (section 2 "Author" (p (int-link "/users/thomas-chust" "Thomas Chust"))) (section 2 "Version history" (dl (dt "2.1.0") (dd "Use of \"check-errors\" extension. " (int-link "/users/kon-lovett" "Kon Lovett")) (dt "2.0.0") (dd "Chicken 4 release. " (int-link "/users/kon-lovett" "Kon Lovett")))) (section 2 "License" (p "Copyright (C) 2009 Thomas Chust <chust@web.de>..  All rights reserved.") (p "Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the Software), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:") (p "The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.") (p "THE SOFTWARE IS PROVIDED ASIS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.")))
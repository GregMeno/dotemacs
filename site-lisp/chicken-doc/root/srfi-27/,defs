(index ("current-random-source" 0) ("current-random-source" 0) ("registered-random-sources" 429) ("registered-random-source" 616) ("random-source?" 871) ("check-random-source" 871) ("error-random-source" 871) ("make-random-source" 1099) ("new-random-source" 1355) ("random-source-name" 1592) ("random-source-documentation" 1744) ("random-source-log2-period" 1919) ("random-source-maximum-range" 2116) ("random-source-entropy-source" 2419) ("random-source-entropy-source-set!" 2620) ("random-source-state-ref" 2836) ("random-source-state-set!" 3047) ("random-source-randomize!" 3300) ("random-source-pseudo-randomize!" 3414) ("random-source-make-integers" 3529) ("random-source-make-reals" 3797) ("random-source-make-u8vectors" 4154) ("random-source-make-f64vectors" 4601) ("current-entropy-source" 5072) ("current-entropy-source" 5072) ("registered-entropy-sources" 5486) ("registered-entropy-source" 5676) ("entropy-source?" 5935) ("check-entropy-source" 5935) ("error-entropy-source" 5935) ("make-entropy-source" 6169) ("new-entropy-source" 6431) ("entropy-source-name" 6676) ("entropy-source-documentation" 6832) ("entropy-source-u8" 7011) ("entropy-source-f64" 7188) ("entropy-source-u8vector" 7354) ("entropy-source-f64vector" 7730) ("make-random-source-mrg32k3a" 8099) ("make-random-source-mwc" 8259) ("make-random-source-moa" 8404) ("composite-random-source" 8549) ("make-entropy-source-system-clock" 9125) ("make-entropy-source-crypt" 9300) ("make-entropy-source-urandom-device" 9470) ("make-entropy-source-random-device" 9650) ("make-entropy-source/procedures" 9829) ("make-entropy-source/f64procedure" 10158) ("entropy-port-lifetime" 10461) ("entropy-port-lifetime" 10461) ("make-entropy-source/port" 10868) ("make-entropy-source/port-open" 11256) ("make-entropy-source/port-open-timed" 11783) ("make-entropy-source/file" 12279) ("make-uniform-random-integers" 12721) ("make-uniform-random-reals" 13385) ("make-random-permutations" 13627) ("random-permutation!" 13627) ("make-random-vector" 14128) ("random-vector!" 14128) ("make-random-hollow-sphere" 14503) ("random-hollow-sphere!" 14503) ("make-random-solid-sphere" 15153) ("random-solid-sphere!" 15153) ("make-random-normals" 15787) ("make-random-exponentials" 15948) ("make-random-triangles" 16105) ("make-random-poissons" 16275) ("make-random-bernoullis" 16427) ("make-random-binomials" 16582) ("make-random-geometrics" 16743) ("make-random-lognormals" 16899) ("make-random-cauchys" 17066) ("make-random-gammas" 17231) ("make-random-erlangs" 17393) ("make-random-paretos" 17555) ("make-random-levys" 17718) ("make-random-weibulls" 17878))
(def (sig (procedure "(current-random-source) => random-source" (id current-random-source)) (procedure "(current-random-source RANDOM-SOURCE)" (id current-random-source))) (p "Parameter for the default " (tt "random-source") ".") (p "The variable " (tt "default-random-source") " is the initial " (tt "(current-random-source)") ".") (p "The initial " (tt "random-source") " is an instace of " (tt "'mrg32k3a") ", per SRFI 27."))
(def (sig (procedure "(registered-random-sources) => (list-of symbol)" (id registered-random-sources))) (p "Returns a " (tt "list") " of the registered " (tt "random-source") " names."))
(def (sig (procedure "(registered-random-source NAME) => (disjoint #f (procedure () random-source))" (id registered-random-source))) (p "Returns the " (tt "random-source") " creator for the specified " (tt "NAME") " or " (tt "#f") " if not registered."))
(def (sig (procedure "(random-source? OBJ) => boolean" (id random-source?)) (procedure "(check-random-source LOC OBJ [NAM])" (id check-random-source)) (procedure "(error-random-source LOC OBJ [NAM])" (id error-random-source))))
(def (sig (procedure "(make-random-source [SOURCE (current-random-source)]) => random-source" (id make-random-source))) (p (tt "SOURCE") " is either a " (tt "random-source") " or the " (tt "symbol") " of a registered " (tt "random-source") ", the name."))
(def (sig (procedure "(new-random-source RANDOM-SOURCE) => random-source" (id new-random-source))) (p "Returns a new " (tt "random-source") " from " (tt "RANDOM-SOURCE") ".") (p "Same as " (tt "(make-random-source RANDOM-SOURCE)") "."))
(def (sig (procedure "(random-source-name RANDOM-SOURCE) => symbol" (id random-source-name))) (p "The symbolic name of the " (tt "RANDOM-SOURCE") "."))
(def (sig (procedure "(random-source-documentation RANDOM-SOURCE) => string" (id random-source-documentation))) (p "Some more information for the " (tt "RANDOM-SOURCE") "."))
(def (sig (procedure "(random-source-log2-period RANDOM-SOURCE) => integer" (id random-source-log2-period))) (p "The period of the " (tt "RANDOM-SOURCE") " as a power of 2. A " (tt "fixnum") "."))
(def (sig (procedure "(random-source-maximum-range RANDOM-SOURCE) => inexact-integer" (id random-source-maximum-range))) (p "The largest integer the " (tt "RANDOM-SOURCE") " can produce without resort to a " (tt "bignum") " representation. An inexact-integer " (tt "flonum") ", even for 64-bit CPUs."))
(def (sig (procedure "(random-source-entropy-source RANDOM-SOURCE) => entropy-source" (id random-source-entropy-source))) (p "The current " (tt "entropy-source") " for the " (tt "RANDOM-SOURCE") "."))
(def (sig (procedure "(random-source-entropy-source-set! RANDOM-SOURCE ENTROPY-SOURCE)" (id random-source-entropy-source-set!))) (p "Changes the current " (tt "entropy-source") " for the " (tt "RANDOM-SOURCE") "."))
(def (sig (procedure "(random-source-state-ref RANDOM-SOURCE) => random-state" (id random-source-state-ref))) (p "Per the SRFI 27 specification the " (tt "random-state") " is a valid external representation."))
(def (sig (procedure "(random-source-state-set! RANDOM-SOURCE RANDOM-STATE)" (id random-source-state-set!))) (p "Only a " (tt "RANDOM-STATE") " produced by a " (tt "random-source-state-ref") " of the same " (tt "random-source-name") " is acceptable."))
(def (sig (procedure "(random-source-randomize! RANDOM-SOURCE [ENTROPY-SOURCE])" (id random-source-randomize!))))
(def (sig (procedure "(random-source-pseudo-randomize! RANDOM-SOURCE I J)" (id random-source-pseudo-randomize!))))
(def (sig (procedure "(random-source-make-integers RANDOM-SOURCE) => (procedure (integer) integer)" (id random-source-make-integers))) (p "The variable " (tt "random-integer") " is a " (tt "procedure") ": " (tt "(random-source-make-integers default-random-source)")))
(def (sig (procedure "(random-source-make-reals RANDOM-SOURCE [PRECISION]) => (procedure () real)" (id random-source-make-reals))) (p "The variable " (tt "random-real") " is a " (tt "procedure") ": " (tt "(random-source-make-reals default-random-source)")) (p (tt "PRECISION") " maybe " (tt "#f") ", in which case the value is " (tt "flonum-epsilon") "."))
(def (sig (procedure "(random-source-make-u8vectors RANDOM-SOURCE) => (procedure (integer) u8vector)" (id random-source-make-u8vectors))) (p "Returns a " (tt "procedure") " of one argument, the length of the generated vector, the returns a vector of random 8-bit unsigned values, a SRFI 4 " (tt "u8vector") ".") (p "The variable " (tt "random-u8vector") " is a " (tt "procedure") ": " (tt "(random-source-make-u8vectors default-random-source)")))
(def (sig (procedure "(random-source-make-f64vectors RANDOM-SOURCE [PRECISION]) => (procedure (integer) f64vector)" (id random-source-make-f64vectors))) (p "Returns a " (tt "procedure") " of one argument, the length of the generated vector, the returns a vector of random 64-bit floatingpoint values, a SRFI 4 " (tt "f64vector") ".") (p "The variable " (tt "random-f64vector") " is a " (tt "procedure") ": " (tt "(random-source-make-f64vectors default-random-source)")))
(def (sig (procedure "(current-entropy-source) => entropy-source" (id current-entropy-source)) (procedure "(current-entropy-source ENTROPY-SOURCE)" (id current-entropy-source))) (p "Parameter for the default " (tt "entropy-source") ".") (p (tt "default-entropy-source") " is the initial " (tt "(current-entropy-source)") ".") (p "The initial " (tt "entropy-source") " is an instace of " (tt "'system-clock") "."))
(def (sig (procedure "(registered-entropy-sources) => (list-of symbol)" (id registered-entropy-sources))) (p "Returns a " (tt "list") " of the registered " (tt "entropy-source") " names."))
(def (sig (procedure "(registered-entropy-source NAME) => (disjoint #f (procedure () entropy-source))" (id registered-entropy-source))) (p "Returns the " (tt "entropy-source") " creator for the specified " (tt "NAME") " or " (tt "#f") " if not registered."))
(def (sig (procedure "(entropy-source? OBJ) => boolean" (id entropy-source?)) (procedure "(check-entropy-source LOC OBJ [NAM])" (id check-entropy-source)) (procedure "(error-entropy-source LOC OBJ [NAM])" (id error-entropy-source))))
(def (sig (procedure "(make-entropy-source [SOURCE (current-entropy-source)]) => entropy-source" (id make-entropy-source))) (p (tt "SOURCE") " is either a " (tt "entropy-source") " or the " (tt "symbol") " of a registered " (tt "entropy-source") ", the name."))
(def (sig (procedure "(new-entropy-source ENTROPY-SOURCE) => entropy-source" (id new-entropy-source))) (p "Returns a new " (tt "entropy-source") " from " (tt "ENTROPY-SOURCE") ".") (p "Same as " (tt "(make-random-entropy ENTROPY-SOURCE)") "."))
(def (sig (procedure "(entropy-source-name ENTROPY-SOURCE) => symbol" (id entropy-source-name))) (p "The symbolic name of the " (tt "ENTROPY-SOURCE") "."))
(def (sig (procedure "(entropy-source-documentation ENTROPY-SOURCE) => string" (id entropy-source-documentation))) (p "Some more information for the " (tt "ENTROPY-SOURCE") "."))
(def (sig (procedure "(entropy-source-u8 ENTROPY-SOURCE) => fixnum" (id entropy-source-u8))) (p "Returns a non-negative " (tt "fixnum") " from the " (tt "ENTROPY-SOURCE") "."))
(def (sig (procedure "(entropy-source-f64 ENTROPY-SOURCE) => flonum" (id entropy-source-f64))) (p "Returns a " (tt "flonum") " from the " (tt "ENTROPY-SOURCE") "."))
(def (sig (procedure "(entropy-source-u8vector ENTROPY-SOURCE LENGTH [U8VECTOR]) => u8vector" (id entropy-source-u8vector))) (p "Returns a " (tt "u8vector") " with the 0 thru " (tt "LENGTH-1") " elements filled with non-negative " (tt "fixnum") "s from the " (tt "ENTROPY-SOURCE") ". If " (tt "U8VECTOR") " is supplied then this is used otherwise a new vector is returned."))
(def (sig (procedure "(entropy-source-f64vector ENTROPY-SOURCE LENGTH [F64VECTOR]) => f64vector" (id entropy-source-f64vector))) (p "Returns a " (tt "f64vector") " with the 0 thru " (tt "LENGTH-1") " elements filled with " (tt "flonum") "s from the " (tt "ENTROPY-SOURCE") ". If " (tt "F64VECTOR") " is supplied then this is used otherwise a new vector is returned."))
(def (sig (procedure "(make-random-source-mrg32k3a) => random-source" (id make-random-source-mrg32k3a))) (p "Registered " (tt "NAME") " is " (tt "'mrg32k3a")))
(def (sig (procedure "(make-random-source-mwc) => random-source" (id make-random-source-mwc))) (p "Registered " (tt "NAME") " is " (tt "'mwc")))
(def (sig (procedure "(make-random-source-moa) => random-source" (id make-random-source-moa))) (p "Registered " (tt "NAME") " is " (tt "'moa")))
(def (sig (procedure "(composite-random-source [RANDOM-SOURCE ...] [#:comb-int INTEGER-COMBINE] [#:comb-real REAL-COMBINE]) => random-source" (id composite-random-source))) (p "Returns a new " (tt "random-source") " that combines the behaviors of the supplied " (tt "RANDOM-SOURCE ...") ".") (p (tt "INTEGER-COMBINE") " default is " (tt "(lambda (ints bnd) (modulo (apply + ints) bnd))") ".") (p (tt "REAL-COMBINE") " default is " (tt "(lambda (reals prec) (apply * reals))") ".") (p "Does not register the constructed " (tt "random-source") ".") (p "Experimental at best."))
(def (sig (procedure "(make-entropy-source-system-clock) => entropy-source" (id make-entropy-source-system-clock))) (p "Registered " (tt "NAME") " is " (tt "'system-clock")))
(def (sig (procedure "(make-entropy-source-crypt [BUFFER-LENGTH]) => entropy-source" (id make-entropy-source-crypt))) (p "Registered " (tt "NAME") " is " (tt "'crypt")))
(def (sig (procedure "(make-entropy-source-urandom-device) => entropy-source" (id make-entropy-source-urandom-device))) (p "Registered " (tt "NAME") " is " (tt "'random-device")))
(def (sig (procedure "(make-entropy-source-random-device) => entropy-source" (id make-entropy-source-random-device))) (p "Registered " (tt "NAME") " is " (tt "'urandom-device")))
(def (sig (procedure "(make-entropy-source/procedures U8PROC F64PROC [#:name (gensym 'procedures-)] [#:docu \"Entropy from procedures\"]) => entropy-source" (id make-entropy-source/procedures))) (p "Returns an unregistered " (tt "entropy-source") " built from the supplied " (tt "U8PROC") " and " (tt "F64PROC") " procedures."))
(def (sig (procedure "(make-entropy-source/f64procedure F64PROC [#:name (gensym 'procedures-)] [#:docu \"Entropy from procedures\"]) => entropy-source" (id make-entropy-source/f64procedure))) (p "Returns an unregistered " (tt "entropy-source") " built from the supplied " (tt "F64PROC") " procedure."))
(def (sig (procedure "(entropy-port-lifetime) => flonum" (id entropy-port-lifetime)) (procedure "(entropy-port-lifetime SECONDS)" (id entropy-port-lifetime))) (p "Gets and sets the number of " (tt "SECONDS") " an entropy port is kept open without any activity.") (p (tt "SECONDS") " maybe " (tt "#f") ", in which case the lifetime determined by GC finalizstion.") (p "This is not a " (tt "parameter") "!"))
(def (sig (procedure "(make-entropy-source/port PORT [#:name (gensym 'port-)] [#:docu \"Entropy from an open port\"]) => entropy-source" (id make-entropy-source/port))) (p "Returns an unregistered " (tt "entropy-source") " built from the supplied " (tt "PORT") ", which is treated as a binary stream.") (p "The " (tt "PORT") " is kept open and must be closed by the caller, if at all."))
(def (sig (procedure "(make-entropy-source/port-open OPENER [#:name (gensym 'port-)] [#:docu \"Entropy from port\"]) => entropy-source" (id make-entropy-source/port-open))) (p "Returns an unregistered " (tt "entropy-source") " built from the supplied " (tt "OPENER") ".") (p (tt "OPENER") " is a " (tt "(procedure () port)") ", returning an opened " (tt "port") ".") (p "The returned " (tt "port") " has an " (tt "(entropy-port-lifetime)") " so the " (tt "port") " may be closed and " (tt "OPENER") " called more than once."))
(def (sig (procedure "(make-entropy-source/port-open-timed OPENER SECONDS [#:name (gensym 'timed-port-)] [#:docu \"Entropy from timed open port\"]) => entropy-source" (id make-entropy-source/port-open-timed))) (p "Returns an unregistered " (tt "entropy-source") " built from the supplied " (tt "OPENER") " & " (tt "SECONDS") ".") (p (tt "SECONDS") " is interpreted as with " (tt "entropy-port-lifetime") ".") (p (tt "OPENER") " is interpreted as with " (tt "make-entropy-source/port-open") "."))
(def (sig (procedure "(make-entropy-source/file NAMSTR [#:name (gensym 'file-)] [#:docu (string-append \"Entropy from file \\\"\" namstr \"\\\"\")]) => entropy-source" (id make-entropy-source/file))) (p "Returns an unregistered " (tt "entropy-source") " using the file named by the pathname " (tt "NAMSTR") ".") (p "The opened " (tt "port") " for the file " (tt "NAMSTR") " is interpreted as with " (tt "make-entropy-source/port-open") "."))
(def (sig (procedure "(make-uniform-random-integers [#:high #f] [#:low 0] [#:precision 1] [#:source (current-random-source)]) => (procedure () integer)" (id make-uniform-random-integers))) (p (tt "low") ", " (tt "high") " and " (tt "precision") " are integers.") (p (tt "source") " is a " (tt "random-source") ".") (p (tt "high") ", if not supplied, is the " (tt "(random-source-maximum-range source)") ".") (p "The generator returns integers in the range " (tt "low .. high") " with an index of " (tt "precision") ". Unlike a " (tt "(random-integer)") " result negative integers are possible.") (p "The range of the generator is checked for logical soundness."))
(def (sig (procedure "(make-uniform-random-reals [#:precision #f] [#:source (current-random-source)]) => (procedure () real)" (id make-uniform-random-reals))) (p "The generator is as " (tt "(random-source-make-reals source precision)") "."))
(def (sig (procedure "(make-random-permutations [#:randoms (make-uniform-random-integers)]) => (procedure (integer) vector)" (id make-random-permutations)) (procedure "(random-permutation! VECTOR [#:randoms (make-uniform-random-integers)]) => vector" (id random-permutation!))) (p "Performs the \"Knuth shuffle\" (or \"Fisher-Yates shuffle\").") (p "Fills " (tt "VECTOR") " with a random permutation of the finite set {0 ... " (tt "N") "-1}, where " (tt "N") " = " (tt "(vector-length VECTOR)") "."))
(def (sig (procedure "(make-random-vector [#:randoms (make-uniform-random-reals)]) => (procedure (integer) vector)" (id make-random-vector)) (procedure "(random-vector! VECTOR% [#:randoms (make-uniform-random-reals)]) => vector%" (id random-vector!))) (p "Fills " (tt "VECTOR") " with inexact real random numbers from the random distribution generator " (tt "randoms") "."))
(def (sig (procedure "(make-random-hollow-sphere [#:mu 0.0] [#:sigma 1.0] [#:randoms (make-uniform-random-reals)]) => (procedure (integer) vector)" (id make-random-hollow-sphere)) (procedure "(random-hollow-sphere! VECTOR% [#:mu 0.0] [#:sigma 1.0] [#:randoms (make-uniform-random-reals)]) => vector%" (id random-hollow-sphere!))) (p "Fills " (tt "VECTOR%") " with inexact real random numbers the sum of whose squares is equal to " (tt "1.0") ".  Thinking of " (tt "VECTOR%") " as coordinates in space of dimension " (tt "N") " = " (tt "(vector%-length VECTOR%)") ", the coordinates are uniformly distributed over the surface of the unit n-sphere."))
(def (sig (procedure "(make-random-solid-sphere [#:mu 0.0] [#:sigma 1.0] [#:randoms (make-uniform-random-reals)]) => (procedure (integer) vector)" (id make-random-solid-sphere)) (procedure "(random-solid-sphere! VECTOR% [#:mu 0.0] [#:sigma 1.0] [#:randoms (make-uniform-random-reals)]) => vector%" (id random-solid-sphere!))) (p "Fills " (tt "VECTOR%") " with inexact real random numbers the sum of whose squares is less than " (tt "1.0") ".  Thinking of " (tt "VECTOR%") " as coordinates in space of dimension " (tt "N") " = " (tt "(vector%-length VECTOR%)") ", the coordinates are uniformly distributed within the unit n-sphere."))
(def (sig (procedure "(make-random-normals [#:mu 0.0] [#:sigma 1.0] [#:randoms (make-uniform-random-reals)]) => (procedure () real)" (id make-random-normals))))
(def (sig (procedure "(make-random-exponentials [#:mu 1.0] [#:randoms (make-uniform-random-reals)]) => (procedure () real)" (id make-random-exponentials))))
(def (sig (procedure "(make-random-triangles [#:s 0.0] [#:m 0.5] [#:l 1.0] [#:randoms (make-uniform-random-reals)]) => (procedure () real)" (id make-random-triangles))))
(def (sig (procedure "(make-random-poissons [#:mu 1.0] [#:randoms (make-uniform-random-reals)]) => (procedure () integer)" (id make-random-poissons))))
(def (sig (procedure "(make-random-bernoullis [#:p 0.5] [#:randoms (make-uniform-random-reals)]) => (procedure () boolean)" (id make-random-bernoullis))))
(def (sig (procedure "(make-random-binomials [#:t 1] [#:p 0.5] [#:randoms (make-uniform-random-reals)]) => (procedure () integer)" (id make-random-binomials))))
(def (sig (procedure "(make-random-geometrics [#:p 0.5] [#:randoms (make-uniform-random-reals)])) => (procedure () integer)" (id make-random-geometrics))))
(def (sig (procedure "(make-random-lognormals [#:mu 1.0] [#:sigma 1.0] [#:randoms (make-uniform-random-reals)]) => (procedure () real)" (id make-random-lognormals))))
(def (sig (procedure "(make-random-cauchys [#:median 0.0] [#:sigma 1.0] [#:randoms (make-uniform-random-reals)]) => (procedure () real)" (id make-random-cauchys))))
(def (sig (procedure "(make-random-gammas [#:alpha 1.0] [#:theta 1.0] [#:randoms (make-uniform-random-reals)]) => (procedure () real)" (id make-random-gammas))))
(def (sig (procedure "(make-random-erlangs [#:alpha 1] [#:theta 1.0] [#:randoms (make-uniform-random-reals)]) => (procedure () real)" (id make-random-erlangs))))
(def (sig (procedure "(make-random-paretos [#:alpha 1.0] [#:xmin 1.0] [#:randoms (make-uniform-random-reals)]) => (procedure () real)" (id make-random-paretos))))
(def (sig (procedure "(make-random-levys [#:gamma 1.0] [#:delta 0.0] [#:randoms (make-uniform-random-reals)]) => (procedure () real)" (id make-random-levys))))
(def (sig (procedure "(make-random-weibulls [#:shape 1.0] [#:scale 1.0] [#:randoms (make-uniform-random-reals)]) => (procedure () real)" (id make-random-weibulls))))

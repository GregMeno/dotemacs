((tags "egg") (section 2 "SRFI 27" (p "Source of Random Bits") (toc)) (section 2 "Documentation" (p "A Chicken implementation of " (link "http://srfi.schemers.org/srfi-27/srfi-27.html" "SRFI 27") ".") (section 3 "SRFI 27" (p "Most procedures are per the SRFI 27 specification document. Only the extensions are documented here.") (p "The most obvious extensions are support for multiple random number generators and multiple entropy sources.") (section 4 "Usage" (highlight scheme "(use srfi-27)")) (section 4 "current-random-source" (def (sig (procedure "(current-random-source) => random-source" (id current-random-source)) (procedure "(current-random-source RANDOM-SOURCE)" (id current-random-source))) (p "Parameter for the default " (tt "random-source") ".") (p "The variable " (tt "default-random-source") " is the initial " (tt "(current-random-source)") ".") (p "The initial " (tt "random-source") " is an instace of " (tt "'mrg32k3a") ", per SRFI 27."))) (section 4 "registered-random-sources" (def (sig (procedure "(registered-random-sources) => (list-of symbol)" (id registered-random-sources))) (p "Returns a " (tt "list") " of the registered " (tt "random-source") " names."))) (section 4 "registered-random-source" (def (sig (procedure "(registered-random-source NAME) => (disjoint #f (procedure () random-source))" (id registered-random-source))) (p "Returns the " (tt "random-source") " creator for the specified " (tt "NAME") " or " (tt "#f") " if not registered."))) (section 4 "random-source?" (def (sig (procedure "(random-source? OBJ) => boolean" (id random-source?)) (procedure "(check-random-source LOC OBJ [NAM])" (id check-random-source)) (procedure "(error-random-source LOC OBJ [NAM])" (id error-random-source))))) (section 4 "make-random-source" (def (sig (procedure "(make-random-source [SOURCE (current-random-source)]) => random-source" (id make-random-source))) (p (tt "SOURCE") " is either a " (tt "random-source") " or the " (tt "symbol") " of a registered " (tt "random-source") ", the name."))) (section 4 "new-random-source" (def (sig (procedure "(new-random-source RANDOM-SOURCE) => random-source" (id new-random-source))) (p "Returns a new " (tt "random-source") " from " (tt "RANDOM-SOURCE") ".") (p "Same as " (tt "(make-random-source RANDOM-SOURCE)") "."))) (section 4 "random-source-name" (def (sig (procedure "(random-source-name RANDOM-SOURCE) => symbol" (id random-source-name))) (p "The symbolic name of the " (tt "RANDOM-SOURCE") "."))) (section 4 "random-source-documentation" (def (sig (procedure "(random-source-documentation RANDOM-SOURCE) => string" (id random-source-documentation))) (p "Some more information for the " (tt "RANDOM-SOURCE") "."))) (section 4 "random-source-log2-period" (def (sig (procedure "(random-source-log2-period RANDOM-SOURCE) => integer" (id random-source-log2-period))) (p "The period of the " (tt "RANDOM-SOURCE") " as a power of 2. A " (tt "fixnum") "."))) (section 4 "random-source-maximum-range" (def (sig (procedure "(random-source-maximum-range RANDOM-SOURCE) => inexact-integer" (id random-source-maximum-range))) (p "The largest integer the " (tt "RANDOM-SOURCE") " can produce without resort to a " (tt "bignum") " representation. An inexact-integer " (tt "flonum") ", even for 64-bit CPUs."))) (section 4 "random-source-entropy-source" (def (sig (procedure "(random-source-entropy-source RANDOM-SOURCE) => entropy-source" (id random-source-entropy-source))) (p "The current " (tt "entropy-source") " for the " (tt "RANDOM-SOURCE") "."))) (section 4 "random-source-entropy-source-set!" (def (sig (procedure "(random-source-entropy-source-set! RANDOM-SOURCE ENTROPY-SOURCE)" (id random-source-entropy-source-set!))) (p "Changes the current " (tt "entropy-source") " for the " (tt "RANDOM-SOURCE") "."))) (section 4 "random-source-state-ref" (def (sig (procedure "(random-source-state-ref RANDOM-SOURCE) => random-state" (id random-source-state-ref))) (p "Per the SRFI 27 specification the " (tt "random-state") " is a valid external representation."))) (section 4 "random-source-state-set!" (def (sig (procedure "(random-source-state-set! RANDOM-SOURCE RANDOM-STATE)" (id random-source-state-set!))) (p "Only a " (tt "RANDOM-STATE") " produced by a " (tt "random-source-state-ref") " of the same " (tt "random-source-name") " is acceptable."))) (section 4 "random-source-randomize!" (def (sig (procedure "(random-source-randomize! RANDOM-SOURCE [ENTROPY-SOURCE])" (id random-source-randomize!))))) (section 4 "random-source-pseudo-randomize!" (def (sig (procedure "(random-source-pseudo-randomize! RANDOM-SOURCE I J)" (id random-source-pseudo-randomize!))))) (section 4 "random-source-make-integers" (def (sig (procedure "(random-source-make-integers RANDOM-SOURCE) => (procedure (integer) integer)" (id random-source-make-integers))) (p "The variable " (tt "random-integer") " is a " (tt "procedure") ": " (tt "(random-source-make-integers default-random-source)")))) (section 4 "random-source-make-reals" (def (sig (procedure "(random-source-make-reals RANDOM-SOURCE [PRECISION]) => (procedure () real)" (id random-source-make-reals))) (p "The variable " (tt "random-real") " is a " (tt "procedure") ": " (tt "(random-source-make-reals default-random-source)")) (p (tt "PRECISION") " maybe " (tt "#f") ", in which case the value is " (tt "flonum-epsilon") "."))) (section 4 "random-source-make-u8vectors" (def (sig (procedure "(random-source-make-u8vectors RANDOM-SOURCE) => (procedure (integer) u8vector)" (id random-source-make-u8vectors))) (p "Returns a " (tt "procedure") " of one argument, the length of the generated vector, the returns a vector of random 8-bit unsigned values, a SRFI 4 " (tt "u8vector") ".") (p "The variable " (tt "random-u8vector") " is a " (tt "procedure") ": " (tt "(random-source-make-u8vectors default-random-source)")))) (section 4 "random-source-make-f64vectors" (def (sig (procedure "(random-source-make-f64vectors RANDOM-SOURCE [PRECISION]) => (procedure (integer) f64vector)" (id random-source-make-f64vectors))) (p "Returns a " (tt "procedure") " of one argument, the length of the generated vector, the returns a vector of random 64-bit floatingpoint values, a SRFI 4 " (tt "f64vector") ".") (p "The variable " (tt "random-f64vector") " is a " (tt "procedure") ": " (tt "(random-source-make-f64vectors default-random-source)")))) (section 4 "current-entropy-source" (def (sig (procedure "(current-entropy-source) => entropy-source" (id current-entropy-source)) (procedure "(current-entropy-source ENTROPY-SOURCE)" (id current-entropy-source))) (p "Parameter for the default " (tt "entropy-source") ".") (p (tt "default-entropy-source") " is the initial " (tt "(current-entropy-source)") ".") (p "The initial " (tt "entropy-source") " is an instace of " (tt "'system-clock") "."))) (section 4 "registered-entropy-sources" (def (sig (procedure "(registered-entropy-sources) => (list-of symbol)" (id registered-entropy-sources))) (p "Returns a " (tt "list") " of the registered " (tt "entropy-source") " names."))) (section 4 "registered-entropy-source" (def (sig (procedure "(registered-entropy-source NAME) => (disjoint #f (procedure () entropy-source))" (id registered-entropy-source))) (p "Returns the " (tt "entropy-source") " creator for the specified " (tt "NAME") " or " (tt "#f") " if not registered."))) (section 4 "entropy-source?" (def (sig (procedure "(entropy-source? OBJ) => boolean" (id entropy-source?)) (procedure "(check-entropy-source LOC OBJ [NAM])" (id check-entropy-source)) (procedure "(error-entropy-source LOC OBJ [NAM])" (id error-entropy-source))))) (section 4 "make-entropy-source" (def (sig (procedure "(make-entropy-source [SOURCE (current-entropy-source)]) => entropy-source" (id make-entropy-source))) (p (tt "SOURCE") " is either a " (tt "entropy-source") " or the " (tt "symbol") " of a registered " (tt "entropy-source") ", the name."))) (section 4 "new-entropy-source" (def (sig (procedure "(new-entropy-source ENTROPY-SOURCE) => entropy-source" (id new-entropy-source))) (p "Returns a new " (tt "entropy-source") " from " (tt "ENTROPY-SOURCE") ".") (p "Same as " (tt "(make-random-entropy ENTROPY-SOURCE)") "."))) (section 4 "entropy-source-name" (def (sig (procedure "(entropy-source-name ENTROPY-SOURCE) => symbol" (id entropy-source-name))) (p "The symbolic name of the " (tt "ENTROPY-SOURCE") "."))) (section 4 "entropy-source-documentation" (def (sig (procedure "(entropy-source-documentation ENTROPY-SOURCE) => string" (id entropy-source-documentation))) (p "Some more information for the " (tt "ENTROPY-SOURCE") "."))) (section 4 "entropy-source-u8" (def (sig (procedure "(entropy-source-u8 ENTROPY-SOURCE) => fixnum" (id entropy-source-u8))) (p "Returns a non-negative " (tt "fixnum") " from the " (tt "ENTROPY-SOURCE") "."))) (section 4 "entropy-source-f64" (def (sig (procedure "(entropy-source-f64 ENTROPY-SOURCE) => flonum" (id entropy-source-f64))) (p "Returns a " (tt "flonum") " from the " (tt "ENTROPY-SOURCE") "."))) (section 4 "entropy-source-u8vector" (def (sig (procedure "(entropy-source-u8vector ENTROPY-SOURCE LENGTH [U8VECTOR]) => u8vector" (id entropy-source-u8vector))) (p "Returns a " (tt "u8vector") " with the 0 thru " (tt "LENGTH-1") " elements filled with non-negative " (tt "fixnum") "s from the " (tt "ENTROPY-SOURCE") ". If " (tt "U8VECTOR") " is supplied then this is used otherwise a new vector is returned."))) (section 4 "entropy-source-f64vector" (def (sig (procedure "(entropy-source-f64vector ENTROPY-SOURCE LENGTH [F64VECTOR]) => f64vector" (id entropy-source-f64vector))) (p "Returns a " (tt "f64vector") " with the 0 thru " (tt "LENGTH-1") " elements filled with " (tt "flonum") "s from the " (tt "ENTROPY-SOURCE") ". If " (tt "F64VECTOR") " is supplied then this is used otherwise a new vector is returned.")))) (section 3 "Random Sources" (p "A random source module must be loaded before it can be used. This maybe obvious but a call of " (tt "(make-random-source 'moa)") " will fail unless the extension \"moa\" is loaded.") (p "See " (tt "make-random-source") " for use of the " (tt "NAME") ".") (section 4 "Pierre L'Ecuyer's Multiple Recursive Generator 32k3a random number generator" (section 5 "Usage" (highlight scheme "(use mrg32k3a)")) (section 5 "make-random-source-mrg32k3a" (def (sig (procedure "(make-random-source-mrg32k3a) => random-source" (id make-random-source-mrg32k3a))) (p "Registered " (tt "NAME") " is " (tt "'mrg32k3a"))))) (section 4 "George Marsaglia's Multiply With Carry random number generator" (section 5 "Usage" (highlight scheme "(use mwc)")) (section 5 "make-random-source-mwc" (def (sig (procedure "(make-random-source-mwc) => random-source" (id make-random-source-mwc))) (p "Registered " (tt "NAME") " is " (tt "'mwc"))))) (section 4 "George Marsaglia's Mother Of All random number generator" (section 5 "Usage" (highlight scheme "(use moa)")) (section 5 "make-random-source-moa" (def (sig (procedure "(make-random-source-moa) => random-source" (id make-random-source-moa))) (p "Registered " (tt "NAME") " is " (tt "'moa")))))) (section 3 "Composite Random Source" (section 4 "Usage" (highlight scheme "(use composite-random-source)")) (section 4 "composite-random-source" (def (sig (procedure "(composite-random-source [RANDOM-SOURCE ...] [#:comb-int INTEGER-COMBINE] [#:comb-real REAL-COMBINE]) => random-source" (id composite-random-source))) (p "Returns a new " (tt "random-source") " that combines the behaviors of the supplied " (tt "RANDOM-SOURCE ...") ".") (p (tt "INTEGER-COMBINE") " default is " (tt "(lambda (ints bnd) (modulo (apply + ints) bnd))") ".") (p (tt "REAL-COMBINE") " default is " (tt "(lambda (reals prec) (apply * reals))") ".") (p "Does not register the constructed " (tt "random-source") ".") (p "Experimental at best.")))) (section 3 "Entropy Sources" (p "An entropy source module must be loaded before it can be used.") (section 4 "System Clock" (section 5 "Usage" (highlight scheme "(use entropy-clock)")) (section 5 "make-entropy-source-system-clock" (def (sig (procedure "(make-entropy-source-system-clock) => entropy-source" (id make-entropy-source-system-clock))) (p "Registered " (tt "NAME") " is " (tt "'system-clock"))))) (section 4 "Windows Crypt Device" (section 5 "Usage" (highlight scheme "(use entropy-windows)")) (section 5 "make-entropy-source-crypt" (def (sig (procedure "(make-entropy-source-crypt [BUFFER-LENGTH]) => entropy-source" (id make-entropy-source-crypt))) (p "Registered " (tt "NAME") " is " (tt "'crypt"))))) (section 4 "Unix Random Device" (section 5 "Usage" (highlight scheme "(use entropy-unix)")) (section 5 "make-entropy-source-urandom-device" (def (sig (procedure "(make-entropy-source-urandom-device) => entropy-source" (id make-entropy-source-urandom-device))) (p "Registered " (tt "NAME") " is " (tt "'random-device")))) (section 5 "make-entropy-source-random-device" (def (sig (procedure "(make-entropy-source-random-device) => entropy-source" (id make-entropy-source-random-device))) (p "Registered " (tt "NAME") " is " (tt "'urandom-device")))))) (section 3 "Procedure Entropy Source" (p (tt "U8PROC") " is a procedure of no arguments returning a " (tt "fixnum") " in the range " (tt "0 .. 255") ".") (p (tt "F64PROC") " is a procedure of no arguments returning a finite " (tt "flonum") ".") (section 4 "Usage" (highlight scheme "(use entropy-procedure)")) (section 4 "make-entropy-source/procedures" (def (sig (procedure "(make-entropy-source/procedures U8PROC F64PROC [#:name (gensym 'procedures-)] [#:docu \"Entropy from procedures\"]) => entropy-source" (id make-entropy-source/procedures))) (p "Returns an unregistered " (tt "entropy-source") " built from the supplied " (tt "U8PROC") " and " (tt "F64PROC") " procedures."))) (section 4 "make-entropy-source/f64procedure" (def (sig (procedure "(make-entropy-source/f64procedure F64PROC [#:name (gensym 'procedures-)] [#:docu \"Entropy from procedures\"]) => entropy-source" (id make-entropy-source/f64procedure))) (p "Returns an unregistered " (tt "entropy-source") " built from the supplied " (tt "F64PROC") " procedure.")))) (section 3 "Port Entropy Source" (section 4 "Usage" (highlight scheme "(use entropy-port)")) (section 4 "entropy-port-lifetime" (def (sig (procedure "(entropy-port-lifetime) => flonum" (id entropy-port-lifetime)) (procedure "(entropy-port-lifetime SECONDS)" (id entropy-port-lifetime))) (p "Gets and sets the number of " (tt "SECONDS") " an entropy port is kept open without any activity.") (p (tt "SECONDS") " maybe " (tt "#f") ", in which case the lifetime determined by GC finalizstion.") (p "This is not a " (tt "parameter") "!"))) (section 4 "make-entropy-source/port" (def (sig (procedure "(make-entropy-source/port PORT [#:name (gensym 'port-)] [#:docu \"Entropy from an open port\"]) => entropy-source" (id make-entropy-source/port))) (p "Returns an unregistered " (tt "entropy-source") " built from the supplied " (tt "PORT") ", which is treated as a binary stream.") (p "The " (tt "PORT") " is kept open and must be closed by the caller, if at all."))) (section 4 "make-entropy-source/port-open" (def (sig (procedure "(make-entropy-source/port-open OPENER [#:name (gensym 'port-)] [#:docu \"Entropy from port\"]) => entropy-source" (id make-entropy-source/port-open))) (p "Returns an unregistered " (tt "entropy-source") " built from the supplied " (tt "OPENER") ".") (p (tt "OPENER") " is a " (tt "(procedure () port)") ", returning an opened " (tt "port") ".") (p "The returned " (tt "port") " has an " (tt "(entropy-port-lifetime)") " so the " (tt "port") " may be closed and " (tt "OPENER") " called more than once."))) (section 4 "make-entropy-source/port-open-timed" (def (sig (procedure "(make-entropy-source/port-open-timed OPENER SECONDS [#:name (gensym 'timed-port-)] [#:docu \"Entropy from timed open port\"]) => entropy-source" (id make-entropy-source/port-open-timed))) (p "Returns an unregistered " (tt "entropy-source") " built from the supplied " (tt "OPENER") " & " (tt "SECONDS") ".") (p (tt "SECONDS") " is interpreted as with " (tt "entropy-port-lifetime") ".") (p (tt "OPENER") " is interpreted as with " (tt "make-entropy-source/port-open") "."))) (section 4 "make-entropy-source/file" (def (sig (procedure "(make-entropy-source/file NAMSTR [#:name (gensym 'file-)] [#:docu (string-append \"Entropy from file \\\"\" namstr \"\\\"\")]) => entropy-source" (id make-entropy-source/file))) (p "Returns an unregistered " (tt "entropy-source") " using the file named by the pathname " (tt "NAMSTR") ".") (p "The opened " (tt "port") " for the file " (tt "NAMSTR") " is interpreted as with " (tt "make-entropy-source/port-open") ".")))) (section 3 "Simple Distributions" (p "Provides exact-real and inexact-real generators.") (p "All return 2 values: the generator itself and a procedure returning the argument values used to parameterize the generator. The second return value can be safely ignored, as it is below.") (section 4 "Usage" (highlight scheme "(use srfi-27-uniform-random)")) (section 4 "make-uniform-random-integers" (def (sig (procedure "(make-uniform-random-integers [#:high #f] [#:low 0] [#:precision 1] [#:source (current-random-source)]) => (procedure () integer)" (id make-uniform-random-integers))) (p (tt "low") ", " (tt "high") " and " (tt "precision") " are integers.") (p (tt "source") " is a " (tt "random-source") ".") (p (tt "high") ", if not supplied, is the " (tt "(random-source-maximum-range source)") ".") (p "The generator returns integers in the range " (tt "low .. high") " with an index of " (tt "precision") ". Unlike a " (tt "(random-integer)") " result negative integers are possible.") (p "The range of the generator is checked for logical soundness."))) (section 4 "make-uniform-random-reals" (def (sig (procedure "(make-uniform-random-reals [#:precision #f] [#:source (current-random-source)]) => (procedure () real)" (id make-uniform-random-reals))) (p "The generator is as " (tt "(random-source-make-reals source precision)") ".")))) (section 3 "Vector Distributions" (p "The procedures named as per " (tt "make-random-...") " return a " (tt "procedure") " of one argument " (tt "N") ", the length of vector to be created.") (p "The procedures named " (tt "random-...!") " side-effect the supplied vector.") (p "The nomenclature " (tt "vector%") " is used to indicate a disjoint type union of " (tt "vector, f32vector, f64vector") ". If the user is really keen to access the API for this type it is available in the, undocumented, \"srfi-27-vector-support\" module.") (section 4 "Usage" (highlight scheme "(use srfi-27-vector)")) (section 4 "make-random-permutations") (section 4 "random-permutation!" (def (sig (procedure "(make-random-permutations [#:randoms (make-uniform-random-integers)]) => (procedure (integer) vector)" (id make-random-permutations)) (procedure "(random-permutation! VECTOR [#:randoms (make-uniform-random-integers)]) => vector" (id random-permutation!))) (p "Performs the \"Knuth shuffle\" (or \"Fisher-Yates shuffle\").") (p "Fills " (tt "VECTOR") " with a random permutation of the finite set {0 ... " (tt "N") "-1}, where " (tt "N") " = " (tt "(vector-length VECTOR)") "."))) (section 4 "make-random-vector") (section 4 "random-vector!" (def (sig (procedure "(make-random-vector [#:randoms (make-uniform-random-reals)]) => (procedure (integer) vector)" (id make-random-vector)) (procedure "(random-vector! VECTOR% [#:randoms (make-uniform-random-reals)]) => vector%" (id random-vector!))) (p "Fills " (tt "VECTOR") " with inexact real random numbers from the random distribution generator " (tt "randoms") "."))) (section 4 "make-random-hollow-sphere") (section 4 "random-hollow-sphere!" (def (sig (procedure "(make-random-hollow-sphere [#:mu 0.0] [#:sigma 1.0] [#:randoms (make-uniform-random-reals)]) => (procedure (integer) vector)" (id make-random-hollow-sphere)) (procedure "(random-hollow-sphere! VECTOR% [#:mu 0.0] [#:sigma 1.0] [#:randoms (make-uniform-random-reals)]) => vector%" (id random-hollow-sphere!))) (p "Fills " (tt "VECTOR%") " with inexact real random numbers the sum of whose squares is equal to " (tt "1.0") ".  Thinking of " (tt "VECTOR%") " as coordinates in space of dimension " (tt "N") " = " (tt "(vector%-length VECTOR%)") ", the coordinates are uniformly distributed over the surface of the unit n-sphere."))) (section 4 "make-random-solid-sphere") (section 4 "random-solid-sphere!" (def (sig (procedure "(make-random-solid-sphere [#:mu 0.0] [#:sigma 1.0] [#:randoms (make-uniform-random-reals)]) => (procedure (integer) vector)" (id make-random-solid-sphere)) (procedure "(random-solid-sphere! VECTOR% [#:mu 0.0] [#:sigma 1.0] [#:randoms (make-uniform-random-reals)]) => vector%" (id random-solid-sphere!))) (p "Fills " (tt "VECTOR%") " with inexact real random numbers the sum of whose squares is less than " (tt "1.0") ".  Thinking of " (tt "VECTOR%") " as coordinates in space of dimension " (tt "N") " = " (tt "(vector%-length VECTOR%)") ", the coordinates are uniformly distributed within the unit n-sphere.")))) (section 3 "Other Distributions" (p "Provides generators for some common distributions ranging over some subset of the inexact-reals. The domain of the generators depends, of course, on the specific distribution.") (p "All return 2 values: the generator itself and a procedure returning the argument values used to parameterize the generator. The second return value can be safely ignored, as it is below.") (section 4 "Usage" (highlight scheme "(use srfi-27-distributions)")) (section 4 "make-random-normals" (def (sig (procedure "(make-random-normals [#:mu 0.0] [#:sigma 1.0] [#:randoms (make-uniform-random-reals)]) => (procedure () real)" (id make-random-normals))))) (section 4 "make-random-exponentials" (def (sig (procedure "(make-random-exponentials [#:mu 1.0] [#:randoms (make-uniform-random-reals)]) => (procedure () real)" (id make-random-exponentials))))) (section 4 "make-random-triangles" (def (sig (procedure "(make-random-triangles [#:s 0.0] [#:m 0.5] [#:l 1.0] [#:randoms (make-uniform-random-reals)]) => (procedure () real)" (id make-random-triangles))))) (section 4 "make-random-poissons" (def (sig (procedure "(make-random-poissons [#:mu 1.0] [#:randoms (make-uniform-random-reals)]) => (procedure () integer)" (id make-random-poissons))))) (section 4 "make-random-bernoullis" (def (sig (procedure "(make-random-bernoullis [#:p 0.5] [#:randoms (make-uniform-random-reals)]) => (procedure () boolean)" (id make-random-bernoullis))))) (section 4 "make-random-binomials" (def (sig (procedure "(make-random-binomials [#:t 1] [#:p 0.5] [#:randoms (make-uniform-random-reals)]) => (procedure () integer)" (id make-random-binomials))))) (section 4 "make-random-geometrics" (def (sig (procedure "(make-random-geometrics [#:p 0.5] [#:randoms (make-uniform-random-reals)])) => (procedure () integer)" (id make-random-geometrics))))) (section 4 "make-random-lognormals" (def (sig (procedure "(make-random-lognormals [#:mu 1.0] [#:sigma 1.0] [#:randoms (make-uniform-random-reals)]) => (procedure () real)" (id make-random-lognormals))))) (section 4 "make-random-cauchys" (def (sig (procedure "(make-random-cauchys [#:median 0.0] [#:sigma 1.0] [#:randoms (make-uniform-random-reals)]) => (procedure () real)" (id make-random-cauchys))))) (section 4 "make-random-gammas" (def (sig (procedure "(make-random-gammas [#:alpha 1.0] [#:theta 1.0] [#:randoms (make-uniform-random-reals)]) => (procedure () real)" (id make-random-gammas))))) (section 4 "make-random-erlangs" (def (sig (procedure "(make-random-erlangs [#:alpha 1] [#:theta 1.0] [#:randoms (make-uniform-random-reals)]) => (procedure () real)" (id make-random-erlangs))))) (section 4 "make-random-paretos" (def (sig (procedure "(make-random-paretos [#:alpha 1.0] [#:xmin 1.0] [#:randoms (make-uniform-random-reals)]) => (procedure () real)" (id make-random-paretos))))) (section 4 "make-random-levys" (def (sig (procedure "(make-random-levys [#:gamma 1.0] [#:delta 0.0] [#:randoms (make-uniform-random-reals)]) => (procedure () real)" (id make-random-levys))))) (section 4 "make-random-weibulls" (def (sig (procedure "(make-random-weibulls [#:shape 1.0] [#:scale 1.0] [#:randoms (make-uniform-random-reals)]) => (procedure () real)" (id make-random-weibulls))))))) (section 2 "Examples" (ul (li "A procedure for creating K-vector (whatever that is) generators. The use of George Marsaglia's Multiply With Carry " (tt "random-source") " and the \"/dev/random\" " (tt "entropy-source") " is for exposition only.")) (highlight scheme "(use srfi-27 mwc srfi-27-uniform-random srfi-27-vector entropy-unix entropy-port)\n\n(define (make-random-k-vector #!optional (k 1024))\n  (let ((rs1 (make-random-source 'mwc)) ; or (make-random-source-mwc)\n        (org (entropy-port-lifetime)) ) ; 'entropy-port-lifetime' is not a parameter!\n    (entropy-port-lifetime 30)          ; don't keep around too much\n    (random-source-entropy-source-set! rs1 (make-entropy-source-random-device))\n    (let ((genny\n           (make-random-vector\n             #:randoms\n             (make-uniform-random-integers #:high k #:low (- k) #:precision2 #:source rs1))))\n      (entropy-port-lifetime org)\n      genny ) ) )") (ul (li "Providing a fixed entropy-source, a constant seed.")) (highlight scheme "(use entropy-procedure)\n\n(define (make-entropy-constant n)\n  (let ((n-str (number->string n)))\n    (make-entropy-source/f64procedure\n      (lambda () (exact->inexact n))\n      #:name (string->uninterned-symbol (string-append \"entropy-constant-\" n-str))\n      #:docu (string-append \"Entropy constant \" n-str)) ) )") (ul (li "A rather brittle OO version of random distribution generators")) (highlight scheme "(use srfi-1 srfi-13 coops)\n\n;; Named (has a name) \"concept\"\n\n(define-generic (name obj))\n(define-class <named> () (\n  (namsym #:reader name) ) )\n\n;; Moves foreward thru a set of values \"concept\"\n\n(define-generic (step-function obj))\n(define-class <stepper> () (\n  (nxtval #:reader step-function) ) )\n(define-generic (next-value obj))\n(define-method (next-value (obj <stepper>)) ((step-function obj)))\n\n;; Parameterized extension \"concept\"\n\n(define-generic (parameters obj))\n(define-generic (basis obj))\n(define-class <parameterized> () (\n  (parms #:reader parameters)\n  (src #:reader basis) ) )\n\n;; Parameterized generative set of random values \"concept\"\n\n(define-class <random-distribution> (<named> <parameterized> <stepper>) (\n  temp ) )\n\n;; Create an instance of <random-distribution> where the arguments are\n;; the same as the documented procedural distribution API.\n;;\n;; SRFI 27 API: ({some distribution constructor} arg...)\n;;      OO API: (make-random-distribution {some distribution constructor} arg...)\n\n(define-syntax make-random-distribution\n  (syntax-rules ()\n    ((_ ?ctor ?arg0 ...)\n      (make <random-distribution> 'temp (?ctor ?arg0 ...)) ) ) )\n\n(define-method (initialize-instance (obj <random-distribution>))\n  ; The 'ctor' should be a globally defined procedure compiled\n  ; with procedure-information. So if following nomenclature then the last\n  ; procedure name element will be the kind of distribution.\n  (let* ((temp (slot-value obj 'temp))\n         (ctor (car temp))\n         (procinfo (procedure-information ctor))\n         (name (and procinfo (pair? procinfo) (symbol->string (car procinfo))))\n         (name (and name\n                    (and-let* ((kndpos (string-index-right name #\\-)))\n                      (substring/shared name (fx+ kndpos 1)) ) ) )\n         (dstr-vals (receive (apply ctor (cdr temp))))\n         (parms (and (fx<= 2 (length dstr-vals)) (receive ((second dstr-vals))))) )\n    (set! (slot-value obj 'temp) #f) ;\"free\" the \"any\" slot\n    (set! (slot-value obj 'namsym) (string->symbol name))\n    (set! (slot-value obj 'nxtval) (first dstr-vals))\n    (set! (slot-value obj 'parms) (and parms (drop-right parms 1)))\n    (set! (slot-value obj 'src) (and parms (last parms))) ) )\n\n; Use it\n\n(use srfi-27-distributions)\n\n(make-random-distribution make-random-exponentials #:mu 0.5)\n;=> <random-distribution> with\n; name          'exponentials\n; step-function <procedure>\n; parameters    '(0,5)\n; basis         <procedure>")) (section 2 "Notes" (ul (li "Due to the SRFI 27 requirement to generate numbers of any precision the \"numbers\" extension is always loaded. Be careful of creating a generator in a calling context where extended range is possible and consuming the results of the generator in a context without such range.") (li "Portions by Sebastian Egner and Brad Lucier. (See the \"book\" SRFI 27 implementation.)") (li "The implementation API is not documented here. See the source distribution."))) (section 2 "Bugs and Limitations" (ul (li (tt "composite-random-source") " is questionable.") (li "The distributions are poorly documented."))) (section 2 "Requirements" (p (int-link "miscmacros") " " (int-link "numbers") " " (int-link "check-errors") " " (int-link "synch") " " (int-link "vector-lib") " " (int-link "thread-utils") " " (int-link "timed-resource"))) (section 2 "Author" (p (int-link "/users/kon-lovett" "Kon Lovett"))) (section 2 "Version history" (dl (dt "3.1.2") (dd "Fix for \"entropy-windows\" " (tt "make-entropy-source-crypt") ".") (dt "3.1.1") (dd "Moved thread stuff to own extensions.") (dt "3.1.0") (dd "Changed " (tt "random-source-name") "s to lowercase symbols. Changed " (tt "random-state") " tags to same as " (tt "random-source-name") ". Added " (tt "new-(random|entroppy)-source") ", " (tt "@(random|entroppy)-source-constructor") " & " (tt "(random|entroppy)-source-name") ". Exported " (tt "registered-(random|entroppy)-sources") " & " (tt "registered-(random|entroppy)-source") ".") (dt "3.0.1") (dd "Bug fix for bad external state symbol. Use of 64-bit arithmetic instead of double.") (dt "3.0.0") (dd "Initial release for Chicken 4"))) (section 2 "License" (p "Copyright (C) 2010 Kon Lovett.  All rights reserved.") (p "Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the Software), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:") (p "The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.") (p "THE SOFTWARE IS PROVIDED ASIS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.") (p "Does not supercede any restrictions found in the source code.")))
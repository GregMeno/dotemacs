((toc) (section 2 "record-variants" (p (b "record-variants") " defines optimized variants on existing records defined with " (tt "define-record") ", and on SRFI 9 records defined with " (tt "define-record-type") ".  You may also create new record types if desired.") (section 3 "Interface" (section 4 "define-record-variant" (def (sig (syntax "(define-record-variant name-spec variant-spec slot1 slot2 ...)" (id define-record-variant))) (p "where:") (pre "name-spec := (variant-name original-name) | variant-name\nvariant-spec := (variant-type ...)\nvariant-type := unsafe | unchecked | inline") (p "Defines alternate accessor procedures to the existing record " (tt "original-name") " according to " (tt "variant-spec") ".  The accessors will be defined using " (tt "variant-name") ", as if " (tt "(define-record variant-name slot1 slot2 ...)") " had been invoked, but they will operate on records of type " (tt "original-name") ".") (p "Variant type may be one of:") (ul (li (tt "inline") ", so procedure definitions use " (tt "define-inline") ";") (li (tt "unchecked") ", so accessors do not check the record type;") (li (tt "unsafe") ", so accessors use " (tt "##sys#slot") " and " (tt "##sys#setslot") " instead of the safe " (tt "block-ref!") " and " (tt "block-set!"))) (p "and any combination of " (tt "variant-type") " is allowed in " (tt "variant-spec") ".") (p "A constructor, " (tt "make-VARIANT-NAME") ", is defined to create a record of the original type.  If you are defining a variant on an existing record, this is here essentially for completeness, as " (tt "unsafe") " and " (tt "unchecked") " don't have any effect on the constructor -- though " (tt "inline") " will inline it.") (p "Additionally, one new procedure over " (tt "define-record") " is created:") (p (tt "(check-VARIANT-NAME x)") ": Checks that " (tt "x") " is of the corresponding record type and returns " (tt "x") " if so; otherwise throws an error.  When compiled in unsafe mode no check is performed, regardless of " (tt "variant-type") ".") (p (tt "unsafe") " and " (tt "unchecked") " accessors are dangerous and should only be used internally in a module.  Only use these when you are absolutely sure the object is of the correct type; it is " (i "highly") " recommended to use " (tt "(check-VARIANT-NAME x)") " or call an original accessor before using these, after which the correct type is guaranteed.  (Assuming no side effects anywhere else!)") (p "Note that " (tt "(define-record-variant foo () x y)") " is equivalent to " (tt "(define-record foo x y)") " except that a " (tt "check-foo") " procedure will be generated."))) (section 4 "define-record-type-variant" (def (sig (syntax "(define-record-type-variant name-spec variant-spec pred-spec constructor field-spec)" (id define-record-type-variant))) (p "where:") (pre "name-spec := (variant-name original-name) | variant-name\nvariant-spec := (variant-type ...)\nvariant-type := unsafe | unchecked | inline\npred-spec := (predicate checker) | (predicate) | predicate\nconstructor, field-spec: as in SRFI 9") (p "Defines alternate accessor procedures to the existing SRFI 9 record-type " (tt "original-name") " according to " (tt "variant-spec") ".") (p (tt "name-spec") " acts as it does in " (tt "define-record-variant") ", including constructor generation behavior.") (p (tt "pred-spec") " may be a predicate identifier or a list containing a predicate identifier and optionally a \"checker\" identifier.  The checker identifier is used as the name of the generated " (tt "check-VARIANT-NAME") " procedure, which again behaves as in " (tt "define-record-variant") ".  If the checker identifier is omitted, no check procedure is generated.") (p "See " (tt "define-record-variant") " and SRFI 9 for further details.")))) (section 3 "Examples" (p "Create a variant on an existing record " (tt "node") " and a new record type " (tt "%lru-cache") ".  Use e.g. " (tt "(%lru-cache lru-cache)") " as " (tt "name-spec") " to create a variant on the existing record " (tt "lru-cache") ".") (pre "(define-record node prev next key value)\n(define-record-variant (%node node)\n  (unsafe unchecked inline)\n  prev next key value)\n\n(define-record-type-variant %lru-cache\n  (unsafe unchecked inline)\n  (%make-lru-cache ht head tail)\n  (%lru-cache? %check-lru-cache)     \n  (ht %lru-cache-ht)\n  (head %lru-cache-head %lru-cache-head-set!)     \n  (tail %lru-cache-tail %lru-cache-tail-set!))\n\n(define-inline (lookup c k)\n  (hash-table-ref/default (%lru-cache-ht (%check-lru-cache c)) k #f))\n\n(define (lru-cache-ref c k)\n  (and-let* ((n (lookup c k)))   ; c now guaranteed to be valid\n    (check-%node n)              ; n now guaranteed to be valid\n    (if (not (%node-prev n))     ; MRU\n        (%node-value n)\n        (let ((nx (%node-next n))\n              (pr (%node-prev n)))\n          (when pr\n            (check-%node pr)     ; pr now valid\n            (%node-next-set! pr nx)\n            (%node-prev-set! n #f)\n            (when (eq? n (%lru-cache-tail c))\n              (%lru-cache-tail-set! c pr)))\n          (when nx\n            (check-%node nx)     ; nx now valid\n            (%node-prev-set! nx pr))\n          (let ((head (%lru-cache-head c)))\n            (check-%node head)   ; head now valid\n            (%node-prev-set! head n)\n            (%node-next-set! n head)\n            (%lru-cache-head-set! c n)\n            (%node-value n)) ))))")) (section 3 "Author" (p "Jim Ursetto")) (section 3 "Version history" (ul (li "0.5 (2009-03-22): Inital release"))) (section 3 "Acknowledgements" (p "Inspiration was taken from Kon Lovett's " (tt "misc-extn-record") ".")) (section 3 "License" (pre "Copyright (c) 2009 Jim Ursetto.  All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n Redistributions of source code must retain the above copyright notice,\n  this list of conditions and the following disclaimer.\n Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n Neither the name of the author nor the names of its contributors \n  may be used to endorse or promote products derived from this software \n  without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR\nCONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\nEXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\nPROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."))))
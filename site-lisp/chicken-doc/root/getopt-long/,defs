(index ("getopt-long" 0))
(def (sig (procedure "(getopt-long ARGS GRAMMAR)" (id getopt-long))) (p "Parse the arguments " (tt "ARGS") " according to the argument list grammar " (tt "GRAMMAR") ".") (p (tt "ARGS") " should be a list of strings.  Its first element should be the name of the program; subsequent elements should be the arguments that were passed to the program on the command line.  The " (tt "program-arguments") " procedure returns a list of this form.") (p "In " (tt "ARGS") ", single-character options may be combined, in the usual Unix fashion: " (tt "(\"-x\" \"-y\")") " is equivalent to " (tt "(\"-xy\")") ".  If an option accepts values, then it must be the last option in the combination; the value is the next argument.  So, for example, using the following grammar:") (pre "    ((apples    (single-char #\\a))\n     (blimps    (single-char #\\b) (value #t))\n     (catalexis (single-char #\\c) (value #t)))") (p "the following argument lists would be acceptable:") (pre "  (\"-a\" \"-b\" \"bang\" \"-c\" \"couth\")     (\"bang\" and \"couth\" are the values\n                                       for \"blimps\" and \"catalexis\")\n  (\"-ab\" \"bang\" \"-c\" \"couth\")         (same)\n  (\"-ac\" \"couth\" \"-b\" \"bang\")         (same)\n  (\"-abc\" \"couth\" \"bang\")             (an error, since `-b' is not the\n                                       last option in its combination)") (p "If an option's value is optional, then " (tt "getopt-long") " decides whether it has a value by looking at what follows it in " (tt "ARGS") ".  If the next element is does not appear to be an option itself, then that element is the option's value.") (p "The value of a long option can can only follow the option name, separated by an `=' character.") (p "If the option \"--\" appears in " (tt "ARGS") ", argument parsing stops there; subsequent arguments are returned as ordinary arguments, even if they resemble options.  So, in the argument list:") (pre "       (\"--apples\" \"Granny Smith\" \"--\" \"--blimp\" \"Goodyear\")") (p (tt "getopt-long") " will recognize the `apples' option as having the value \"Granny Smith\", but it will not recognize the `blimp' option; it will return the strings \"--blimp\" and \"Goodyear\" as ordinary argument strings.") (p "The " (tt "getopt-long") " function returns an option dispatch function that takes in an option name --- one of the symbols from " (tt "GRAMMAR") " --- and returns a single value (if the named option has been given once), a list of values (if the option was given multiple times), or #f if the option was not given.") (p "There is a special item in the dispatch function with a key " (tt "@") ":") (pre "this is the list of arguments that are not options or option values.") (p (tt "getopt-long") " throws an exception if:") (ul (li "it finds an unrecognized property in GRAMMAR") (li "it finds an unrecognized option in ARGS") (li "a required option is omitted") (li "an option that requires an argument doesn't get one") (li "an option that doesn't accept an argument does get one (this can only happen using the long option " (tt "--opt=value") " syntax) ") (li "an option predicate fails")))

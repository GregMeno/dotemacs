(index ("make-sxml-template" 0) ("sxml-template:fill" 171) ("sxml-template?" 1271) ("sxml-template:filled?" 1440) ("sxml-template:fill-string" 1652) ("sxml-template->string" 1914))
(def (sig (procedure "(make-sxml-template sxml)" (id make-sxml-template))) (p "Where " (tt "sxml") " is an SXML expression.  Returns a " (tt "sxml-template") " record."))
(def (sig (procedure "(sxml-template:fill sxml-template namespace)" (id sxml-template:fill))) (p "Where " (tt "sxml-template") " is a " (tt "sxml-template") " record and " (tt "namespace") " is an association list mapping variable names to values.  This will replace all instances of " (tt "(%data name)") " in " (tt "sxml-template") "'s underlying SXML with the result of " (tt "(alist-ref 'name alist)") ", and return a new " (tt "sxml-template") " record.  If a value in " (tt "namespace") " is a filled " (tt "sxml-template") ", then the right thing will happen.  If a value is a list, then it is assumed to be vanilla SXML and will be converted using SXML's " (tt "universal-conversion-rules") ". If a value is mentioned in the template's SXML which does not have a corresponding entry in the alist, then an error will be signalled.  See " (tt "sxml-template:fill-string") " for an equivalent which results in a string of XML, and " (tt "sxml-template->string") " for a procedure which will convert a filled " (tt "sxml-template") " record (as returned by this procedure) to a string of XML."))
(def (sig (procedure "(sxml-template? x)" (id sxml-template?))) (p "Returns a boolean indicating whether " (tt "x") " is of the " (tt "sxml-template") " record type."))
(def (sig (procedure "(sxml-template:filled? sxml-template)" (id sxml-template:filled?))) (p "Returns a boolean indicating whether " (tt "sxml-template") " has been filled (see " (tt "sxml-template:fill") ")."))
(def (sig (procedure "(sxml-template:fill-string sxml-template namespace)" (id sxml-template:fill-string))) (p "Similar to " (tt "sxml-template:fill") ", but results in an XML string.  Defined as " (tt "(compose sxml-template->string sxml-template:fill)") "."))
(def (sig (procedure "(sxml-template->string sxml-template)" (id sxml-template->string))) (p "Converts a filled " (tt "sxml-template") " record (as returned by " (tt "sxml-template:fill") ") into an XML string."))

((tags "egg") (section 2 "dissector" (toc) (section 3 "Description" (p "An object inspector for Chicken.")) (section 3 "Author" (p "Taylor Campbell") (p "Send questions, comments, bugs, et cetera to Taylor Campbell, either via email at") ((tt "c") (tt "a") (tt "m") (tt "p") (tt "b") (tt "e") (tt "l") (tt "l") (tt " ") (tt "(") (tt "a") (tt "t") (tt ")") (tt " ") (tt "m") (tt "u") (tt "m") (tt "b") (tt "l") (tt "e") (tt " ") (tt "(") (tt "d") (tt "o") (tt "t") (tt ")") (tt " ") (tt "n") (tt "e") (tt "t")) (p "or via IRC in " (tt "#scheme") " or in " (tt "#chicken") " on " (link "http://freenode.net" "Freenode") " (" (tt "irc.freenode.net") ").")) (section 3 "Documentation" (p "The dissector is an interactive object structure inspector.  It allows for expedient inspection of a tree of objects' components.  It consists of a current 'focus object' --- the object currently being dissected --- a menu of that object's components, and an interactive command reader for commands that the user uses to interactively browse the objects.") (p "This extension defines the module " (tt "dissector") ".") (section 4 "Usage" (p (tt "(require-extension dissector)"))) (section 4 "dissect" (def (sig (procedure "(dissect object [inport [outport]])" (id dissect))) (p (tt "Dissect") " invokes the dissector.  If given, " (tt "inport") " & " (tt "outport") " specify the ports to & from which commands & output are read & written.") (p "Dissector commands are put each on single lines.  The first part of the line should be a symbol.  The remainder of the line consists of arguments to the command.  After certain commands, a summary of the focus object may be printed.  This summary is truncated to fit within your terminal.  (Actually, it's truncated to fit within 72 lines.  But that's usually enough for most terminals.  And this doesn't necessarily apply if using a custom printer.)  Other commands may print a selection from the menu of an object's components.  In this selection is printed summaries of a number of an object's components. Each component is given a particular index; this index may be used to select the respective subcomponent of the focus object.  A list of dissector commands and help for them can be acquired with the " (tt "help") " command, or the " (tt "?") " alias for it."))) (section 4 "Configuration parameters" (p "There are several parameter objects that affect the dissector's operation.") (def (sig (parameter "dissection-prompt" (id dissection-prompt))) (p "This specifies the prompt to be printed before waiting for the user to send a command.  Must be a string.")) (def (sig (parameter "dissection-menu-section-size -> exact, positive integer" (id dissection-menu-section-size))) (p "This specifies the maximum number of entries to be printed when disclosing a section of a menu to the user.  Must be an exact, positive integer.")) (def (sig (parameter "dissection-overview-printer" (id dissection-overview-printer))) (p "The function to print a dissection's overview.  The function takes two arguments: the object to print and the port to print it to.  Must be a procedure.") (p "<parameter>dissection-menu-entry-printer</procedure>") (p "The function to print a dissected object's components.  It takes three arguments: the object to print, the number of characters already printed to the port on the current line, and the port to print the object to.  Must be a procedure.")) (def (sig (parameter "dissection-right-margin" (id dissection-right-margin))) (p "The right margin for printing objects.  This is merely a hint to the " (tt "dissection-...-printer") " parameters.  Its default is 71, to fit nearly all terminals. Must be an exact, positive integer."))) (section 4 "Supported dissector commands" (dl (dt (tt "apply (a)")) (dd "Apply a function to the focus object.") (dt (tt "apply/dissect (ad)")) (dd "Apply a function to the focus object & dissect its result.") (dt (tt "dissect (d)")) (dd "Dissect a completely new object.") (dt (tt "eval (e scheme)")) (dd "Evaluate an expression.") (dt (tt "help (?)")) (dd "Print help for commands.") (dt (tt "history (h)")) (dd "Print the dissection history.") (dt (tt "menu (m)")) (dd "Print just the current menu.") (dt (tt "overview (o)")) (dd "Print the focus value, without a menu.") (dt (tt "print (p)")) (dd "Print out the entirety of the current dissection.") (dt (tt "quit (q exit)")) (dd "Quit the dissection.") (dt (tt "select (s)")) (dd "Select a component of the focus object to dissect.") (dt (tt "up (u)")) (dd "Move back up the history of dissected objects.") (dt (tt "walk (w)")) (dd "Walk about in the current menu.")) (pre " apply expression") (pre " alias: a") (p "Evaluates " (tt "expression") " in the interaction environment, which should produce a unary function, and applies it to the current focus object.  This does not modify the current dissection.") (pre " apply/dissect expression") (pre " alias: ad") (p "Evaluates " (tt "expression") " in the interaction environment, which should produce a unary function, and applies it to the current focus object. It must return at least one value.  If it returns one value, that value is dissected; if it returns more than one, a list containing the values is dissected.") (pre " dissect expression") (pre " alias: d") (p "Evaluates " (tt "expression") " in the interaction environment and dissects the value that is produced.  " (tt "Expression") " may evaluate to one or more values.  With one value, that value is dissected; with more, a list of the values is dissected.") (pre " eval expression") (pre " aliases: e scheme") (p "Evalutes " (tt "expression") " in the interaction environment and prints the results.  This does not modify the current dissection.") (pre " help [command]") (pre " alias: ?") (p "If " (tt "command") " is absent, prints out a brief help synopsis for every supported command; otherwise prints out help for " (tt "command") ".") (pre " history") (pre " alias: h") (p "Prints the dissection history.") (pre " menu") (pre " alias: m") (p "Prints just the current menu.") (pre " overview") (pre " alias: o") (p "Prints the focus value, without a menu.") (pre " print") (pre " alias: p") (p "Prints out the entirety of the current dissection.") (pre " quit") (pre " aliases: q exit") (p "Quits the dissector.") (pre " return") (pre " aliases: r") (p "Quits the dissection and returns the current focus object.") (pre " select index [deep-index ...]") (pre " alias: s") (p "Selects the " (tt "index") "th slot in the focus object to dissect next. " (tt "Index") " must be a valid index into the focus object, as shown by the menu.  If more than one index is passed, it is as if the select command were applied multiple times, to each successive index.") (pre " up [count]") (pre " alias: u") (p "Moves " (tt "count") " elements back up the history of dissected objects.  If " (tt "count") " is absent, it defaults to 1.") (pre " walk [slot-count]") (pre " alias: w") (p "Moves the current menu selection by " (tt "slot-count") " elements.  If " (tt "slot-count") " is negative, the menu is moved backwards; if it's positive, it is moved forwards.  If it is absent, the menu is moved forward by " (tt "(dissection-menu-section-size)") " slots."))) (section 3 "Changelog" (ul (li "1.7.6 Added " (tt "return") " command") (li "1.7.5 Ported to chicken4, several bugfixes") (li "1.7.4 Fixed several bugs reported by Andre Kuehne") (li "1.7.3 Removed incorrect redefinition of " (tt "fold") " [Reed Sheridan]") (li "1.7.2 Renamed " (tt "tagged-pointer?") " which shadowed a primitive function [Thanks to Reed Sheridan]") (li "1.7.1 Replaced use of " (tt "(end-of-file)") " with " (tt "#!eof")) (li "1.7 Initial release for Chicken"))) (section 3 "License" (pre " Copyright (C) 2004, Taylor Campbell\n All rights reserved.\n \n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are\n met:\n \n  - Redistributions of source code must retain the above copyright\n    notice, this list of conditions and the following disclaimer.\n  - Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in the\n    documentation and/or other materials provided with the distribution.\n  - The name of the author may not be used to endorse or promote\n    products derived from this software without specific prior written\n    permission.\n \n Modifications are requested, but not required, to be sent to the author\n in source code  form, along with any accompanying new or modified\n documentation.\n \n THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,\n INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\n IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n POSSIBILITY OF SUCH DAMAGE."))))
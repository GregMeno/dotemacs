((tags "egg") (section 2 "sdl" (toc) (section 3 "Description" (p "This is a Chicken extension for basic SDL support.")) (section 3 "Author" (p "Tony Garnock-Jones <tonyg@kcbbs.gen.nz>")) (section 3 "Documentation" (section 4 "Naming conventions" (p "I've tried to follow guile-sdl here. From the guile-sdl infopages:") (pre " As with standard guile naming conventions, all names are converted to\n lower-case, and underscores are replaced with hyphens.  Functions that\n modify one or more arguments have an exclamation point (`!') appended,\n and functions which ask a question and return a boolean value have a\n question mark (`?') appended.") (p "Regarding flags, enums and constants: I differ from guile-sdl here - where guile-sdl exposes these as symbols, with functions for converting to and from numeric values, this library exposes a number of variables bound to numbers. To combine flags, use " (tt "(+)") ". For instance:") (highlight scheme "  (define s (sdl-set-video-mode 640 480 0 (+ SDL_HWSURFACE\n\t\t\t\t\t     SDL_HWPALETTE\n\t\t\t\t\t     SDL_DOUBLEBUF)))") (p "Note also that I differ from guile-sdl in the case of flag, enum and constant definitions. Since Chicken is now case-sensitive by default, I've made this extension retain the case of the C preprocessor definitions.") (p "The reason I am recommending " (tt "(+)") " over " (tt "(bitwise-ior)") " here is that some of the flags do not fit in an immediate small integer, and must be represented as inexact numbers. Unfortunately, " (tt "bitwise-ior") " only works properly when applied to immediate small integers, so there is a tradeoff to be made: use " (tt "(bitwise-ior)") " where you are " (i "sure") " all the flags will fit in immediate integers, and use " (tt "(+)") " otherwise, bearing in mind the fact that " (tt "(bitwise-ior)") " gives an answer much more in the spirit of a bit set definition: if a flag is already set, " (tt "(bitwise-ior)") " will not set it twice, where " (tt "(+)") " will happily screw up the result completely.")) (section 4 "Garbage Collection" (p "Currently, some datastructures (" (tt "SDL_Surface") " and " (tt "TTF_Font") ") require manual deallocation. Use " (tt "(sdl-free-surface)") " and " (tt "(ttf-close-font)") ", respectively. Future versions of this library may implement automatic reclamation of unused " (tt "SDL_Surface") " and/or " (tt "TTF_Font") " structures.")) (section 4 "Timers" (p "It is problematic supporting " (tt "SDL_AddTimer") " and " (tt "SDL_RemoveTimer") " from chicken, since they a) are implemented using " (tt "setitimer") "(2) and b) involve callbacks from C to Scheme. Each would be fine on its own, but taken together they interfere with the main Scheme thread.") (p "As it happens, the " (tt "SDL_WaitEvent") " function is implemented in terms of polling (!) for events, with a short delay if none present themselves - the usual pragmatic tradeoff for event-based systems on Unix-like machines - and so we will be doing no worse if we do a similar thing ourselves. Hence, I've written a Scheme-based timer library which integrates with SDL's event loop, calling " (tt "SDL_Delay(10)") " when there's no work, just like " (tt "SDL_WaitEvent") ".")) (section 4 "SDL_Init / sdl-init on MacOS X" (p (tt "sdl-init") " does not work on MacOS X when called from a dynamically-loaded extension. Something internal to Quartz seems to get confused. (Chances are it's the redefinition of " (tt "main()") " in " (tt "SDL_main.h") ", which implies there will be problems on Windows as well.) You must call " (tt "SDL_Init") " " (i "directly") " from your main program - if your main program is written in Scheme, you need to say something like") (highlight scheme "  (declare (foreign-declare \"#include <SDL.h>\\n\"))\n  (foreign-code \"SDL_Init(SDL_INIT_EVERYTHING);\")") (p "and then compile that part of the code, linking it against " (tt "libSDL") " directly.") (p "For convenience, this extension includes a program called " (tt "sdl-csi") " which calls " (tt "SDL_Init") " and then enters a version of the Chicken read-eval-print-loop, which can be used for interpreted/interactive use of the SDL bindings. The " (tt "sdl-csi") " program is installed into the chicken program directory by " (tt "chicken-setup") ".") (p "Note that all this special handling of " (tt "sdl-init") " is only required on MacOS X - other platforms (I've tried Debian linux on x86) have no difficulty with invoking " (tt "sdl-init") " as a normal library procedure.")) (section 4 "For more information" (p "Consult the " (link "http://www.libsdl.org/" "libsdl C library") " documentation for the precise usage of each function, structure, and variable. You can find the C library documentation here:") (p (link "http://www.libsdl.org/intro/toc.html")))) (section 3 "Warning" (pre " THIS IS ALPHA CODE.") (pre " Only some of the features have been tested.\n The interfaces are likely to change in the future.\n Not all of SDL is supported.") (pre " BE WARNED!") (pre " See especially the lack of warranty in the LGPL!")) (section 3 "Changelog" (ul (li "0.5.1: fixed use of removed " (tt "pointer") " type") (li "v0.4.51117.6 Added " (tt "sdl-gl-swap-buffers") ", " (tt "sdl-gl-set-attribute") " and " (tt "sdl-gl-get-attribute") ", suggested by Koen Weddepohl") (li "v0.4.51117.5 Another attempt at mingw porting") (li "v0.4.51117.4 Modified sdl.scm to include proper headers for windows [reported by Jong-Hyouk Yun]") (li "v0.4.51117.3 Added a few missing functions") (li "v0.4.51117.2 A few missing functions added for joystick support") (li "v0.4.51117.1 Joystick-support by Achernar Alpha Eridani") (li "v0.4.51117.0"))) (section 3 "License" (pre " This library is licensed under the LGPL, the same license as SDL\n itself. See the file \"COPYING\" in the provided archive."))))
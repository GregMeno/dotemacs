((tags "egg") (section 2 "tcp-server" (section 3 "Introduction" (p "A generic multithreaded TCP server.")) (section 3 "Example" (p "A simple time-of-day server:") (highlight scheme "(require-extension tcp-server posix)\n\n((make-tcp-server \n  (tcp-listen 6504) \n  (lambda () \n    (write-line (seconds->string (current-seconds))) ) )\n #t)")) (section 3 "Author" (p (int-link "/users/felix winkelmann" "Felix Winkelmann"))) (section 3 "License" (pre "Copyright (c) 2004, Felix L. Winkelmann\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following\nconditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. \n* Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. \n* Neither the name of the author nor the names of its contributors may be used to endorse or promote products derived from this software without  specific prior written permission. \n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS\nOR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR\nCONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\nCONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\nOTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.")) (section 3 "Requirements" (p "None")) (section 3 "Documentation" (def (sig (procedure "(make-tcp-server LISTENER THUNK [MAXREQUESTS])" (id make-tcp-server))) (p "Returns a procedure that, when invoked, will start the TCP server. " (tt "LISTENER") " should be a " (tt "tcp-listener") " objects as returned by " (tt "tcp-listen") ". For every incoming request, a thread will be started and " (tt "THUNK") " (a procedure of zero arguments) will be invoked, with the current input- and output-ports bound so that any I/O is done from/to the client connection. If the optional argument " (tt "MAXREQUESTS") " is given, then it specifies an upper limit for currently executing requests. The returned server procedure accepts an optional argument that indicates whether some diagnostic messages for incoming requests should be written to the value of " (tt "(current-error-port)") ". The optional argument may be a string (which will prefix each diagnostic message), or just " (tt "#t") " (which results in a default prefix).")) (def (sig (parameter "tcp-server-prepare-hard-close-procedure" (id tcp-server-prepare-hard-close-procedure)) (parameter "tcp-server-accept-connection-procedure" (id tcp-server-accept-connection-procedure)) (parameter "tcp-server-get-addresses-procedure" (id tcp-server-get-addresses-procedure))) (p "Parameters containing primitive socket operations. Use these to parameterize the exact behaviour for closing abruptly, accepting connections and getting peer addresses (for example to use the " (int-link "openssl") " egg in combination with the generic server). The default values are " (tt "tcp-abandon-port") ", " (tt "tcp-accept") " and " (tt "tcp-addresses") ", respectively."))) (section 3 "Version History" (ul (li "1.2: Added parameterized socket-primitives (Contributed by Thomas Chust)") (li "1.1: The verbosity argument of the tcp-server procedure may be a string, now.") (li "1.0")))))
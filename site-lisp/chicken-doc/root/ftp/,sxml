((tags "egg") (section 2 "ftp" (toc) (section 3 "Description" (p "A simple FTP client library.")) (section 3 "Author" (p (int-link "/users/felix winkelmann" "felix winkelmann"))) (section 3 "Requirements" (p "None")) (section 3 "Documentation" (p "Errors triggered by invalid or negative replies from the FTP server are signalled by raising a compund condition of the kinds " (tt "exn") " and " (tt "ftp") ". The error code of a " (tt "ftp") " condition can be accessed with the " (tt "code") " property.") (p "This extension provides the " (tt "ftp") " module.") (section 4 "ftp:connect" (def (sig (procedure "(ftp:connect HOSTNAME USERNAME PASSWORD [VERBOSE [PORT]])" (id ftp:connect))) (p "Connects to the server " (tt "HOSTNAME") " using the FTP protocol and identifies this client with " (tt "USERNAME") " with a given " (tt "PASSWORD") " (all strings).  If the optional argument " (tt "VERBOSE") " is given and not " (tt "#f") ", then a protocol of the communication with the server is written to the value of " (tt "(current-error-port)") ". " (tt "PORT") " specifies the port-number and defaults to " (tt "21") ".") (p "This procedure returns an object representing the FTP session."))) (section 4 "ftp:disconnect" (def (sig (procedure "(ftp:disconnect FTP)" (id ftp:disconnect))) (p "Closes the connection identified by the session object " (tt "FTP") "."))) (section 4 "ftp:ftp?" (def (sig (procedure "(ftp:ftp? X)" (id ftp:ftp?))) (p "Returns " (tt "#t") " if " (tt "X") " is an FTP session object, or " (tt "#f") " otherwise."))) (section 4 "ftp:set-type!" (def (sig (procedure "(ftp:set-type! FTP TYPE)" (id ftp:set-type!))) (p "Sets the transmission to binary or character type. " (tt "TYPE") " should one of the symbols " (tt "binary, image") " or " (tt "ascii") "."))) (section 4 "ftp:set-mode!" (def (sig (procedure "(ftp:set-mode! FTP MODE)" (id ftp:set-mode!))) (p "Selects active or passive mode. " (tt "MODE") " should one of the symbols " (tt "active") " or " (tt "passive") ". Passive mode is the default."))) (section 4 "ftp:change-directory" (def (sig (procedure "(ftp:change-directory FTP DIR)" (id ftp:change-directory))) (p "Changes the current directory of the FTP session " (tt "FTP") " to " (tt "DIR") "."))) (section 4 "ftp:open-list" (def (sig (procedure "(ftp:open-list FTP [MASK [LONG]])" (id ftp:open-list))) (p "Returns an input-port from which a directory list can be retrieved. The optional string " (tt "MASK") " selects files to be listed (like " (tt "*.scm") "). If the optional flag " (tt "LONG") " is given and not " (tt "#f") ", then the directory is requested in \"long\" format (if the server differentiates between short and long directory format).  After the directory has been read, the port must be closed to allow further read/write operations in this FTP session."))) (section 4 "ftp:open-input-file" (def (sig (procedure "(ftp:open-input-file FTP FILENAME)" (id ftp:open-input-file))) (p "Opens the file " (tt "FILENAME") " for retrieval from the FTP server and returns an input-port from which the file can be read.  After the file has been read, the port must be closed to allow further read/write operations in this FTP session."))) (section 4 "ftp:open-output-file" (def (sig (procedure "(ftp:open-output-file FTP FILENAME)" (id ftp:open-output-file))) (p "Opens the file " (tt "FILENAME") " the FTP server and returns an output-port to which the data to be stored should be written.  After the file has been written, the port must be closed to allow further read/write operations in this FTP session."))) (section 4 "ftp:abort" (def (sig (procedure "(ftp:abort FTP)" (id ftp:abort))) (p "Aborts any transmission currently in progress for the given FTP session."))) (section 4 "ftp:delete-file" (def (sig (procedure "(ftp:delete-file FTP FILENAME)" (id ftp:delete-file))) (p "Deletes the file " (tt "FILENAME") " on the FTP server."))) (section 4 "ftp:rename-file" (def (sig (procedure "(ftp:rename-file FTP OLD NEW)" (id ftp:rename-file))) (p "Renames the file " (tt "OLD") " on the FTP server to " (tt "NEW") "."))) (section 4 "ftp:delete-directory" (def (sig (procedure "(ftp:delete-directory FTP DIRNAME)" (id ftp:delete-directory))) (p "Deletes the directory " (tt "DIRNAME") " on the FTP server."))) (section 4 "ftp:create-directory" (def (sig (procedure "(ftp:create-directory FTP DIRNAME)" (id ftp:create-directory))) (p "Creates the directory " (tt "DIRNAME") " on the FTP server.")))) (section 3 "Example" (highlight scheme "; Connect to FTP server:\n(define f (ftp:connect \"ftp.foo.com\" \"joe\" \"secret\"))\n\n; Retrieve directory listing:\n(let ([p (ftp:open-list f)])\n  (display (read-string #f p))\n  (close-input-port p) )\n\n; Download a file:\n(with-output-to-file \"foo.txt\"\n  (lambda () \n    (let ([p (ftp:open-input-file f \"foo.txt\")])\n      (display (read-string #f p))\n      (close-input-port p) ) ) )\n\n; Terminate connection:\n(ftp:disconnect f)")) (section 3 "Changelog" (ul (li "1.4 added regex dependency") (li "1.3 Added matchable to list of dependencies in meta file") (li "1.2 Ported to Chicken 4") (li "1.1 Added support for passive mode.") (li "1.0 Initial release"))) (section 3 "License" (pre " Copyright (c) 2003, Felix L. Winkelmann\n All rights reserved.\n \n Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following\n conditions are met:\n \n   Redistributions of source code must retain the above copyright notice, this list of conditions and the following\n     disclaimer. \n   Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following\n     disclaimer in the documentation and/or other materials provided with the distribution. \n   Neither the name of the author nor the names of its contributors may be used to endorse or promote\n     products derived from this software without specific prior written permission. \n \n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS\n OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY\n AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR\n CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n POSSIBILITY OF SUCH DAMAGE."))))
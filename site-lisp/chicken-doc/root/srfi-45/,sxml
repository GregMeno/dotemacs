((tags "egg") (section 2 "srfi-45" (p "Primitives for Expressing Iterative Lazy Algorithms") (toc)) (section 2 "Documentation" (p "Extends the interpretation of a promise to include " (i "lazy") " and " (i "eager") " promises.") (p "For more information see " (link "http://srfi.schemers.org/srfi-45/srfi-45.html" "SRFI 45") ".") (section 3 "lazy" (def (sig (syntax "(lazy EXPRESSION) => promise" (id lazy))) (p "Returns a promise for " (tt "EXPRESSION") ", which must evaluate to a SRFI 45 promise. (See " (tt "lazy-strict") ".}") (p "The promise will be iteratively forced, overwriting the promise at each step before the next iteration, so as to avoid storage leaks."))) (section 3 "lazy-strict" (def (sig (procedure "(lazy-strict [STRICT?]) => boolean" (id lazy-strict))) (p "The body " (tt "EXPRESSION") " of a " (tt "lazy") " promise must produce a result of type " (tt "promise") " according to SRFI 45. This is the default behavior of this implementation. To accept a more lenient interpretation call with a value of " (tt "#f") " for " (tt "STRICT?") ".") (p "The " (tt "\"improper use of `lazy'\"") " error from " (tt "force") " serves notice that a lazy expression was not of the correct type."))) (section 3 "eager" (def (sig (syntax "(eager EXPRESSION) => promise" (id eager))) (p "Returns a promise but immediately evaluates " (tt "EXPRESSION") "."))) (section 3 "force" (def (sig (procedure "(force PROMISE) => OBJECT" (id force))) (p "Returns the result of the evaluation of " (tt "PROMISE") ". When " (tt "PROMISE") " is an R5RS promise an R5RS " (tt "force") " is performed and when " (tt "PROMISE") " is not a promise it is the result."))) (section 3 "delay" (def (sig (syntax "(delay EXPRESSION) => promise" (id delay))) (p "Returns a SRFI-45 promise, a delayed evaluation of " (tt "EXPRESSION") "."))) (section 3 "lazy-promise?" (def (sig (procedure "(lazy-promise? OBJECT) => boolean" (id lazy-promise?))))) (section 3 "eager-promise?" (def (sig (procedure "(eager-promise? OBJECT) => boolean" (id eager-promise?))))) (section 3 "recursive-promise?" (def (sig (procedure "(recursive-promise? OBJECT) => boolean" (id recursive-promise?))) (p "Is the " (tt "OBJECT") " a recursive-promise; an eager or lazy promise?"))) (section 3 "promise?" (def (sig (procedure "(promise? OBJECT) => boolean" (id promise?))) (p "Some kind of promise? An R5RS promise or a recursive-promise.")))) (section 2 "Usage" (highlight scheme "(module foo (...)\n  ; Allow access to the original API and stop those annoying\n  ; redefined messages.\n  (import\n    (rename scheme (force r5rs:force) (delay r5rs:delay))\n    (rename chicken (promise? r5rs:promise?))\n    ...)\n  (use srfi-45)\n  ... code that can use R5RS and SRFI 45 promises ...\n)")) (section 2 "Notes" (ul (li "Supports multiple values for an eager promise and when " (tt "(lazy-strict)") " is " (tt "#f") " for a lazy promise.") (li "If compiled with the feature " (tt "srfi-45-paranoia") " defined then extra sanity checks are enabled.") (li "The built-in routines are " (i "not") " rebound. This is purely a module implementation. As such the built-in " (tt "promise?") " will not detect a recursive-promise as a promise. Do not allow these abstractions to " (i "leak") " into unsuspecting contexts."))) (section 2 "Requirements" (p "None")) (section 2 "Author" (p (int-link "/users/kon-lovett" "Kon Lovett"))) (section 2 "Version history" (dl (dt "3.1.0") (dd "Added " (tt "lazy-strict") " and compile-time feature " (tt "srfi-45-paranoia") ". Better R5RS promise support by " (tt "lazy") ".") (dt "3.0.0") (dd "Redefines " (tt "delay") ". Removed " (tt "d-lay") " and " (tt "recursive-delay") ".") (dt "2.2.0") (dd "Bug fix for " (i "lazy") " R5RS promise in " (tt "force") ". [Reported by Derrell Piper]") (dt "2.1.0") (dd "Bug fix for " (i "too eager") " " (tt "force") ". Removed \"box\" extension dependency.") (dt "2.0.0") (dd "Chicken 4 release."))) (section 2 "License" (p "Copyright (C) 2009 Kon Lovett.  All rights reserved.") (p "Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the Software), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:") (p "The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.") (p "THE SOFTWARE IS PROVIDED ASIS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.")))
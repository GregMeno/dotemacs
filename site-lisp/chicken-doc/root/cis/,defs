(index ("cis?" 0) ("empty?" 158) ("subset?" 306) ("cardinal" 505) ("in?" 622) ("singleton" 797) ("interval" 930) ("add" 1084) ("remove" 1220) ("shift" 1368) ("union" 1518) ("intersection" 1624) ("difference" 1751) ("get-min" 1953) ("get-max" 2066) ("foreach" 2179) ("fold-left" 2318) ("fold-right" 2450) ("elements" 2585))
(def (sig (procedure "cis? :: OBJECT -> BOOL" (id cis?))) (p "Returns " (tt "#t") " if the given object is a compact integer set, " (tt "#f") " otherwise."))
(def (sig (procedure "empty? :: CIS -> BOOL" (id empty?))) (p "Returns " (tt "#t") " if the given integer set is empty, " (tt "#f") " otherwise."))
(def (sig (procedure " subset? :: CIS * CIS -> BOOL " (id subset?))) (p "Returns " (tt "#t") " if the first given integer set is a subset of the second given integer set, " (tt "#f") " otherwise."))
(def (sig (procedure " cardinal :: CIS -> INTEGER " (id cardinal))) (p "Returns the cardinality of the given set."))
(def (sig (procedure " in? :: INTEGER * CIS -> BOOL " (id in?))) (p "Returns " (tt "#t") " if the the given integer is contained in the given set, " (tt "#f") " otherwise."))
(def (sig (procedure " singleton :: INTEGER -> CIS " (id singleton))) (p "Returns an integer set consisting of the given element."))
(def (sig (procedure " interval :: INTEGER * INTEGER -> CIS " (id interval))) (p "Returns an integer set consisting of the given interval of elements."))
(def (sig (procedure " add :: INTEGER * CIS -> CIS " (id add))) (p "Adds the given element to the given set and returns the new set."))
(def (sig (procedure " remove :: INTEGER * CIS -> CIS  " (id remove))) (p "Removes the given element from the given set and returns the new set."))
(def (sig (procedure " shift :: INTEGER * CIS -> CIS " (id shift))) (p "Adds the given integer to all elements in the set and returns the new set."))
(def (sig (procedure " union :: CIS * CIS -> CIS " (id union))) (p "Returns the union of the two sets."))
(def (sig (procedure " intersection :: CIS * CIS -> CIS " (id intersection))) (p "Returns the intersection fo the two sets."))
(def (sig (procedure " difference :: CIS * CIS -> CIS  " (id difference))) (p "Subtracts the elements of the second given set from the elements of the first given set, and returns the resulting set."))
(def (sig (procedure " get-min :: CIS -> INTEGER " (id get-min))) (p "Returns the minumum element of the set."))
(def (sig (procedure " get-max :: CIS -> INTEGER " (id get-max))) (p "Returns the maximum element of the set."))
(def (sig (procedure " foreach :: PROCEDURE * CIS -> VOID " (id foreach))) (p "Applies the given procedure to every element of the set."))
(def (sig (procedure " fold-left :: PROCEDURE * INIT * CIS -> VALUE " (id fold-left))) (p "Left fold on the elements of the set."))
(def (sig (procedure " fold-right :: PROCEDURE * INIT * CIS -> VALUE " (id fold-right))) (p "Right fold on the elements of the set."))
(def (sig (procedure " elements :: CIS -> LIST " (id elements))) (p "Returns a list containing all elements of the given set."))

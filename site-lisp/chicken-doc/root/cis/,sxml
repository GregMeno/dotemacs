((tags "egg") (section 2 "Compact integer sets" (p "The " (tt "cis") " library implements compact integer sets, represented as a list of integer intervals. The usual set operations are provided.  The advantage compared to ordered lists is that when many elements are contiguous, the actual size of the data structure may be much smaller than the cardinality of the set being represented. Most set operations are linear w.r.t. the size, not the cardinality of the set.") (toc)) (section 2 "Usage" (p "(require-extension cis)")) (section 2 "Documentation" (section 3 "Constants" (pre "empty :: CIS ") (p "The empty integer set.")) (section 3 "Procedures" (def (sig (procedure "cis? :: OBJECT -> BOOL" (id cis?))) (p "Returns " (tt "#t") " if the given object is a compact integer set, " (tt "#f") " otherwise.")) (def (sig (procedure "empty? :: CIS -> BOOL" (id empty?))) (p "Returns " (tt "#t") " if the given integer set is empty, " (tt "#f") " otherwise.")) (def (sig (procedure " subset? :: CIS * CIS -> BOOL " (id subset?))) (p "Returns " (tt "#t") " if the first given integer set is a subset of the second given integer set, " (tt "#f") " otherwise.")) (def (sig (procedure " cardinal :: CIS -> INTEGER " (id cardinal))) (p "Returns the cardinality of the given set.")) (def (sig (procedure " in? :: INTEGER * CIS -> BOOL " (id in?))) (p "Returns " (tt "#t") " if the the given integer is contained in the given set, " (tt "#f") " otherwise.")) (def (sig (procedure " singleton :: INTEGER -> CIS " (id singleton))) (p "Returns an integer set consisting of the given element.")) (def (sig (procedure " interval :: INTEGER * INTEGER -> CIS " (id interval))) (p "Returns an integer set consisting of the given interval of elements.")) (def (sig (procedure " add :: INTEGER * CIS -> CIS " (id add))) (p "Adds the given element to the given set and returns the new set.")) (def (sig (procedure " remove :: INTEGER * CIS -> CIS  " (id remove))) (p "Removes the given element from the given set and returns the new set.")) (def (sig (procedure " shift :: INTEGER * CIS -> CIS " (id shift))) (p "Adds the given integer to all elements in the set and returns the new set.")) (def (sig (procedure " union :: CIS * CIS -> CIS " (id union))) (p "Returns the union of the two sets.")) (def (sig (procedure " intersection :: CIS * CIS -> CIS " (id intersection))) (p "Returns the intersection fo the two sets.")) (def (sig (procedure " difference :: CIS * CIS -> CIS  " (id difference))) (p "Subtracts the elements of the second given set from the elements of the first given set, and returns the resulting set.")) (def (sig (procedure " get-min :: CIS -> INTEGER " (id get-min))) (p "Returns the minumum element of the set.")) (def (sig (procedure " get-max :: CIS -> INTEGER " (id get-max))) (p "Returns the maximum element of the set.")) (def (sig (procedure " foreach :: PROCEDURE * CIS -> VOID " (id foreach))) (p "Applies the given procedure to every element of the set.")) (def (sig (procedure " fold-left :: PROCEDURE * INIT * CIS -> VALUE " (id fold-left))) (p "Left fold on the elements of the set.")) (def (sig (procedure " fold-right :: PROCEDURE * INIT * CIS -> VALUE " (id fold-right))) (p "Right fold on the elements of the set.")) (def (sig (procedure " elements :: CIS -> LIST " (id elements))) (p "Returns a list containing all elements of the given set.")))) (section 2 "Examples" (pre " (define a (add 4 (add 1 (add 5 empty))))\n (define b (add 3 (add 2 (add 8 empty))))\n (elements a)\n==> (5 4 1)\n (elements b)\n==> (8 3 2)\n (elements (union a b))\n==> (8 5 4 3 2 1) \n")) (section 2 "About this egg" (section 3 "Author" (p (tt "cis") " is based on the Ocaml " (tt "Cis") " library by Sébastien Ferré.  The Chicken Scheme variant of " (tt "cis") " is implemented by " (int-link "/users/ivan-raikov" "Ivan Raikov") ".")) (section 3 "Version history" (dl (dt "1.0") (dd "Initial release"))) (section 3 "License" (pre "Copyright 2010 Ivan Raikov and the Okinawa Institute of Science and Technology\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or (at\nyour option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nGeneral Public License for more details.\n\nA full copy of the GPL license can be found at\n<http://www.gnu.org/licenses/>."))))
(index ("bessel-j0" 0) ("bessel-j1" 0) ("bessel-jn" 0) ("bessel-y0" 0) ("bessel-y1" 0) ("bessel-yn" 0) ("cosh" 322) ("sinh" 322) ("tanh" 322) ("acosh" 322) ("asinh" 322) ("atanh" 322) ("hypot" 586) ("gamma" 645) ("lgamma" 645) ("erf" 745) ("erfc" 745) ("log10" 837) ("log2" 837) ("log1p" 837) ("make-log/base" 976) ("ldexp" 1159) ("scalbn" 1159) ("cbrt" 1265) ("nextafter" 1318) ("fpmod" 1453) ("modf" 1570) ("frexp" 1722) ("signbit" 1875) ("copysign" 2005) ("fpclassify" 2127) ("fpclass" 2362))
(def (sig (procedure "(bessel-j0 N) => real" (id bessel-j0)) (procedure "(bessel-j1 N) => real" (id bessel-j1)) (procedure "(bessel-jn O N) => real" (id bessel-jn)) (procedure "(bessel-y0 N) => real" (id bessel-y0)) (procedure "(bessel-y1 N) => real" (id bessel-y1)) (procedure "(bessel-yn O N) => real" (id bessel-yn))))
(def (sig (procedure "(cosh N) => real" (id cosh)) (procedure "(sinh N) => real" (id sinh)) (procedure "(tanh N) => real" (id tanh)) (procedure "(acosh N) => real" (id acosh)) (procedure "(asinh N) => real" (id asinh)) (procedure "(atanh N) => real" (id atanh))))
(def (sig (procedure "(hypot N1 N2) => real" (id hypot))))
(def (sig (procedure "(gamma N) => real" (id gamma)) (procedure "(lgamma N) => real" (id lgamma))))
(def (sig (procedure "(erf N) => real" (id erf)) (procedure "(erfc N) => real" (id erfc))))
(def (sig (procedure "(log10 N) => real" (id log10)) (procedure "(log2 N) => real" (id log2)) (procedure "(log1p N) => real" (id log1p))))
(def (sig (procedure "(make-log/base N) => (provedure (real) real)" (id make-log/base))) (p "Returns a procedure of one argument, the logarithm function for the base " (tt "N") "."))
(def (sig (procedure "(ldexp N P2) => real" (id ldexp)) (procedure "(scalbn N P2) => real" (id scalbn))))
(def (sig (procedure "(cbrt N) => real" (id cbrt))))
(def (sig (procedure "(nextafter N M) => real" (id nextafter))) (p "Returns the next " (tt "N") " in the direction of " (tt "M") "."))
(def (sig (procedure "(fpmod N M) => real" (id fpmod))) (p "Returns the modulus of " (tt "N") " for " (tt "M") "."))
(def (sig (procedure "(modf N) => (values real integer)" (id modf))) (p "Returns two values, the integral and fractional components of " (tt "N") "."))
(def (sig (procedure "(frexp N) => (values real real)" (id frexp))) (p "Returns two values, the fraction and the exponent components of " (tt "N") "."))
(def (sig (procedure "(signbit N) => boolean" (id signbit))) (p "Returns " (tt "#t") " when negative, " (tt "#f") " otherwise."))
(def (sig (procedure "(copysign N M) => real" (id copysign))) (p "Returns " (tt "N") " with same sign as " (tt "M") "."))
(def (sig (procedure "(fpclassify N) => symbol" (id fpclassify))) (p "Returns a symbol denoting the floating-point kind of " (tt "N") ".") (dl (dt "infinite") (dt "nan") (dt "normal") (dt "subnormal") (dt "zero") (dt "unclassified")))
(def (sig (procedure "(fpclass N) => symbol" (id fpclass))) (p "Returns a symbol denoting the floating-point kind of " (tt "N") ".") (dl (dt "positive-infinite") (dt "negative-infinite") (dt "quiet-nan") (dt "signaling-nan") (dt "positive-normal") (dt "negative-normal") (dt "positive-subnormal") (dt "negative-subnormal") (dt "positive-zero") (dt "negative-zero") (dt "unclassified")))

((tags "egg") (section 2 "mathh" (toc)) (section 2 "Documentation" (p "Provides access to ISO C math functions in <math.h> that are not defined by the Chicken core. Please refer to your documentation for <math.h> for a description of the various calls.") (section 3 "Math Functions" (p (tt "O") ", " (tt "P2") " are " (tt "integer") ".") (p (tt "N") ", " (tt "N1") ", " (tt "N2") ", " (tt "M") " are " (tt "real") ".") (section 4 "Usage" (highlight scheme "(include \"mathh\")")) (section 4 "bessel-j0") (section 4 "bessel-j1") (section 4 "bessel-jn") (section 4 "bessel-jn") (section 4 "bessel-y0") (section 4 "bessel-y1") (section 4 "bessel-yn" (def (sig (procedure "(bessel-j0 N) => real" (id bessel-j0)) (procedure "(bessel-j1 N) => real" (id bessel-j1)) (procedure "(bessel-jn O N) => real" (id bessel-jn)) (procedure "(bessel-y0 N) => real" (id bessel-y0)) (procedure "(bessel-y1 N) => real" (id bessel-y1)) (procedure "(bessel-yn O N) => real" (id bessel-yn))))) (section 4 "cosh") (section 4 "sinh") (section 4 "tanh") (section 4 "acosh") (section 4 "asinh") (section 4 "atanh" (def (sig (procedure "(cosh N) => real" (id cosh)) (procedure "(sinh N) => real" (id sinh)) (procedure "(tanh N) => real" (id tanh)) (procedure "(acosh N) => real" (id acosh)) (procedure "(asinh N) => real" (id asinh)) (procedure "(atanh N) => real" (id atanh))))) (section 4 "hypot" (def (sig (procedure "(hypot N1 N2) => real" (id hypot))))) (section 4 "gamma") (section 4 "lgamma" (def (sig (procedure "(gamma N) => real" (id gamma)) (procedure "(lgamma N) => real" (id lgamma))))) (section 4 "erf") (section 4 "erfc" (def (sig (procedure "(erf N) => real" (id erf)) (procedure "(erfc N) => real" (id erfc))))) (section 4 "log10") (section 4 "log2") (section 4 "log1p" (def (sig (procedure "(log10 N) => real" (id log10)) (procedure "(log2 N) => real" (id log2)) (procedure "(log1p N) => real" (id log1p))))) (section 4 "make-log/base" (def (sig (procedure "(make-log/base N) => (provedure (real) real)" (id make-log/base))) (p "Returns a procedure of one argument, the logarithm function for the base " (tt "N") "."))) (section 4 "ldexp") (section 4 "scalbn" (def (sig (procedure "(ldexp N P2) => real" (id ldexp)) (procedure "(scalbn N P2) => real" (id scalbn))))) (section 4 "cbrt" (def (sig (procedure "(cbrt N) => real" (id cbrt))))) (section 4 "nextafter" (def (sig (procedure "(nextafter N M) => real" (id nextafter))) (p "Returns the next " (tt "N") " in the direction of " (tt "M") "."))) (section 4 "fpmod" (def (sig (procedure "(fpmod N M) => real" (id fpmod))) (p "Returns the modulus of " (tt "N") " for " (tt "M") "."))) (section 4 "modf" (def (sig (procedure "(modf N) => (values real integer)" (id modf))) (p "Returns two values, the integral and fractional components of " (tt "N") "."))) (section 4 "frexp" (def (sig (procedure "(frexp N) => (values real real)" (id frexp))) (p "Returns two values, the fraction and the exponent components of " (tt "N") "."))) (section 4 "signbit" (def (sig (procedure "(signbit N) => boolean" (id signbit))) (p "Returns " (tt "#t") " when negative, " (tt "#f") " otherwise."))) (section 4 "copysign" (def (sig (procedure "(copysign N M) => real" (id copysign))) (p "Returns " (tt "N") " with same sign as " (tt "M") "."))) (section 4 "fpclassify" (def (sig (procedure "(fpclassify N) => symbol" (id fpclassify))) (p "Returns a symbol denoting the floating-point kind of " (tt "N") ".") (dl (dt "infinite") (dt "nan") (dt "normal") (dt "subnormal") (dt "zero") (dt "unclassified")))) (section 4 "fpclass" (def (sig (procedure "(fpclass N) => symbol" (id fpclass))) (p "Returns a symbol denoting the floating-point kind of " (tt "N") ".") (dl (dt "positive-infinite") (dt "negative-infinite") (dt "quiet-nan") (dt "signaling-nan") (dt "positive-normal") (dt "negative-normal") (dt "positive-subnormal") (dt "negative-subnormal") (dt "positive-zero") (dt "negative-zero") (dt "unclassified"))))) (section 3 "Math Constants" (p "Common constants, using 'define-constant'. As such they must be textually included.") (section 4 "Usage" (highlight scheme "(include \"mathh-constants\")")) (section 4 "Constants" (dl (dt "E") (dd "e") (dt "1/E") (dd "1/e") (dt "E^2") (dd "e^2") (dt "E^PI/4") (dd "e^(pi/4)") (dt "LOG2E") (dd "log2(e)") (dt "LOG10E") (dd "log10(e)") (dt "LN2") (dd "log(2)") (dt "LN3") (dd "ln(3)") (dt "LNPI") (dd "ln(pi)") (dt "LN10") (dd "log(10)") (dt "1/LN2") (dd "1/ln(2)") (dt "1/LN10") (dd "1/ln(10)") (dt "PI") (dd "pi") (dt "PI/2") (dd "pi/2") (dt "PI/4") (dd "pi/4") (dt "1/PI") (dd "1/pi") (dt "2/PI") (dd "2/pi") (dt "2/SQRTPI") (dd "2/sqrt(pi)") (dt "SQRTPI") (dd "sqrt(pi)") (dt "PI^2") (dd "pi^2") (dt "DEGREE") (dd "pi/180") (dt "SQRT2") (dd "sqrt(2)") (dt "1/SQRT2") (dd "1/sqrt(2)") (dt "SQRT3") (dd "sqrt(3)") (dt "SQRT5") (dd "sqrt(5)") (dt "SQRT10") (dd "sqrt(10)") (dt "CUBERT2") (dd "cubert(2)") (dt "CUBERT3") (dd "cubert(3)") (dt "4THRT2") (dd "fourthrt(2)") (dt "GAMMA1/2") (dd "gamma(1/2)") (dt "GAMMA1/3") (dd "gamma(1/3)") (dt "GAMMA2/3") (dd "gamma(2/3)") (dt "PHI") (dd "phi") (dt "LNPHI") (dd "ln(phi)") (dt "1/LNPHI") (dd "1/ln(phi)") (dt "EULER") (dd "euler") (dt "E^EULER") (dd "e^euler") (dt "SIN1") (dd "sin(1)") (dt "COS1") (dd "cos(1)") (dt "ZETA3") (dd "theta(3"))))) (section 2 "Notes" (ul (li "The C library call " (tt "gamma") " is deprecated in favor of " (tt "tgamma") " but not available yet on some platforms, so we use " (tt "gamma") " where necessary.") (li "Some library calls that are not supplied by the platform have rough implementations provided anyway. See " (tt "Bugs and Limitations") ".") (li "The general naming convention is to use the C library call name as the Scheme name. But there are exceptions:")) (dl (dt "fmod") (dd "fpmod (Should be in Chicken library?)") (dt "j0") (dd "bessel-j0 (Prefixed to distinguish the names from common variables)") (dt "j1") (dd "bessel-j1") (dt "jn") (dd "bessel-jn") (dt "y0") (dd "bessel-y0") (dt "y1") (dd "bessel-y1") (dt "yn") (dd "bessel-yn"))) (section 2 "Bugs and Limitations" (ul (li "The types " (tt "integer") " & " (tt "real") " refer to the Chicken \"core\" concept of a number. Support for the full numeric tower is " (b "not") " provided.") (li "Windows does not provide library calls " (tt "lgamma") ", " (tt "gamma") ", " (tt "acosh") ", " (tt "asinh") ", " (tt "atanh") ", " (tt "log2") ", " (tt "log1p") ", " (tt "erf") ", " (tt "erfc") ", " (tt "scalbn") ", " (tt "cbrt") " & " (tt "signbit") ".")) (p "Usable versions of " (tt "log2") ", " (tt "log1p") ", " (tt "erf") ", " (tt "erfc") ", " (tt "scalbn") " & " (tt "signbit") " are provided anyway.") (ul (li "FreeBSD does not provide the library call " (tt "log2") ".")) (p "Usable version of " (tt "log2") " is provided anyway.") (ul (li "The " (tt "fpclass") " " (tt "quiet-nan") " is only distinguished on Windows."))) (section 2 "Author" (p (int-link "/users/kon-lovett" "Kon Lovett")) (p (int-link "/users/john cowan" "John Cowan"))) (section 2 "Version history" (dl (dt "2.2.1") (dd "Better " (i "no-install") " support.") (dt "2.2.0") (dd "Added " (tt "acosh") ", " (tt "asinh") ", " (tt "atanh") ", " (tt "erf") " & " (tt "erfc") ". Includes <sunmath.h> on Sun platform for " (tt "log2") ".") (dt "2.1.0") (dd "Added " (tt "signbit") ", " (tt "copysign") ", " (tt "nextafter") " & " (tt "cbrt") ".") (dt "2.0.0") (dd "Chicken 4 release. " (tt "fpclass") " and " (tt "fpclassify") " are now part of the " (b "mathh") " extension."))) (section 2 "License" (p "This code is in the public domain.")))
((section 2 "sxml-serializer" (p "Serialize SXML to XML.") (section 3 "Overview" (p "The SXML serializer writes SXML documents to a port, filename or string as XML or HTML.  It supports comment nodes, processing instruction nodes, namespace nodes and ampersand entities such as " (tt "(& 955)") ".  As an example, you can parse an XML document with the " (int-link "ssax" "ssax egg") " using " (tt "ssax:xml->sxml") " and write a valid copy back out with " (tt "serialize-sxml") ".") (p "Please refer to the serialization section of the " (link "http://modis.ispras.ru/Lizorkin/sxml-tutorial.html#hevea:serializ" "SXML tools tutorial") " for further discussion and examples.  We have made some " (int-link "#Changes from stock" "changes to the interface") ", but it is close enough and the serialization results are the same.")) (section 3 "Interface" (def (sig (procedure "(serialize-sxml doc #!key keys)" (id serialize-sxml))) (p "Serialize the SXML document " (tt "DOC") ", an SXML node or nodeset, to XML or HTML.  Returns the result string if the serialization was done to a string, or an unspecified value if serializing to file or port.") (p (tt "serialize-sxml") " accepts the following keyword arguments:") (dl (dt "output") (dd "[default " (tt "#f") "] An output port or filename to write the output to, or " (tt "#f") " to write it to a string.") (dt "cdata-section-elements") (dd "[default " (tt "'()") "] A list of SXML element names, as symbols, which will have their contents serialized to CDATA.") (dt "indent") (dd "[default, two spaces] Indentation level to apply to XML elements, as a string or " (tt "#f") ".  When a string, a newline is written when a new tag is opened, and the tag is indented by printing the string " (i "x") " times for indentation level " (i "x") ".  When " (tt "#f") ", indentation is totally disabled and no newline is printed.  To print all tags left-aligned, use the empty string.") (dt "method") (dd "[default " (tt "'xml") "] Serialization method, " (tt "'xml") " or " (tt "'html") ".  When " (tt "'html") ", an end-tag is not output for empty HTML elements; character escaping is not performed for the content of script and style elements; \"<\" characters in attribute values are not escaped; whitespace is not added inside a formatted element; and boolean attributes are output in minimized form.  HTML output is provided for completeness; using " (int-link "sxml-transforms") " may give better results.") (dt "ns-prefixes") (dd "[default " (tt "conventional-ns-prefixes") "] An alist mapping namespace prefixes (symbols) to URIs, which allows the application to specify the mapping between namespace URIs and the corresponding namespace prefixes to be used for serialization.  When no namespace prefix assignment is provided for some namespace URI, the serializer generates an XML prefix name by itself.  This URI to prefix map is applied after any user shortcuts are expanded to full URIs.") (dt "allow-prefix-redeclarations") (dd "[default: value of " (tt "allow-prefix-redeclarations?") " param] Permit different URIs to map to the same XML prefix.  See the " (int-link "#Redeclaring XML prefixes" "section on redeclaration") "."))) (def (sig (constant "conventional-ns-prefixes" (id conventional-ns-prefixes))) (p "An alist mapping well-known namespace prefixes to URIs.  Typically used when augmenting the serializer's existing namespace map:") (highlight scheme ";; translate namespace URI http://3e8.org/zb to the XML prefix zb:\n(serialize-sxml doc ns-prefixes: `((zb . \"http://3e8.org/zb\")\n                                   ,@conventional-ns-prefixes))"))) (section 3 "Namespaces" (section 4 "The default namespace" (p "XML supports a default namespace by which an implicit prefix is assumed for elements, using the " (tt "xmlns") " attribute.  These two elements are equivalent:") (pre "<atom:feed xmlns:atom=\"http://www.w3.org/2005/Atom\" />\n<feed xmlns=\"http://www.w3.org/2005/Atom\" />") (p "A typical document, in which *NAMESPACES* maps the " (tt "atom:") " user shortcut to the namespace URI " (tt "http://www.w3.org/2005/Atom") ", and " (tt "ns-prefixes") " maps that URI back to the XML prefix " (tt "atom:") ", is shown below:") (pre "> (serialize-sxml '(*TOP* (@ (*NAMESPACES* (atom \"http://www.w3.org/2005/Atom\")))\n                     (atom:feed))\n                  ns-prefixes: '((atom . \"http://www.w3.org/2005/Atom\")))\n<atom:feed xmlns:atom=\"http://www.w3.org/2005/Atom\" />") (p "However, we can cause the serializer to use the default namespace instead.  Consider the default namespace to be a special prefix called " (tt "*default*") ", which happens to produce unprefixed XML elements.  Now modify the association of the namespace URI in " (tt "ns-prefixes") ", changing the prefix from " (tt "atom") " to " (tt "*default*") ":") (pre "> (serialize-sxml '(*TOP* (@ (*NAMESPACES* (atom \"http://www.w3.org/2005/Atom\")))\n                     (atom:feed))\n                  ns-prefixes: '((*default* . \"http://www.w3.org/2005/Atom\")))\n<feed xmlns=\"http://www.w3.org/2005/Atom\" />") (p "All matching elements will then be mapped to the default namespace.") (p "XML also supports the empty namespace, which is an unprefixed element with " (tt "xmlns=\"\"") ".  The empty namespace is the default.  In SXML, the empty namespace is signified by an element without any qualifying name (in other words, it does not contain a colon).  When such an element is encountered, and the default namespace is non-empty, it is reset to empty:") (pre "> (serialize-sxml '(*TOP* (@ (*NAMESPACES* (atom \"http://www.w3.org/2005/Atom\")))\n                     (atom:feed (atom:id) (orphan)))\n                  ns-prefixes: '((*default* . \"http://www.w3.org/2005/Atom\")))\n\n<feed xmlns=\"http://www.w3.org/2005/Atom\">\n  <id />\n  <orphan xmlns=\"\" />\n</feed>") (p "Finally, you can specify multiple default namespace URIs; the default namespace will be redeclared whenever necessary:") (pre "> (serialize-sxml '(*TOP* (@ (*NAMESPACES* (atom \"http://www.w3.org/2005/Atom\")\n                                           (xhtml \"http://www.w3.org/1999/xhtml\")))\n                     (atom:feed (atom:entry\n                                 (atom:content (@ (type \"xhtml\"))\n                                  (xhtml:div (xhtml:p \"I'm invincible!\"))))))\n                   ns-prefixes: '((*default* . \"http://www.w3.org/2005/Atom\")\n                                  (*default* . \"http://www.w3.org/1999/xhtml\")))\n\n<feed xmlns=\"http://www.w3.org/2005/Atom\">\n  <entry>\n    <content type=\"xhtml\">\n      <div xmlns=\"http://www.w3.org/1999/xhtml\">\n        <p>I'm invincible!</p>\n      </div>\n    </content>\n  </entry>\n</feed>") (p "Note that you must have " (int-link "#Redeclaring XML prefixes" "prefix redeclarations enabled") " (which is the default) for this last example to work properly.  If not, the " (tt "*default*") " namespace prefix cannot be redeclared and the XHTML elements will be prefixed with " (tt "xhtml:") ".")) (section 4 "Redeclaring XML prefixes" (def (sig (parameter "(allow-prefix-redeclarations? #t)" (id allow-prefix-redeclarations?))) (p "This parameter determines the default value of the " (tt "allow-prefix-redeclarations:") " keyword to " (tt "serialize-sxml") ".") (p "If " (tt "#t") ", allows redeclaration of XML prefixes when a namespace URI maps to a previously declared XML prefix; if " (tt "#f") ", a new prefix will be autogenerated so that XML prefixes map one-to-one to URIs. Defaults to " (tt "#t") ".  The behavior of the stock " (tt "sxml-tools") " serializer is to avoid all prefix redeclarations; to retain this behavior, set this value to " (tt "#f") ".") (p "When enabled, you can provide multiple identical prefixes in " (tt "ns-prefixes") ", mapped to different URIs.  The serializer will redeclare the prefix with a different namespace URI if it has already been declared in a parent:") (pre "> (serialize-sxml '((*TOP* (http://foo:one (http://bar:two))\n                           (http://bar:three)))\n                  ns-prefixes: '((BAZ . \"http://foo\") (BAZ . \"http://bar\")))\n<BAZ:one xmlns:BAZ=\"http://foo\">\n  <BAZ:two xmlns:BAZ=\"http://bar\" />\n</BAZ:one>\n<BAZ:three xmlns:BAZ=\"http://bar\" />") (p "Contrast this to the case where redeclarations are disallowed:") (pre "> (serialize-sxml '((*TOP* (http://foo:one (http://bar:two))\n                           (http://bar:three)))\n                  ns-prefixes: '((BAZ . \"http://foo\") (BAZ . \"http://bar\"))\n                  allow-prefix-redeclarations: #f)\n<BAZ:one xmlns:BAZ=\"http://foo\">\n  <prfx1:two xmlns:prfx1=\"http://bar\" />   <!-- ooooh -->\n</BAZ:one>\n<BAZ:three xmlns:BAZ=\"http://bar\" />") (p "Here the nested element " (tt "http://bar:two") " had its XML prefix " (tt "prfx1") " auto-generated, because " (tt "BAZ") " had already been declared in the enclosing scope.  Notice that " (tt "http://bar:three") " still becomes " (tt "BAZ:three") " though, because BAZ was " (i "not") " declared in " (i "that") " element's enclosing scope.") (p "This is extremely useful when the default namespace is employed, because you can declare multiple default namespace URIs, and switch back and forth between the empty namespace and a default namespace.  You can consider the default namespace to be a dedicated prefix called " (tt "*default*") " which happens to render into XML without a prefix.") (pre "(serialize-sxml\n  '(*TOP* (http://foo:one\n            (http://bar:two\n              (http://bar:three)\n              (http://foo:four)\n              (five (six (http://foo:seven))))))\n   ns-prefixes: '((*default* . \"http://foo\") (*default* . \"http://bar\")))") (pre "<!-- redeclarations #t -->          <!-- redeclarations #f -->\n<one xmlns=\"http://foo\">            <one xmlns=\"http://foo\">\n  <two xmlns=\"http://bar\">            <prfx1:two xmlns:prfx1=\"http://bar\">\n    <three />                           <prfx1:three />\n    <four xmlns=\"http://foo\" />         <four />\n    <five xmlns=\"\">                     <five xmlns=\"\">\n      <six>                               <six>\n        <seven xmlns=\"http://foo\" />        <prfx2:seven xmlns:prfx2=\"http://foo\" />\n      </six>                              </six>\n    </five>                             </five>\n  </two>                              </prfx1:two>\n</one>                              </one>") (p "One thing to note is that the empty namespace can always be redeclared to be the default namespace, despite the value of " (tt "allow-prefix-redeclarations?") ".  That's because in XML it is illegal to associate the empty namespace with an XML prefix, so we cannot auto-generate a prefix for it.")))) (section 3 "Changes from stock" (ul (li (tt "srl:parameterizable") " has been renamed to " (tt "serialize-sxml") " and it now uses keyword arguments instead of " (tt "(key . value)") " pairs.  ") (li "XML prefix redeclarations are permitted.") (li "The default namespace is supported.") (li "The optional " (tt "port-or-filename") " argument became the " (tt "output") " keyword.  The " (tt "ns-prefix-assig") " option was renamed to " (tt "ns-prefixes") ".  Otherwise, keywords retain their original names.") (li (tt "omit-xml-declaration") ", " (tt "standalone") " and " (tt "version") " have been dropped.  Add a " (tt "(*PI* xml \"version='1.0'\")") " node to your SXML document instead.  The old way didn't support an encoding attribute and will output a duplicate declaration if there already is one in your SXML document.") (li (tt "srl:conventional-ns-prefixes") " had its " (tt "srl:") " prefix stripped, and it contains many more prefixes.") (li (tt "srl:sxml->xml") " and " (tt "srl:sxml->xml-noindent") " (and their " (tt "html") " variants) were dropped as they provide little benefit over " (tt "serialize-sxml") ":")) (pre "(srl:sxml->xml doc)          ==> (serialize-sxml doc)\n(srl:sxml->xml-noindent doc) ==> (serialize-sxml doc indent: #f)\n(srl:sxml->html doc)         ==> (serialize-sxml doc method: 'html)\n")) (section 3 "Limitations" (ul (li "There is currently no way to force declarations of all namespace prefixes in the root element.  Instead, they are declared as locally as possible.  This leads to extremely verbose output when sibling elements declare the same namespace in every single element, rather than once in a parent.") (li "Redeclaring a prefix declared in a parent is not supported in attributes, only in elements."))) (section 3 "About this egg" (section 4 "Author" (p "Dmitry Lizorkin wrote the original serializer code.  The Chicken port, and some enhancements, are by Jim Ursetto.")) (section 4 "Version history" (dl (dt "0.2") (dd "XML prefix redeclaration; default namespace support [Jim Ursetto]") (dt "0.1") (dd "Initial import from sxml-tools CVS 1.7 @ Fri Nov 7 08:36:28 2008 UTC"))) (section 4 "License" (p "BSD.  The original serializer code by Dmitry Lizorkin is public domain.")))))
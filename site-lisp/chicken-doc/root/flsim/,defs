(index ("name/scheme" 0) ("prelude/scheme" 138) ("expr->scheme" 358) ("value->scheme" 511) ("name/ML" 656) ("prelude/ML" 792) ("expr->ML" 1009) ("value->ML" 1155))
(def (sig (procedure "name/scheme :: NAME -> NAME" (id name/scheme))) (p "Converts a given name (symbol) to a valid Scheme identifier."))
(def (sig (procedure "prelude/scheme :: VOID -> FRAGMENTS" (id prelude/scheme))) (p "Returns a set of definitions needed by the Scheme code generator. " (tt "FRAGMENTS") " is a list of strings, symbols, or fragments."))
(def (sig (procedure "expr->scheme :: EXPRESSION -> FRAGMENTS " (id expr->scheme))) (p "Generates a representation of the given expression in Scheme."))
(def (sig (procedure "value->scheme :: VALUE -> FRAGMENTS " (id value->scheme))) (p "Generates a representation of the given value in Scheme."))
(def (sig (procedure "name/ML :: NAME -> NAME " (id name/ML))) (p "Converts a given name (symbol) to a valid Standard ML identifier."))
(def (sig (procedure "prelude/ML :: VOID -> FRAGMENTS" (id prelude/ML))) (p "Returns a set of definitions needed by the Standard ML code generator. " (tt "FRAGMENTS") " is a list of strings, symbols, or fragments."))
(def (sig (procedure "expr->ML :: EXPRESSION -> FRAGMENTS  " (id expr->ML))) (p "Generates a representation of the given value in Standard ML."))
(def (sig (procedure "value->ML :: VALUE -> FRAGMENTS  " (id value->ML))) (p "Generates a representation of the given value in Standard ML."))

((tags "egg") (section 2 "flsim" (p "Definition and code generators for a simple applicative language for numerical simulation.") (toc)) (section 2 "Usage" (p "(require-extension flsim)")) (section 2 "Documentation" (p "The " (tt "flsim") " library provides definitions for a simple applicative language capable of expressing finite state machines, code generators for Scheme and Standard ML, as well as a library implementing explicit Runge-Kutta solvers for ordinary differential equations.") (section 3 "Data types" (p (tt "(define-datatype value value? ...)")) (p "Representation of values in the language. The value definitions are:") (dl (dt (tt "(V:C const)")) (dd "Constant values. Currently supported are numeric and symbolic constants.") (dt (tt "(V:Var name)")) (dd "Variable name. " (tt "NAME") " must be a symbol.") (dt (tt "(V:Rec fields)")) (dd "Record constructor. " (tt "FIELDS") " is a list of elements of the form " (tt "(NAME VALUE)") ".") (dt (tt "(V:Sel field value)")) (dd "Record field selector. " (tt "FIELD") " is a field name (symbol), and " (tt "VALUE") " must be a record value.") (dt (tt "(V:Vec (value ...))")) (dd "Vector constructor.") (dt (tt "(V:Sub index value)")) (dd "Vector element selector. " (tt "INDEX") " must be a positive integer, " (tt "VALUE") " must be a vector value.") (dt (tt "(V:Ldv value)")) (dd "Load a value from a pointer value.") (dt (tt "(V:Stv value)")) (dd "Creates a pointer value pointing to the given value.") (dt (tt "(V:Fn args body)")) (dd "Parametric expression. " (tt "ARGS") " must be a list of symbols, " (tt "BODY") " must be an expression (see below for definition).") (dt (tt "(V:Prim name args)")) (dd "Primitive procedure application. " (tt "NAME") " must be a symbol, " (tt "ARGS") " must be a list of values.") (dt (tt "(V:Ifv test iftrue iffalse)")) (dd "Conditional value.")) (p (tt "(define-datatype expr expr? ...)")) (p "Representation of expressions in the language. The expression definitions are:") (dl (dt (tt "(E:Val name value)")) (dd "Creates a binding that associates the given name with the given value") (dt (tt "(E:Ife test iftrue iffalse)")) (dd "Conditional expression.") (dt (tt "(E:Let bindings body)")) (dd "An expression with bindings.    ") (dt (tt "(E:Set loc value)")) (dd "Points the given pointer to the given value.") (dt (tt "(E:Ret value)")) (dd "Returns the given value.") (dt (tt "(E:Seq expressions)")) (dd "A sequence of expressions.") (dt (tt "(E:Noop)")) (dd "Null expression."))) (section 3 "Language constants" (p "The language defined in this library assumes the presence in the host language of the standard ANSI C floating-point arithmetic and mathematical functions.")) (section 3 "Procedures" (section 4 "Scheme code generator" (def (sig (procedure "name/scheme :: NAME -> NAME" (id name/scheme))) (p "Converts a given name (symbol) to a valid Scheme identifier.")) (def (sig (procedure "prelude/scheme :: VOID -> FRAGMENTS" (id prelude/scheme))) (p "Returns a set of definitions needed by the Scheme code generator. " (tt "FRAGMENTS") " is a list of strings, symbols, or fragments.")) (def (sig (procedure "expr->scheme :: EXPRESSION -> FRAGMENTS " (id expr->scheme))) (p "Generates a representation of the given expression in Scheme.")) (def (sig (procedure "value->scheme :: VALUE -> FRAGMENTS " (id value->scheme))) (p "Generates a representation of the given value in Scheme."))) (section 4 "ML code generator" (def (sig (procedure "name/ML :: NAME -> NAME " (id name/ML))) (p "Converts a given name (symbol) to a valid Standard ML identifier.")) (def (sig (procedure "prelude/ML :: VOID -> FRAGMENTS" (id prelude/ML))) (p "Returns a set of definitions needed by the Standard ML code generator. " (tt "FRAGMENTS") " is a list of strings, symbols, or fragments.")) (def (sig (procedure "expr->ML :: EXPRESSION -> FRAGMENTS  " (id expr->ML))) (p "Generates a representation of the given value in Standard ML.")) (def (sig (procedure "value->ML :: VALUE -> FRAGMENTS  " (id value->ML))) (p "Generates a representation of the given value in Standard ML."))))) (section 2 "About this egg" (section 3 "Author" (p (int-link "/users/ivan-raikov" "Ivan Raikov"))) (section 3 "Version history" (dl (dt "1.0") (dd "Initial release"))) (section 3 "License" (pre "Copyright 2010 Ivan Raikov. \n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nGeneral Public License for more details.\n\nA full copy of the GPL license can be found at\n<http://www.gnu.org/licenses/>."))))
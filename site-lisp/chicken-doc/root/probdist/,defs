(index ("make-normal-pdf" 0) ("normal-pdf:density" 507) ("normal-pdf:sample" 853) ("normal-pdf:expectation" 1190) ("normal-pdf:covariance" 1364) ("make-sampled-pdf" 1538) ("sampled-pdf:expectation" 2346) ("sampled-pdf:covariance" 2523) ("sampled-pdf:find-sample" 2700) ("sampled-pdf:normalize" 3010) ("sampled-pdf:resample" 3163))
(def (sig (procedure "make-normal-pdf:: S * MU * SIGMA -> NORMAL-PDF" (id make-normal-pdf))) (p "Creates a new normal PDF object with the specified dimension, expectation, and covariance. If the dimension " (tt "S") " is 1, then the expectation " (tt "MU") " and the covariance " (tt "SIGMA") " must be scalars; otherwise, they must be SRFI-4 " (tt "f64") " vectors. In the latter case, " (tt "MU") " must be a vector of size " (tt "S") ", and " (tt "SIGMA") " must be a matrix of size " (tt "S x S") "."))
(def (sig (procedure "normal-pdf:density:: NORMAL-PDF * X -> DENSITY" (id normal-pdf:density))) (p "Computes the density of the distribution at the given point " (tt "X") ". If the dimension " (tt "S") " of the distribution is 1, then " (tt "X") " must be a scalar, otherwise it must be an SRFI-4 " (tt "f64") " vector of length " (tt "S") "."))
(def (sig (procedure "normal-pdf:sample:: NORMAL-PDF * X -> SAMPLE" (id normal-pdf:sample))) (p "Sample from the distribution. Let " (tt "X") " be a sample from a standard normal distribution. Then the sample is " (tt "SAMPLE = MU + R*X") ", where " (tt "R") " is the upper triangular Cholesky decomposition of the covariance matrix."))
(def (sig (procedure "normal-pdf:expectation:: NORMAL-PDF -> MU" (id normal-pdf:expectation))) (p "Return the expectation value of the distribution (scalar or f64vector)."))
(def (sig (procedure "normal-pdf:covariance:: NORMAL-PDF -> SIGMA" (id normal-pdf:covariance))) (p "Return the covariance value of the distribution (scalar or f64vector)."))
(def (sig (procedure "make-sampled-pdf:: S * MAKE-SENV * XS [* WS * XCAR * XCDR * XNULL?] -> SAMPLED-PDF" (id make-sampled-pdf))) (p "Creates a new sampled PDF object with the specified dimension, samples environment creation procedure that follows the API of make-rb-tree, and weighted samples. The samples can be specified in one of two ways. If both " (tt "XS") " and " (tt "WS") " are provided, then " (tt "XS") " is a sequence that contains the samples, and " (tt "WS") " is a sequence that contains the corresponding weights. If only " (tt "XS") " is provided, or " (tt "WS") " is false, then " (tt "XS") " must consist of cons cells, where the car is the weight, and the cdr is the sample. Optional arguments " (tt "XCAR XCDR XNULL?") " could be used for sequences other than lists (e.g. streams)."))
(def (sig (procedure "sampled-pdf:expectation:: SAMPLED-PDF -> MU" (id sampled-pdf:expectation))) (p "Return the expectation value of the distribution (scalar or f64vector)."))
(def (sig (procedure "sampled-pdf:covariance:: SAMPLED-PDF -> SIGMA" (id sampled-pdf:covariance))) (p "Return the covariance value of the distribution (scalar or f64vector)."))
(def (sig (procedure "sampled-pdf:find-sample:: U * SAMPLED-PDF -> X" (id sampled-pdf:find-sample))) (p "Given a number " (tt "u in [0,1]") ", returns the sample " (tt "x(i)") "such that " (tt "\\sum_{j=1}^{i-1} w_j < Wu <= \\sum_{j=1}^{i} w_j") ", where " (tt "W") " is the total weight of the sample set."))
(def (sig (procedure "sampled-pdf:normalize:: SAMPLED-PDF -> SAMPLED-PDF" (id sampled-pdf:normalize))) (p "Normalizes the sample weights to sum to 1."))
(def (sig (procedure "sampled-pdf:resample:: MAKE-SENV * SAMPLED-PDF [ * M] -> SAMPLED-PDF" (id sampled-pdf:resample))) (p "Resamples the distribution. This produces a new approximation of the same distribution using a set of equally weighted sample points. Sample points are selected using the deterministic resampling method given in the appendix of Kitagawa. Optional argument " (tt "M") " is the number of samples to take for the new distribution. If not given, defaults to the number of samples in the existing distribution."))

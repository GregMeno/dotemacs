((section 2 "ansi-escape-sequences" (section 3 "Description" (p "Procedures to generate " (link "http://ascii-table.com/ansi-escape-sequences.php" "ANSI escape sequences") ".")) (section 3 "Author" (p (link "http://wiki.call-cc.org/users/mario-domenech-goulart" "Mario Domenech Goulart"))) (section 3 "Requirements" (p "None")) (section 3 "Procedures" (def (sig (procedure "(cursor-position #!optional (line 0) (column 0))" (id cursor-position))) (p "Move the cursor to the specified position (coordinates).  If a position is not specified, the cursor is moved to the home position at the upper-left corner of the screen (line 0, column 0).")) (def (sig (procedure "(cursor-up lines)" (id cursor-up))) (p "Move the cursor up by the specified number of lines without changing columns.")) (def (sig (procedure "(cursor-down lines)" (id cursor-down))) (p "Move the cursor down by the specified number of lines without changing columns.")) (def (sig (procedure "(cursor-forward columns)" (id cursor-forward))) (p "Move the cursor forward by the specified number of columns without changing lines.")) (def (sig (procedure "(cursor-backward columns)" (id cursor-backward))) (p "Move the cursor back by the specified number of columns without changing lines.")) (def (sig (procedure "(save-cursor-position)" (id save-cursor-position))) (p "Save the current cursor position.  You can move the cursor to the saved cursor position by using the " (tt "restore-cursor-position") " procedure.")) (def (sig (procedure "(restore-cursor-position)" (id restore-cursor-position))) (p "Return the cursor to the position stored by the " (tt "save-cursor-position") ".")) (def (sig (procedure "(erase-display)" (id erase-display))) (p "Clear the screen and move the cursor to the home position (line 0, column 0).")) (def (sig (procedure "(erase-line)" (id erase-line))) (p "Clear all characters from the cursor position to the end of the line (including the character at the cursor position).")) (def (sig (procedure "(set-mode attrib)" (id set-mode))) (p "Change the screen width or type to the mode specified by one of the following values (symbols):") (ul (li (tt "40x25-monochrome")) (li (tt "40x25-color")) (li (tt "80x25-monochrome")) (li (tt "80x25-color")) (li (tt "320x200-4-color")) (li (tt "320x200-monochrome")) (li (tt "640x200-monochrome")) (li (tt "line-wrapping")) (li (tt "320x200-color")) (li (tt "640x200-color")) (li (tt "640x350-monochrome")) (li (tt "640x350-color")) (li (tt "640x480-monochrome")) (li (tt "640x480-color")) (li (tt "320x200-color")))) (def (sig (procedure "(reset-mode attrib)" (id reset-mode))) (p "Reset the mode by using the same values as " (tt "set-mode") ".")) (def (sig (procedure "(set-text attribs text #!optional (reset #t))" (id set-text))) (p "Change the colors and attributes of text (such as bold and underline) displayed on the screen.  The following attributes are available (symbols):") (ul (li (tt "reset")) (li (tt "bold")) (li (tt "underscore")) (li (tt "blink")) (li (tt "reverse-video")) (li (tt "concealed")) (li (tt "fg-black")) (li (tt "fg-red")) (li (tt "fg-green")) (li (tt "fg-yellow")) (li (tt "fg-blue")) (li (tt "fg-magenta")) (li (tt "fg-cyan")) (li (tt "fg-white")) (li (tt "bg-black")) (li (tt "bg-red")) (li (tt "bg-green")) (li (tt "bg-yellow")) (li (tt "bg-blue")) (li (tt "bg-magenta")) (li (tt "bg-cyan")) (li (tt "bg-white"))) (p (tt "bg-") " is for " (i "background") ".  " (tt "fg-") " is for " (i "foreground") "."))) (section 3 "Examples" (p "There are videos showing the execution of the program below: " (link "http://parenteses.org/mario/misc/ansi-chicken.ogv" "OGV (Theora)") ", " (link "http://parenteses.org/mario/misc/ansi-chicken.avi" "AVI")) (highlight scheme "(use posix ansi-escape-sequences)\n\n(set-buffering-mode! (current-output-port) #:none)\n\n(display (save-cursor-position))\n(for-each (lambda (letter)\n            (display letter)\n            (sleep 1)\n            (cursor-forward 1))\n          '(\"c\" \"h\" \"i\" \"c\" \"k\" \"e\" \"n\"))\n\n(display \" \")\n(for-each (lambda (letter)\n            (display (set-text '(bg-black fg-yellow) letter))\n            (sleep 1)\n            (cursor-forward 1))\n          '(\"r\" \"o\" \"c\" \"k\" \"s\" \"!\"))\n\n(display (restore-cursor-position))\n(display (erase-line))\n\n(for-each (lambda (letter)\n            (display letter)\n            (sleep 1)\n            (cursor-forward 1))\n          '(\"c\" \"h\" \"i\" \"c\" \"k\" \"e\" \"n\"))\n\n(display \" \")\n(for-each (lambda (letter)\n            (display (set-text '(bg-red fg-white) letter))\n            (sleep 1)\n            (cursor-forward 1))\n          '(\"r\" \"u\" \"l\" \"e\" \"s\" \"!\"))\n\n(print \"\")")) (section 3 "License" (p "BSD")) (section 3 "Version history" (dl (dt "0.1") (dd "Initial release")))))
(index ("make-problem" 0) ("make-svm-node" 462) ("make-svm-parameter" 598) ("problem-get-instance" 920) ("problem-get-instance-values" 1095) ("problem-get-label" 1278) ("problem-num-instances" 1426) ("read-problem" 1571) ("svm-check-parameter" 1747) ("svm-check-probability-model" 1933) ("svm-destroy" 2028) ("svm-destroy-param" 2097) ("svm-free-model-content" 2176) ("svm-get-nr-class" 2261) ("svm-get-svm-type" 2387) ("svm-get-svr-probability" 2507) ("svm-load-model" 2646) ("svm-no-print-function" 2814) ("svm-predict" 2954) ("svm-save-model" 3114) ("svm-train" 3289))
(def (sig (procedure "(make-problem definition)" (id make-problem))) (p "Returns a pointer to an instance of " (tt "svm_problem") ", created using the given " (tt "definition") ".  The definition can be in one of two forms.  In both forms, the definition is a list of instances.  The instance description is one of:") (ul (li "a label followed by numeric values for each of the features; or") (li "a label followed by " (tt "(feature-index value)") " pairs.")))
(def (sig (procedure "(make-svm-node index value)" (id make-svm-node))) (p "Returns a pointer to an instance of " (tt "svm_node") "."))
(def (sig (procedure "(make-svm-parameter  #!key (svm-type C-SVC) (kernel-type LINEAR)  (degree 3) (gamma 0.0) (coef0 0.0)   (cache-size 100.0) (eps 0.001) (C 1.0) (nr-weight 0) (nu 0.5) (p 0.1) (shrinking 1) (probability 0))" (id make-svm-parameter))) (p "Returns a pointer to an instance of " (tt "svm_parameter") "."))
(def (sig (procedure "(problem-get-instance problem index)" (id problem-get-instance))) (p "Return a pointer to the data which defines the indexed instance in problem set."))
(def (sig (procedure "(problem-get-instance-values instance)" (id problem-get-instance-values))) (p "Return a list of (index value) pairs for the data defining the given instance."))
(def (sig (procedure "(problem-get-label problem index)" (id problem-get-label))) (p "Returns the label for the indexed instance in problem set."))
(def (sig (procedure "(problem-num-instances problem)" (id problem-num-instances))) (p "Returns the number of instances in the given problem."))
(def (sig (procedure "(read-problem filename)" (id read-problem))) (p "Returns a pointer to an instance of " (tt "svm_problem") " for problem read from " (tt "filename") "."))
(def (sig (procedure "(svm-check-parameter problem parameter)" (id svm-check-parameter))) (p "Returns " (tt "#f") " if parameter set is ok, else a string giving description of error."))
(def (sig (procedure "(svm-check-probability-model model)" (id svm-check-probability-model))))
(def (sig (procedure "(svm-destroy model-array)" (id svm-destroy))))
(def (sig (procedure "(svm-destroy-param parameter)" (id svm-destroy-param))))
(def (sig (procedure "(svm-free-model-content model)" (id svm-free-model-content))))
(def (sig (procedure "(svm-get-nr-class model)" (id svm-get-nr-class))) (p "Returns the number of classes for given model."))
(def (sig (procedure "(svm-get-svm-type model)" (id svm-get-svm-type))) (p "Returns the svm-type of the given model."))
(def (sig (procedure "(svm-get-svr-probability model)" (id svm-get-svr-probability))) (p "Returns the SVR probability from given model."))
(def (sig (procedure "(svm-load-model filename)" (id svm-load-model))) (p "Reads model definition from given " (tt "filename") " and returns a pointer to the model."))
(def (sig (procedure "(svm-no-print-function)" (id svm-no-print-function))) (p "Turns off printing of information during model training."))
(def (sig (procedure "(svm-predict model svm-node-array)" (id svm-predict))) (p "Returns prediction of " (tt "model") " for given " (tt "svm-node-array") "."))
(def (sig (procedure "(svm-save-model filename model)" (id svm-save-model))) (p "Saves given model to a file called " (tt "filename") ".  Returns 0 if OK, else 1 if error."))
(def (sig (procedure "(svm-train problem parameter)" (id svm-train))) (p "Returns a pointer an SVM model trained using given " (tt "problem") " and " (tt "parameter") " set."))

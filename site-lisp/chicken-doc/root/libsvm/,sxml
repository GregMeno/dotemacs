((section 2 "libsvm" (p (link "http://en.wikipedia.org/wiki/Support_vector_machine" "Support Vector Machines") " (SVMs) are one of the most important algorithms for machine learning and data mining applications.  This egg provides an interface to the widely-used " (link "http://www.csie.ntu.edu.tw/~cjlin/libsvm/" "libsvm") " library.  For more information on SVMs, and how to use the functions provided by libsvm, you should read the " (link "http://www.csie.ntu.edu.tw/~cjlin/papers/guide/guide.pdf" "guide") " provided by the libsvm authors.") (section 3 "Constants" (dl (dt "svm_type") (dd "C-SVC NU-SVC ONE-CLASS EPSILON-SVR NU-SVR") (dt "kernel_type") (dd "LINEAR POLY RBF SIGMOID PRECOMPUTED"))) (section 3 "Procedures" (def (sig (procedure "(make-problem definition)" (id make-problem))) (p "Returns a pointer to an instance of " (tt "svm_problem") ", created using the given " (tt "definition") ".  The definition can be in one of two forms.  In both forms, the definition is a list of instances.  The instance description is one of:") (ul (li "a label followed by numeric values for each of the features; or") (li "a label followed by " (tt "(feature-index value)") " pairs."))) (def (sig (procedure "(make-svm-node index value)" (id make-svm-node))) (p "Returns a pointer to an instance of " (tt "svm_node") ".")) (def (sig (procedure "(make-svm-parameter  #!key (svm-type C-SVC) (kernel-type LINEAR)  (degree 3) (gamma 0.0) (coef0 0.0)   (cache-size 100.0) (eps 0.001) (C 1.0) (nr-weight 0) (nu 0.5) (p 0.1) (shrinking 1) (probability 0))" (id make-svm-parameter))) (p "Returns a pointer to an instance of " (tt "svm_parameter") ".")) (def (sig (procedure "(problem-get-instance problem index)" (id problem-get-instance))) (p "Return a pointer to the data which defines the indexed instance in problem set.")) (def (sig (procedure "(problem-get-instance-values instance)" (id problem-get-instance-values))) (p "Return a list of (index value) pairs for the data defining the given instance.")) (def (sig (procedure "(problem-get-label problem index)" (id problem-get-label))) (p "Returns the label for the indexed instance in problem set.")) (def (sig (procedure "(problem-num-instances problem)" (id problem-num-instances))) (p "Returns the number of instances in the given problem.")) (def (sig (procedure "(read-problem filename)" (id read-problem))) (p "Returns a pointer to an instance of " (tt "svm_problem") " for problem read from " (tt "filename") ".")) (def (sig (procedure "(svm-check-parameter problem parameter)" (id svm-check-parameter))) (p "Returns " (tt "#f") " if parameter set is ok, else a string giving description of error.")) (def (sig (procedure "(svm-check-probability-model model)" (id svm-check-probability-model)))) (def (sig (procedure "(svm-destroy model-array)" (id svm-destroy)))) (def (sig (procedure "(svm-destroy-param parameter)" (id svm-destroy-param)))) (def (sig (procedure "(svm-free-model-content model)" (id svm-free-model-content)))) (def (sig (procedure "(svm-get-nr-class model)" (id svm-get-nr-class))) (p "Returns the number of classes for given model.")) (def (sig (procedure "(svm-get-svm-type model)" (id svm-get-svm-type))) (p "Returns the svm-type of the given model.")) (def (sig (procedure "(svm-get-svr-probability model)" (id svm-get-svr-probability))) (p "Returns the SVR probability from given model.")) (def (sig (procedure "(svm-load-model filename)" (id svm-load-model))) (p "Reads model definition from given " (tt "filename") " and returns a pointer to the model.")) (def (sig (procedure "(svm-no-print-function)" (id svm-no-print-function))) (p "Turns off printing of information during model training.")) (def (sig (procedure "(svm-predict model svm-node-array)" (id svm-predict))) (p "Returns prediction of " (tt "model") " for given " (tt "svm-node-array") ".")) (def (sig (procedure "(svm-save-model filename model)" (id svm-save-model))) (p "Saves given model to a file called " (tt "filename") ".  Returns 0 if OK, else 1 if error.")) (def (sig (procedure "(svm-train problem parameter)" (id svm-train))) (p "Returns a pointer an SVM model trained using given " (tt "problem") " and " (tt "parameter") " set."))) (section 3 "Examples" (p "The following example uses a file from libsvm " (link "http://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/" "examples") "; this example and others can be found in the " (link "http://anonymous@code.call-cc.org/svn/chicken-eggs/release/4/libsvm/examples/" "svn repository") " for this egg.  The program reads in the datafile, constructs a model, and then reports all details of the dataset and performance.") (highlight scheme "(require-extension format)\n(require-extension libsvm)\n(require-extension srfi-42)\n\n;; read in a sample dataset in svm-light format\n(define problem (read-problem \"australian_scale.txt\"))\n\n(format #t \"Problem has ~d instances~&\"\n       (problem-num-instances problem))\n\n;; create a model from dataset - uses default parameters\n(define svm-model (svm-train problem (make-svm-parameter)))\n\n;; display instances with actual and predicted class\n(define *correct* \n  (sum-ec (: i (problem-num-instances problem))\n          (begin\n            (let ((actual (problem-get-label problem i))\n                  (predicted (svm-predict svm-model (problem-get-instance problem i))))\n              (format #t \"Instance ~d: values ~a, class ~2d, predicted ~f ~a~&\"\n                      (+ 1 i)\n                      (problem-get-instance-values (problem-get-instance problem i))\n                      actual\n                      predicted\n                      (if (= actual predicted) \n                        \"Y\"\n                        \"\"))\n              ;; return a '1' for each correct prediction\n              (if (= actual predicted) 1 0)))))\n\n;; display summary of performance\n(format #t \"Proportion correct: ~4,1f%~&\" \n        (/ (* 100 *correct*) (problem-num-instances problem)))") (p "Output:") (pre "Problem has 690 instances\n.......*......*\noptimization finished, #iter = 9453\nnu = 0.290834\nobj = -199.649812, rho = 1.025147\nnSV = 210, nBSV = 193\nTotal nSV = 210\nInstance 1: values ((1 1.0) (2 -0.749474) (3 -0.181429) (5 -0.538462) (6 -0.25) (7 -0.888772) (8 -1.0) (9 -1.0) \n(10 -1.0)  (11 1.0) (13 -0.9) (14 -0.97576)), class -1, predicted -1.0 Y\n. . . INFORMATION FOR OTHER INSTANCES . . . \nInstance 690: values ((1 1.0) (2 -0.180451) (3 -0.997143) (5 0.384615) (6 -0.25) (7 -0.997193) (8 -1.0) (9 1.0) \n(10 -0.970149) (11 -1.0) (12 -1.0) (13 -0.44) (14 -1.0)), class  1, predicted -1.0\nProportion correct: 85.7%") (p "The following example shows how to construct a problem set from individual data values:") (highlight scheme ";;; This program illustrates how to construct a problem set for use in libsvm\n;;; Written by Peter Lane, 2010\n\n(require-extension srfi-1)\n(require-extension srfi-42)\n(require-extension format)\n(require-extension libsvm)\n\n(format #t \"Classification with LIBSVM~&\")\n(format #t \"--------------------------~&\")\n \n;; Sample dataset: the 'Play Tennis' dataset \n;; from T. Mitchell, Machine Learning (1997)\n;; --------------------------------------------\n;; Labels for each instance in the training set\n;;    1 = Play, 0 = Not\n\n(define labels '(0 0 1 1 1 0 1 0 1 1 1 1 1 0))\n\n;; Recoding the attribute values into range [0, 1]\n(define instances '((0.0 1.0 1.0 0.0)\n                    (0.0 1.0 1.0 1.0)\n                    (0.5 1.0 1.0 0.0)\n                    (1.0 0.5 1.0 0.0)\n                    (1.0 0.0 0.0 0.0)\n                    (1.0 0.0 0.0 1.0)\n                    (0.5 0.0 0.0 1.0)\n                    (0.0 0.5 1.0 0.0)\n                    (0.0 0.0 0.0 0.0)\n                    (1.0 0.5 0.0 0.0)\n                    (0.0 0.5 0.0 1.0)\n                    (0.5 0.5 1.0 1.0)\n                    (0.5 1.0 0.0 0.0)\n                    (.0 0.5 1.0 1.0)))\n\n;; create some arbitrary train/test split\n(define training-labels (take labels 10))\n(define training-instances (take instances 10))\n(define test-labels (drop labels 10))\n(define test-instances (drop instances 10))\n\n;; pair the instances with their labels in required form for making problem set\n(define training-problem \n  (make-problem (map cons training-labels training-instances)))\n(define test-problem \n  (make-problem (map cons test-labels test-instances)))\n\n(define (report-results svm-model problem)\n  ;; display instances with actual and predicted class\n  (define *correct* \n    (sum-ec (: i (problem-num-instances problem))\n            (begin\n              (let ((actual (problem-get-label problem i))\n                    (predicted (svm-predict svm-model (problem-get-instance problem i))))\n                (format #t \"Instance ~d: values ~a, class ~2d, predicted ~f ~a~&\"\n                        (+ 1 i)\n                        (problem-get-instance-values (problem-get-instance problem i))\n                        actual\n                        predicted\n                        (if (= actual predicted) \n                          \"Y\"\n                          \"\"))\n                ;; return a '1' for each correct prediction\n                (if (= actual predicted) 1 0)))))\n\n  ;; display summary of performance\n  (format #t \"Proportion correct: ~4,1f%~&\" \n          (/ (* 100 *correct*) (problem-num-instances problem))))\n\n(for-each ;; train and test a model for each type of kernel\n  (lambda (kernel name)\n    (let* ((parameters (make-svm-parameter kernel-type: kernel\n                                           svm-type: NU-SVC\n                                           degree: 1\n                                           gamma: 100.0\n                                           C: 10))\n           (model (svm-train training-problem parameters)))\n      (format #t \"Kernel: ~a~&\" name)\n      (format #t \"Results on training set~&\")\n      (report-results model training-problem)\n      (format #t \"Results on test set~&\")\n      (report-results model test-problem)))\n  (list LINEAR POLY RBF SIGMOID)\n  (list \"Linear\" \"Polynomial\" \"Radial-Basis Function\" \"Sigmoid\"))")) (section 3 "Author" (p (link "http://wiki.call-cc.org/users/peter-lane" "Peter Lane") ".")) (section 3 "License" (p "GPL version 3.0.")) (section 3 "Requirements" (p "You must have the " (link "http://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/" "libsvm library") " installed.  Note: use " (tt "make") " in the usual way, and then " (tt "make lib") " to  construct the shared library.  You need to place the shared library and the " (tt "svm.h") " header file in the usual include locations so " (tt "chicken-install") " can find them (on linux systems, this is usually " (tt "/usr/local/lib") " and " (tt "/usr/local/include") ").") (p "This library is tested against version 3.0 of libsvm.")) (section 3 "Version History" (ul (li "0.2: " (tt "make-problem") " for defining problems within scheme.") (li "0.1: simple examples working.")))))
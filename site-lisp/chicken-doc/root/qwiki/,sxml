((tags "egg") (section 2 "qwiki" (toc) (section 3 "Description" (p "A fast and light-weight wiki")) (section 3 "Author" (p (int-link "/users/ivan-raikov" "Ivan Raikov") " and " (int-link "/users/peter-bex" "Peter Bex"))) (section 3 "Requirements" (ul (li (int-link "svnwiki-sxml")) (li (int-link "intarweb")) (li (int-link "uri-common")) (li (int-link "spiffy")) (li (int-link "doctype")) (li (int-link "sxml-transforms")) (li (int-link "sxpath")) (li (int-link "html-parser")) (li (int-link "colorize")) (li (int-link "multidoc")) (li (int-link "estraier-client")) (li (int-link "svn-client")))) (section 3 "Documentation" (p "qwiki is the \"quick wiki\".  It is a lightweight wiki which uses sxml for internal wiki page representation.  Because it uses sxml as intermediate representation, it is easy to write different output generators through the use of " (int-link "multidoc") ".") (p "In the future we also hope to support multiple storage backends but right now subversion is the only implementation of that.")) (section 3 "How to set it up" (section 4 "Set up hyper-estraier" (p "You should set up a " (link "http://hyperestraier.sourceforge.net" "Hyper Estraier") " server.  This is as simple as navigating to the directory under which you want the database to be created and entering the following commands:") (pre " # estmaster init estraierdb\n # estmaster start estraierdb") (p "This creates the db and sets the server running.") (p "Later, if you are happy with the setup and the wiki is working properly, you can add this line to your startup scripts:") (pre " estmaster start -bg /path/to/estraierdb") (p "The " (tt "-bg") " switch puts it into daemon mode (and makes it quiet).")) (section 4 "Create a subversion repository" (p "You should first create a subversion repository, if you don't already have one.  Then, make a " (tt "post-commit-hook") " script that invokes the " (tt "qwiki-post-commit-hook!") " procedure from the " (tt "qwiki-post-commit-hook") " module.  Here's an example (" (tt "path/to/your/repo/hooks/post-commit") "):") (highlight scheme "#! /usr/bin/csi -s\n\n(use qwiki qwiki-svn qwiki-post-commit-hook)\n\n;; the URI for the subversion repository from where a copy can be\n;; checked out\n(qwiki-repos-uri \"file:///path/to/the/repository/directory\")\n\n;; the path to where the checkout of the repository will be stored\n(qwiki-source-path \"/path/to/the/checkout/directory\")\n\n(qwiki-post-commit-hook!)") (p "If you prefer, you can delay setting up the post-commit-hook until after you got the wiki up and running (this is a good idea if people will be committing to the repository while you are setting this up).") (p "You can also call the " (tt "post-commit") " scheme script (like the example above) from any other script you want use as the actual " (tt "post-commit") " script or even make the scheme script the actual one and call other arbitrary scripts from it.")) (section 4 "Deploy qwiki" (p "Now you are ready to run the qwiki installation procedure which will create an initial checkout, process all files to make a cached HTML file and create populate the search index.") (p "The best way to do that is by creating a script which sets the require parameters and calls " (tt "qwiki-install!") ".  Here's a simple example:") (highlight scheme "(use qwiki qwiki-install qwiki-svn)\n\n;; the URI for the subversion repository from where a copy can be\n;; checked out\n(qwiki-repos-uri \"file:///path/to/the/repository/directory\")\n\n;; the path to where the checkout of the repository will be stored\n(qwiki-source-path \"/path/to/the/checkout/directory\")\n\n;; the path used by the web server to serve wiki pages\n(qwiki-web-path \"/path/to/web/server/documents/directory\")\n\n;; install qwiki\n(qwiki-install!)") (p "Here's a more complex example:") (highlight scheme "(use qwiki qwiki-install qwiki-search qwiki-menu qwiki-svn)\n\n;; Try to read the svnwiki user password\n(handle-exceptions\n exn\n (begin\n   (with-output-to-port (current-error-port)\n     (lambda ()\n       (print \"Could not read the password file for the SVN user.  Aborting.\")))\n   (exit 1))\n (qwiki-repos-password\n  (with-input-from-file \"the-password-file\" read-line)))\n\n(search-install!)\n(menu-install!)\n(qwiki-repos-username \"the-wiki-user\")\n(qwiki-css-file \"/wiki.css\")\n(qwiki-title \"The wiki\")\n\n(qwiki-repos-uri \"file:///var/svn/\")\n(qwiki-source-path \"/tmp/qwiki\")\n(qwiki-web-path \"/var/www/spiffy/wiki\")\n\n(qwiki-install!)") (p "The values for " (tt "qwiki-source-path") " and " (tt "qwiki-web-path") " should not overlap.") (p "The exact directory locations are up to you, of course, but they will have to match the locations of the post-commit-hook.  You can also set the search URI location through the " (tt "QWIKI_SEARCH_URI") " environment variable if you changed the default admin account or want it to use some other location than localhost.")) (section 4 "Create a spiffy configuration" (p "Currently qwiki can only run under Spiffy, so you will either have to run spiffy as your main webserver, or proxy all requests for the wiki to it.") (highlight scheme "(use spiffy qwiki qwiki-search qwiki-menu qwiki-svn)\n\n;; If you don't want these extensions, remove them from this script\n(search-install!)\n(menu-install!)\n\n(qwiki-repos-uri \"file:///path/to/repos\")\n\n;; Ensure this is an absolute path, if you are using Chicken 4.1 or earlier\n(root-path \"/var/www/html/qwiki\")\n\n;; Pass all requests to non-existent files through qwiki:\n(vhost-map `((\".*\" . ,(lambda (continue)\n                        (parameterize ((handle-not-found qwiki-handler)\n\t\t\t\t       (handle-directory qwiki-handler)\n\t\t\t\t       (index-files '()))\n                           (continue))))))\n\n(start-server)") (p "When you run this, your qwiki installation should be available at http://localhost:8080")) (section 4 "Customizing Qwiki" (section 5 "qwiki" (p "These parameters are exported by the " (tt "qwiki") " module.") (def (sig (parameter "(qwiki-css-file [FILE])" (id qwiki-css-file))) (p "Set an optional CSS file to use for styling the wiki.  " (tt "FILE") " should be a string, which is parsed into an uri-common object by the " (tt "uri-reference") " procedure.  This URI should be relative to the docroot.  Defaults to " (tt "#f") ".")) (def (sig (parameter "(qwiki-title [TITLE])" (id qwiki-title))) (p "Set an optional global " (tt "TITLE") " or \"name\" for the wiki.  This will appear on every page in the browser's titlebar to inform the user that he's on a page of this particular wiki. Defaults to " (tt "#f") ".")) (def (sig (parameter "(qwiki-source-path [DIRECTORY])" (id qwiki-source-path))) (p "The directory where qwiki expects a checkout of the repository that holds the wiki pages.  When running the installation procedure, it will make this checkout.") (p "The value defaults to the environment variable " (tt "QWIKI_SOURCE_PATH") " if set. Otherwise it will default to " (tt "\"/tmp/qwiki\"") ".")) (def (sig (parameter "(qwiki-web-path [DIRECTORY])" (id qwiki-web-path))) (p "The directory where qwiki will write its generated and cached HTML files to. Defaults to the environment variable " (tt "QWIKI_WEB_PATH") " if set, otherwise will default to " (tt "\"/var/www\"") ".") (p "This variable is only for when qwiki is called from the commandline or through the post-commit hook.  It is " (i "ignored") " when running qwiki through " (tt "qwiki-handler") " inside Spiffy.  In that case it will just use Spiffy's " (tt "root-path") ".")) (def (sig (parameter "(qwiki-docroot [DIRECTORY])" (id qwiki-docroot))) (p "In case you want qwiki be accessible underneath a subdirectory of spiffy, you can use this.  (it's unsure whether this even works and whether it will stay)")) (def (sig (parameter "(qwiki-base-uri [URI])" (id qwiki-base-uri))) (p "The URI (an " (int-link "uri-common") " object) under which this wiki is available.  All internal links will use this as their base URI. Defaults to " (tt "/") ".")) (def (sig (parameter "(qwiki-output-driver [TRANSFORMATION-RULES])" (id qwiki-output-driver))) (p "This defaults to " (tt "qwiki-html-transformation-rules") " from the " (tt "qwiki-sxml") " module.  It can be changed to " (tt "qwiki-LaTeX-transformation-rules") " or " (tt "qwiki-Texinfo-transformation-rules") " when generating offline documentation.")) (def (sig (parameter "(qwiki-extensions [EXTENSIONS])" (id qwiki-extensions))) (p "This parameter can be extended to add transformation rule extensions to the output driver.  Defaults to the empty list.") (p "A transformation rule is simply a ruleset accepted by " (tt "pre-post-order*") ".")) (def (sig (parameter "(qwiki-update-handlers [HANDLERS])" (id qwiki-update-handlers))) (p "This parameter can be extended to add update callbacks which will be invoked when a wiki page was updated. Defaults to the empty list.") (p "An update hook is a procedure that accepts a path to the wiki page (a list of path components) and the sxml which represents the new contents.")) (def (sig (parameter "(qwiki-delete-handlers [HANDLERS])" (id qwiki-delete-handlers))) (p "This parameter can be extended to add update callbacks which will be invoked when a wiki page was removed. Defaults to the empty list.")) (def (sig (parameter "(blocked-ip-addresses-file [PATH])" (id blocked-ip-addresses-file))) (p "A path relative to the qwiki checkout which points to a file containing IP addresses to be blocked, one address per line. Useful for combating spam.") (p "Defaults to " (tt "\"edit-deny\"") ".")) (def (sig (parameter "(qwiki-current-file [PATH])" (id qwiki-current-file))) (p "Not to be touched in the configuration; this is a run-time parameter used to indicate the current wiki file being processed.  Useful for use in transformation rules."))) (section 5 "qwiki-svn" (p "These parameters are exported by the " (tt "qwiki-svn") " module.") (def (sig (parameter "(qwiki-repos-uri [URI-STRING])" (id qwiki-repos-uri))) (p "The URI to the subversion repository.  Defaults to #f, so you must configure this!")) (def (sig (parameter "(qwiki-repos-username [USERNAME])" (id qwiki-repos-username))) (p "The username for commits done from the wiki interface when the user chooses not to authenticate.  Default: " (tt "\"anonymous\""))) (def (sig (parameter "(qwiki-repos-password [PASSWORD])" (id qwiki-repos-password))) (p "The password for the " (tt "qwiki-repos-username") " user. Default: " (tt "\"\"")))) (section 5 "qwiki-search" (p "These parameters are exported by the " (tt "qwiki-search") " module.") (def (sig (parameter "(search-server-uri [URI])" (id search-server-uri))) (p "Defaults to whatever the environment variable " (tt "QWIKI_SEARCH_URI") " holds if it is set, or else " (tt "\"http://admin:admin@localhost:1978\"") ", which is the default estraier URI."))) (section 5 "qwiki-menu" (p "These parameters are exported by the " (tt "qwiki-menu") " module.") (def (sig (parameter "(menu-file [PATH])" (id menu-file))) (p "If not " (tt "#f") ", this file will contain (in wiki syntax) the contents of the menu which is rendered on all wiki pages.  Should be relative to the wiki checkout directory.  Defaults to " (tt "\"/menu\"") "."))) (section 5 "qwiki-install" (def (sig (procedure "(qwiki-install!)" (id qwiki-install!))) (p "Performs the steps for installing qwiki.  It uses the parameters " (tt "qwiki-repos-uri") ", " (tt "qwiki-source-path") " and " (tt "qwiki-web-path") " and considers their values are valid ones.") (p "This procedure is to be used by installation scripts."))) (section 5 "qwiki-post-commit-hook" (def (sig (procedure "(qwiki-post-commit-hook!)" (id qwiki-post-commit-hook!))) (p "Executes the required steps after a commit is performed. It uses the parameters " (tt "qwiki-repos-uri") ", " (tt "qwiki-source-path") " and considers their values are valid ones.") (p "This procedure is to be used by Subversion post-commit scripts."))))) (section 3 "Changelog" (ul (li "1.1 - Update handling of symbolic links, making them safer and getting rid of cache and text search database inconsistencies. Fix filename normalization for absolute path references in wiki page links.") (li "1.0 - First release, as deployed on " (link "http://wiki.call-cc.org")))) (section 3 "License" (pre " Copyright (c) 2009-2010, Ivan Raikov and Peter Bex\n All rights reserved.\n \n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are\n met:\n \n Redistributions of source code must retain the above copyright\n notice, this list of conditions and the following disclaimer.\n \n Redistributions in binary form must reproduce the above copyright\n notice, this list of conditions and the following disclaimer in the\n documentation and/or other materials provided with the distribution.\n \n Neither the name of the author nor the names of its contributors may\n be used to endorse or promote products derived from this software\n without specific prior written permission.\n \n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n OF THE POSSIBILITY OF SUCH DAMAGE."))))
((tags "egg") (section 2 "srfi-41" (p "SRFI 41 for Chicken Scheme.") (toc)) (section 2 "Documentation" (p "See the " (link "http://srfi.schemers.org/srfi-41/srfi-41.html" "SRFI-41 Document") ".") (section 3 "Primitive" (section 4 "Usage" (highlight scheme "(require-extension streams-primitive)")) (section 4 "stream?" (def (sig (procedure "(stream? OBJECT) => boolean" (id stream?))))) (section 4 "stream-pair?" (def (sig (procedure "(stream-pair? OBJECT) => boolean" (id stream-pair?))))) (section 4 "stream-null?" (def (sig (procedure "(stream-null? OBJECT) => boolean" (id stream-null?))))) (section 4 "stream-occupied?" (def (sig (procedure "(stream-occupied? OBJECT) => boolean" (id stream-occupied?))) (p "Inverse of " (tt "stream-null?") "."))) (section 4 "stream-null" (def (sig (constant "stream-null" (id stream-null))) (p "The null stream value."))) (section 4 "stream-cons" (def (sig (syntax "(stream-cons OBJECT STREAM) => stream" (id stream-cons))))) (section 4 "stream-lambda" (def (sig (syntax "(stream-lambda FORMALS BODY ...) => procedure" (id stream-lambda))))) (section 4 "stream-car" (def (sig (procedure "(stream-car STREAM) => *" (id stream-car))))) (section 4 "stream-cdr" (def (sig (procedure "(stream-cdr STREAM) => stream" (id stream-cdr)))))) (section 3 "Derived" (section 4 "Usage" (highlight scheme "(require-extension streams-derived)")) (section 4 "define-stream" (def (sig (syntax "(define-stream (NAME [FORMAL...]) BODY...)" (id define-stream))))) (section 4 "stream-of" (def (sig (syntax "(stream-of EXPRESSION (VARIABLE in STREAM)/(VARIABLE is EXPRESSION)/PREDICATE ...) => stream" (id stream-of))))) (section 4 "stream-let" (def (sig (syntax "(stream-let TAG ((NAME VALUE)...) BODY...)" (id stream-let))))) (section 4 "stream-match" (def (sig (syntax "(stream-match STREAM-EXPRESSION CLAUSE...)" (id stream-match))))) (section 4 "stream" (def (sig (syntax "(stream OBJECT...) => stream" (id stream))))) (section 4 "list->stream" (def (sig (procedure "(list->stream LIST) => stream" (id list->stream))))) (section 4 "port->stream" (def (sig (procedure "(port->stream [PORT (current-input-port)]) => stream" (id port->stream))))) (section 4 "stream->list" (def (sig (procedure "(stream->list [COUNT #f] STREAM) => list" (id stream->list))))) (section 4 "stream-append" (def (sig (procedure "(stream-append STREAM...) => stream" (id stream-append))))) (section 4 "stream-concat" (def (sig (procedure "(stream-concat STREAM) => stream" (id stream-concat))) (p "Flatten a stream of streams."))) (section 4 "stream-drop" (def (sig (procedure "(stream-drop COUNT STREAM) => stream" (id stream-drop))))) (section 4 "stream-drop-while" (def (sig (procedure "(stream-drop-while PREDICATE STREAM) => stream" (id stream-drop-while))))) (section 4 "stream-filter" (def (sig (procedure "(stream-filter PREDICATE STREAM) => stream" (id stream-filter))))) (section 4 "stream-fold" (def (sig (procedure "(stream-fold FUNCTION BASE STREAM...) => *" (id stream-fold))))) (section 4 "stream-for-each" (def (sig (procedure "(stream-for-each FUNCTION STREAM...) => stream" (id stream-for-each))))) (section 4 "stream-map" (def (sig (procedure "(stream-map FUNCTION STREAM...) => stream" (id stream-map))))) (section 4 "stream-from" (def (sig (procedure "(stream-from FIRST [STEP 1]) => stream" (id stream-from))))) (section 4 "stream-iterate" (def (sig (procedure "(stream-iterate FUNCTION BASE) => stream" (id stream-iterate))))) (section 4 "stream-length" (def (sig (procedure "(stream-length STREAM) => FIXNUM" (id stream-length))))) (section 4 "stream-range" (def (sig (procedure "(stream-range FIRST PAST [STEP (if (< FIRST PAST) 1 -1)]) => stream" (id stream-range))))) (section 4 "stream-ref" (def (sig (procedure "(stream-ref STREAM INDEX) => *" (id stream-ref))))) (section 4 "stream-reverse" (def (sig (procedure "(stream-reverse STREAM) => stream" (id stream-reverse))))) (section 4 "stream-scan" (def (sig (procedure "(stream-scan FUNCTION BASE STREAM) => stream" (id stream-scan))))) (section 4 "stream-unfold" (def (sig (procedure "(stream-unfold MAPPER PREDICATE GENERATOR BASE) => stream" (id stream-unfold))))) (section 4 "stream-unfolds" (def (sig (procedure "(stream-unfolds GENERATOR SEED) => stream" (id stream-unfolds))))) (section 4 "stream-zip" (def (sig (procedure "(stream-zip STREAM...) => stream" (id stream-zip)))))) (section 3 "Utilities" (section 4 "Usage" (highlight scheme "(require-extension streams-utils)")) (section 4 "stream-intersperse" (def (sig (procedure "(stream-intersperse STREAM OBJECT) => stream" (id stream-intersperse))))) (section 4 "stream-permutations" (def (sig (procedure "(stream-permutations STREAM) => stream" (id stream-permutations))))) (section 4 "file->stream" (def (sig (procedure "(file->stream FILENAME [READER read-char]) => stream" (id file->stream))))) (section 4 "stream-split" (def (sig (procedure "(stream-split COUNT STREAM) => (values STREAM STREAM)" (id stream-split))))) (section 4 "stream-unique" (def (sig (procedure "(stream-unique =? STREAM) => stream" (id stream-unique))))) (section 4 "stream-fold-one" (def (sig (procedure "(stream-fold-one FUNCTION STREAM) => stream" (id stream-fold-one))))) (section 4 "stream-member" (def (sig (procedure "(stream-member =? OBJECT STREAM) => stream" (id stream-member))))) (section 4 "stream-merge" (def (sig (procedure "(stream-merge <? STREAM ...) => stream" (id stream-merge))))) (section 4 "stream-partition" (def (sig (procedure "(stream-partition PREDICATE STREAM) => stream" (id stream-partition))))) (section 4 "stream-finds" (def (sig (procedure "(stream-finds =? OBJECT STREAM) => stream" (id stream-finds))))) (section 4 "stream-find" (def (sig (procedure "(stream-find =? OBJECT STREAM) => stream" (id stream-find))))) (section 4 "stream-remove" (def (sig (procedure "(stream-remove PREDICATE STREAM) => stream" (id stream-remove))))) (section 4 "stream-every" (def (sig (procedure "(stream-every PREDICATE STREAM) => boolean" (id stream-every))))) (section 4 "stream-any" (def (sig (procedure "(stream-any PREDICATE STREAM) => boolean" (id stream-any))))) (section 4 "stream-and" (def (sig (procedure "(stream-and STREAM) => boolean" (id stream-and))))) (section 4 "stream-or" (def (sig (procedure "(stream-or STREAM) => boolean" (id stream-or))))) (section 4 "stream-fold-right" (def (sig (procedure "(stream-fold-right FUNCTION BASE STREAM) => *" (id stream-fold-right))))) (section 4 "stream-fold-right-one" (def (sig (procedure "(stream-fold-right-one FUNCTION STREAM) => *" (id stream-fold-right-one))))) (section 4 "stream-assoc" (def (sig (procedure "(stream-assoc KEY STREAM [=? equal?]) => *" (id stream-assoc))))) (section 4 "stream-equal?" (def (sig (procedure "(stream-equal? =? STREAM1 STREAM2) => boolean" (id stream-equal?))))) (section 4 "stream-quick-sort" (def (sig (procedure "(stream-quick-sort <? STREAM) => stream" (id stream-quick-sort))))) (section 4 "stream-insertion-sort" (def (sig (procedure "(stream-insertion-sort <? STREAM) => stream" (id stream-insertion-sort))))) (section 4 "stream-merge-sort" (def (sig (procedure "(stream-merge-sort <? STREAM) => stream" (id stream-merge-sort))))) (section 4 "stream-maximum" (def (sig (procedure "(stream-maximum <? STREAM) => *" (id stream-maximum))))) (section 4 "stream-minimum" (def (sig (procedure "(stream-minimum <? STREAM) => *" (id stream-minimum))))) (section 4 "binary-tree-same-fringe?" (def (sig (procedure "(binary-tree-same-fringe? TREE1 TREE2) => boolean" (id binary-tree-same-fringe?))) (p (tt "TREE1") " and " (tt "TREE2") " are binary-tree nodes, so either " (tt "()") " or " (tt "pair") ".") (p "Lazy version of the " (i "same fringe") ".")))) (section 3 "Math Utilities" (section 4 "Usage" (highlight scheme "(require-extension streams-math)")) (section 4 "stream-max" (def (sig (procedure "(stream-max STREAM) => *" (id stream-max))))) (section 4 "stream-min" (def (sig (procedure "(stream-min STREAM) => *" (id stream-min))))) (section 4 "stream-sum" (def (sig (constant "stream-sum" (id stream-sum))))) (section 4 "odd-numbers-stream" (def (sig (constant "odd-numbers-stream" (id odd-numbers-stream))))) (section 4 "even-numbers-stream" (def (sig (constant "even-numbers-stream" (id even-numbers-stream))))) (section 4 "cardinal-numbers-stream" (def (sig (constant "cardinal-numbers-stream" (id cardinal-numbers-stream))))) (section 4 "natural-numbers-stream" (def (sig (constant "natural-numbers-stream" (id natural-numbers-stream))))) (section 4 "prime-numbers-stream" (def (sig (constant "prime-numbers-stream" (id prime-numbers-stream))))) (section 4 "hamming-sequence-stream" (def (sig (constant "hamming-sequence-stream" (id hamming-sequence-stream))))))) (section 2 "Examples" (highlight scheme "(use streams)\n\n(define (sigma function m n)\n  (stream-fold + 0 (stream-map function (stream-range m (add1 n)))))\n\n(define (factorial n)\n  (stream-ref (stream-scan * 1 (stream-from 1))) n)")) (section 2 "Requirements" (p (int-link "check-errors") " " (int-link "combinators") " " (int-link "record-variants"))) (section 2 "Author" (p "Philip L. Bewig") (p (int-link "/users/kon-lovett" "Kon Lovett"))) (section 2 "Version history" (dl (dt "1.2.0") (dd "Use of " (i "record-variants") " & " (i "combinators") ".") (dt "1.1.0") (dd "Added \"srfi-41\" modules as synonynom of \"streams\".") (dt "1.0.2") (dd "Bug fix for problem w/ use of 'obj' in \"streams-utils\" reported by Josh Griffith. Better error message for nary stream procedures.") (dt "1.0.1") (dd "Updated test.") (dt "1.0.0") (dd "Chicken 4 release."))) (section 2 "License" (p "Copyright (C) 2007 by Philip L. Bewig of Saint Louis, Missouri, USA.  All rights reserved.  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.") (p "Copyright (C) 2009 Kon Lovett.  All rights reserved.") (p "Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the Software), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:") (p "The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.") (p "THE SOFTWARE IS PROVIDED ASIS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.")))
(index ("make-box" 0) ("make-box-variable" 331) ("make-box-location" 687) ("box?" 1095) ("box-mutable?" 1201) ("box-immutable?" 1331) ("box-variable?" 1468) ("box-location?" 1592) ("box-set!" 1716) ("box-ref" 1898) ("box-location" 2010) ("box" 2626) ("set-box!" 2758) ("unbox" 2940))
(def (sig (procedure "(make-box [INITIAL [IMMUTABLE? #f]]) => BOX" (id make-box))) (p "Returns a " (tt "BOX") " with, optional, initial value " (tt "INITIAL") ".") (p "The " (tt "BOX") " is mutable unless the " (tt "IMMUTABLE?") " argument is " (tt "#t") ".") (p "An attempt to mutate an immutable box will signal an exception."))
(def (sig (syntax "(make-box-variable VARIABLE [IMMUTABLE? #f]) => BOX" (id make-box-variable))) (p "Returns a boxed reference to the " (tt "VARIABLE") ", which must be in lexical-scope.") (p "The " (tt "BOX") " is mutable unless the " (tt "IMMUTABLE?") " argument is " (tt "#t") ".") (p "An attempt to mutate an immutable box will signal an exception."))
(def (sig (syntax "(make-box-location TYPE INITIAL-VALUE [IMMUTABLE? #f]) => BOX" (id make-box-location))) (p "Returns a boxed reference to a location of " (tt "TYPE") " and " (tt "INITIAL-VALUE") ".") (p "The " (tt "BOX") " is mutable unless the " (tt "IMMUTABLE?") " argument is " (tt "#t") ".") (p "An attempt to mutate an immutable box will signal an exception.") (p "Unavailable in EVALuated source."))
(def (sig (procedure "(box? OBJECT) => BOOLEAN" (id box?))) (p "Is " (tt "OBJECT") " a " (tt "BOX") "?"))
(def (sig (procedure "(box-mutable? OBJECT) => BOOLEAN" (id box-mutable?))) (p "Is " (tt "OBJECT") " a mutable " (tt "BOX") "?"))
(def (sig (procedure "(box-immutable? OBJECT) => BOOLEAN" (id box-immutable?))) (p "Is " (tt "OBJECT") " an immutable " (tt "BOX") "?"))
(def (sig (procedure "(box-variable? OBJECT) => BOOLEAN" (id box-variable?))) (p "Is " (tt "OBJECT") " a boxed variable?"))
(def (sig (procedure "(box-location? OBJECT) => BOOLEAN" (id box-location?))) (p "Is " (tt "OBJECT") " a boxed location?"))
(def (sig (procedure "(box-set! BOX OBJECT)" (id box-set!))) (p "Changes the boxed value of " (tt "BOX") " to " (tt "OBJECT") ". Will signal an exception for an immutable {{BOX}."))
(def (sig (procedure "(box-ref BOX) => OBJECT" (id box-ref))) (p "Returns the boxed value of " (tt "BOX") "."))
(def (sig (procedure "(box-location BOX [WEAK? #f]) => LOCATION" (id box-location))) (p "Returns a " (tt "LOCATION") " object for a boxed variable, location or locatable box. Signals an exception otherwise.") (p "The locative is \"strong\" unless the " (tt "WEAK?") " argument is " (tt "#t") ". The " (tt "WEAK?") " argument is ignored for boxed variables and locations.") (p "The location of a boxed value or boxed location is the box. The location of a boxed variable is the same as " (tt "(location (box-ref BOX))") "; currently the location of a symbol may not be taken.") (p "See " (int-link "Locations") "."))
(def (sig (procedure "(box OBJECT) => BOX" (id box))) (p "Returns a mutable " (tt "BOX") " with initial value " (tt "OBJECT") "."))
(def (sig (procedure "(set-box! BOX OBJECT)" (id set-box!))) (p "Changes the boxed value of " (tt "BOX") " to " (tt "OBJECT") ". Will signal an exception for an immutable {{BOX}."))
(def (sig (procedure "(unbox BOX) => OBJECT" (id unbox))) (p "Returns the boxed value of " (tt "BOX") "."))

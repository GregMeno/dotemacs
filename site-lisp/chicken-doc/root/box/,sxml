((tags "egg") (section 2 "box" (toc)) (section 2 "Documentation" (p "Implements the \"box\" data type. A box is a cell containing a single, mutable or immutable, field. The boxed value maybe any Scheme type, including a variable or a location.") (p "Two APIs are provided, the original Chicken box API and a MzScheme/Gambit compatible API.") (section 3 "Box syntax" (p "The lexical syntax of a box containing the object " (tt "OBJECT") " is `#&OBJECT'.") (p "Only mutable boxes can be recovered. An immutable, variable, or location box will lose identity when printed.")) (section 3 "make-box" (def (sig (procedure "(make-box [INITIAL [IMMUTABLE? #f]]) => BOX" (id make-box))) (p "Returns a " (tt "BOX") " with, optional, initial value " (tt "INITIAL") ".") (p "The " (tt "BOX") " is mutable unless the " (tt "IMMUTABLE?") " argument is " (tt "#t") ".") (p "An attempt to mutate an immutable box will signal an exception."))) (section 3 "make-box-variable" (def (sig (syntax "(make-box-variable VARIABLE [IMMUTABLE? #f]) => BOX" (id make-box-variable))) (p "Returns a boxed reference to the " (tt "VARIABLE") ", which must be in lexical-scope.") (p "The " (tt "BOX") " is mutable unless the " (tt "IMMUTABLE?") " argument is " (tt "#t") ".") (p "An attempt to mutate an immutable box will signal an exception."))) (section 3 "make-box-location" (def (sig (syntax "(make-box-location TYPE INITIAL-VALUE [IMMUTABLE? #f]) => BOX" (id make-box-location))) (p "Returns a boxed reference to a location of " (tt "TYPE") " and " (tt "INITIAL-VALUE") ".") (p "The " (tt "BOX") " is mutable unless the " (tt "IMMUTABLE?") " argument is " (tt "#t") ".") (p "An attempt to mutate an immutable box will signal an exception.") (p "Unavailable in EVALuated source."))) (section 3 "box?" (def (sig (procedure "(box? OBJECT) => BOOLEAN" (id box?))) (p "Is " (tt "OBJECT") " a " (tt "BOX") "?"))) (section 3 "box-mutable?" (def (sig (procedure "(box-mutable? OBJECT) => BOOLEAN" (id box-mutable?))) (p "Is " (tt "OBJECT") " a mutable " (tt "BOX") "?"))) (section 3 "box-immutable?" (def (sig (procedure "(box-immutable? OBJECT) => BOOLEAN" (id box-immutable?))) (p "Is " (tt "OBJECT") " an immutable " (tt "BOX") "?"))) (section 3 "box-variable?" (def (sig (procedure "(box-variable? OBJECT) => BOOLEAN" (id box-variable?))) (p "Is " (tt "OBJECT") " a boxed variable?"))) (section 3 "box-location?" (def (sig (procedure "(box-location? OBJECT) => BOOLEAN" (id box-location?))) (p "Is " (tt "OBJECT") " a boxed location?"))) (section 3 "box-set!" (def (sig (procedure "(box-set! BOX OBJECT)" (id box-set!))) (p "Changes the boxed value of " (tt "BOX") " to " (tt "OBJECT") ". Will signal an exception for an immutable {{BOX}."))) (section 3 "box-ref" (def (sig (procedure "(box-ref BOX) => OBJECT" (id box-ref))) (p "Returns the boxed value of " (tt "BOX") "."))) (section 3 "box-location" (def (sig (procedure "(box-location BOX [WEAK? #f]) => LOCATION" (id box-location))) (p "Returns a " (tt "LOCATION") " object for a boxed variable, location or locatable box. Signals an exception otherwise.") (p "The locative is \"strong\" unless the " (tt "WEAK?") " argument is " (tt "#t") ". The " (tt "WEAK?") " argument is ignored for boxed variables and locations.") (p "The location of a boxed value or boxed location is the box. The location of a boxed variable is the same as " (tt "(location (box-ref BOX))") "; currently the location of a symbol may not be taken.") (p "See " (int-link "Locations") "."))) (section 3 "box" (def (sig (procedure "(box OBJECT) => BOX" (id box))) (p "Returns a mutable " (tt "BOX") " with initial value " (tt "OBJECT") "."))) (section 3 "set-box!" (def (sig (procedure "(set-box! BOX OBJECT)" (id set-box!))) (p "Changes the boxed value of " (tt "BOX") " to " (tt "OBJECT") ". Will signal an exception for an immutable {{BOX}."))) (section 3 "unbox" (def (sig (procedure "(unbox BOX) => OBJECT" (id unbox))) (p "Returns the boxed value of " (tt "BOX") ".")))) (section 2 "Usage" (highlight scheme "(require-extension box)") (p "or") (highlight scheme "(require-library box)\n...\n(import box)")) (section 2 "Examples" (highlight scheme "#;1> (define b (box 0))\n#;2> b\n#&0\n#;3> (define (inc-box! bx) (set! (box-ref bx) (add1 (unbox bx))))\n#;4> (inc-box! b)\n#;5> (unbox b)\n1")) (section 2 "Notes") (section 2 "Requirements" (p (int-link "/man/4/Unit lolevel" "Unit lolevel"))) (section 2 "Bugs and Limitations" (p "The location of a boxed variable is rather useless.")) (section 2 "Author" (p (int-link "/users/kon-lovett" "Kon Lovett"))) (section 2 "Version history" (dl (dt "2.2.4") (dd "Bug fix for Chicken 4.6.3") (dt "2.2.3") (dt "2.2.2") (dt "2.2.1") (dt "2.1.0") (dd "Bug fix for " (tt "box?") ". Added direct calls (only for use when the actual type is known.)") (dt "2.0.0") (dd "Port to hygienic Chicken. Reduced memory footprint for basic usage. Dropped keyword arguments."))) (section 2 "License" (p "Copyright (C) 2009 Kon Lovett.  All rights reserved.") (p "Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the Software), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:") (p "The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.") (p "THE SOFTWARE IS PROVIDED ASIS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.")))
(index ("debug-file" 0) ("debug-db-query?" 319) ("debug-db-query-prefix" 564) ("debug-resources" 793) ("db-credentials" 1186) ("ajax-library" 1503) ("enable-ajax" 1783) ("ajax-namespace" 2238) ("ajax-invalid-session-message" 2415) ("enable-session" 2678) ("enable-session-cookie" 2847) ("session-cookie-name" 3148) ("page-access-control" 3345) ("page-access-denied-message" 3613) ("valid-password?" 3897) ("page-doctype" 4164) ("page-css" 4499) ("page-charset" 4929) ("page-template" 5237) ("page-exception-message" 5880) ("main-page-path" 6214) ("app-root-path" 6372) ("login-page-path" 6880) ("awful-response-headers" 7214) ("web-repl-access-control" 7783) ("web-repl-access-denied-message" 7995) ("enable-web-repl-fancy-editor" 8235) ("fancy-editor-base-uri" 8632) ("session-inspector-access-control" 8882) ("session-inspector-access-denied-message" 9121) ("enable-javascript-compression" 9388) ("javascript-compressor" 9656) ("http-request-variables" 10129) ("db-connection" 10339) ("page-javascript" 10652) ("sid" 10799) ("awful-apps" 10870) ("development-mode?" 11028) ("++" 11252) ("concat" 11365) ("awful-version" 11538) ("include-javascript" 11642) ("add-javascript" 11800) ("debug" 11989) ("debug-pp" 12119) ("$session" 12243) ("$session-set!" 12451) ("link" 13011) ("form" 14021) ("define-login-trampoline" 14747) ("login-form" 14974) ("$" 15601) ("$db" 16019) ("$db-row-obj" 16473) ("sql-quote" 16991) ("define-page" 17364) ("define-session-page" 19613) ("undefine-page" 20685) ("ajax" 21036) ("periodical-ajax" 25675) ("ajax-link" 26250) ("redirect-to" 27599) ("enable-web-repl" 28397) ("enable-session-inspector" 29375))
(def (sig (parameter "(debug-file [file path])" (id debug-file))) (p "If " (tt "#f") ", indicates that debugging should be disabled.  When set to a string, it should be the path to the file where the debug messages go (when " (tt "debug") " or " (tt "debug-pp") " is used.)") (p "The default value is " (tt "#f") "."))
(def (sig (parameter "(debug-db-query? [boolean])" (id debug-db-query?))) (p "When not " (tt "#f") ", all queries passed to " (tt "$db") " and to " (tt "$db-row-obj") " are printed to the debug file.") (p "The default value is " (tt "#f") "."))
(def (sig (parameter "(debug-db-query-prefix [string])" (id debug-db-query-prefix))) (p "Prefix to be used for queries debugging when " (tt "debug-db-query") " is not " (tt "#f") ".") (p "The default value is " (tt "\"\"") "."))
(def (sig (parameter "(debug-resources [boolean])" (id debug-resources))) (p "When " (tt "#t") ", enables debugging of awful's resources table (an alist mapping paths (or regexes) and vhost paths to their corresponding procedures to be executed on the server side upon request).  The debugging data is sent to the file pointed by " (tt "debug-file") ".  The default value is " (tt "#f") "."))
(def (sig (parameter "(db-credentials [boolean or list])" (id db-credentials))) (p "Credentials to be used to access the database (see the documentation for the egg corresponding to the database backend you selected.)  When " (tt "#f") ", no database access is performed.") (p "The default value is " (tt "#f") "."))
(def (sig (parameter "(ajax-library [string])" (id ajax-library))) (p "URL or path to the ajax library (currently only " (link "http://jquery.com" "JQuery") " is supported.)") (p "The default value is " (tt "\"http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js\"")))
(def (sig (parameter "(enable-ajax [boolean])" (id enable-ajax))) (p "When " (tt "#t") ", makes " (tt "define-page") " link the " (tt "ajax-library") " to the generated page.  It's effect is global, that is, once " (tt "enable-ajax") " is set to " (tt "#t") ", all pages defined via " (tt "define-page") " will be linked to the ajax library, unless when the " (tt "no-ajax") " keyword parameter is explicitly set.") (p "The default value is " (tt "#f")))
(def (sig (parameter "(ajax-namespace [string])" (id ajax-namespace))) (p "Name to be used as a namespace for ajax URL paths.") (p "The default value is " (tt "\"ajax\"") "."))
(def (sig (parameter "(ajax-invalid-session-message [string])" (id ajax-invalid-session-message))) (p "The message to be used when attempting the make an ajax call using an invalid session identifier.") (p "The default value is " (tt "\"Invalid session\"") "."))
(def (sig (parameter "(enable-session [boolean])" (id enable-session))) (p "When " (tt "#t") ", session support is enabled.") (p "The default value is " (tt "#f") "."))
(def (sig (parameter "(enable-session-cookie [boolean])" (id enable-session-cookie))) (p "When " (tt "#t") ", awful uses cookies to store the session identifier.  Otherwise, the session identifier is passed as a value in the query string or in the request body. The default value is " (tt "#t") "."))
(def (sig (parameter "(session-cookie-name [string])" (id session-cookie-name))) (p "The name of the cookie for storing the session identifier.  The dafult value is " (tt "\"awful-cookie\"") "."))
(def (sig (parameter "(page-access-control [procedure])" (id page-access-control))) (p "An one-argument (URL path of the current page) procedure which tells whether the access to the page is allowed or not.") (p "The default value is " (tt "(lambda (path) #t)") "."))
(def (sig (parameter "(page-access-denied-message [procedure])" (id page-access-denied-message))) (p "An one-argument (URL path of the current page) procedure which returns the access denied message.") (p "The default value is " (tt "(lambda (path) (<h3> \"Access denied.\"))") "."))
(def (sig (parameter "(valid-password? [procedure])" (id valid-password?))) (p "A two-argument (user and password) procedure which indicates whether the given password is valid for the given user.") (p "The default value is " (tt "(lambda (user password) #f)") "."))
(def (sig (parameter "(page-doctype [string])" (id page-doctype))) (p "The doctype (see the " (int-link "/egg/doctype" "doctype") " egg) to be applied to all pages defined by " (tt "define-page") ".  It can be overwritten by " (tt "define-page") "'s " (tt "doctype") " keyword parameter.") (p "The default value is " (tt "\"\"") "."))
(def (sig (parameter "(page-css [boolean or string])" (id page-css))) (p "The CSS file to be linked by all pages defined by " (tt "define-page") ".  It can be overwritten by " (tt "define-page") "'s " (tt "css") " keyword parameter.  See " (int-link "/egg/html-utils" "html-utils") "'s " (tt "html-page") " procedure to know about the " (tt "css") " keyword parameter syntax.") (p "The default value is " (tt "#f") " (no CSS)."))
(def (sig (parameter "(page-charset [boolean or string])" (id page-charset))) (p "The page charset to be used by all pages defined by " (tt "define-page") ".  It can be overwritten by " (tt "define-page") "'s " (tt "charset") " keyword parameter. The default value is " (tt "#f") " (no explicit charset)."))
(def (sig (parameter "(page-template [procedure])" (id page-template))) (p "An one-mandatory-argument procedure to be used by " (tt "define-page") " (unless " (tt "define-page") "'s " (tt "no-template") " keyword parameter is set to " (tt "#f") ") to generate HTML pages. Although this procedure can take only one mandatory argument, the following keyword arguments are passed:") (ul (li "css") (li "title") (li "doctype") (li "headers") (li "charset") (li "no-ajax") (li "no-template") (li "no-session") (li "no-db")) (p "The default value is " (tt "html-page") " (see the " (int-link "/egg/html-utils" "html-utils") " egg documentation.)"))
(def (sig (parameter "(page-exception-message [procedure])" (id page-exception-message))) (p "An one-argument procedure to be used when an exception occurs while " (tt "define-page") " tries to evaluate its contents.") (p "The default value is " (tt "(lambda (exn) (<h3> \"An error has accurred while processing your request.\"))")))
(def (sig (parameter "(main-page-path [string])" (id main-page-path))) (p "The URL path to the app main page.") (p "The default value is " (tt "\"/\"") "."))
(def (sig (parameter "(app-root-path [string])" (id app-root-path))) (p "The base path to be used by the application.  All the pages defined by " (tt "define-page") " will use " (tt "app-root-path") " as the base directory.  For example, if " (tt "app-root-path") " is set to " (tt "\"/my-app\"") " and " (tt "\"my-page\"") " is used as first argument to " (tt "define-page") ", the page would be available at " (tt "http://<server>:<port>/my-app/my-page") ".") (p "The default value is " (tt "\"/\"") "."))
(def (sig (parameter "(login-page-path [string])" (id login-page-path))) (p "The URL path for the login page.  When creating a login page, be sure to set the " (tt "no-session") " keyword parameter for " (tt "define-page") " to " (tt "#t") ", otherwise you'll get an endless loop.") (p "The default value is " (tt "\"/login\"") "."))
(def (sig (parameter "(awful-response-headers [alist])" (id awful-response-headers))) (p "An alist to specify the headers to be used in the response.  If the " (tt "content-length") " header is not provided, awful will calculate it automatically.") (p "Here's an example:") (highlight scheme "#!/usr/bin/awful\n\n(use awful)\n\n(define (define-json path body)\n  (define-page path\n    (lambda ()\n      (awful-response-headers '((content-type \"text/json\")))\n      (body))\n    no-template: #t))\n\n\n(define-json (main-page-path)\n  (lambda ()\n    \"{a: 1}\"))"))
(def (sig (parameter "(web-repl-access-control [procedure])" (id web-repl-access-control))) (p "A no-argument procedure to control access to the web REPL.") (p "The default value is " (tt "(lambda () #f)") "."))
(def (sig (parameter "(web-repl-access-denied-message [string])" (id web-repl-access-denied-message))) (p "Message to be printed when the access to the web REPL is denied.") (p "The default value is " (tt "(<h3> \"Access denied.\")") "."))
(def (sig (parameter "(enable-web-repl-fancy-editor [boolean])" (id enable-web-repl-fancy-editor))) (p "Indicates whether the web REPL should use a fancier editor for the input area.  The editor is based on " (link "http://codemirror.net" "codemirror") ".  Without the fancy editor, the input area is a simple HTML textarea.  The default value for " (tt "use-fancy-editor") " is " (tt "#t") "."))
(def (sig (parameter "(fancy-editor-base-uri [string])" (id fancy-editor-base-uri))) (p "The URI which indicates the fancy editor source files (javascript and CSS) location.  The default value is " (tt "http://parenteses.org/awful/codemirror") "."))
(def (sig (parameter "(session-inspector-access-control [procedure])" (id session-inspector-access-control))) (p "A no-argument procedure to control access to the session inspector.") (p "The default value is " (tt "(lambda () #f)") "."))
(def (sig (parameter "(session-inspector-access-denied-message [string])" (id session-inspector-access-denied-message))) (p "Message to be printed when the access to the session inspector is denied.") (p "The default value is " (tt "(<h3> \"Access denied.\")") "."))
(def (sig (parameter "(enable-javascript-compression [boolean])" (id enable-javascript-compression))) (p "Enable javascript compression support.  When enabled the compressor set by " (tt "javascript-compressor") " is used.") (p "The default value is " (tt "#f") "."))
(def (sig (parameter "(javascript-compressor [procedure])" (id javascript-compressor))) (p "An one-argument procedure (the javascript code) which return the given javascript code compressed.  Only used when " (tt "enable-javascript-compression") " is not " (tt "#f") ".") (p "The default value is the " (tt "identity") " procedure.") (p "A possible value for " (tt "javascript-compressor") " is " (tt "jsmin-string") " (see the " (int-link "/egg/jsmin" "jsmin") " egg.)"))
(def (sig (parameter "(http-request-variables)" (id http-request-variables))) (p "The per-request value returned by " (int-link "/egg/spiffy-request-vars" "spiffy-request-vars") "'s " (tt "request-vars") "."))
(def (sig (parameter "(db-connection)" (id db-connection))) (p "A per-request databaseconnection object.  The connection is automatically opened and closed by awful in a per-request basis (unless databases are not being used the " (tt "no-db") " keyword parameter for " (tt "define-page") " is " (tt "#t") ".)"))
(def (sig (parameter "(page-javascript)" (id page-javascript))) (p "Javascript code to be added to the pages defined by " (tt "define-page") "."))
(def (sig (parameter "(sid)" (id sid))) (p "The session identifier."))
(def (sig (parameter "(awful-apps)" (id awful-apps))) (p "The list of awful applications, as given to the awful server when invoked from the command line."))
(def (sig (parameter "(development-mode?)" (id development-mode?))) (p "Indicates whether awful is running in development mode (see the " (tt "--development-mode") " command line option for the awful application server)."))
(def (sig (procedure "(++ string1 string2 ... stringn)" (id ++))) (p "A shortcut to " (tt "string-append") "."))
(def (sig (procedure "(concat args #!optional (sep \"\"))" (id concat))) (p "Convert " (tt "args") " to string and intersperse the resulting strings with " (tt "sep") "."))
(def (sig (procedure "(awful-version)" (id awful-version))) (p "Return the awful version (a string)."))
(def (sig (procedure "(include-javascript . files)" (id include-javascript))) (p "A shortcut to " (tt "(<script> type: \"text/javascript\" src: file)") "."))
(def (sig (procedure "(add-javascript . code)" (id add-javascript))) (p "Add arbitrary javascript code to the pages defined by " (tt "define-page") " and " (tt "define-session-page") "."))
(def (sig (procedure "(debug . args)" (id debug))) (p "Print " (tt "args") ", concatenated, to the file " (tt "debug-file") "."))
(def (sig (procedure "(debug-pp arg)" (id debug-pp))) (p "Pretty-print " (tt "arg") " to the file " (tt "debug-file") "."))
(def (sig (procedure "($session var #!optional default)" (id $session))) (p "Return the value of " (tt "var") " in the session (or " (tt "default") " if " (tt "var") " does not exist or is " (tt "#f") ")."))
(def (sig (procedure "($session-set! var #!optional val)" (id $session-set!))) (p "If " (tt "var") " is a quoted symbol, set the value of " (tt "var") " to " (tt "val") ".  If " (tt "val") " is not provided, " (tt "var") " will have its value set to " (tt "#f") ".") (p (tt "var") " can be an alist mapping session variable names to their corresponding values.") (p "Examples:") (highlight scheme "($session-set! 'foo \"foo value\")\n\n($session-set! '((foo . \"foo value\")\n                 (bar . \"bar value\")\n                 (baz . \"baz value\")))"))
(def (sig (procedure "(link url text . rest)" (id link))) (p "Return a session-aware HTML code for a link, using the " (tt "<a>") " procedure from " (int-link "/egg/html-tags" "html-tags") ".") (p "The " (tt "rest") " arguments are the same as the ones for the " (tt "<a>") " procedure from " (int-link "/egg/html-tags" "html-tags") ", plus the following:") (dl (dt (tt "no-session")) (dd "a boolean.  If " (tt "#t") ", forces " (tt "link") " to ignore the session even when " (tt "enable-session") " is " (tt "#t") ".") (dt (tt "arguments")) (dd "an alist mapping variable names to their corresponding values, to be passed to uri-common's " (tt "form-urlencode") " procedure.") (dt (tt "separator")) (dd "the value to the " (tt "separator") " keyword argument to be passed to to uri-common's " (tt "form-urlencode") " procedure.")) (p "When " (tt "enable-session") " is " (tt "#t") ", " (tt "link") " automatically encodes the session identifier in the URI (unless " (tt "no-session") " is " (tt "#t") ")."))
(def (sig (procedure "(form contents . rest)" (id form))) (p "Return a session-aware HTML code for a form, using the " (tt "<form>") " procedure from " (int-link "/egg/html-tags" "html-tags") ".") (p "The " (tt "rest") " arguments are the same as the ones for the " (tt "<form>") " procedure from " (int-link "/egg/html-tags" "html-tags") ", plus " (tt "no-session") ", a boolean.  If " (tt "no-session") " is " (tt "#t") ", it forces " (tt "form") " to ignore the session even when " (tt "enable-session") " is " (tt "#t") ".") (p "When " (tt "enable-session") " is " (tt "#t") ", " (tt "form") " automatically generates a hidden input field to pass the session identifier (unless " (tt "no-session") " is " (tt "#t") ")."))
(def (sig (procedure "(define-login-trampoline path #!key vhost-root-path hook)" (id define-login-trampoline))) (p "Define a trampoline -- an intermediate page accessed when redirecting from the login page to the main page."))
(def (sig (procedure "(login-form #!key (user-label \"User: \") (password-label \"Password: \") (submit-label \"Submit\") (refill-user #t))" (id login-form))) (p "Return a user/password login form (e.g., for using in authentication pages).") (p "When the " (tt "refill-user") " is " (tt "#t") ", the User field is reffiled with the value from the " (tt "user") " query string value when either the session or the password is invalid.") (p "The " (tt "user-label") ", " (tt "password-label") " and " (tt "submit-label") " keyword parameters are labels to be used for the user, password and submit form widgets, respectively."))
(def (sig (procedure "($ var #!optional default/converter)" (id $))) (p "Return the HTTP request value for the given variable " (tt "var") ".  The variable is looked for in both the query string (GET method) and request body (e.g., POST method).  See the documentation for the procedure returned by " (int-link "/eggref/4/spiffy-request-vars" "spiffy-request-vars") "'s " (tt "request-vars") " for further details."))
(def (sig (procedure "($db q #!key default values)" (id $db))) (p "Execute the given query (" (tt "q") ") on the database and return the result as a list of lists or " (tt "default") " if the result set is empty.") (p "The " (tt "values") " keyword parameter (a list) is a list of values to replace the placehoders in the query.") (p "Example:") (highlight scheme "($db \"insert into foo (bar, baz) values (?, ?)\" values: '(\"bar-val\" \"baz-val\"))"))
(def (sig (procedure "($db-row-obj q)" (id $db-row-obj))) (p "Execute the given query " (tt "q") " on the database and return an one-argument procedure which takes as argument the name of the database field to get the value.") (p "Example:") (highlight scheme "(let ((& ($db-row-obj \"select full_name, phone from users where user_id=1\")))\n  (<p> \"Full name: \" (& 'full_name))\n  (<p> \"Phone: \" (& 'phone)))") (p (i "Warning") ": currently " (tt "$db-row-obj") " is only implemented for Postgresql databases."))
(def (sig (procedure "(sql-quote . data)" (id sql-quote))) (p "Escape and quote the concatenation of " (tt "data") " to be used in SQL queries.") (p (i "Warning") ": for Sqlite databases, " (tt "sql-quote") " just replaces " (tt "'") " by " (tt "''") " and quotes the " (tt "data") ".  For Postgresql, " (tt "sql-quote") " quotes the result of " (tt "escape-string") "."))
(def (sig (procedure "(define-page path contents #!key css title doctype headers charset no-ajax use-ajax no-template no-session no-db no-javascript-compression)" (id define-page))) (p "Define an awful page.") (p (tt "path") " is the path to the page.  It can be represented by two types: a string and a regular expression object.  If it is a string, the path used in the URI will be bound to the given no-argument procedure " (tt "contents") ".  If it is a regular expression object, any request whose URL path matches the regular expression will br handled by the one-argument procedure " (tt "contents") ".  This procedure will be given the requested path.") (p "The " (tt "css") ", " (tt "title") ", " (tt "doctype") ", " (tt "headers") " and " (tt "charset") " keyword parameters have the same meaning as " (tt "html-page") " (from the " (int-link "/egg/html-utils" "html-utils") " egg).") (p "If " (tt "no-ajax") " is " (tt "#t") ", it means that the page won't use ajax, even if the " (tt "enable-ajax") " parameter is " (tt "#t") ".") (p "If " (tt "use-ajax") " is " (tt "#t") ", it means that the page will be linked to the ajax library, even if the " (tt "enable-ajax") " parameter is " (tt "#f") ".") (p "If " (tt "no-template") " is " (tt "#t") ", it means that no page template (see the " (tt "page-template") " parameter) should be used.") (p "If " (tt "no-session") " is " (tt "#t") ", it means that the page should not use session.") (p "If " (tt "no-db") " is " (tt "#t") ", it means that the page should not use the database, even when database usage is activated by " (tt "enable-db") " and " (tt "db-credentials") " is not " (tt "#f") ".") (p "If " (tt "no-javascript-compression") " is " (tt "#t") " the javascript code for the page is not compressed, even when " (tt "enable-javascript-compression") " is not " (tt "#f") ".") (p "Examples:") (highlight scheme "\n(use srfi-1 ;; for filter-map\n     regex) ;; for regexp\n\n;; http://host:port/foo => \"bar\"\n(define-page \"/foo\"\n  (lambda ()\n    \"bar\"))\n\n;; http://host:port/add/1/2/3 => 6\n(define-page (regexp \"/add/.*\")\n  (lambda (path)\n    (let ((numbers (filter-map string->number (string-split path \"/\"))))\n      (number->string (apply + numbers)))))\n"))
(def (sig (procedure "(define-session-page path contents . rest)" (id define-session-page))) (p "Define a session-aware page.  When the page is accessed and a correponding session does not exist, it is created.  If the session already exists and is not valid, it is recreated.  If the session already exists and is valid, then it is refreshed.") (p "The " (tt "rest") " parameters are the same as for " (tt "define-page") ".") (p "Here's an example (the " (link "http://www.paulgraham.com/arcchallenge.html" "arc challenge") "):") (highlight scheme "(use awful html-utils spiffy-request-vars)\n\n(define-session-page \"said\"\n  (lambda ()\n    (with-request-vars* $ (said)\n      (cond (said\n             ($session-set! 'said said)\n             (link \"said\" \"click here\"))\n            (($session 'said)\n             => (lambda (said)\n                  (++ \"You said: \" said)))\n            (else (form (++ (text-input 'said)\n                            (submit-input))\n                        action: \"said\"\n                        method: 'post))))))"))
(def (sig (procedure "(undefine-page path #!optional vhost-root-path)" (id undefine-page))) (p "Undefine a page whose path is " (tt "path") " (a string or a regular expression object).") (p "The optional parameter " (tt "vhost-root-path") " is the path of virtual host where the page is to be undefined.  If omited, " (tt "(root-path)") " is used."))
(def (sig (procedure "(ajax path selector event proc #!key target (action 'html) (method 'POST) (arguments '()) success no-session no-db vhost-root-path live prelude update-targets)" (id ajax))) (p "Generate javascript code to be added to the page defined by " (tt "define-page") ".  Return the generated javascript code (which usually is not useful, so should be discarded).") (p (tt "path") " is the URL path (a string) of the server side handler. This path is placed under the " (tt "(app-root-path)/(ajax-namespace)") " path.  So, if your " (tt "app-root-path") " is " (tt "\"my-app\"") ", your " (tt "ajax-namespace") " is " (tt "\"ajax\"") " and you use " (tt "\"do-something\"") " as the first argument to " (tt "ajax") ", the URL for the server side handler would be " (tt "\"/my-app/ajax/do-something\"") ".") (p (tt "selector") " is the selector for the DOM element to be observed.  If it is a quoted symbol, awful generates a JQuery selector by DOM id (e.g., " (tt "'my-selector") " generates " (tt "\"#my-selector\"") ").  If it is a string, awful uses it as-is to generate the JQuery selector (e.g., " (tt "\"input[name^=omg]\"") " generates " (tt "\"input[name^=omg]\"") ").") (p (tt "event") " (a quoted symbol or a list) is the event(s) to be observed. If it is a quoted symbol (e.g., " (tt "'click") "), only this event will be bound.  If " (tt "event") " is a list of events, all the events from the list will be bound.") (p (tt "proc") " is a no-argument procedure to be executed on the server side.") (p "The " (tt "target") " keyword parameter is the id of the DOM element to be affected by the result of " (tt "proc") ".") (p "The " (tt "method") " (a quoted symbol, usually " (tt "'GET") " or " (tt "'POST") ") keyword parameter is the HTTP method to be used by the ajax request.") (p "The " (tt "arguments") " keyword parameter is an alist mapping request variables (symbols) to their values (strings).  " (tt "ajax") " uses these arguments to assembly the query string or the request body to send to the server when performing the ajax request.") (p "Example:") (highlight scheme "arguments: '((var1 . \"$('#var1').val()\")\n             (var2 . \"$('#var2').val()\"))") (p "If the " (tt "no-session") " keyword parameter is " (tt "#t") ", it means that no session should be considered (" (tt "ajax") " implicit sends the session identifier when " (tt "no-session") " is " (tt "#f") ").") (p "If the " (tt "no-db") " keyword parameter is " (tt "#t") ", it means that the should be no attempt to connect the database, even when database usage is activated by " (tt "enable-db") " and " (tt "db-credentials") " is not " (tt "#f") ".") (p "The " (tt "vhost-root-path") " keyword parameter (a string) is the vhost root path.  It is useful for explicitly separate pages defined using the same path (see " (tt "define-page") ") but for different vhosts.") (p "The " (tt "live") " keyword parameter (boolean) indicates wheter ajax should use JQuery's live method (see " (link "http://api.jquery.com/live/") ").") (p "The " (tt "prelude") " keyword parameter (string) is an arbitrary piece of javascript code to be placed right before the ajax request.") (p "The " (tt "update-targets") " keyword parameter a boolean indicating whether multiple targets should be updated upon ajax response.  When " (tt "update-targets") " is used, the procedure " (tt "proc") " used as argument to " (tt "ajax") " should yield an alist as result.  The alist maps DOM elements identifiers to their corresponding values.") (p "Here's an example:") (highlight scheme "#!/usr/bin/awful\n\n(use awful html-tags)\n\n(enable-ajax #t)\n\n(define-page (main-page-path)\n  (lambda ()\n\n    (ajax \"foo\" 'foo 'click\n          (lambda ()\n            '((a . 1) (b . 2) (c . 3)))\n          update-targets: #t)\n\n    (<div>\n     (link \"#\" \"foo\" id: \"foo\")\n     (<div> id: \"a\")\n     (<div> id: \"b\")\n     (<div> id: \"c\"))))") (p "The " (tt "success") " keyword parameter (string) can be any arbitrary javascript code to be executed on the successful ajax request.  The javascript code can assume that a variable " (tt "response") " is bound and contains the request resulting data.  Here's an example:") (highlight scheme "#!/usr/bin/awful\n\n(use awful html-tags)\n\n(enable-ajax #t)\n\n(define-page (main-page-path)\n  (lambda ()\n\n    (ajax \"foo\" 'foo \"click\"\n          (lambda ()\n            \"hey\")\n          success: \"$('#bar').html(response + ' you!')\")\n\n    (++ (link \"#\" \"foo\" id: \"foo\")\n        (<div> id: \"bar\"))))") (p "The " (tt "ajax") " procedure is session, HTTP request and database -aware."))
(def (sig (procedure "(periodical-ajax path interval proc #!key target (action 'html) (method 'POST) (arguments '()) success no-session no-db vhost-root-path live prelude update-targets)" (id periodical-ajax))) (p "Periodically execute " (tt "proc") " on the server side, using " (tt "(app-root-path)/(ajax-namespace)/path") " as the URL path for the server side handler.") (p (tt "interval") " (a number) is the interval between consecutive executions of " (tt "proc") ", in milliseconds.") (p "The meaning of the keyword parameters is the same as for " (tt "ajax") "'s."))
(def (sig (procedure "(ajax-link path id text proc #!key target (action 'html) (method 'POST) (arguments '()) success no-session no-db (event 'click) vhost-root-path live class hreflang type rel rev charset coords shape accesskey tabindex a-target prelude update-targets)" (id ajax-link))) (p "A shortcut to") (highlight scheme "(begin\n  (ajax path id 'click proc ...)\n  (<a> href: \"#\" [...other <a> keyword parameters...] id: id text))") (p "The meaning of the " (tt "target") ", " (tt "action") ", " (tt "method") ", " (tt "arguments") ", " (tt "success") ", " (tt "no-session") ", " (tt "no-db") ", " (tt "event") ", " (tt "vhost-root-path") ", " (tt "update-targets") " and " (tt "live") " keyword parameters is the same as for " (tt "ajax") "'s.") (p "The meaning of the " (tt "class") ", " (tt "hreflang") ", " (tt "type") ", " (tt "rel") ", " (tt "rev") ", " (tt "charset") ", " (tt "coords") ", " (tt "shape") ", " (tt "accesskey") ", " (tt "tabindex") " and " (tt "a-target") " are the same as for " (int-link "/egg/html-tags" "html-tags") "' " (tt "<a>") " procedure (except that " (tt "a-target") " is " (tt "<a>") "'s " (tt "target") ", since " (tt "ajax") " uses the " (tt "target") " keyword parameter).") (p "The " (tt "event") " keyword parameter syntax is the same for " (tt "ajax") "'s " (tt "event") " mandatory parameter."))
(def (sig (procedure "(redirect-to uri)" (id redirect-to))) (p "Perform an HTTP redirection (code 302) to the given " (tt "uri") " (either a string or a " (int-link "/eggref/4/uri-common" "uri-common") " uri object).  To be used from " (tt "define-page") " contents.  Example:") (highlight scheme "(use awful)\n\n;; / -> /foo\n(define-page \"/\"\n  (lambda ()\n    (redirect-to \"/foo\")))\n\n(define-page \"/foo\"\n  (lambda ()\n    \"foo\"))") (p "The example above shows a redirection from " (tt "/") " to " (tt "/foo") ".  Redirections can also be performed when the origin path is a regular expression:") (highlight scheme "(use awful)\n\n;; /bar.* -> /foo\n(define-page (regexp \"/bar.*\")\n  (lambda (_)\n    (redirect-to \"/foo\")))\n\n(define-page \"/foo\"\n  (lambda ()\n    \"foo\"))"))
(def (sig (procedure "(enable-web-repl path #!key css title)" (id enable-web-repl))) (p "Enable the web REPL.  " (tt "path") " is the URL path to the web REPL.") (p "The keyword parameter " (tt "css") " is the CSS to be used the the web REPL page (see the documentation for " (tt "html-page") ", from the " (int-link "/egg/html-utils" "html-utils") " egg, for the " (tt "css") " keyword parameter.)") (p "The keyword parameter " (tt "title") " (a string) is the title for the web REPL page (see the documentation for " (tt "html-page") ", from the " (int-link "/egg/html-utils" "html-utils") " egg, for the " (tt "title") " keyword parameter.)") (p "The web REPL is automatically enabled by the awful application server when the " (tt "--development-mode") " is provided (available from " (tt "/web-repl") ").  By default, the fancy editor is used, but can be disabled with the " (tt "--disable-web-repl-fancy-editor") " command line option for the awful application server."))
(def (sig (procedure "(enable-session-inspector path #!key css title)" (id enable-session-inspector))) (p "Enable the session inspector.  " (tt "path") " is the URL path to the session inspector.") (p "The keyword parameter " (tt "css") " is the CSS to be used the the session inspector page (see the documentation for " (tt "html-page") ", from the " (int-link "/egg/html-utils" "html-utils") " egg, for the " (tt "css") " keyword parameter.)") (p "The keyword parameter " (tt "title") " (a string) is the title for the session inspector page (see the documentation for " (tt "html-page") ", from the " (int-link "/egg/html-utils" "html-utils") " egg, for the " (tt "title") " keyword parameter.)") (p "The session inspector is automatically enabled by the awful application server when the " (tt "--development-mode") " is provided (available from " (tt "/session-inspector") ")."))

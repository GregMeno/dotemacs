(index ("ssl-handshake-timeout" 0) ("ssl-shutdown-timeout" 423) ("ssl-connect" 648) ("ssl-make-client-context" 1528) ("ssl-client-context?" 2516) ("ssl-listen" 2741) ("ssl-close" 3244) ("ssl-listener?" 3244) ("ssl-listener-port" 3244) ("ssl-listener-fileno" 3244) ("ssl-listener-accept-ready?" 3244) ("ssl-accept" 3244) ("ssl-load-certificate-chain!" 3992) ("ssl-set-verify!" 5113) ("ssl-load-verify-root-certificates!" 5506) ("ssl-load-suggested-certificate-authorities!" 6303) ("ssl-port?" 6922) ("ssl-port->tcp-port" 7106))
(def (sig (parameter "(ssl-handshake-timeout [TIMEOUT])" (id ssl-handshake-timeout))) (p "The time in milliseconds to wait for a SSL handshake to complete (after " (tt "ssl-connect") " or " (tt "ssl-accept") "). Defaults to 120000, ie two minutes.") (p (b "note") ": The handshake is only initiated after the first read or the first write action occurs on the connection, so the timer is started upon that first action."))
(def (sig (parameter "(ssl-shutdown-timeout [TIMEOUT])" (id ssl-shutdown-timeout))) (p "The time in milliseconds to wait for a SSL shutdown operation to complete (after closing a port). Defaults to 120000, ie two minutes."))
(def (sig (procedure "(ssl-connect (hostname <string>) #!optional (port <exact>) ((ctx <ssl-client-context|symbol>) 'sslv2-or-v3)) => <input-port>, <output-port>" (id ssl-connect))) (p "Connect to the given " (tt "host") " on the given " (tt "port") " (a number from 1 to 65535). This connection will be encrypted using SSL. The return values are as tcp-connect; an input port and an output port.") (p "The optional " (tt "ctx") " argument determines which encryption protocol is used, whether the server's certificate is checked, etc. The argument can be either a client context created by " (tt "ssl-make-client-context") " (see below), or one of the following symbols: " (tt "'sslv2-or-v3") " (the default), " (tt "'sslv2") ", " (tt "'sslv3") ", or " (tt "'tls") ". See " (tt "ssl-make-client-context") " for further details, including the meanings of the protocol symbols."))
(def (sig (procedure "(ssl-make-client-context #!optional ((protocol <symbol>) 'sslv2-or-v3)) => <ssl-client-context>" (id ssl-make-client-context))) (p "Creates a context to be supplied to " (tt "ssl-connect") ". The context identifies a communication protocol (as selected by " (tt "protocol") "), and also holds certificate information (i.e., the client's identity, its trusted certificate authorities, etc.). See the \"Certificate procedures\" section below for more information on certificates.") (p "The " (tt "protocol") " must be one of the following:") (dl (dt (tt "'sslv2-or-v3")) (dd "SSL protocol versions 2 or 3, as appropriate") (dt (tt "'sslv2")) (dd "SSL protocol version 2") (dt (tt "'sslv3")) (dd "SSL protocol version 3") (dt (tt "'tls")) (dd "the TLS protocol version 1")) (p "By default, the context returned by " (tt "ssl-make-client-context") " does not request verification of a server's certificate. Use " (tt "ssl-set-verify!") " to enable such verification."))
(def (sig (procedure "(ssl-client-context? (obj <top>)) => <bool>" (id ssl-client-context?))) (p "Returns " (tt "#t") " if " (tt "obj") " is a value produced by " (tt "ssl-make-client-context") ", " (tt "#f") " otherwise."))
(def (sig (procedure "(ssl-listen (port <exact>) #!optional ((backlog <exact>) 4) ((hostname <string>) #f) ((ctx <ssl-client-context|symbol>) 'sslv2-or-v3)) => <ssl-listener>" (id ssl-listen))) (p "Like " (tt "tcp-listen") ", but the result is an SSL listener. The extra optional " (tt "ctx") " argument is as for " (tt "ssl-connect") ".") (p "Call " (tt "ssl-load-certificate-chain!") " and " (tt "ssl-load-private-key!") " to avoid a " (tt "\"no shared cipher\"") " error on accepting connections."))
(def (sig (procedure "(ssl-close (listener <ssl-listener>)) => <void>" (id ssl-close)) (procedure "(ssl-listener? (obj <top>)) => <bool>" (id ssl-listener?)) (procedure "(ssl-listener-port (listener <ssl-listener>)) => <exact>" (id ssl-listener-port)) (procedure "(ssl-listener-fileno (listener <ssl-listener>)) => <exact>" (id ssl-listener-fileno)) (procedure "(ssl-listener-accept-ready? (listener <ssl-listener>)) => <bool>" (id ssl-listener-accept-ready?)) (procedure "(ssl-accept (listener <ssl-listener>)) => <input-port>, <output-port>" (id ssl-accept))) (p "Analogous to " (tt "tcp-close") ", " (tt "tcp-listener?") ", " (tt "tcp-listener-port") ", " (tt "tcp-listener-fileno") ", " (tt "tcp-accept-ready?") " and " (tt "tcp-accept") "."))
(def (sig (procedure "(ssl-load-certificate-chain! (obj <ssl-client-context|ssl-listener>) (pathname <string>)) => <void>" (id ssl-load-certificate-chain!))) (p "Loads a PEM-format certification chain file for connections to be made with the given context (created by " (tt "ssl-make-context") ") or listener (created by " (tt "ssl-listener") ").") (p "This chain is used to identify the client or server when it connects or accepts connections. Loading a chain overwrites the old chain. Also call " (tt "ssl-load-private-key!") " to load the certificate's corresponding key.") (p "<procedur>(ssl-load-private-key! (obj <ssl-client-context|ssl-listener>) (pathname <string>) #!optional ((rsa? <bool>) #t) ((asn1? <bool>) #f)) => <void></procedure>") (p "Loads the first private key from " (tt "pathname") " for the given client context or listener. The key goes with the certificate that identifies the client or server.") (p "If " (tt "rsa?") " is " (tt "#t") ", the first RSA key is read (i.e., non-RSA keys are skipped).") (p "If " (tt "asn1?") " is " (tt "#t") ", the file is parsed as ASN1 format instead of PEM."))
(def (sig (procedure "(ssl-set-verify! (obj <ssl-client-context|ssl-listener>) (v <bool>)) => <void>" (id ssl-set-verify!))) (p "Enables or disables verification of a connection peer's certificates. By default, verification is disabled.") (p "Enabling verification also requires, at a minimum, designating trusted certificate authorities with " (tt "ssl-load-verify-root-certificates!") "."))
(def (sig (procedure "(ssl-load-verify-root-certificates! (obj <ssl-client-context|ssl-listener>) (pathname <string>) #!optional ((dirname <string>) #f)) => <void>" (id ssl-load-verify-root-certificates!))) (p "Loads a PEM-format file containing trusted certificates that are used to verify the certificates of a connection peer. Call this procedure multiple times to load multiple sets of trusted certificates.") (p "The optional second argument specifies a directory in which certificates are automatically looked up. You may also only pass a path in this argument and pass " (tt "#f") " as the first argument to this procedure. See the OpenSSL documentation on " (link "http://www.openssl.org/docs/ssl/SSL_CTX_load_verify_locations.html" "SSL_CTX_load_verify_locations") " for more details."))
(def (sig (procedure "(ssl-load-suggested-certificate-authorities! (obj <ssl-client-context|ssl-listener>) (pathname <string>)) => <void>" (id ssl-load-suggested-certificate-authorities!))) (p "Loads a PEM-format file containing certificates that are used by a server. The certificate list is sent to a client when the server requests a certificate as an indication of which certificates the server trusts.") (p "Loading the suggested certificates does not imply trust, however; any certificate presented by the client will be checked using the trusted roots loaded by " (tt "ssl-load-verify-root-certificates!") "."))
(def (sig (procedure "(ssl-port? obj) => <boolean>" (id ssl-port?))) (p "Predicate for SSL ports; returns " (tt "#t") " if " (tt "obj") " is an SSL port, " (tt "#f") " if it isn't."))
(def (sig (procedure "(ssl-port->tcp-port p) => <tcp-port>" (id ssl-port->tcp-port))) (p "Convert SSL port " (tt "p") " to the raw underlying TCP port.") (p "This is mostly useful if you need to obtain extra information about the connection, like for example " (tt "tcp-addresses") ".  Note that you generally " (i "cannot") " safely send data over the port, as that would interfere with OpenSSL's operation."))

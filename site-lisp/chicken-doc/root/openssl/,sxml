((section 2 "openssl" (section 3 "Description" (p "Bindings to the OpenSSL SSL/TLS library")) (section 3 "Author" (p (link "http://www.chust.org/" "Thomas Chust"))) (section 3 "Requirements" (p "None, except for the openssl C library of course.")) (section 3 "Documentation" (p "This reference is basically a copy of the documentation of " (link "http://www.plt-scheme.org/" "PLT Scheme's") " openssl module. The API provided here is largely compatible with that one. The exceptions are the missing " (tt ".../enable-break") " and " (tt "ssl-available?") " procedures and the missing " (tt "reuse?") " argument to " (tt "ssl-listen") ".") (p "Please note that all the procedures described here may fail and raise a non-continuable exception of the composite type " (tt "(exn i/o net openssl)") ". The " (tt "openssl") " property condition contains a property called " (tt "status") " which will be bound to a symbol corresponding to the OpenSSL error code that was encountered. It may have the following values:") (dl (dt (tt "'zero-return")) (dd "The SSL/TLS connection was shut down unexpectedly but in a controlled way") (dt (tt "'want-read")) (dd "The operation didn't finish because data must be read from a nonblocking socket. This error condition only occurs though, when it could not be handled automatically because there is actually no socket involved or some other strange thing happended in the OpenSSL library.") (dt (tt "'want-write")) (dd "The operation didn't finish because data must be read from a nonblocking socket. The same comment as for " (tt "'want-read") " applies.") (dt (tt "'want-connect")) (dd "The operation didn't finish because a nonblocking socket must first be connected. The same comment as for " (tt "'want-read") " applies.") (dt (tt "'want-accept")) (dd "The operation didn't finish because a nonblocking socket must first be acepted. The same comment as for " (tt "'want-read") " applies.") (dt (tt "'want-X509-lookup")) (dd "The operation failed because an application callback that could not even have been registered through this API was apparently registered anyway and has asked to be called again.") (dt (tt "'syscall")) (dd "Some low-level I/O error occurred.") (dt (tt "'ssl")) (dd "Something went wrong in the OpenSSL library itself.") (dt (tt "#f")) (dd "The error is not classified")) (p "Of course the exception that is thrown also has an appropriate message set. If you feel that this documentation lacks some information, please also consider the " (link "http://www.openssl.org/docs/ssl/ssl.html" "manual pages of OpenSSL itself") ".") (section 5 "Global parameters" (p "For read and write timeouts, " (tt "tcp-read-timeout") " and " (tt "tcp-write-timeout") " are honored.") (def (sig (parameter "(ssl-handshake-timeout [TIMEOUT])" (id ssl-handshake-timeout))) (p "The time in milliseconds to wait for a SSL handshake to complete (after " (tt "ssl-connect") " or " (tt "ssl-accept") "). Defaults to 120000, ie two minutes.") (p (b "note") ": The handshake is only initiated after the first read or the first write action occurs on the connection, so the timer is started upon that first action.")) (def (sig (parameter "(ssl-shutdown-timeout [TIMEOUT])" (id ssl-shutdown-timeout))) (p "The time in milliseconds to wait for a SSL shutdown operation to complete (after closing a port). Defaults to 120000, ie two minutes."))) (section 5 "Client procedures" (def (sig (procedure "(ssl-connect (hostname <string>) #!optional (port <exact>) ((ctx <ssl-client-context|symbol>) 'sslv2-or-v3)) => <input-port>, <output-port>" (id ssl-connect))) (p "Connect to the given " (tt "host") " on the given " (tt "port") " (a number from 1 to 65535). This connection will be encrypted using SSL. The return values are as tcp-connect; an input port and an output port.") (p "The optional " (tt "ctx") " argument determines which encryption protocol is used, whether the server's certificate is checked, etc. The argument can be either a client context created by " (tt "ssl-make-client-context") " (see below), or one of the following symbols: " (tt "'sslv2-or-v3") " (the default), " (tt "'sslv2") ", " (tt "'sslv3") ", or " (tt "'tls") ". See " (tt "ssl-make-client-context") " for further details, including the meanings of the protocol symbols.")) (def (sig (procedure "(ssl-make-client-context #!optional ((protocol <symbol>) 'sslv2-or-v3)) => <ssl-client-context>" (id ssl-make-client-context))) (p "Creates a context to be supplied to " (tt "ssl-connect") ". The context identifies a communication protocol (as selected by " (tt "protocol") "), and also holds certificate information (i.e., the client's identity, its trusted certificate authorities, etc.). See the \"Certificate procedures\" section below for more information on certificates.") (p "The " (tt "protocol") " must be one of the following:") (dl (dt (tt "'sslv2-or-v3")) (dd "SSL protocol versions 2 or 3, as appropriate") (dt (tt "'sslv2")) (dd "SSL protocol version 2") (dt (tt "'sslv3")) (dd "SSL protocol version 3") (dt (tt "'tls")) (dd "the TLS protocol version 1")) (p "By default, the context returned by " (tt "ssl-make-client-context") " does not request verification of a server's certificate. Use " (tt "ssl-set-verify!") " to enable such verification.")) (def (sig (procedure "(ssl-client-context? (obj <top>)) => <bool>" (id ssl-client-context?))) (p "Returns " (tt "#t") " if " (tt "obj") " is a value produced by " (tt "ssl-make-client-context") ", " (tt "#f") " otherwise."))) (section 4 "Server procedures" (def (sig (procedure "(ssl-listen (port <exact>) #!optional ((backlog <exact>) 4) ((hostname <string>) #f) ((ctx <ssl-client-context|symbol>) 'sslv2-or-v3)) => <ssl-listener>" (id ssl-listen))) (p "Like " (tt "tcp-listen") ", but the result is an SSL listener. The extra optional " (tt "ctx") " argument is as for " (tt "ssl-connect") ".") (p "Call " (tt "ssl-load-certificate-chain!") " and " (tt "ssl-load-private-key!") " to avoid a " (tt "\"no shared cipher\"") " error on accepting connections.")) (def (sig (procedure "(ssl-close (listener <ssl-listener>)) => <void>" (id ssl-close)) (procedure "(ssl-listener? (obj <top>)) => <bool>" (id ssl-listener?)) (procedure "(ssl-listener-port (listener <ssl-listener>)) => <exact>" (id ssl-listener-port)) (procedure "(ssl-listener-fileno (listener <ssl-listener>)) => <exact>" (id ssl-listener-fileno)) (procedure "(ssl-listener-accept-ready? (listener <ssl-listener>)) => <bool>" (id ssl-listener-accept-ready?)) (procedure "(ssl-accept (listener <ssl-listener>)) => <input-port>, <output-port>" (id ssl-accept))) (p "Analogous to " (tt "tcp-close") ", " (tt "tcp-listener?") ", " (tt "tcp-listener-port") ", " (tt "tcp-listener-fileno") ", " (tt "tcp-accept-ready?") " and " (tt "tcp-accept") "."))) (section 4 "Certificate procedures" (def (sig (procedure "(ssl-load-certificate-chain! (obj <ssl-client-context|ssl-listener>) (pathname <string>)) => <void>" (id ssl-load-certificate-chain!))) (p "Loads a PEM-format certification chain file for connections to be made with the given context (created by " (tt "ssl-make-context") ") or listener (created by " (tt "ssl-listener") ").") (p "This chain is used to identify the client or server when it connects or accepts connections. Loading a chain overwrites the old chain. Also call " (tt "ssl-load-private-key!") " to load the certificate's corresponding key.") (p "<procedur>(ssl-load-private-key! (obj <ssl-client-context|ssl-listener>) (pathname <string>) #!optional ((rsa? <bool>) #t) ((asn1? <bool>) #f)) => <void></procedure>") (p "Loads the first private key from " (tt "pathname") " for the given client context or listener. The key goes with the certificate that identifies the client or server.") (p "If " (tt "rsa?") " is " (tt "#t") ", the first RSA key is read (i.e., non-RSA keys are skipped).") (p "If " (tt "asn1?") " is " (tt "#t") ", the file is parsed as ASN1 format instead of PEM.")) (def (sig (procedure "(ssl-set-verify! (obj <ssl-client-context|ssl-listener>) (v <bool>)) => <void>" (id ssl-set-verify!))) (p "Enables or disables verification of a connection peer's certificates. By default, verification is disabled.") (p "Enabling verification also requires, at a minimum, designating trusted certificate authorities with " (tt "ssl-load-verify-root-certificates!") ".")) (def (sig (procedure "(ssl-load-verify-root-certificates! (obj <ssl-client-context|ssl-listener>) (pathname <string>) #!optional ((dirname <string>) #f)) => <void>" (id ssl-load-verify-root-certificates!))) (p "Loads a PEM-format file containing trusted certificates that are used to verify the certificates of a connection peer. Call this procedure multiple times to load multiple sets of trusted certificates.") (p "The optional second argument specifies a directory in which certificates are automatically looked up. You may also only pass a path in this argument and pass " (tt "#f") " as the first argument to this procedure. See the OpenSSL documentation on " (link "http://www.openssl.org/docs/ssl/SSL_CTX_load_verify_locations.html" "SSL_CTX_load_verify_locations") " for more details.")) (def (sig (procedure "(ssl-load-suggested-certificate-authorities! (obj <ssl-client-context|ssl-listener>) (pathname <string>)) => <void>" (id ssl-load-suggested-certificate-authorities!))) (p "Loads a PEM-format file containing certificates that are used by a server. The certificate list is sent to a client when the server requests a certificate as an indication of which certificates the server trusts.") (p "Loading the suggested certificates does not imply trust, however; any certificate presented by the client will be checked using the trusted roots loaded by " (tt "ssl-load-verify-root-certificates!") "."))) (section 4 "Port procedures" (def (sig (procedure "(ssl-port? obj) => <boolean>" (id ssl-port?))) (p "Predicate for SSL ports; returns " (tt "#t") " if " (tt "obj") " is an SSL port, " (tt "#f") " if it isn't.")) (def (sig (procedure "(ssl-port->tcp-port p) => <tcp-port>" (id ssl-port->tcp-port))) (p "Convert SSL port " (tt "p") " to the raw underlying TCP port.") (p "This is mostly useful if you need to obtain extra information about the connection, like for example " (tt "tcp-addresses") ".  Note that you generally " (i "cannot") " safely send data over the port, as that would interfere with OpenSSL's operation.")))) (section 3 "Changelog" (ul (li "1.5 Do not let ssl-accept or ssl-connect block immediately but defer it until reading or writing to the ports. Add " (tt "ssl-handshake-timeout") " and " (tt "ssl-shutdown-timeout") " options.") (li "1.4 Fix intermittent bug in ssl-write caused by the GC's moving around of memory locations") (li "1.3 Make ssl ports completely distinct from tcp ports. Add " (tt "ssl-port?") " and " (tt "ssl-port->tcp-port") " procedures.") (li "1.1.7 fix for vector deref crash (elf, reported by glogic)") (li "1.1.6 windows linking fixes by Alex Queiroz") (li "1.1.5 added static linking support [felix]") (li "1.1.4 fixed problems with the shutdown sequence") (li "1.1.3 fixes problem with older chickens and missing newline before `<#' in blocks of foreign code [Thanks to Dan Muresan]") (li "1.1.2 uses " (tt "foreign-code") " macro insead of obsolete read syntax") (li "1.1.1 Output that would block properly suspends threads now") (li "1.1.0 " (tt "##sys#tcp-port->fileno") " and " (tt "tcp-addresses") " are now supported on SSL ports") (li "1.0.0 Corrections, tests against " (tt "openssl s_server, openssl s_client") " and comparison with the PLT module") (li "0.4.0 Server functionality added") (li "0.3.1 Client-only with certificate functions") (li "0.2.0 Client-only prerelease"))) (section 3 "License" (pre " Copyright (c) 2005, Thomas Chust <chust@web.de>.  All rights reserved.\n \n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n \n Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer. Redistributions in\n binary form must reproduce the above copyright notice, this list of\n conditions and the following disclaimer in the documentation and/or\n other materials provided with the distribution. Neither the name of the\n author nor the names of its contributors may be used to endorse or\n promote products derived from this software without specific prior\n written permission.") (pre " THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\n IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\n THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR\n CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."))))
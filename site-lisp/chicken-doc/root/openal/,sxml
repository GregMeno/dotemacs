((toc) (tags "egg") (section 2 "openal" (p "This extension provides bindings for the " (link "http://www.openal.org" "OpenAL") " sound API, version 1.1.") (p (i "Currently this has only been tested on Mac OS X with the " (link "http://developer.creative.com/articles/article.asp?cat=1&sbcat=31&top=38&aid=97" "binary release") " and with Linux. Windows support should be trivial, but needs modification of the " (tt "openal.setup") " script.")) (p "Functionality is split into several sub-extensions:") (section 3 "al" (p "Usage: " (tt "(require-extension al)")) (def (sig (constant "al:BITS -> INT" (id al:BITS)) (constant "al:BUFFER -> INT" (id al:BUFFER)) (constant "al:BUFFERS_PROCESSED -> INT" (id al:BUFFERS_PROCESSED)) (constant "al:BUFFERS_QUEUED -> INT" (id al:BUFFERS_QUEUED)) (constant "al:CHANNELS -> INT" (id al:CHANNELS)) (constant "al:CONE_INNER_ANGLE -> INT" (id al:CONE_INNER_ANGLE)) (constant "al:CONE_OUTER_ANGLE -> INT" (id al:CONE_OUTER_ANGLE)) (constant "al:CONE_OUTER_GAIN -> INT" (id al:CONE_OUTER_GAIN)) (constant "al:DATA -> INT" (id al:DATA)) (constant "al:DIRECTION -> INT" (id al:DIRECTION)) (constant "al:DISTANCE_MODEL -> INT" (id al:DISTANCE_MODEL)) (constant "al:DOPPLER_FACTOR -> INT" (id al:DOPPLER_FACTOR)) (constant "al:DOPPLER_VELOCITY -> INT" (id al:DOPPLER_VELOCITY)) (constant "al:EXTENSIONS -> INT" (id al:EXTENSIONS)) (constant "al:FALSE -> INT" (id al:FALSE)) (constant "al:FORMAT_MONO16 -> INT" (id al:FORMAT_MONO16)) (constant "al:FORMAT_MONO8 -> INT" (id al:FORMAT_MONO8)) (constant "al:FORMAT_STEREO16 -> INT" (id al:FORMAT_STEREO16)) (constant "al:FORMAT_STEREO8 -> INT" (id al:FORMAT_STEREO8)) (constant "al:FREQUENCY -> INT" (id al:FREQUENCY)) (constant "al:GAIN -> INT" (id al:GAIN)) (constant "al:INITIAL -> INT" (id al:INITIAL)) (constant "al:INVALID -> INT" (id al:INVALID)) (constant "al:INVALID_ENUM -> INT" (id al:INVALID_ENUM)) (constant "al:INVALID_NAME -> INT" (id al:INVALID_NAME)) (constant "al:INVALID_OPERATION -> INT" (id al:INVALID_OPERATION)) (constant "al:INVALID_VALUE -> INT" (id al:INVALID_VALUE)) (constant "al:INVERSE_DISTANCE -> INT" (id al:INVERSE_DISTANCE)) (constant "al:INVERSE_DISTANCE_CLAMPED -> INT" (id al:INVERSE_DISTANCE_CLAMPED)) (constant "al:LOOPING -> INT" (id al:LOOPING)) (constant "al:MAX_DISTANCE -> INT" (id al:MAX_DISTANCE)) (constant "al:MAX_GAIN -> INT" (id al:MAX_GAIN)) (constant "al:MIN_GAIN -> INT" (id al:MIN_GAIN)) (constant "al:NO_ERROR -> INT" (id al:NO_ERROR)) (constant "al:NONE -> INT" (id al:NONE)) (constant "al:ORIENTATION -> INT" (id al:ORIENTATION)) (constant "al:OUT_OF_MEMORY -> INT" (id al:OUT_OF_MEMORY)) (constant "al:PAUSED -> INT" (id al:PAUSED)) (constant "al:PENDING -> INT" (id al:PENDING)) (constant "al:PITCH -> INT" (id al:PITCH)) (constant "al:PLAYING -> INT" (id al:PLAYING)) (constant "al:POSITION -> INT" (id al:POSITION)) (constant "al:PROCESSED -> INT" (id al:PROCESSED)) (constant "al:REFERENCE_DISTANCE -> INT" (id al:REFERENCE_DISTANCE)) (constant "al:RENDERER -> INT" (id al:RENDERER)) (constant "al:ROLLOFF_FACTOR -> INT" (id al:ROLLOFF_FACTOR)) (constant "al:SIZE -> INT" (id al:SIZE)) (constant "al:SOURCE_ABSOLUTE -> INT" (id al:SOURCE_ABSOLUTE)) (constant "al:SOURCE_RELATIVE -> INT" (id al:SOURCE_RELATIVE)) (constant "al:SOURCE_STATE -> INT" (id al:SOURCE_STATE)) (constant "al:SOURCE_TYPE -> INT" (id al:SOURCE_TYPE)) (constant "al:STOPPED -> INT" (id al:STOPPED)) (constant "al:TRUE -> INT" (id al:TRUE)) (constant "al:UNUSED -> INT" (id al:UNUSED)) (constant "al:VELOCITY -> INT" (id al:VELOCITY)) (constant "al:VENDOR -> INT" (id al:VENDOR)) (constant "al:VERSION -> INT" (id al:VERSION)))) (def (sig (procedure "(al:BufferData INT INT C-POINTER INT INT)" (id al:BufferData)) (procedure "(al:DeleteBuffers INT U32VECTOR)" (id al:DeleteBuffers)) (procedure "(al:DeleteSources INT U32VECTOR)" (id al:DeleteSources)) (procedure "(al:Disable INT)" (id al:Disable)) (procedure "(al:DistanceModel INT)" (id al:DistanceModel)) (procedure "(al:DopplerFactor FLOAT)" (id al:DopplerFactor)) (procedure "(al:DopplerVelocity FLOAT)" (id al:DopplerVelocity)) (procedure "(al:Enable INT)" (id al:Enable)) (procedure "(al:GenBuffers INT U32VECTOR)" (id al:GenBuffers)) (procedure "(al:GenSources INT U32VECTOR)" (id al:GenSources)) (procedure "(al:GetBoolean INT) -> BOOL" (id al:GetBoolean)) (procedure "(al:GetBooleanv INT U8VECTOR)" (id al:GetBooleanv)) (procedure "(al:GetBufferf INT INT S32VECTOR)" (id al:GetBufferf)) (procedure "(al:GetBufferi INT INT F32VECTOR)" (id al:GetBufferi)) (procedure "(al:GetDouble INT) -> FLOAT" (id al:GetDouble)) (procedure "(al:GetDoublev INT F64VECTOR)" (id al:GetDoublev)) (procedure "(al:GetEnumValue STRING) -> INT" (id al:GetEnumValue)) (procedure "(al:GetError) -> INT" (id al:GetError)) (procedure "(al:GetFloat INT) -> FLOAT" (id al:GetFloat)) (procedure "(al:GetFloatv INT F32VECTOR)" (id al:GetFloatv)) (procedure "(al:GetInteger INT) -> INT" (id al:GetInteger)) (procedure "(al:GetIntegerv INT S32VECTOR)" (id al:GetIntegerv)) (procedure "(al:GetListener3f INT) -> FLOAT FLOAT FLOAT" (id al:GetListener3f)) (procedure "(al:GetListenerf INT) -> FLOAT" (id al:GetListenerf)) (procedure "(al:GetListenerfv INT F32VECTOR)" (id al:GetListenerfv)) (procedure "(al:GetListeneri INT) -> INT" (id al:GetListeneri)) (procedure "(al:GetProcAddress STRING) -> C-POINTER" (id al:GetProcAddress)) (procedure "(al:GetSource3f INT INT) -> FLLOAT FLOAT FLOAT" (id al:GetSource3f)) (procedure "(al:GetSourcef INT INT) -> FLOAT" (id al:GetSourcef)) (procedure "(al:GetSourcefv INT INT F32VECTOR)" (id al:GetSourcefv)) (procedure "(al:GetSourcei INT INT) -> INT" (id al:GetSourcei)) (procedure "(al:GetString INT) -> STRING" (id al:GetString)) (procedure "(al:IsBuffer INT) -> BOOL" (id al:IsBuffer)) (procedure "(al:IsEnabled INT) -> BOOL" (id al:IsEnabled)) (procedure "(al:IsExtensionPresent STRING) -> BOOL" (id al:IsExtensionPresent)) (procedure "(al:IsSource INT) -> BOOL" (id al:IsSource)) (procedure "(al:Listener3f INT FLOAT FLOAT FLOAT)" (id al:Listener3f)) (procedure "(al:Listenerf INT FLOAT)" (id al:Listenerf)) (procedure "(al:Listenerfv INT F32VECTOR)" (id al:Listenerfv)) (procedure "(al:Listeneri INT INT)" (id al:Listeneri)) (procedure "(al:SetDouble INT DOUBLE)" (id al:SetDouble)) (procedure "(al:SetInteger INT INT)" (id al:SetInteger)) (procedure "(al:Source3f INT INT FLOAT FLOAT FLLOAT)" (id al:Source3f)) (procedure "(al:Sourcef INT INT FLOAT)" (id al:Sourcef)) (procedure "(al:Sourcefv INT INT F32VECTOR)" (id al:Sourcefv)) (procedure "(al:Sourcei INT INT INT)" (id al:Sourcei)) (procedure "(al:SourcePause INT)" (id al:SourcePause)) (procedure "(al:SourcePausev INT U32VECTOR)" (id al:SourcePausev)) (procedure "(al:SourcePlay INT)" (id al:SourcePlay)) (procedure "(al:SourcePlayv INT U32VECTOR)" (id al:SourcePlayv)) (procedure "(al:SourceQueueBuffers INT INT U32VECTOR)" (id al:SourceQueueBuffers)) (procedure "(al:SourceRewind INT)" (id al:SourceRewind)) (procedure "(al:SourceRewindv INT U32VECTOR)" (id al:SourceRewindv)) (procedure "(al:SourceStop INT)" (id al:SourceStop)) (procedure "(al:SourceStopv INT U32VECTOR)" (id al:SourceStopv)) (procedure "(al:SourceUnqueueBuffers INT INT U32VECTOR)" (id al:SourceUnqueueBuffers))))) (section 3 "alc" (p "Usage: " (tt "(require-extension alc)")) (def (sig (constant "alc:ALL_ATTRIBUTES -> INT" (id alc:ALL_ATTRIBUTES)) (constant "alc:ATTRIBUTES_SIZE -> INT" (id alc:ATTRIBUTES_SIZE)) (constant "alc:CONVERT_DATA_UPON_LOADING -> INT" (id alc:CONVERT_DATA_UPON_LOADING)) (constant "alc:DEFAULT_DEVICE_SPECIFIER -> INT" (id alc:DEFAULT_DEVICE_SPECIFIER)) (constant "alc:DEVICE_SPECIFIER -> INT" (id alc:DEVICE_SPECIFIER)) (constant "alc:EXTENSIONS -> INT" (id alc:EXTENSIONS)) (constant "alc:FALSE -> INT" (id alc:FALSE)) (constant "alc:FREQUENCY -> INT" (id alc:FREQUENCY)) (constant "alc:INVALID -> INT" (id alc:INVALID)) (constant "alc:INVALID_CONTEXT -> INT" (id alc:INVALID_CONTEXT)) (constant "alc:INVALID_DEVICE -> INT" (id alc:INVALID_DEVICE)) (constant "alc:INVALID_ENUM -> INT" (id alc:INVALID_ENUM)) (constant "alc:INVALID_VALUE -> INT" (id alc:INVALID_VALUE)) (constant "alc:MAJOR_VERSION -> INT" (id alc:MAJOR_VERSION)) (constant "alc:MINOR_VERSION -> INT" (id alc:MINOR_VERSION)) (constant "alc:MIXER_MAXIMUM_BUSSES -> INT" (id alc:MIXER_MAXIMUM_BUSSES)) (constant "alc:MIXER_OUTPUT_RATE -> INT" (id alc:MIXER_OUTPUT_RATE)) (constant "alc:NO_ERROR -> INT" (id alc:NO_ERROR)) (constant "alc:OUT_OF_MEMORY -> INT" (id alc:OUT_OF_MEMORY)) (constant "alc:REFRESH -> INT" (id alc:REFRESH)) (constant "alc:RENDER_CHANNEL_COUNT -> INT" (id alc:RENDER_CHANNEL_COUNT)) (constant "alc:SPATIAL_RENDERING_QUALITY -> INT" (id alc:SPATIAL_RENDERING_QUALITY)) (constant "alc:SYNC -> INT" (id alc:SYNC)) (constant "alc:TRUE -> INT" (id alc:TRUE)))) (def (sig (procedure "(alc:CloseDevice C-POINTER)" (id alc:CloseDevice)) (procedure "(alc:CreateContext C-POINTER S32VECTOR) -> C-POINTER" (id alc:CreateContext)) (procedure "(alc:DestroyContext C-POINTER)" (id alc:DestroyContext)) (procedure "(alc:GetContextsDevice C-POINTER) -> C-POINTER" (id alc:GetContextsDevice)) (procedure "(alc:GetCurrentContext) -> C-POINTER" (id alc:GetCurrentContext)) (procedure "(alc:GetEnumValue C-POINTER STRING) -> INT" (id alc:GetEnumValue)) (procedure "(alc:GetError C-POINTER) -> INT" (id alc:GetError)) (procedure "(alc:GetIntegerv C-POINTER INT INT S32VECTOR)" (id alc:GetIntegerv)) (procedure "(alc:GetProcAddress C-POINTER STRING) -> C-POINTER" (id alc:GetProcAddress)) (procedure "(alc:GetString C-POINTER INT) -> STRING" (id alc:GetString)) (procedure "(alc:IsExtensionPresent C-POINTER STRING) -> BOOL" (id alc:IsExtensionPresent)) (procedure "(alc:MakeContextCurrent C-POINTER) -> BOOL" (id alc:MakeContextCurrent)) (procedure "(alc:OpenDevice STRING) -> C-POINTER" (id alc:OpenDevice)) (procedure "(alc:ProcessContext C-POINTER)" (id alc:ProcessContext)) (procedure "(alc:SuspendContext C-POINTER)" (id alc:SuspendContext))))) (section 3 "alut" (p "Usage: " (tt "(require-extension alut)")) (def (sig (procedure "(alut:Exit)" (id alut:Exit)) (procedure "(alut:Init INT C-POINTER)" (id alut:Init)) (procedure "(alut:LoadWAVFile STRING) -> INT C-POINTER INT INT BOOL" (id alut:LoadWAVFile)) (procedure "(alut:LoadWAVMemory C-POINTER) -> INT C-POINTER INT INT BOOL" (id alut:LoadWAVMemory)) (procedure "(alut:UnloadWAV INT C-POINTER INT INT)" (id alut:UnloadWAV))))) (section 3 "openal" (p "Usage: " (tt "(require-extension openal)")) (p "This extension loads " (tt "al") ", " (tt "alc") " and " (tt "alut") " and provides few higher-level operations. Note that loading this unit automatically calls " (tt "alut:Init") ".") (def (sig (procedure "(openal:make-source INT) -> INT" (id openal:make-source))) (p "Creates a source from a given buffer identifier and returns the source identifier.")) (def (sig (procedure "(openal:device-list) -> (STRING ...)" (id openal:device-list))) (p "Returns a list of available device names.")) (def (sig (procedure "(openal:make-buffer DATA STEREO? FREQ)" (id openal:make-buffer))) (p "Creates a buffer from sound data (either a " (tt "u8vector") ", a " (tt "s16vector") " or a foreign pointer object. Returns a buffer identifier.")) (def (sig (procedure "(openal:load-buffer FILENAME)" (id openal:load-buffer))) (p "Loads sound data in WAV format from " (tt "FILENAME") " and returns a buffer identifier."))) (section 3 "Example" (highlight scheme " (use openal)\n (require-extension al)\n (require-extension alc)\n\n ;; this code does no error checking\n\n (define device (alc:OpenDevice #f))\n (define context (alc:CreateContext device #f))\n\n (alc:MakeContextCurrent context)\n\n (define buf (openal:load-buffer \"example.wav\"))\n (define source (openal:make-source buf))\n\n (al:Sourcei source al:LOOPING 1)\n (al:SourcePlay source)\n (read-line)\n (alc:MakeContextCurrent #f)\n (alc:DestroyContext context)\n (alc:CloseDevice device)")) (section 3 "Author" (p (int-link "/users/felix winkelmann" "felix winkelmann"))) (section 3 "License" (pre "Copyright (c) 2006-2010, Felix L. Winkelmann\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following\nconditions are met:\n\n  Redistributions of source code must retain the above copyright notice, this list of conditions and the following\n    disclaimer. \n  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following\n    disclaimer in the documentation and/or other materials provided with the distribution. \n  Neither the name of the author nor the names of its contributors may be used to endorse or promote\n    products derived from this software without specific prior written permission. \n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS\nOR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR\nCONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\nCONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\nOTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE."))) (section 2 "Version History" (dl (dt "0.7") (dd "test runs only for limited time when invoked over chicken-install") (dt "0.6") (dd "fixed missing libraries for non-Mac platforms") (dt "0.5") (dd "ported to CHICKEN 4") (dt "0.3") (dd "fixed easyffi requirement in meta file (thanks to " (int-link "/users/mario domenech goulart" "mario domenech goulart") ")") (dt "0.2") (dd "fixed invalid references to obsolete " (tt "openal-check") " procedure") (dt "0.1") (dd "initial release"))))
((tags "egg") (section 2 "chicken-doc" (p "chicken-doc is a tool for exploring Chicken documentation.") (toc) (section 3 "Overview" (p "chicken-doc provides facilities to explore Chicken documentation from the command-line and from the REPL.  It also provides an API to access this documentation from your own programs.") (p "You need to obtain Chicken documentation separately.  To generate a documentation database from a copy of the wiki, see the " (int-link "chicken-doc-admin") " egg.  You can also use a pre-built documentation package, described below.")) (section 3 "Documentation repository" (p "The documentation database is located, by default, under " (tt "(chicken-home)") " in the " (tt "chicken-doc/") " directory.  If you have installed it in a different location, set the " (tt "CHICKEN_DOC_REPOSITORY") " enviroment variable:") (pre "export CHICKEN_DOC_REPOSITORY=/path/to/repository") (section 4 "Pre-built packages" (p "Documentation tarballs are provided in " (link "http://3e8.org/pub/chicken-doc/chicken-doc-repo.tgz" "gzip") ", " (link "http://3e8.org/pub/chicken-doc/chicken-doc-repo.tar.bz2" "bzip2") " and " (link "http://3e8.org/pub/chicken-doc/chicken-doc-repo.zip" "zip") " format at " (link "http://3e8.org/pub/chicken-doc/") ".  They are updated daily from the latest wiki documentation.") (p "Download your preferred format and extract it into the default location " (tt "(chicken-home)") " or into some other writable directory of your choice.  For example, on UNIX:") (pre "$ cd `csi -p '(chicken-home)'`\n$ curl http://3e8.org/pub/chicken-doc/chicken-doc-repo.tgz | sudo tar zx") (p "The tarball will be extracted into the directory " (tt "chicken-doc/") ". If you installed into a non-default location, " (tt "CHICKEN_DOC_REPOSITORY") " must include this entire path.") (section 5 "Cleaning up old repository crust" (p "Occasionally, or when the repository format changes significantly, you should wipe out your repository before extracting a new one, to get rid of dead wood.  Simply delete the directory shown by the following command:") (pre "$ csi -R chicken-doc -p \"(locate-repository)\"\n/usr/local/share/chicken/chicken-doc") (p "If you have chicken-doc-admin installed, just do instead:") (pre "$ chicken-doc-admin -D"))) (section 4 "Structure" (p "The documentation is arranged in a tree structure, where each node may contain descriptive text, a signature, and other nodes.  Nodes may be searched for by name or specified by an absolute path through the tree, and you may request the text, signature or table of contents (children) for any node.") (p "With the standard documentation install, each unit (posix, lolevel) and egg (9p, base64) is assigned a toplevel node whose text contains that unit or egg's full documentation.  The identifiers in each become these nodes' children, and contain the signature and descriptive text just for that identifier.  Core bindings in the " (tt "chicken") " module are similar, but because they are divided into several manual pages, each page is placed in a separate node under the toplevel node " (tt "chicken") ".") (p "So in general, if you know the full path of an identifier, you can pull it into your program with (use NODE) or (import NODE) where NODE is the name of the toplevel node.  For example,") (pre " and-let* -> (chicken macros and-let*) -> (import chicken)\n find-files -> (posix find-files) -> (use posix)") (p "Here's an abbreviated example of the tree structure:") (pre "|- 9p +- alloc-handle\n|     |- call-with-input-file\n|     |- call-with-output-file\n|\n|- base64 +- base64-decode\n|         |- base64-encode\n|\n|- chicken +- macros +- and-let*\n|          |         |- assert\n|          |\n|          |- parameters -- make-parameter\n|\n|- posix +- find-files\n|        |- glob\n|        |- open/rdonly\n|"))) (section 3 "From the command-line" (pre "chicken-doc -s|-c|-i path\nchicken-doc -f node\nchicken-doc node | path\n\n-s path        Show signature\n-c path        Show table of contents (children)\n-i path        Show documentation\n-f node        Show all matching paths for node") (p "where NODE is a single identifier and PATH is one or more node names comprising a path from the documentation root, separated by spaces.") (pre "-m re          Show all matching paths for RE") (p "where RE is a POSIX regular expression.  Similar to -f.") (p "When no option is given, guess the user's intent.  With a single node name, find the node (as with -f) and show its documentation (as with -i) or show all matching paths if multiple matches exist.  If more than one node is provided, show documentation on the path (as if called with -i).") (section 4 "Pager" (p "When output is sent to a terminal, " (tt "chicken-doc") " pipes its output to the pager of your choice.  It looks for a pager in the following places:") (ul (li "the CHICKEN_DOC_PAGER environment variable") (li "the PAGER environment variable") (li "the default pager, which is " (tt "less") " on UNIX and " (tt "more") " on Windows")) (p "If an environment variable is set but empty, for example:") (pre "export CHICKEN_DOC_PAGER=") (p "then the output is not paginated.  Windows does not distinguish between an empty and unset variable, so you can use the special value " (tt "cat") " instead:") (pre "set CHICKEN_DOC_PAGER=cat")) (section 4 "Text wrapping" (p (tt "chicken-doc") " will wrap its output text nicely if it can determine how wide your terminal is.  If it can't (e.g. on Windows) it will wrap at 76 columns.  If you wish to fix the wrap column to, say, 120:") (pre "export CHICKEN_DOC_WRAP=120") (p "or to disable wrapping, which won't look very good:") (pre "export CHICKEN_DOC_WRAP=0")) (section 4 "Examples" (p "Show matches for identifier " (tt "file-open") ", which occurs in Unit posix and in the 9p egg:") (pre "$ chicken-doc -f file-open\n(9p file-open)        (file-open connection path mode)\n(posix file-open)     (file-open FILENAME FLAGS [MODE])") (p "Show signature of " (tt "open/rdonly") " in Unit posix:") (pre "$ chicken-doc -s posix open/rdonly\n(posix open/rdonly)     open/rdonly") (p "Show documentation for " (tt "file-open") " in the 9p egg:") (pre "$ chicken-doc -i 9p open/rdonly\nprocedure: (file-open connection path mode)\n\nOpens the file indicated by `path` on the `connection` with the given\n`mode` and returns an opaque handle object which you can use for the [...]") (p "Show table of contents (identifiers) in Unit posix:") (pre "$ chicken-doc -c posix\n [...]\nget-host-name        (get-host-name)\nglob                 (glob PATTERN1 ...)\ngroup-information    (group-information GROUP)\n [...]") (p "Show identifiers containing call-:") (pre "$ chicken-doc -m call-\n(scheme call-with-values)      (call-with-values producer consumer)\n(xml-rpc call-xml-rpc-proc)    (call-xml-rpc-proc call-sxml procedures)\n(library get-call-chain)       (get-call-chain [START [THREAD]])\n[...]") (p "Show identifiers ending in -file:") (pre "$ chicken-doc -m -file$\n(spiffy access-file)           (access-file [string])\n(scheme call-with-input-file)  (call-with-input-file string proc)\n(scheme call-with-output-file) (call-with-output-file string proc)\n[...]") (p "Show `with-...-port` identifiers:") (pre "$ chicken-doc -m with-.+-port\n(ports with-error-output-to-port)  (with-error-output-to-port PORT THUNK)\n(ports with-input-from-port)       (with-input-from-port PORT THUNK)\n(ports with-output-to-port)        (with-output-to-port PORT THUNK)") (p "Show documentation for " (tt "use") " in chicken core:") (pre "$ chicken-doc use\npath: (chicken macros use)\nmacro: (use ID ...)\n\n`use` is just a shorter alias for `require-extension`.") (p "Show full documentation for Unit posix:") (pre "$ chicken-doc posix") (p "Show matches for " (tt "open/rdonly") ", as with -f:") (pre "$ chicken-doc open/rdonly") (p "Show documentation for " (tt "open/rdonly") " in Unit posix:") (pre "$ chicken-doc posix open/rdonly"))) (section 3 "From the REPL" (p "To load " (tt "chicken-doc") " for REPL use:") (pre "(require-library chicken-doc)") (p "The following " (tt "csi") " commands then become available:") (pre ",doc node\n,doc (node ...)") (p "Show documentation for the identifier " (tt "node") " or the absolute path " (tt "(node ...)") ".  If a single " (tt "node") " is given, a search is performed across all identifiers, and documentation will be shown if the node is unique --- otherwise, the matches are listed.") (pre ",toc node\n,toc (node ...)") (p "Show a table of contents for the identifier " (tt "node") " or the path " (tt "(node ...)") ".  As with " (tt ",doc") ", a search will be performed if a single " (tt "node") " is given.") (pre ",wtf regex") (p "The \"where to find\" command.  Search identifiers using POSIX regular expression " (tt "regex") " (like the -m command-line option) and display the matches.") (section 4 "Examples" (p "Search for identifier " (tt "define-foreign-type") " and display its documentation.") (pre "#;> ,doc define-foreign-type\npath: (foreign access define-foreign-type)\nmacro: (define-foreign-type NAME TYPE [ARGCONVERT [RETCONVERT]])\n\nDefines an alias for `TYPE` with the name `NAME` (a symbol).\n`TYPE` may be a type-specifier or a string naming a C type. The\n[...]") (p "Search for identifier " (tt "file-open") " and (as multiple matches occur) display the matches:") (pre "#;> ,doc file-open\nFound 2 matches:\n(9p file-open)        (file-open connection path mode)\n(posix file-open)     (file-open FILENAME FLAGS [MODE])") (p "Display TOC for absolute path " (tt "(chicken macros)") ".  This should list all the core chicken macros from " (int-link "Non-standard macros and special forms") ".") (pre "#;> ,toc (chicken macros)\nand-let*              (and-let* (BINDING ...) EXP1 EXP2 ...)\nassert                (assert EXP [STRING ARG ...])\nbegin-for-syntax      (begin-for-syntax EXP ...)\n[...]")) (section 4 "Emacs" (p "This elisp snippet will look up the word at point and display its documentation (or matches) in your *scheme* window and display it in a split window unless it is already visible.") (highlight elisp "(defun chicken-doc (&optional obtain-function)\n  (interactive)\n  (let ((func (funcall (or obtain-function 'current-word))))\n    (when func\n      (process-send-string (scheme-proc)\n                           (format \"(require-library chicken-doc) ,doc %S\\n\" func))\n      (save-selected-window\n        (select-window (display-buffer (get-buffer scheme-buffer) t))\n        (goto-char (point-max))))))\n  \n(eval-after-load 'cmuscheme\n '(define-key scheme-mode-map \"\\C-cd\" 'chicken-doc))") (p "Additionally, because multiple matches may be listed, this snippet will allow you to place your cursor at the beginning of the match s-expression and get the actual documentation:") (highlight elisp "(eval-after-load 'cmuscheme\n '(define-key inferior-scheme-mode-map \"\\C-cd\"\n    (lambda () (interactive) (chicken-doc 'sexp-at-point))))"))) (section 3 "API" (section 4 "Configuration" (def (sig (parameter "wrap-column [default: 76]" (id wrap-column))) (p "Wrap column for text output.  0 or " (tt "#f") " for no wrapping.")) (def (sig (parameter "chicken-doc-warnings [default: #f]" (id chicken-doc-warnings))) (p "For debugging.  Controls emission of warnings from the text renderer.") (p "When using the command-line tool, you can set the environment variable " (tt "CHICKEN_DOC_WARNINGS") " to any value to enable warnings."))) (section 4 "Repository" (def (sig (procedure "(verify-repository)" (id verify-repository))) (p "Open the repository found in the standard location with " (tt "(locate-repository)") " and set the " (tt "(current-repository)") " for the thread. Throws an error if the open fails.") (p "This is the standard way to open the chicken-doc repository, because the node lookup procedures require " (tt "(current-repository)") " to be set.")) (def (sig (procedure "(open-repository base)" (id open-repository))) (p "Open repository at pathname " (i "base") " and return a new repository object or throw an error if nonexistent or unknown format.") (p "Generally, you will want to use " (tt "verify-repository") " to open the repository instead.")) (def (sig (procedure "(close-repository r)" (id close-repository))) (p "Close repository object " (i "r") ".")) (def (sig (parameter "current-repository" (id current-repository))) (p "The current repository; used by the node lookup API.  It is usually set by calling " (tt "verify-repository") ".")) (def (sig (procedure "(locate-repository)" (id locate-repository))) (p "Return the standard location of the repository, according to the rules described in " (int-link "#Documentation repository") ".  Does not check if the repository actually exists."))) (section 4 "Node lookup" (def (sig (procedure "(lookup-node path)" (id lookup-node))) (p "Return node record at " (i "path") ", or throw an error if the record does not exist.  " (i "path") " is a list of string or symbols which identify the node; for example " (tt "'(posix open/rdonly)") ".")) (def (sig (procedure "(match-nodes idre)" (id match-nodes))) (p "Return a list of node records whose identifiers match " (i "idre") ", which may be an identifier symbol, identifier string or a regular expression object.")) (def (sig (procedure "(match-node-paths/re re)" (id match-node-paths/re))) (p "Return a list of node records whose full paths match " (i "re") ", a regular expression string or object.  " (i "re") " matches against the string representation of the node path, which is composed of each node id joined with spaces.  For example, " (tt "'(chicken foreign access)") " becomes " (tt "\"chicken foreign access\"") ".")) (def (sig (procedure "(match-ids/prefix str #!optional (limit #f))" (id match-ids/prefix))) (p "Return a list of node records whose identifiers match the string prefix " (i "str") ".  " (i "limit") " provides an optional integer limit on the number of records returned, or " (tt "#f") " for no limit.")) (def (sig (procedure "(match-paths/prefix str #!optional (limit #f))" (id match-paths/prefix))) (p "Return a list of node records whose full paths match the string prefix " (i "str") ".  This matches against the string representation of the node path, which is composed of each node id joined with spaces.  For example, " (tt "'(chicken foreign access)") " becomes " (tt "\"chicken foreign access\"") ".  " (i "limit") " provides an optional integer limit on the number of records returned, or " (tt "#f") " for no limit."))) (section 4 "Node description" (p "The command-line utility is a thin wrapper around these procedures, which print descriptive information to " (tt "current-output-port") ".") (def (sig (procedure "(describe node)" (id describe))) (p "Formats and displays the text contents of " (i "node") ".  An error is thrown if no textual content is available.")) (def (sig (procedure "(describe-contents node)" (id describe-contents))) (p "Displays the names and signatures of all child nodes of " (i "node") ".")) (def (sig (procedure "(describe-signatures nodes)" (id describe-signatures))) (p "Displays the signatures of all nodes in the list " (i "nodes") ".")) (def (sig (procedure "(doc-dwim pathspec)" (id doc-dwim))) (p "This \"do-what-I-mean\" procedure is used by the command line when no options are provided.") (p "If " (i "pathspec") " is a list, it is treated as a node path and the node at that path is looked up and described.") (p "If it is a string or symbol, it is decomposed into a list of node identifiers by splitting at each " (tt "#") ".  If this results in one identifier, it is matched against and the node is described (if exactly one match) or all matched paths are displayed.  Otherwise, the identifier list is treated as a node path and the node at that path is described.")) (def (sig (procedure "(search-only idre)" (id search-only))) (p "Search for all nodes matching the identifier or regular expression " (i "idre") ", and print a description of their signatures.  Equivalent to") (pre "(describe-signatures (match-nodes idre))"))) (section 4 "Node information" (def (sig (record "chicken-doc-node" (id chicken-doc-node))) (p "The " (i "chicken-doc-node") " record represents an individual repository node, such as " (tt "'(posix)") " or " (tt "'(posix open/rdonly)") ".")) (def (sig (procedure "(node-signature node)" (id node-signature))) (p "Return the signature of " (i "node") " as a string.  The signature is a node's short identifying description.  For example, it may be a procedure signature, an identifier or the name of a manual page.")) (def (sig (procedure "(node-type node)" (id node-type))) (p "Return a symbol representing the type of " (i "node") ".  The currently defined node types are: " (i "egg") " (egg documentation), " (i "unit") " (manual page), " (i "procedure") ", " (i "parameter") ", " (i "syntax") ", " (i "constant") ", " (i "read") " (read syntax), " (i "record") ", " (i "setter") ", " (i "class") ", and " (i "method") ".") (p "Returns " (tt "'unknown") " if type information is not available for some reason; however, the current repository backend always provides type information.")) (def (sig (procedure "(node-sxml node)" (id node-sxml))) (p "Return the sxml contents of " (i "node") " (as a pair).")) (def (sig (procedure "(node-path node)" (id node-path))) (p "Return the full node path of " (i "node") " as a list of identifiers. Each returned identifier may be a symbol or a string (this may be tightened up in the future).")) (def (sig (procedure "(node-id node)" (id node-id))) (p "Return the node id of " (i "node") ", which is the last component in the full path.  The return value may be a symbol or a string (this may be tightened up in the future).")) (def (sig (procedure "(node-timestamp node)" (id node-timestamp))) (p "Return the timestamp of a node in seconds since the UNIX epoch, or " (tt "#f") " if no timestamp is available.  In general, the timestamp is that of the source document used to generate this node.")) (def (sig (procedure "(node-children node)" (id node-children))) (p "Return the children of " (i "node") " as a list of node records.")) (def (sig (procedure "(node-child node id)" (id node-child))) (p "Return the child of node record " (i "node") " having identifier " (i "id") ", as a node record. " (i "id") " is a symbol or string.")) (def (sig (procedure "(node-child-ids node)" (id node-child-ids))) (p "Return a list of identifiers (symbols or strings) of the children of " (i "node") ".  Semantically equivalent to " (tt "(map node-id (node-children node))") ", but may be significantly less expensive than calling " (tt "node-children") ".")) (def (sig (procedure "(node-definition-ids node)" (id node-definition-ids))) (p (i "Experimental") ".  Returns a list of identifiers for the definition children of " (i "node") ". This is a subset of the identifiers returned by " (tt "node-children") ".")) (def (sig (procedure "(node-definition-id? node id)" (id node-definition-id?))) (p (i "Experimental") ".  Returns " (tt "#t") " if " (i "id") " is a definition child of " (i "node") ".")))) (section 3 "About this egg" (section 4 "Author" (p "Jim Ursetto")) (section 4 "Version history" (dl (dt "0.4.1") (dd "Improve DL rendering; add " (tt "chicken-doc-warnings")) (dt "0.4.0") (dd "Repository version 3") (dt "0.3.2") (dd "POSIX regular expression search") (dt "0.3.0") (dd "SXML database, formatting improvements") (dt "0.2.0") (dd "Pagination") (dt "0.1.1") (dd "Initial release"))) (section 4 "License" (p "BSD")))))
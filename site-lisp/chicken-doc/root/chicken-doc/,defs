(index ("wrap-column" 0) ("chicken-doc-warnings" 141) ("verify-repository" 446) ("open-repository" 856) ("close-repository" 1161) ("current-repository" 1273) ("locate-repository" 1461) ("lookup-node" 1715) ("match-nodes" 1986) ("match-node-paths/re" 2209) ("match-ids/prefix" 2623) ("match-paths/prefix" 2927) ("describe" 3452) ("describe-contents" 3628) ("describe-signatures" 3780) ("doc-dwim" 3931) ("search-only" 4571) ("chicken-doc-node" 4831) ("node-signature" 5043) ("node-type" 5318) ("node-sxml" 5890) ("node-path" 6010) ("node-id" 6239) ("node-timestamp" 6471) ("node-children" 6742) ("node-child" 6879) ("node-child-ids" 7081) ("node-definition-ids" 7394) ("node-definition-id?" 7651))
(def (sig (parameter "wrap-column [default: 76]" (id wrap-column))) (p "Wrap column for text output.  0 or " (tt "#f") " for no wrapping."))
(def (sig (parameter "chicken-doc-warnings [default: #f]" (id chicken-doc-warnings))) (p "For debugging.  Controls emission of warnings from the text renderer.") (p "When using the command-line tool, you can set the environment variable " (tt "CHICKEN_DOC_WARNINGS") " to any value to enable warnings."))
(def (sig (procedure "(verify-repository)" (id verify-repository))) (p "Open the repository found in the standard location with " (tt "(locate-repository)") " and set the " (tt "(current-repository)") " for the thread. Throws an error if the open fails.") (p "This is the standard way to open the chicken-doc repository, because the node lookup procedures require " (tt "(current-repository)") " to be set."))
(def (sig (procedure "(open-repository base)" (id open-repository))) (p "Open repository at pathname " (i "base") " and return a new repository object or throw an error if nonexistent or unknown format.") (p "Generally, you will want to use " (tt "verify-repository") " to open the repository instead."))
(def (sig (procedure "(close-repository r)" (id close-repository))) (p "Close repository object " (i "r") "."))
(def (sig (parameter "current-repository" (id current-repository))) (p "The current repository; used by the node lookup API.  It is usually set by calling " (tt "verify-repository") "."))
(def (sig (procedure "(locate-repository)" (id locate-repository))) (p "Return the standard location of the repository, according to the rules described in " (int-link "#Documentation repository") ".  Does not check if the repository actually exists."))
(def (sig (procedure "(lookup-node path)" (id lookup-node))) (p "Return node record at " (i "path") ", or throw an error if the record does not exist.  " (i "path") " is a list of string or symbols which identify the node; for example " (tt "'(posix open/rdonly)") "."))
(def (sig (procedure "(match-nodes idre)" (id match-nodes))) (p "Return a list of node records whose identifiers match " (i "idre") ", which may be an identifier symbol, identifier string or a regular expression object."))
(def (sig (procedure "(match-node-paths/re re)" (id match-node-paths/re))) (p "Return a list of node records whose full paths match " (i "re") ", a regular expression string or object.  " (i "re") " matches against the string representation of the node path, which is composed of each node id joined with spaces.  For example, " (tt "'(chicken foreign access)") " becomes " (tt "\"chicken foreign access\"") "."))
(def (sig (procedure "(match-ids/prefix str #!optional (limit #f))" (id match-ids/prefix))) (p "Return a list of node records whose identifiers match the string prefix " (i "str") ".  " (i "limit") " provides an optional integer limit on the number of records returned, or " (tt "#f") " for no limit."))
(def (sig (procedure "(match-paths/prefix str #!optional (limit #f))" (id match-paths/prefix))) (p "Return a list of node records whose full paths match the string prefix " (i "str") ".  This matches against the string representation of the node path, which is composed of each node id joined with spaces.  For example, " (tt "'(chicken foreign access)") " becomes " (tt "\"chicken foreign access\"") ".  " (i "limit") " provides an optional integer limit on the number of records returned, or " (tt "#f") " for no limit."))
(def (sig (procedure "(describe node)" (id describe))) (p "Formats and displays the text contents of " (i "node") ".  An error is thrown if no textual content is available."))
(def (sig (procedure "(describe-contents node)" (id describe-contents))) (p "Displays the names and signatures of all child nodes of " (i "node") "."))
(def (sig (procedure "(describe-signatures nodes)" (id describe-signatures))) (p "Displays the signatures of all nodes in the list " (i "nodes") "."))
(def (sig (procedure "(doc-dwim pathspec)" (id doc-dwim))) (p "This \"do-what-I-mean\" procedure is used by the command line when no options are provided.") (p "If " (i "pathspec") " is a list, it is treated as a node path and the node at that path is looked up and described.") (p "If it is a string or symbol, it is decomposed into a list of node identifiers by splitting at each " (tt "#") ".  If this results in one identifier, it is matched against and the node is described (if exactly one match) or all matched paths are displayed.  Otherwise, the identifier list is treated as a node path and the node at that path is described."))
(def (sig (procedure "(search-only idre)" (id search-only))) (p "Search for all nodes matching the identifier or regular expression " (i "idre") ", and print a description of their signatures.  Equivalent to") (pre "(describe-signatures (match-nodes idre))"))
(def (sig (record "chicken-doc-node" (id chicken-doc-node))) (p "The " (i "chicken-doc-node") " record represents an individual repository node, such as " (tt "'(posix)") " or " (tt "'(posix open/rdonly)") "."))
(def (sig (procedure "(node-signature node)" (id node-signature))) (p "Return the signature of " (i "node") " as a string.  The signature is a node's short identifying description.  For example, it may be a procedure signature, an identifier or the name of a manual page."))
(def (sig (procedure "(node-type node)" (id node-type))) (p "Return a symbol representing the type of " (i "node") ".  The currently defined node types are: " (i "egg") " (egg documentation), " (i "unit") " (manual page), " (i "procedure") ", " (i "parameter") ", " (i "syntax") ", " (i "constant") ", " (i "read") " (read syntax), " (i "record") ", " (i "setter") ", " (i "class") ", and " (i "method") ".") (p "Returns " (tt "'unknown") " if type information is not available for some reason; however, the current repository backend always provides type information."))
(def (sig (procedure "(node-sxml node)" (id node-sxml))) (p "Return the sxml contents of " (i "node") " (as a pair)."))
(def (sig (procedure "(node-path node)" (id node-path))) (p "Return the full node path of " (i "node") " as a list of identifiers. Each returned identifier may be a symbol or a string (this may be tightened up in the future)."))
(def (sig (procedure "(node-id node)" (id node-id))) (p "Return the node id of " (i "node") ", which is the last component in the full path.  The return value may be a symbol or a string (this may be tightened up in the future)."))
(def (sig (procedure "(node-timestamp node)" (id node-timestamp))) (p "Return the timestamp of a node in seconds since the UNIX epoch, or " (tt "#f") " if no timestamp is available.  In general, the timestamp is that of the source document used to generate this node."))
(def (sig (procedure "(node-children node)" (id node-children))) (p "Return the children of " (i "node") " as a list of node records."))
(def (sig (procedure "(node-child node id)" (id node-child))) (p "Return the child of node record " (i "node") " having identifier " (i "id") ", as a node record. " (i "id") " is a symbol or string."))
(def (sig (procedure "(node-child-ids node)" (id node-child-ids))) (p "Return a list of identifiers (symbols or strings) of the children of " (i "node") ".  Semantically equivalent to " (tt "(map node-id (node-children node))") ", but may be significantly less expensive than calling " (tt "node-children") "."))
(def (sig (procedure "(node-definition-ids node)" (id node-definition-ids))) (p (i "Experimental") ".  Returns a list of identifiers for the definition children of " (i "node") ". This is a subset of the identifiers returned by " (tt "node-children") "."))
(def (sig (procedure "(node-definition-id? node id)" (id node-definition-id?))) (p (i "Experimental") ".  Returns " (tt "#t") " if " (i "id") " is a definition child of " (i "node") "."))

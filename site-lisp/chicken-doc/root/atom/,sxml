((section 2 "atom" (p "Read and write Atom 1.0 feeds.") (toc) (section 3 "Overview" (p (int-link "atom") " provides the means to read " (link "http://tools.ietf.org/html/rfc4287" "RFC 4287") " conforming Atom 1.0 documents, which are either feeds or single entries.  Procedures are provided to access child elements of feeds and entries, such as the feed author, and also to access the child elements and contents of these children, such as author name and email.") (p "Elements themselves are returned as plain SXML documents, which are for the most part verbatim copies of the XML input elements.  This is true even for the Atom document itself, which is the SXML representation of the original XML document.  This means that if desired, you can access elements or the entire document using standard list deconstructors or " (int-link "sxpath") " rather than the provided accessors.") (p "For example, accessing the feed author returns an " (tt "atom:author") " child:") (pre "> (feed-author feed)\n  ;=> (atom:author (atom:name \"A. Hacker\")\n                   (atom:uri \"http://www.hacker.dim\")\n                   (atom:email \"buzz+off@hacker.dim\"))") (p "and you can either use the accessors, or deconstruct the result manually:") (pre "> (author-name (feed-author feed))\n  ;=> \"A. Hacker\"\n> (cadr (assq 'atom:name (cdr (feed-author G))))\n  ;=> \"A. Hacker\"") (p "Or for a list of all people (authors, contributors, etc.) mentioned in " (tt "atom:name") " elements anywhere in the feed:") (pre "> (delete-duplicates ((sxpath '(// atom:name *text*)) feed))\n  ;=> (\"A. Hacker\" \"A. Contributor\" \"A. Groupie\")") (p "Element contents and element attributes are generally returned as text strings.  This includes HTML contents, which will be unescaped for you.  It also includes RFC3339 datetime strings, which can be deconstructed using the " (int-link "rfc3339") " egg, and URIs, which can be manipulated with " (int-link "uri-common") ".  Certain elements may contain XHTML or XML documents; special accessors for these elements are provided, which return their contents as SXML.") (p "The same rules apply when creating a document; elements may be generated using their constructors or created directly in SXML if you understand the format.  For example, these two excerpts are equivalent:") (pre "> (make-feed authors: (list (make-author name: \"Jim\" \n                                         email: \"himmy@pimmy.dim\"))\n             ...)\n> (make-feed authors: (list '(atom:author (atom:name \"Jim\")\n                                          (atom:email \"himmy@pimmy.dim\")))\n             ...)") (p "except that " (tt "make-author") " checks its input, ensuring the required " (tt "name") " element is present and that all arguments are strings.  Other constructors may do more complicated constraint checking or simplify element creation.")) (section 3 "Read interface" (section 4 "Atom document" (def (sig (procedure "(read-atom-doc port)" (id read-atom-doc))) (p "Reads an Atom Feed Document or Atom Entry Document from PORT and returns an SXML document representing the entire XML document, including any processing instructions.  If the document is not readable as XML or does not contain a single " (tt "atom:feed") " or " (tt "atom:entry") " root element, an error is thrown.")) (def (sig (procedure "(atom-doc-root doc)" (id atom-doc-root))) (p "Return the root element of the document, which will be an " (tt "atom:feed") " or " (tt "atom:entry") " node.")) (def (sig (procedure "(atom-doc-encoding doc)" (id atom-doc-encoding))) (p "Return XML document encoding as provided in the document; defaults to \"utf-8\".")) (def (sig (procedure "(read-atom-feed port)" (id read-atom-feed))) (p "Convenience function which reads an Atom Feed Document and returns the root " (tt "atom:feed") " element.  If this fails, an error is thrown.")) (def (sig (procedure "(read-atom-entry port)" (id read-atom-entry))) (p "Convenience function which reads an Atom Entry Document and returns the root " (tt "atom:entry") " element.  If this fails, an error is thrown."))) (section 4 "Feeds" (def (sig (record "atom:feed" (id atom:feed))) (p "An " (tt "atom:feed") " element, which represents an Atom feed.  Records such as " (tt "atom:feed") " are just SXML documents (list structures) like") (pre "(atom:feed (atom:author ...) (atom:title ...) ...)") (p "and can be queried either via the provided accessors, or directly via list destructuring if desired.")) (def (sig (procedure "(feed? F)" (id feed?))) (p "Returns true if F is an " (tt "atom:feed") " element.")) (def (sig (procedure "(feed-authors F)" (id feed-authors)) (procedure "(feed-author F)" (id feed-author))) (p (tt "feed-authors") " returns a list of feed authors; that is, " (tt "atom:author") " children of the feed.  A null list designates no authors.") (p (tt "feed-author") " returns the first feed author, or " (tt "#f") " if none.") (p "Feeds must contain at least one author element unless every feed entry contains one, as the default authorship for entries is that of the feed.")) (def (sig (procedure "(feed-categories F)" (id feed-categories))) (p "Returns a list of feed categories (" (tt "atom:category") " children), or null.")) (def (sig (procedure "(feed-contributors F)" (id feed-contributors))) (p "Returns a list of feed contributors (" (tt "atom:contributor") " children), or null.")) (def (sig (procedure "(feed-generator F)" (id feed-generator))) (p "Returns the feed generator (the " (tt "atom:generator") " child), or " (tt "#f") " if none.")) (def (sig (procedure "(feed-icon F)" (id feed-icon))) (p "Returns the feed icon (the " (tt "atom:icon") " child), or " (tt "#f") " if none.")) (def (sig (procedure "(feed-id F)" (id feed-id))) (p "Returns the feed ID as a string (the text contents of the " (tt "atom:id") " child), or the empty string if no ID.  The ID is required in an Atom feed.")) (def (sig (procedure "(feed-links F)" (id feed-links))) (p "Returns a list of feed links (" (tt "atom:link") " children), or null.")) (def (sig (procedure "(feed-logo F)" (id feed-logo))) (p "Returns the feed logo (" (tt "atom:logo") " child), or " (tt "#f") " if none.")) (def (sig (procedure "(feed-rights F)" (id feed-rights))) (p "Returns the feed rights (" (tt "atom:rights") " child), or " (tt "#f") " if none.")) (def (sig (procedure "(feed-subtitle F)" (id feed-subtitle))) (p "Returns the feed subtitle (" (tt "atom:subtitle") " child), or " (tt "#f") " if none.")) (def (sig (procedure "(feed-title F)" (id feed-title))) (p "Returns the feed title (" (tt "atom:title") " child), or " (tt "#f") " if none. The Atom spec requires a feed title.")) (def (sig (procedure "(feed-updated F)" (id feed-updated))) (p "Returns an " (int-link "rfc3339") " string representing the last time the feed was updated. The Atom spec requires this field to be present.")) (def (sig (procedure "(feed-entries F)" (id feed-entries))) (p "Return a list of feed entries (" (tt "atom:entry") " children), or null."))) (section 4 "Entries" (def (sig (record "atom:entry" (id atom:entry))) (p "An " (tt "atom:entry") " element, which represents an Atom entry.  Records such as " (tt "atom:entry") " are just SXML documents (list structures) like") (pre "(atom:entry (atom:author ...) (atom:id ...) ...)") (p "and can be queried either via the provided accessors, or directly if desired.")) (def (sig (procedure "(entry? E)" (id entry?))) (p "Returns true if E is an " (tt "atom:entry") ".")) (def (sig (procedure "(entry=? E1 E2)" (id entry=?))) (p "Returns true if E1 and E2 represent the same " (tt "atom:entry") ".  This tests the entry IDs for equivalence.")) (def (sig (procedure "(entry-authors E)" (id entry-authors)) (procedure "(entry-author E)" (id entry-author))) (p (tt "entry-authors") " returns a list of entry authors; that is, " (tt "atom:author") " children of the entry.  A null list designates no authors.") (p (tt "entry-author") " returns the first entry author, or " (tt "#f") " if none.") (p "Each entry must have at least one author.  If not present as a child of the entry, it must be present in the entry's source feed element (for aggregated content), or in the feed element itself.") (p "Currently, you must handle this manually.  One possibility is:") (pre "(or (entry-author E)\n    (feed-author F))")) (def (sig (procedure "(entry-categories E)" (id entry-categories))) (p "Returns a list of entry categories (" (tt "atom:category") " children), or null.")) (def (sig (procedure "(entry-contributors E)" (id entry-contributors))) (p "Returns a list of entry contributors (" (tt "atom:contributor") " children), or null.")) (def (sig (procedure "(entry-content E)" (id entry-content))) (p "Returns the entry content (the " (tt "atom:content") " child), or " (tt "#f") " if none. Entries need not contain a content element, but if not, they must contain an " (tt "atom:link") " with a " (tt "link-relation") " of \"alternate\".")) (def (sig (procedure "(entry-id E)" (id entry-id))) (p "Returns the entry ID as a string (the text contents of the " (tt "atom:id") " child), or the empty string if no ID.  Atom entries must contain exactly one " (tt "atom:id") " element.")) (def (sig (procedure "(entry-links E)" (id entry-links))) (p "Returns a list of entry links (" (tt "atom:link") " children), or null.")) (def (sig (procedure "(entry-published E)" (id entry-published))) (p "Returns an " (int-link "rfc3339") " datetime string, typically representing the entry's initial creation time or first availability.")) (def (sig (procedure "(entry-rights E)" (id entry-rights))) (p "Returns the entry rights (" (tt "atom:rights") " child), or " (tt "#f") " if none.") (p "If no entry rights are present, the feed's rights are considered to apply.  Currently, you must do this manually:") (pre "(or (entry-rights E)\n    (feed-rights F))")) (def (sig (procedure "(entry-source E)" (id entry-source))) (p "Returns the entry's source feed information (" (tt "atom:source") " child), or " (tt "#f") " if none.") (p "The entry's source feed is used by Atom content aggregators to record information on where the entry came from.")) (def (sig (procedure "(entry-summary E)" (id entry-summary))) (p "Returns the entry summary (" (tt "atom:summary") " child), or " (tt "#f") " if none. The summary must be present if the entry's content is of kind " (tt "'external") " or " (tt "'binary") ".")) (def (sig (procedure "(entry-title E)" (id entry-title))) (p "Returns the entry title (" (tt "atom:title") " child), or " (tt "#f") " if none. Atom entries must contain exactly one " (tt "atom:title") " element.")) (def (sig (procedure "(entry-updated E)" (id entry-updated))) (p "Returns an " (int-link "rfc3339") " string representing the last time the entry was updated. Atom entries must contain exactly one " (tt "atom:updated") " element."))) (section 4 "Persons" (def (sig (record "atom:author" (id atom:author)) (procedure "(author? A)" (id author?)) (procedure "(author-name A)" (id author-name)) (procedure "(author-uri A)" (id author-uri)) (procedure "(author-email A)" (id author-email))) (p "Predicate and accessors for " (tt "atom:author") " elements, representing the authors of the feed or entry.") (dl (dt "name") (dd "(" (i "required by spec") ") the author's name, a string") (dt "uri") (dd "a URI associated with the author, a string") (dt "email") (dd "the author's email address, a string conforming to RFC2822")) (p "Accessors return the empty string if the field is not present.")) (def (sig (record "atom:contributor" (id atom:contributor)) (procedure "(contributor? A)" (id contributor?)) (procedure "(contributor-name A)" (id contributor-name)) (procedure "(contributor-uri A)" (id contributor-uri)) (procedure "(contributor-email A)" (id contributor-email))) (p "Predicate and accessors for " (tt "atom:contributor") " elements, representing contributors to the feed or entry.") (dl (dt "name") (dd "(" (i "required by spec") ") the contributor's name, a string") (dt "uri") (dd "a URI associated with the contributor, a string") (dt "email") (dd "the contributor's email address, a string conforming to RFC2822")) (p "Accessors return the empty string if the field is not present."))) (section 4 "Rights, Summary, Title, Subtitle" (def (sig (record "atom:rights" (id atom:rights)) (procedure "(rights? A)" (id rights?)) (procedure "(rights-type A)" (id rights-type)) (procedure "(rights-text A)" (id rights-text)) (procedure "(rights-xhtml A)" (id rights-xhtml))) (p "Predicate and accessors for " (tt "atom:rights") " elements, which represent human-readable rights information for the feed.  This element is an " (i "atomtextConstruct") ", so it may contain either text (here meaning either plain text or HTML), or XHTML content.") (p (tt "rights-type") " will return the type of content as a symbol:") (dl (dt "'text") (dd "text content") (dt "'html") (dd "html content (considered to be text)") (dt "'xhtml") (dd "XHTML content")) (p (tt "rights-text") " returns the contents of the element as a string, and is what you should use for 'text or 'html types.  HTML will be unescaped for you, but is still returned as a string.  It returns the empty string if no text is present.") (p (tt "rights-xhtml") " returns the XHTML contents of the element as an SXML document.  The root element inside the contents " (i "must") " be an XHTML div (" (tt "xhtml:div") ").  If such an element is not found, it returns " (tt "#f") ".  Note that we return the div as the root of the SXML document, but the Atom spec says you must not consider the div itself part of the content.")) (def (sig (record "atom:summary" (id atom:summary)) (procedure "(summary? A)" (id summary?)) (procedure "(summary-type A)" (id summary-type)) (procedure "(summary-text A)" (id summary-text)) (procedure "(summary-xhtml A)" (id summary-xhtml))) (p "Predicate and accessors for " (tt "atom:summary") " elements, representing an excerpt or abstract for an entry.  For meaning, see " (tt "atom:rights") ".")) (def (sig (record "atom:subtitle" (id atom:subtitle)) (procedure "(subtitle? A)" (id subtitle?)) (procedure "(subtitle-type A)" (id subtitle-type)) (procedure "(subtitle-text A)" (id subtitle-text)) (procedure "(subtitle-xhtml A)" (id subtitle-xhtml))) (p "Predicate and accessors for " (tt "atom:subtitle") " elements, representing a subtitle for the feed.  For meaning, see " (tt "atom:rights") ".")) (def (sig (record "atom:title" (id atom:title)) (procedure "(title? A)" (id title?)) (procedure "(title-type A)" (id title-type)) (procedure "(title-text A)" (id title-text)) (procedure "(title-xhtml A)" (id title-xhtml))) (p "Predicate and accessors for " (tt "atom:title") " elements, representing a title for the feed or entry.  For meaning, see " (tt "atom:rights") "."))) (section 4 "Generators" (def (sig (record "atom:generator" (id atom:generator)) (procedure "(generator? G)" (id generator?)) (procedure "(generator-agent G)" (id generator-agent)) (procedure "(generator-uri G)" (id generator-uri)) (procedure "(generator-version G)" (id generator-version))) (p "Predicate and accessors for " (tt "atom:generator") " elements, which represent the (machine) agent that generated the feed.") (dl (dt "agent") (dd "a human-readable, plain-text name for the generating agent, as a string") (dt "uri") (dd "URI relevant to the agent, as a string") (dt "version") (dd "version of the generating agent, as a string")))) (section 4 "Icons & Logos" (def (sig (record "atom:icon" (id atom:icon)) (procedure "(icon? I)" (id icon?)) (procedure "(icon-uri I)" (id icon-uri))) (p "Predicate and accessors for " (tt "atom:icon") " elements, which represent iconic visual identification for the feed.  " (tt "icon-uri") " returns a URI string which points to the icon image.")) (def (sig (record "atom:logo" (id atom:logo)) (procedure "(logo? I)" (id logo?)) (procedure "(logo-uri I)" (id logo-uri))) (p "Predicate and accessors for " (tt "atom:logo") " elements, which represent visual identification for the feed.  " (tt "logo-uri") " returns a URI string which points to the logo image."))) (section 4 "Categories" (def (sig (record "atom:category" (id atom:category)) (procedure "(category? I)" (id category?)) (procedure "(category-term I)" (id category-term)) (procedure "(category-scheme I)" (id category-scheme)) (procedure "(category-label I)" (id category-label)) (procedure "(category-contents C)" (id category-contents))) (p "Predicate and accessors for " (tt "atom:category") " elements, which represent the categorization of the feed or entry.") (dl (dt "term") (dd "(" (i "required by spec") ") category name, as a string") (dt "scheme") (dd "URI that identifies a categorization scheme, as a string") (dt "label") (dd "human-readable plain-text label for the category, as a string") (dt "contents") (dd "Contents of the category element as an SXML document; undefined by the specification, but it might be useful.")) (p (tt "term") ", " (tt "scheme") " and " (tt "label") " accessors return " (tt "#f") " for missing information instead of the empty string as " (tt "atom:author") " and " (tt "atom:rights") " accessors do.  This inconsistency is probably a bug."))) (section 4 "Links" (def (sig (record "atom:link" (id atom:link)) (procedure "(link? L)" (id link?)) (procedure "(link-uri L)" (id link-uri)) (procedure "(link-relation L)" (id link-relation)) (procedure "(link-type L)" (id link-type)) (procedure "(link-uri-language L)" (id link-uri-language)) (procedure "(link-title L)" (id link-title)) (procedure "(link-length L)" (id link-length)) (procedure "(link-contents L)" (id link-contents))) (p "Predicate and accessors for " (tt "atom:link") " elements, which represent a reference from an entry or feed to a Web resource.") (dl (dt "uri") (dd "(" (i "required by spec") ") the URI (@href) of the link, as a string") (dt "relation") (dd "the link relation type (@rel) as a string (defaults to \"alternate\" if not present)") (dt "title") (dd "human-readable, plain-text title for the link, as a string") (dt "type") (dd "advisory MIME media type for the referenced resource, as a string") (dt "length") (dd "advisory length in octets for the referenced resource, as an exact integer") (dt "uri-language") (dd "an " (link "http://tools.ietf.org/html/rfc3066" "RFC3066") " language tag (@hreflang) for the referenced resource, as a string") (dt "contents") (dd "Contents of the atom:link element as an SXML document; undefined by the specification, and unlikely to be present")) (p "Accessors return " (tt "#f") " if the associate attribute is not present in the document, except for " (tt "link-relation") ", which returns \"alternate\"."))) (section 4 "Source feeds" (def (sig (record "(source? S)" (id source?)) (procedure "(source-authors S)" (id source-authors)) (procedure "(source-author S)" (id source-author)) (procedure "(source-categories S)" (id source-categories)) (procedure "(source-contributors S)" (id source-contributors)) (procedure "(source-generator S)" (id source-generator)) (procedure "(source-icon S)" (id source-icon)) (procedure "(source-id S)" (id source-id)) (procedure "(source-links S)" (id source-links)) (procedure "(source-logo S)" (id source-logo)) (procedure "(source-rights S)" (id source-rights)) (procedure "(source-subtitle S)" (id source-subtitle)) (procedure "(source-title S)" (id source-title)) (procedure "(source-updated S)" (id source-updated))) (p "Predicate and accessors for " (tt "atom:source") " elements, which represent metadata about the source feed from which the containing entry was taken, and are used for feed aggregators.") (p "Accessors have the same meaning as the corresponding accessors " (int-link "#Feeds" "for feeds") "."))) (section 4 "Content" (def (sig (record "atom:content" (id atom:content)) (procedure "content?" (id content?)) (procedure "(content-kind C)" (id content-kind)) (procedure "(content-type C)" (id content-type)) (procedure "(content-source C)" (id content-source)) (procedure "(content-text C)" (id content-text)) (procedure "(content-xhtml C)" (id content-xhtml)) (procedure "(content-xml C)" (id content-xml)) (procedure "(content-contents C)" (id content-contents))) (p "Predicate and accessors for " (tt "atom:content") " elements, which represent feed or entry content.") (p "Atom content types may be one of \"text\", \"html\", \"xhtml\", or any valid MIME type; further, the structure and meaning of the content itself depends on the MIME type.  To simplify this, we normalize the MIME type and we categorize it by kind:") (dl (dt "type") (dd "The indicated MIME media type of the contents.  If the type in the source document is " (tt "text") ", " (tt "html") ", or " (tt "xhtml") ", we normalize this to " (tt "text/plain") ", " (tt "text/html") ", or " (tt "application/xhtml+xml") " respectively. If no type is explicitly indicated, it defaults to " (tt "text/plain") ".") (dt "kind") (dd "The computed \"kind\" of the contents, as a symbol.  This determines how you should handle the content.")) (p (tt "kind") " may be one of the following symbols, which represent") (dl (dt "text") (dd "plain text (" (tt "text/plain") "), the default") (dt "html") (dd "HTML text (" (tt "text/html") ")") (dt "xhtml") (dd "an XHTML div element (" (tt "application/xhtml+xml") ")") (dt "xml") (dd "XML; any MIME type string ending with " (tt "/xml") " or " (tt "+xml") ", or one of the " (link "http://tools.ietf.org/html/rfc3023" "RFC3023") " XML media types") (dt "textual") (dd "text data; any other MIME type starting with " (tt "text/")) (dt "binary") (dd "base64-encoded binary data; any other MIME type other than those mentioned above") (dt "external") (dd "external data pointed to by a URI")) (p "To obtain the content, you should use the proper accessor based on the kind:") (dl (dt "text") (dd (tt "content-text") ", returning a string (or empty string, if no content)") (dt "html") (dd (tt "content-text") ", returning an unescaped HTML string (or empty string)") (dt "xhtml") (dd (tt "content-xhtml") ", returning the XHTML div element as SXML, or " (tt "#f")) (dt "xml") (dd (tt "content-xml") ", returning the root element (whatever it is) as SXML, or " (tt "#f") " [*]") (dt "textual") (dd (tt "content-text") ", returning a string (or empty string)") (dt "binary") (dd (tt "content-text") ", returning a base64-encoded string; use " (int-link "base64") " to decode it") (dt "external") (dd (tt "content-source") ", returning the external URI as a string, or " (tt "#f"))) (p "[*] XML contents conventionally consist of a single root element with no siblings, which is returned directly as " (tt "(node ...)") ".  If more than one such element is found, they are all returned wrapped in a " (tt "*TOP*") " node, like " (tt "(*TOP* (node1 ...) (node2 ...) ...)") ".") (p "For " (tt "xml") ", " (tt "textual") ", " (tt "binary") " and " (tt "external") " kinds, you will then need to refer to the content media " (tt "type") " to actually process it.") (p "And finally the raw content accessor, just in case:") (dl (dt "contents") (dd "Contents of the " (tt "atom:contents") " element as a raw list of nodes.  Does not try to process the content.")))) (section 4 "IDs" (def (sig (record "atom:id" (id atom:id)) (procedure "(id=? id1 id2)" (id id=?))) (p "Atom IDs are represented by plain strings in this egg, rather than " (tt "atom:id") " elements.  ID equality should be tested using " (tt "id=?") ", which is aliased to " (tt "string=?") ".")))) (section 3 "Write interface" (section 4 "Producing an Atom document" (def (sig (procedure "(write-atom-doc doc #!optional (port (current-output-port)))" (id write-atom-doc))) (p "Write the Atom Feed or Atom Entry Document DOC, an SXML document typically created by " (tt "make-atom-doc") ", to PORT.")) (def (sig (procedure "(make-atom-doc root #!key (declare-xml? #t) (encoding \"utf-8\") (headers '()))" (id make-atom-doc))) (p "Create an Atom Feed Document or Atom Entry Document.  ROOT is the " (tt "atom:feed") " or " (tt "atom:entry") " SXML root node, usually created by " (tt "make-feed") " or " (tt "make-entry") ".  Returns a SXML document representing the entire Atom document, which can be written out using " (tt "write-atom-doc") ".") (dl (dt "declare-xml?") (dd "Whether to add an XML declaration to the document, as a boolean value.") (dt "encoding") (dd "The encoding to declare in the (optional) XML declaration, as a string.") (dt "headers") (dd "A list of headers to include in the output document; see below.")) (p "Arbitrary headers may be added to the output document.  These headers should, generally, be XML processing instructions or comments, since the document must consist of only one root node.  For example, you can prepend some stylesheet instructions:") (pre "(write-atom-doc\n (make-atom-doc feed\n  headers: '((*PI* xml-stylesheet\n              \"type=\\\"text/xsl\\\" href=\\\"http://3e8.org/styles/atom.xsl\\\"\")\n             (*PI* xml-stylesheet\n              \"type=\\\"text/css\\\" href=\\\"http://3e8.org/styles/atom.css\\\"\")))\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<?xml-stylesheet type=\"text/xsl\" href=\"http://3e8.org/styles/atom.xsl\"?>\n<?xml-stylesheet type=\"text/css\" href=\"http://3e8.org/styles/atom.css\"?>\n<atom:feed xmlns:atom=\"http://www.w3.org/2005/Atom\">\n ...") (p "Since this procedure just returns a complete SXML document beginning with a *TOP* node, you could instead modify the returned document and add any processing instructions yourself.  " (tt "headers") " is just a convenient way of doing so."))) (section 4 "Feed constructor" (def (sig (procedure "(make-feed #!key KEYS)" (id make-feed))) (p "Make a new " (tt "atom:feed") " element, with KEYS corresponding to child elements. Raises an error if any required elements are missing.") (p "Required elements:") (dl (dt "authors") (dd "a list of atom:author elements, the authors of the feed") (dt "id") (dd "an atom:id string, a permanent, unique absolute IRI identifier") (dt "title") (dd "an atom:title element, a human-readable title for the feed") (dt "updated") (dd "an atom:updated element, an RFC3339 timestamp indicating last update time")) (p "Optional elements:") (dl (dt "categories") (dd "a list of atom:category elements, the feed categories") (dt "contributors") (dd "a list of atom:contributor elements, the contributors to the feed") (dt "generator") (dd "an atom:generator element, the feed generator") (dt "icon") (dd "an atom:icon element, the feed icon") (dt "links") (dd "a list of atom:link elements, the feed links") (dt "logo") (dd "an atom:logo element, the feed logo") (dt "rights") (dd "an atom:rights element, a human-readable description of rights held over the feed") (dt "subtitle") (dd "an atom:subtitle element, a human-readable subtitle for the feed") (dt "entries") (dd "a list of atom:entry elements, the feed entries")) (p "Notes:") (ul (li "It's a good idea to provide an \"alternate\" link for your feed and for each entry, pointing to the source document.  See " (int-link "#Link constructor" "make-link") ".") (li (tt "authors") " may be omitted if all entries contain authorship information (meaning, " (tt "atom:author") " elements as direct children).  " (tt "make-feed") " will detect this case.") (li "If you omit " (tt "generator") ", it defaults to describing this egg.  To completely omit the generator element, which would make me sad, pass " (tt "#f") ".")))) (section 4 "Entry constructor" (def (sig (procedure "(make-entry #!key KEYS)" (id make-entry))) (p "Make a new " (tt "atom:entry") " element, with KEYS corresponding to child elements. Raises an error if any required elements are missing.") (p "Required elements:") (dl (dt "id") (dd "an atom:id string, a permanent, unique absolute IRI identifier for the entry") (dt "title") (dd "an atom:title element, a human-readable title for the entry") (dt "updated") (dd "an atom:updated element, an RFC3339 timestamp indicating last update time")) (p "Optional elements:") (dl (dt "authors") (dd "a list of atom:author elements, the authors of the entry") (dt "categories") (dd "a list of atom:category elements, the entry categories") (dt "contributors") (dd "a list of atom:contributor elements, the contributors to the entry") (dt "content") (dd "an atom:content element, the entry content") (dt "links") (dd "a list of atom:link elements, the entry links") (dt "published") (dd "an atom:published element, an RFC3339 timestamp indicating initial creation time") (dt "rights") (dd "an atom:rights element, a human-readable description of rights held over the entry") (dt "source") (dd "an atom:source element, information about the feed source for content aggregators") (dt "summary") (dd "an atom:summary element, a human-readable summary, abstract or excerpt of the entry")) (p "Additional notes:") (p "Entry author elements are optional as long as the containing feed contains authorship information.  If the feed does not, the entry must contain least one author element.  This will be checked in " (tt "make-feed") ".") (p "Entry elements without a " (tt "atom:content") " element must contain an " (tt "atom:link") " with link-relation \"alternate\".  This is checked in " (tt "make-entry") ".") (p "Entry summary elements are optional unless an atom:content element is present and its content kind is " (tt "'external") " or " (tt "'binary") ".  This is checked in " (tt "make-entry") ".") (p "It is illegal for entries to contain more than one atom:link element with a link-relation of \"alternate\" and the same type and uri-language values. This is " (i "not") " checked in " (tt "make-entry") "."))) (section 4 "Person constructors" (def (sig (procedure "(make-author #!key name uri email)" (id make-author))) (p "Create an atom:author element.") (dl (dt "name") (dd "(" (i "required") ") the author's name, a string") (dt "uri") (dd "a URI associated with the author, a string") (dt "email") (dd "the author's email address, a string conforming to RFC2822"))) (def (sig (procedure "(make-contributor #!key name uri email)" (id make-contributor))) (p "Create an atom:contributor element.") (dl (dt "name") (dd "(" (i "required") ") the contributor's name, a string") (dt "uri") (dd "a URI associated with the contributor, a string") (dt "email") (dd "the contributor's email address, a string conforming to RFC2822")))) (section 4 "Text constructors" (def (sig (procedure "(make-rights contents #!key (type 'text))" (id make-rights)) (procedure "(make-subtitle contents #!key (type 'text))" (id make-subtitle)) (procedure "(make-summary contents #!key (type 'text))" (id make-summary)) (procedure "(make-title contents #!key (type 'text))" (id make-title))) (p "Create a new " (tt "atom:rights") ", " (tt "atom:subtitle") ", " (tt "atom:summary") ", or " (tt "atom:title") " element with CONTENTS of type TYPE. The accepted value for CONTENT varies according to TYPE:") (dl (dt "'text") (dd "(" (i "default") ") a plain text string") (dt "'html") (dd "an HTML string (it will be escaped for you when written to XML)") (dt "'xhtml") (dd "an XHTML div element as SXML")) (pre "> (make-title \"Mesoamerican Deities and You\")\n  ; => (atom:title (@ (type \"text\")) \"Mesoamerican Deities and You\")\n> (make-rights '(xhtml:div \"Copyright (c) 2012 the feathered serpent, \"\n                           (xhtml:b \"Quetzlcoatl\"))\n               type: 'xhtml)\n  ; => (atom:rights (@ (type \"xhtml\"))\n        (xhtml:div \"Copyright (c) 2012 the feathered serpent, \"\n                   (xhtml:b \"Quetzlcoatl\")))\n> (make-summary\n   \"<p>Coping strategies for when your best friend is a \n   <a href='http://en.wikipedia.org/wiki/Quetzalcoatl'>mythical god</a>\n   and just <i>won't move out</i> of your cramped apartment</p>\"\n   type: 'html)\n  ; => (atom:summary (@ (type \"html\"))\n        \"<p>Coping strategies for when your best friend is a\n         <a href='http://en.wikipedia.org/wiki/Quetzalcoatl'>mythical god</a>\n         and just <i>won't move out</i> of your cramped apartment</p>\")"))) (section 4 "Generator constructor" (def (sig (procedure "(make-generator agent #!key uri version)" (id make-generator))) (p "Create an atom:generator element representing the feed generator.") (dl (dt "agent") (dd "a human-readable, plain-text name for the generating agent, as a string") (dt "uri") (dd "URI relevant to the agent, as a string") (dt "version") (dd "version of the generating agent, as a string")))) (section 4 "Icon & Logo constructors" (def (sig (procedure "(make-icon uri)" (id make-icon))) (p "Create an atom:icon element, which represents iconic visual identification for the feed. URI should be a URI string pointing to the icon image.")) (def (sig (procedure "(make-logo uri)" (id make-logo))) (p "Create an atom:logo element, which represents visual identification for the feed. URI should be a URI string pointing to the logo image.  Compare to " (tt "make-icon") "."))) (section 4 "ID constructor" (p "IDs are plain strings, and will be automatically converted to " (tt "atom:id") " elements when passed to " (tt "make-feed") " or " (tt "make-entry") ". No constructors are currently provided.") (p "Each unique entry and feed must contain a unique " (tt "atom:id") ", which must be an absolute URI.  One option is to use the permalink of your entry or feed in this field.  Another is to use a " (link "http://www.faqs.org/rfcs/rfc4151.html" "tag URI") ", which is generally considered more robust.  An example tag URI for an entry might look like:") (pre "tag:domain.org,2012-12-21:/blog/the-mayans-are-coming") (p "Also see " (link "http://tools.ietf.org/html/rfc4287#section-4.2.6" "The \"atom:id\" Element") " in RFC 4287 for details on " (tt "atom:id") " and e.g. " (link "http://diveintomark.org/archives/2004/05/28/howto-atom-id" "these") " " (link "http://starling.us/atom/#GUS-3" "tutorials") " for ideas on ID creation. Note that tag URIs have some important restrictions on which characters are valid.")) (section 4 "Category constructor" (def (sig (procedure "(make-category #!key term scheme label)" (id make-category))) (p "Create an atom:category element representing the feed or entry category.") (dl (dt "term") (dd "(" (i "required") ") category name, as a string") (dt "scheme") (dd "URI that identifies a categorization scheme, as a string") (dt "label") (dd "human-readable plain-text label for the category, as a string")))) (section 4 "Link constructor" (def (sig (procedure "(make-link #!key uri relation title ...)" (id make-link))) (p "Create an atom:link element representing a reference from an entry or feed to a Web resource.") (dl (dt "uri") (dd "(" (i "required") ") the URI (@href) of the link") (dt "relation") (dd "(default \"alternate\") the link relation type (@rel) as a string; see below") (dt "title") (dd "human-readable, plain-text title for the link, as a string") (dt "type") (dd "advisory MIME media type for the referenced resource, as a string or MIME-type symbol") (dt "length") (dd "advisory length in octets for the referenced resource, as an exact integer") (dt "uri-language") (dd "an " (link "http://tools.ietf.org/html/rfc3066" "RFC3066") " language tag (@hreflang) for the referenced resource, as a string")) (p "The five common link relations are:") (dl (dt "\"alternate\"") (dd "an alternate version of this resource.  For a feed, it might be a link to your webpage; for an entry, it might be a permalink to your blog entry, with " (tt "type: 'html") ".  Feed readers work better when you include such a link.") (dt "\"self\"") (dd "a link to this Atom document, usually the URI to your Atom feed with " (tt "type: 'atom") ".") (dt "\"related\"") (dd "a related link") (dt "\"enclosure\"") (dd "identifies a \"potentially large\" external resource; you should provide " (tt "length:")) (dt "\"via\"") (dd "a link to the source of the information")) (p "For " (tt "type:") ", the currently known MIME-type symbol shortcuts are 'text, 'html, 'xhtml, and 'atom.  Otherwise, use the full type name as a string."))) (section 4 "Source constructor" (def (sig (procedure "(make-source #!key authors categories contributors ...)" (id make-source))) (p "Create an atom:source element representing the source feed from which the containing entry was taken.  This is used by content aggregators to preserve metadata about their source feeds.") (p "See the feed constructor " (int-link "#Feed constructor" "make-feed") " for the meaning of these elements, and then see " (link "http://tools.ietf.org/html/rfc4287" "RFC 4287") " for what metadata you would typically preserve."))) (section 4 "Content constructor" (def (sig (procedure "(make-content content #!key (type 'text) source)" (id make-content))) (p "Create an atom:content element representing the content of an entry. Acceptable values for CONTENT vary according to the value of TYPE.") (dl (dt "type") (dd "(default " (tt "'text") ") the MIME media type of the content as a string, or one of the shorthand symbols 'text, 'html or 'xhtml.  See below.") (dt "source") (dd "a source URI the client must dereference to obtain the content, as a string.  In this case, CONTENT is ignored and the element content will be empty.  Use a dummy value for content such as " (tt "#f") " or the empty string.")) (p "The content type may be:") (dl (dt "'text or \"text/plain\"") (dd "a human-readable, plain text string") (dt "'html or \"text/html\"") (dd "a string containing HTML markup (which will be escaped for you)") (dt "'xhtml or \"application/xhtml+xml\"") (dd "an " (tt "xhtml:div") " element") (dt "an XML MIME type") (dd "an SXML document consisting of a single root node.  An XML MIME type is any MIME type string ending with \"/xml\" or \"+xml\", or one of the " (link "http://tools.ietf.org/html/rfc3023" "RFC3023") " XML media types") (dt "a textual MIME type") (dd "a text string; a textual MIME type is any MIME type string starting with \"text/\"") (dt "any other MIME type") (dd "the content is considered binary, and the user must pass a " (int-link "base64") " encoded string as the content."))))) (section 3 "Miscellany" (def (sig (parameter "(atom-ns-prefixes)" (id atom-ns-prefixes))) (p "An alist of XML namespace prefixes used when reading or writing feeds. Most known namespaces relevant to Atom are included, so it is normally not necessary to touch this unless you come across an unusual namespace.") (p "A symptom of a missing namespace is that on read, some feed elements are qualified with a full URI instead of a prefix abbreviation, and on write that some are qualified with namespace 'prfx1:' or the like."))) (section 3 "Examples" (p "Creating the \"extensive\" example feed from RFC4287:") (highlight scheme "(use atom rfc3339)\n(write-atom-doc\n (make-atom-doc\n  (make-feed\n   title: (make-title \"dive into mark\")\n   subtitle: (make-subtitle \"A <em>lot</em> of effort went into making this effortless\"\n\t\t\t    type: 'html)\n   updated: \"2005-07-31T12:29:29Z\"\n   id: \"tag:example.org,2003:3\"\n   links: (list (make-link type: 'html\n\t\t\t   uri-language: \"en\"\n\t\t\t   uri: \"http://example.org\")\n\t\t(make-link relation: \"self\"\n\t\t\t   type: \"application/atom+xml\"\n\t\t\t   uri: \"http://example.org/feed.atom\"))\n   rights: (make-rights \"Copyright (c) 2003, Mark Pilgrim\")\n   generator: (make-generator \"Example Toolkit\"\n\t\t\t      uri: \"http://www.example.com\"\n\t\t\t      version: \"1.0\")\n   entries: (list\n\t     (make-entry\n\t      title: (make-title \"Atom draft-07 snapshot\")\n\t      links: (list (make-link type: 'html\n\t\t\t\t      uri: \"http://example.org/2005/04/02/atom\")\n\t\t\t   (make-link relation: \"enclosure\"\n\t\t\t\t      type: \"audio/mpeg\"\n\t\t\t\t      length: 1337\n\t\t\t\t      uri: \"http://example.org/audio/ph34r_my_podcast.mp3\"))\n\t      id: \"tag:example.org,2003:3.2397\"\n\t      updated: (rfc3339->string (make-rfc3339 2005 07 31 12 29 29 0 0))\n\t      published: (rfc3339->string (make-rfc3339 2003 12 13 08 29 29 0 (* 3600 4)))\n\t      authors: (list (make-author name: \"Mark Pilgrim\"\n\t\t\t\t\t  uri: \"http://example.org\"\n\t\t\t\t\t  email: \"f8dy@example.com\"))\n\t      contributors: (list (make-contributor\n\t\t\t\t   name: \"Sam Ruby\")\n\t\t\t\t  (make-contributor\n\t\t\t\t   name: \"Joe Gregorio\"))\n\t      ;; xml:base, xml:lang cannot be handled yet\n\t      content: (make-content\n\t\t\t'(xhtml:div\n\t\t\t  (xhtml:p (xhtml:i \"[Update: The Atom draft is finished.]\")))\n\t\t\ttype: 'xhtml))))))") (highlight scheme "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<feed xmlns=\"http://www.w3.org/2005/Atom\">\n  <generator uri=\"http://www.example.com\" \n             version=\"1.0\">Example Toolkit</generator>\n  <id>tag:example.org,2003:3</id>\n  <link href=\"http://example.org\" rel=\"alternate\" \n        type=\"text/html\" hreflang=\"en\" />\n  <link href=\"http://example.org/feed.atom\" \n        rel=\"self\" type=\"application/atom+xml\" />\n  <rights type=\"text\">Copyright (c) 2003, Mark Pilgrim</rights>\n  <subtitle type=\"html\">A &lt;em&gt;lot&lt;/em&gt; of effort\n    went into making this effortless</subtitle>\n  <title type=\"text\">dive into mark</title>\n  <updated>2005-07-31T12:29:29Z</updated>\n  <entry>\n    <author>\n      <name>Mark Pilgrim</name>\n      <uri>http://example.org</uri>\n      <email>f8dy@example.com</email>\n    </author>\n    <contributor>\n      <name>Sam Ruby</name>\n    </contributor>\n    <contributor>\n      <name>Joe Gregorio</name>\n    </contributor>\n    <content type=\"xhtml\">\n      <div xmlns=\"http://www.w3.org/1999/xhtml\">\n        <p>\n          <i>[Update: The Atom draft is finished.]</i>\n        </p>\n      </div>\n    </content>\n    <id>tag:example.org,2003:3.2397</id>\n    <published>2003-12-13T08:29:29-04:00</published>\n    <title type=\"text\">Atom draft-07 snapshot</title>\n    <updated>2005-07-31T12:29:29Z</updated>\n    <link href=\"http://example.org/2005/04/02/atom\" \n          rel=\"alternate\" type=\"text/html\" />\n    <link href=\"http://example.org/audio/ph34r_my_podcast.mp3\" \n          rel=\"enclosure\" type=\"audio/mpeg\" length=\"1337\" />\n  </entry>\n</feed>")) (section 3 "Known Issues" (ul (li (tt "xml:base") " and " (tt "xml:lang") " are not supported, either on reading or writing. You can add these attributes manually to the output document for writing, but for reading the parser will not understand them and relative URLs will not be resolved.") (li "Elements outside the " (tt "atom:") " namespace, such as " (tt "feedburner:") ", will repeatedly declare their prefix mapping in the element itself instead of in the root element, leading to a large amount of redundant verbosity.") (li "Dealing with extension elements and attributes is a bit painful as you must manipulate the SXML directly."))) (section 3 "About this egg" (section 4 "Author" (p (link "http://3e8.org" "Jim Ursetto"))) (section 4 "Version history" (dl (dt "0.1.1") (dd "Use default namespace for atom and xhtml") (dt "0.1") (dd "Initial release")) (p "Experimental code may be available via `git clone git://3e8.org/atom.git`.")) (section 4 "License" (p "BSD.")))))
((tags "egg") (section 2 "graph-dominators" (p "Find immediate dominators in a directed graph.") (toc)) (section 2 "Usage" (p "(require-extension graph-dominators)")) (section 2 "Documentation" (p "In a control-flow graph (CFG), block M dominates block N if every path from the entry that reaches block N has to pass through block M. The entry block dominates all blocks.") (p "Block M immediately dominates block N if M dominates N, and there is no intervening block P such that M dominates P and P dominates N. In other words, M is the last dominator on any path from entry to N. Each block has a unique immediate dominator, if it has any at all.") (p "This fast dominator code is based upon Lengauer and Tarjan, " (i "A Fast Algorithm for Finding Dominators in a Flowgraph") ", ACM TOPLAS 1:1, pp. 121--141, July 1979. It runs in time " (tt "O(|E|\\log|V|)") ", where " (tt "|E|") "is the number of edges and " (tt "|V|") " is the number of vertices. A smaller time bound of " (tt "O(|E|\\alpha(|E|,|V|))") ", where " (tt "alpha") " is the inverse of Ackerman's function, can be achieved with more complex versions of the internal " (tt "link!") " and " (tt "eval!") " procedures.") (section 3 "Procedures" (def (sig (procedure "graph-find-dominators-quickly!:: G -> UNDEFINED" (id graph-find-dominators-quickly!))) (p "Computes the dominator tree of the given rooted, directed graph. When done, the meta-data field of each node will contain its immediate dominator. It assumes that the meta-data slot for each node contains a list, and modifies the car of that list. Requires that the list initially contain " (tt "#f") " as its car value.")) (def (sig (procedure "graph-find-dominators-slowly!:: G -> UNDEFINED" (id graph-find-dominators-slowly!))) (p "The fast dominator algorithm is difficult to prove correct, so this procedure is provided in order to check its results.  The slow algorithm, which runs in time " (tt "O(|E||V|)") ", is adapted from Aho and Ullman, " (i "The Theory of Parsing, Translation, and Compiling") ", Prentice-Hall, 1973, p. 916.")))) (section 2 "Examples" (pre ";; example adapted from graph example in the Boost library documentation\n(require-extension srfi-1)\n(require-extension digraph)\n(require-extension graph-dominators)\n\n(define g (make-digraph 'depgraph \"dependency graph\"))\n\n(define used-by\n   (list \n     (cons 'dax_h 'foo_cpp) (cons 'dax_h 'bar_cpp) (cons 'dax_h 'yow_h)\n     (cons 'yow_h 'bar_cpp) (cons 'yow_h 'zag_cpp) (cons 'boz_h 'bar_cpp)\n     (cons 'boz_h 'zig_cpp) (cons 'boz_h 'zag_cpp) \n     (cons 'foo_cpp 'foo_o) (cons 'foo_o 'libfoobar_a) \n     (cons 'bar_cpp 'bar_o) (cons 'bar_o 'libfoobar_a) \n     (cons 'libfoobar_a 'libzigzag_a)  (cons 'zig_cpp 'zig_o) \n     (cons 'zig_o 'libzigzag_a) (cons 'libfoobar_a 'dax_h) (cons 'zag_cpp 'zag_o) \n     (cons 'zag_o 'libzigzag_a) (cons 'libzigzag_a 'killerapp)))\n\n\n(define node-list (delete-duplicates \n\t\t   (concatenate (list (map car used-by) (map cdr used-by)))))\n\n(define node-ids (list-tabulate (length node-list) values))\n \n(for-each (lambda (i n) ((g 'add-node!) i (list #f n))) node-ids node-list)\n(define node-map (zip node-list node-ids))\n\n(for-each (lambda (e) \n\t    (match e ((ni . nj) (let ((i (car (alist-ref ni node-map)))\n\t\t\t\t      (j (car (alist-ref nj node-map))))\n\t\t\t\t  ((g 'add-edge!) (list i j (format \"~A->~A\" ni nj)))))\n\t\t   (else (error \"invalid edge \" e))))\n\t  used-by)\n\n(graph-find-dominators-quickly! g)\n\n")) (section 2 "About this egg" (section 3 "Author" (p "Richard Kelsey; ported to Chicken by " (int-link "/users/ivan-raikov" "Ivan Raikov"))) (section 3 "Version history" (dl (dt "1.5") (dd "Documentation converted to wiki format") (dt "1.4") (dd "Added matchable to list of required eggs") (dt "1.3") (dd "Ported to Chicken 4") (dt "1.0") (dd "Initial release"))) (section 3 "License" (pre "Copyright by Richard Kelsey.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n\n- Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n\n- Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following\ndisclaimer in the documentation and/or other materials provided\nwith the distribution.\n\n- Neither name of the copyright holders nor the names of its\ncontributors may be used to endorse or promote products derived\nfrom this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND THE\nCONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,\nINCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR THE\nCONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\nUSE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED\nAND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN\nANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE."))))
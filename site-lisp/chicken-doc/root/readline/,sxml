((tags "egg") (toc) (section 2 "readline" (p "A binding for the GNU readline library.")) (section 2 "Interface" (def (sig (procedure "(gnu-readline PROMPT)" (id gnu-readline))) (p "Reads a line using the GNU readline() function and returns a string. PROMPT should also be a string.")) (def (sig (procedure " (gnu-readline-clear-history)" (id gnu-readline-clear-history))) (p "Clears the history buffer.")) (def (sig (procedure " (gnu-readline-read-history FILENAME)" (id gnu-readline-read-history))) (p "Reads the history buffer from the file FILENAME (or ~/.history if FILENAME is #f). Returns 0 on success.")) (def (sig (procedure " (gnu-readline-write-history FILENAME)" (id gnu-readline-write-history))) (p "Writes the history buffer to the file FILENAME (or ~/.history if FILENAME is #f). Returns 0 on success.  Do not use unless you want to clobber simultaneous sessions.")) (def (sig (procedure " (gnu-readline-append-history FILENAME)" (id gnu-readline-append-history))) (p "Appends only the new entries to FILENAME.")) (def (sig (procedure " (gnu-readline-new-lines)" (id gnu-readline-new-lines))) (p "Returns the number of new entries (input lines from this session).")) (def (sig (procedure " (gnu-readline-truncate-history FILENAME NUMLINES)" (id gnu-readline-truncate-history))) (p "Truncates the history file FILENAME (or ~/.history if FILENAME is #f) to NUMLINES lines. Returns 0 on success.")) (def (sig (procedure " (gnu-history-install-file-manager FILENAME [NUMLINES])" (id gnu-history-install-file-manager))) (p "If you also want to make the command history span sessions, add the following:") (p (tt "(gnu-history-install-file-manager (string-append (or (getenv \"HOME\") \".\") \"/.csi.history\"))")) (p "By default this will save 1000 lines of history between sessions (it will prune the history file to 1000 lines at startup). For a different history size, pass the desired number of lines as the (optional) second argument to gnu-history-install-file-manager. If #f is passed in, no history-file-pruning will take place.")) (def (sig (procedure " (make-gnu-readline-port [PROMPT] [PROMPT2])" (id make-gnu-readline-port))) (p "Returns an input-port that uses the GNU readline facility. If PROMPT is not given, the value returned by (repl-prompt) is used for generating the current prompt (see the Chicken manual for more details about repl-prompt). PROMPT2 is used when there are still unclosed parenthesis; if not given, an appropriate default is generated.")) (def (sig (procedure " (gnu-readline-set-bounce-ms TIME)" (id gnu-readline-set-bounce-ms))) (p "Changes the time that the cursor spends bouncing on the matching parenthesis - the default 500ms. To turn bouncing off completely, set to zero.")) (def (sig (procedure " (gnu-readline-parse-and-bind CONFIG)" (id gnu-readline-parse-and-bind))) (p "Passes string CONFIG straight to the readline library for parsing (see the readline manual page for details).") (p "This extension supports static linking."))) (section 2 "Examples" (pre "% csi -quiet\n#;1> (use readline)\n#;2> (current-input-port (make-gnu-readline-port))\n#;3>") (p "To get csi to keep a history use the following (in your ~/.csirc file):") (pre "(use readline regex)\n(current-input-port (make-gnu-readline-port))\n(gnu-history-install-file-manager (string-append (or (getenv \"HOME\") \".\") \"/.csi.history\"))") (p "NB: you must create the " (tt ".csi.history") " file, " (tt "readline") " will not create it:") (pre "% touch ~/.csi.history") (p "To set readline to behave somewhat like vi:") (pre "(gnu-readline-parse-and-bind \"set editing-mode vi\")")) (section 2 "Installation problems" (p "This extension requires GNU readline.  You will receive errors if you don't have the C header files for your readline installation or if you use some versions of the BSD readline alternative, libedit.") (section 3 "Mac OS X" (section 4 "10.6 (Snow Leopard)" (p "10.6 ships with a much older version of readline than this egg expects.  Fortunately, recent versions of " (tt "readline") " in MacPorts work.  " (tt "readline @6.0.000_2+darwin") " is confirmed to work with 10.6.2.  First install the " (tt "readline") " package from MacPorts and then do this:") (pre "export CSC_OPTIONS=\"-I/opt/local/include -L/opt/local/lib\"") (p "...before the " (tt "chicken-install") ". If this doesn't work, try an additional") (pre "export LIBRARY_PATH=/opt/local/lib")) (section 4 "Pre-10.6" (p "Mac OS X versions prior to 10.5 (Leopard) ship with an older " (tt "readline") ", causing the following error when you install this egg:") (pre "/usr/bin/ld: Undefined symbols:\n_history_truncate_file") (p "To fix this, install a copy of GNU readline in " (tt "/usr/local/lib") " or, if you're using MacPorts, symlink it:") (pre "ln -s /opt/local/lib/libreadline.dylib /usr/local/lib") (p "DO NOT modify the readline link in " (tt "/usr/lib") "."))) (section 3 "Debian GNU/Linux and derivatives (such as Ubuntu)" (p "In the case of Debian, you should probably install the package " (tt "libreadline-dev") ", which is not installed by default."))) (section 2 "About this egg" (section 3 "Author" (p "Tony Garnock-Jones")) (section 3 "Version history" (dl (dt "1.992") (dd "fixed buggy fixes made by felix (thanks to ewfalor)") (dt "1.991") (dd "fixed buggy setup script (thanks to ewfalor)") (dt "1.99") (dd "Ported to Chicken 4") (dt "1.97") (dd "Fixed an old typo that could conceivably cause errors [elf]") (dt "1.96") (dd "Fixed build process for real this time (ensuring tests for lib availability actually do set, etc.) [elf]") (dt "1.95") (dd "Fixed build process [elf]") (dt "1.94") (dd "Added backtraces to control-c breaks [elf]") (dt "1.93") (dd "Fixed history so that multiple sessions dont clobber each other. [elf]") (dt "1.92") (dd "Added proper signal handling [elf]") (dt "1.91") (dd "Added support for static linking [felix]") (dt "1.9") (dd "Ignores duplicate history entries [Thanks to Toby Butzon]") (dt "1.8") (dd "Empty lines are not added to history [Thanks to Dan Muresan]") (dt "1.7") (dd "Added parenthesis bouncing, a new auto-complete [Heath Johns]") (dt "1.6") (dd "Export *completion-entry-function* to support autocomplete [Alejandro Forero Cuervo]") (dt "1.5") (dd "prompt argument to make-gnu-readline-port is optional [felix]") (dt "1.4") (dd "Replaced use of (end-of-file) with #!eof") (dt "1.3") (dd "Checks more possible libraries to link with at build time [Thanks to Peter Bex]") (dt "1.2") (dd "Adapted to new setup scheme.") (dt "1.1") (dd "More features, changed license to GPL, links with either libtermcap or libncurses.") (dt "1.0") (dd "Initial release"))) (section 3 "License" (pre "Copyright (c) 2002 Tony Garnock-Jones\nCopyright (c) 2006 Heath Johns (paren bouncing and auto-completion code)\n\nThis program is free software; you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation; either version 2 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program; if not, write to the Free Software\nFoundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA"))))
(index ("gnu-readline" 0) ("gnu-readline-clear-history" 173) ("gnu-readline-read-history" 294) ("gnu-readline-write-history" 500) ("gnu-readline-append-history" 769) ("gnu-readline-new-lines" 916) ("gnu-readline-truncate-history" 1069) ("gnu-history-install-file-manager" 1298) ("make-gnu-readline-port" 1937) ("gnu-readline-set-bounce-ms" 2374) ("gnu-readline-parse-and-bind" 2617))
(def (sig (procedure "(gnu-readline PROMPT)" (id gnu-readline))) (p "Reads a line using the GNU readline() function and returns a string. PROMPT should also be a string."))
(def (sig (procedure " (gnu-readline-clear-history)" (id gnu-readline-clear-history))) (p "Clears the history buffer."))
(def (sig (procedure " (gnu-readline-read-history FILENAME)" (id gnu-readline-read-history))) (p "Reads the history buffer from the file FILENAME (or ~/.history if FILENAME is #f). Returns 0 on success."))
(def (sig (procedure " (gnu-readline-write-history FILENAME)" (id gnu-readline-write-history))) (p "Writes the history buffer to the file FILENAME (or ~/.history if FILENAME is #f). Returns 0 on success.  Do not use unless you want to clobber simultaneous sessions."))
(def (sig (procedure " (gnu-readline-append-history FILENAME)" (id gnu-readline-append-history))) (p "Appends only the new entries to FILENAME."))
(def (sig (procedure " (gnu-readline-new-lines)" (id gnu-readline-new-lines))) (p "Returns the number of new entries (input lines from this session)."))
(def (sig (procedure " (gnu-readline-truncate-history FILENAME NUMLINES)" (id gnu-readline-truncate-history))) (p "Truncates the history file FILENAME (or ~/.history if FILENAME is #f) to NUMLINES lines. Returns 0 on success."))
(def (sig (procedure " (gnu-history-install-file-manager FILENAME [NUMLINES])" (id gnu-history-install-file-manager))) (p "If you also want to make the command history span sessions, add the following:") (p (tt "(gnu-history-install-file-manager (string-append (or (getenv \"HOME\") \".\") \"/.csi.history\"))")) (p "By default this will save 1000 lines of history between sessions (it will prune the history file to 1000 lines at startup). For a different history size, pass the desired number of lines as the (optional) second argument to gnu-history-install-file-manager. If #f is passed in, no history-file-pruning will take place."))
(def (sig (procedure " (make-gnu-readline-port [PROMPT] [PROMPT2])" (id make-gnu-readline-port))) (p "Returns an input-port that uses the GNU readline facility. If PROMPT is not given, the value returned by (repl-prompt) is used for generating the current prompt (see the Chicken manual for more details about repl-prompt). PROMPT2 is used when there are still unclosed parenthesis; if not given, an appropriate default is generated."))
(def (sig (procedure " (gnu-readline-set-bounce-ms TIME)" (id gnu-readline-set-bounce-ms))) (p "Changes the time that the cursor spends bouncing on the matching parenthesis - the default 500ms. To turn bouncing off completely, set to zero."))
(def (sig (procedure " (gnu-readline-parse-and-bind CONFIG)" (id gnu-readline-parse-and-bind))) (p "Passes string CONFIG straight to the readline library for parsing (see the readline manual page for details).") (p "This extension supports static linking."))

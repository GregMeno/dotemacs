((tags "egg") (section 2 "specialized-io" (section 3 "Description" (p "Fast I/O procedures specialized for different types. Instead of using the Scheme procedure " (tt "read") ", specialized procedures can be used, so:") (ul (li "I/O is faster, particularly if you have loaded the " (tt "numbers") " egg") (li "There is no need to check the result of " (tt "read")))) (section 3 "Author" (p "Jeronimo Pellegrini")) (section 3 "Requirements" (ul (li (link "http://wiki.call-cc.org/eggref/4/numbers" "numbers"))) (section 4 "Example" (highlight scheme "(use specialized-io)\n\n(let ((v (read-flonum (current-input-port))))\n  (write-flonum (fp* 2.5 v) (current-output-port)))") (p "Note that you can use " (tt "fp*") " with a value returned from " (tt "read-flonum") " (it's guaranteed to be a flonum)."))) (section 3 "Documentation" (def (sig (procedure "(read-fixnum PORT)" (id read-fixnum)) (procedure "(read-flonum PORT)" (id read-flonum)) (procedure "(read-complex PORT)" (id read-complex)) (procedure "(read-one-char PORT)" (id read-one-char))) (p "These procedures read one object of a specific type from an input-port. There are no runtime checks in the Scheme way; the procedures will just call " (tt "error") " if anything goes wront (" (tt "EOF") ", lexical error etc).")) (def (sig (procedure "(write-fixnum VALUE PORT)" (id write-fixnum)) (procedure "(write-flonum VALUE PORT)" (id write-flonum)) (procedure "(write-complex VALUE PORT)" (id write-complex)) (procedure "(write-one-char VALUE PORT)" (id write-one-char))) (p "These procedures write one object of a specific type to an output-port. There are no runtime checks in the Scheme way; the procedures will just call " (tt "error") " if anything goes wront (" (tt "EOF") ", lexical error etc).")) (def (sig (procedure "(write-one-string STRING PORT)" (id write-one-string))) (p "This procedure writes a string to the output port.")) (def (sig (procedure "(read-string-until CHAR PORT)" (id read-string-until)) (procedure "(read-string-between LEFTCHAR RIGHTCHAR PORT)" (id read-string-between))) (p "These procedures read a string from the input port. " (tt "read-string-until") " will read from the current position of the stream until " (tt "CHAR") " is found (and " (tt "CHAR") " will be included in the resulting string). " (tt "read-string-between") " will first search for " (tt "LEFTCHAR") " then read until " (tt "RIGHTCHAR") " is found.")) (def (sig (parameter "specialized-io-error" (id specialized-io-error))) (p "This variable should be bound to a procedure that will be called when parsing fails. By default it's bound to " (tt "error") ".")) (def (sig (parameter "+specialized-io-string-buffer-size+" (id +specialized-io-string-buffer-size+))) (p "This is the size of the buffer in which strings are read. When the buffer becomes full, its size is doubled. This default value is 500."))) (section 3 "More examples" (highlight scheme "(use specialized-io)\n\n(let ((n (read-fixnum port)))\n  (do ((i 0 (fx+ 1 i)))\n      ((fx= i n))\n    (f64vector-set! vec i (read-flonum port))))")) (section 3 "Changelog" (ul (li "1.1 String reading and writing added") (li "1.0 Initial Release"))) (section 3 "License" (pre " Copyright (c) 2010, Jeronimo C. Pellegrini\n All rights reserved.\n \n Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following\n conditions are met:\n \n   Redistributions of source code must retain the above copyright notice, this list of conditions and the following\n     disclaimer. \n   Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following\n     disclaimer in the documentation and/or other materials provided with the distribution. \n   Neither the name of the author nor the names of its contributors may be used to endorse or promote\n     products derived from this software without specific prior written permission. \n \n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS\n OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY\n AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR\n CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n POSSIBILITY OF SUCH DAMAGE."))))
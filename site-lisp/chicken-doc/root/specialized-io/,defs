(index ("read-fixnum" 0) ("read-flonum" 0) ("read-complex" 0) ("read-one-char" 0) ("write-fixnum" 450) ("write-flonum" 450) ("write-complex" 450) ("write-one-char" 450) ("write-one-string" 932) ("read-string-until" 1068) ("read-string-between" 1068) ("specialized-io-error" 1584) ("+specialized-io-string-buffer-size+" 1791))
(def (sig (procedure "(read-fixnum PORT)" (id read-fixnum)) (procedure "(read-flonum PORT)" (id read-flonum)) (procedure "(read-complex PORT)" (id read-complex)) (procedure "(read-one-char PORT)" (id read-one-char))) (p "These procedures read one object of a specific type from an input-port. There are no runtime checks in the Scheme way; the procedures will just call " (tt "error") " if anything goes wront (" (tt "EOF") ", lexical error etc)."))
(def (sig (procedure "(write-fixnum VALUE PORT)" (id write-fixnum)) (procedure "(write-flonum VALUE PORT)" (id write-flonum)) (procedure "(write-complex VALUE PORT)" (id write-complex)) (procedure "(write-one-char VALUE PORT)" (id write-one-char))) (p "These procedures write one object of a specific type to an output-port. There are no runtime checks in the Scheme way; the procedures will just call " (tt "error") " if anything goes wront (" (tt "EOF") ", lexical error etc)."))
(def (sig (procedure "(write-one-string STRING PORT)" (id write-one-string))) (p "This procedure writes a string to the output port."))
(def (sig (procedure "(read-string-until CHAR PORT)" (id read-string-until)) (procedure "(read-string-between LEFTCHAR RIGHTCHAR PORT)" (id read-string-between))) (p "These procedures read a string from the input port. " (tt "read-string-until") " will read from the current position of the stream until " (tt "CHAR") " is found (and " (tt "CHAR") " will be included in the resulting string). " (tt "read-string-between") " will first search for " (tt "LEFTCHAR") " then read until " (tt "RIGHTCHAR") " is found."))
(def (sig (parameter "specialized-io-error" (id specialized-io-error))) (p "This variable should be bound to a procedure that will be called when parsing fails. By default it's bound to " (tt "error") "."))
(def (sig (parameter "+specialized-io-string-buffer-size+" (id +specialized-io-string-buffer-size+))) (p "This is the size of the buffer in which strings are read. When the buffer becomes full, its size is doubled. This default value is 500."))

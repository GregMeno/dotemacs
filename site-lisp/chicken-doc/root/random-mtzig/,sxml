((tags "egg") (section 2 "random-mtzig" (p "An implementation of the MT19937 random number generator with Marsaglia and Tang's Ziggurat algorithm to generate random numbers from a non-uniform distribution.") (toc)) (section 2 "Usage" (p "(require-extension random-mtzig)")) (section 2 "Documentation" (p "The " (tt "random-mtzig") " library is Chicken Scheme wrapper for the MT19937 random number generator used in " (link "http://www.gnu.org/software/octave/" "GNU Octave") ".") (section 3 "Procedures" (def (sig (procedure "random-mtzig:init ::  [SEED] -> STATE" (id random-mtzig:init))) (p "Creates an initial seed array and returns the corresponding generator state vector. If the optional " (tt "SEED") " is not specified, the generator is initialized with a seed from " (tt "/dev/urandom") " or with the current time in seconds. If " (tt "SEED") " can be an integer or an " (tt "u32vector") ".")) (def (sig (procedure "random-mtzig:random! :: STATE -> INTEGER" (id random-mtzig:random!))) (p "Returns a random integer value between 0 and the largest machine-representable unsigned integer on the current platform.")) (def (sig (procedure "random-mtzig:randu! :: STATE -> NUMBER" (id random-mtzig:randu!))) (p "Returns a random value from a uniform distribution on the interval " (tt "(0, 1)") ".")) (def (sig (procedure "random-mtzig:randn! :: STATE -> NUMBER" (id random-mtzig:randn!))) (p "Returns a random value from a normal (Gaussian) distribution, using Marsaglia and Tsang's Ziggurat algorithm to transform a uniform distribution into a normal one.")) (def (sig (procedure "random-mtzig:rande! :: STATE -> NUMBER" (id random-mtzig:rande!))) (p "Returns a random value from an exponential distribution, using Marsaglia and Tsang's Ziggurat algorithm to transform a uniform distribution into an exponential one.")) (def (sig (procedure "random-mtzig:randb! :: N * P * STATE -> NUMBER" (id random-mtzig:randb!))) (p "Returns a random value from a binomial distribution with " (tt "N") " experiments and probability " (tt "P") ".")) (def (sig (procedure "random-mtzig:f64vector-randu! :: N * STATE -> F64VECTOR" (id random-mtzig:f64vector-randu!))) (p "Returns an SRFI-4 " (tt "f64") " vector of random values from a uniform distribution on the interval " (tt "(0, 1)") ".")) (def (sig (procedure "random-mtzig:f64vector-randn! :: N * STATE -> F64VECTOR" (id random-mtzig:f64vector-randn!))) (p "Returns an SRFI-4 " (tt "f64") " vector of random values from a normal (Gaussian) distribution, using Marsaglia and Tsang's Ziggurat algorithm to transform a uniform distribution into a normal one.")) (def (sig (procedure "random-mtzig:f64vector-rande! :: N * STATE -> F64VECTOR" (id random-mtzig:f64vector-rande!))) (p "Returns an SRFI-4 " (tt "f64") " vector of random values from am exponential distribution, using Marsaglia and Tsang's Ziggurat algorithm to transform a uniform distribution into an exponential one.")) (def (sig (procedure "random-mtzig:f64vector-randb! :: N * P * XN * STATE -> F64VECTOR" (id random-mtzig:f64vector-randb!))) (p "Returns an SRFI-4 " (tt "f64") " vector of random values from a binomial distribution with " (tt "N") " experiments and probability " (tt "P") ".")) (def (sig (procedure "random-mtzig:f32vector-randu! :: N * STATE -> F64VECTOR" (id random-mtzig:f32vector-randu!))) (p "Returns an SRFI-4 " (tt "f32") " vector of random values from a uniform distribution on the interval " (tt "(0, 1)") ".")) (def (sig (procedure "random-mtzig:f32vector-randn! :: N * STATE -> F64VECTOR" (id random-mtzig:f32vector-randn!))) (p "Returns an SRFI-4 " (tt "f32") " vector of random values from a normal (Gaussian) distribution, using Marsaglia and Tsang's Ziggurat algorithm to transform a uniform distribution into a normal one.")) (def (sig (procedure "random-mtzig:f32vector-rande! :: N * STATE -> F64VECTOR" (id random-mtzig:f32vector-rande!))) (p "Returns an SRFI-4 " (tt "f32") " vector of random values from am exponential distribution, using Marsaglia and Tsang's Ziggurat algorithm to transform a uniform distribution into an exponential one.")) (def (sig (procedure "random-mtzig:f32vector-randb! :: N * P * XN * STATE -> F64VECTOR" (id random-mtzig:f32vector-randb!))) (p "Returns an SRFI-4 " (tt "f32") " vector of random values from a binomial distribution with " (tt "N") " experiments and probability " (tt "P") ".")))) (section 2 "Examples" (pre "csi> (require-extension random-mtzig)\ncsi> (define st (random-mtzig:init 24))\ncsi> (random-mtzig:f64vector-randu! 20 st)\n#f64(0.960017303335919 0.699512049949576 0.999867292623879 0.220067299782852 \n0.361056353964058 0.739840990209437 0.996455725089097 0.316346977790608 \n0.136544579823525 0.3839800101516 0.320519283565193 0.366414753083515 \n0.709651562588127 0.900142430523374 0.534115439197721 0.247293764909945 \n0.671806562577075 0.561729107313138 0.54255987670951 0.893447603694901)")) (section 2 "About this egg" (section 3 "Author" (p (int-link "/users/ivan-raikov" "Ivan Raikov"))) (section 3 "Version history" (dl (dt "2.9") (dd "Documentation converted to wiki format") (dt "2.8") (dd "Ported to Chicken 4") (dt "2.7") (dd "Added binomial sampling procedures") (dt "2.6") (dd "Build script updated for better cross-platform compatibility") (dt "2.5") (dd "Example updated to match 2.0 API [thanks to Terrence Brannon]") (dt "2.4") (dd "Bug fix in random-mtzig:f32vector-rande!") (dt "2.3") (dd "C interface bug fixes") (dt "2.2") (dd "Changed type definition for uint64_t so it doesn't collide with stdint.h") (dt "2.1") (dd "Bug fix in init procedure for vector case") (dt "2.0") (dd "Created reentrant interface") (dt "1.0") (dd "Initial release"))) (section 3 "License" (pre "Chicken Scheme egg scripts and documentation Copyright 2007-2010 Ivan Raikov. \n\n   Coded by Takuji Nishimura and Makoto Matsumoto.\n   This is a faster version by taking Shawn Cokus's optimization,\n   Matthe Bellew's simplification, Isaku Wada's real version.\n   David Bateman added normal and exponential distributions following\n   Marsaglia and Tang's Ziggurat algorithm.\n\n   Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,\n   Copyright (C) 2004, David Bateman\n   All rights reserved.\n\n   Redistribution and use in source and binary forms, with or without\n   modification, are permitted provided that the following conditions\n   are met:\n   \n     1. Redistributions of source code must retain the above copyright\n        notice, this list of conditions and the following disclaimer.\n\n     2. Redistributions in binary form must reproduce the above copyright\n        notice, this list of conditions and the following disclaimer in the\n        documentation and/or other materials provided with the distribution.\n\n     3. The names of its contributors may not be used to endorse or promote \n        products derived from this software without specific prior written \n        permission.\n\n   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n   \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER \n   OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."))))
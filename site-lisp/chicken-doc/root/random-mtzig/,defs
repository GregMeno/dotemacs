(index ("random-mtzig:init" 0) ("random-mtzig:random!" 399) ("random-mtzig:randu!" 619) ("random-mtzig:randn!" 801) ("random-mtzig:rande!" 1061) ("random-mtzig:randb!" 1322) ("random-mtzig:f64vector-randu!" 1538) ("random-mtzig:f64vector-randn!" 1781) ("random-mtzig:f64vector-rande!" 2102) ("random-mtzig:f64vector-randb!" 2424) ("random-mtzig:f32vector-randu!" 2702) ("random-mtzig:f32vector-randn!" 2945) ("random-mtzig:f32vector-rande!" 3266) ("random-mtzig:f32vector-randb!" 3588))
(def (sig (procedure "random-mtzig:init ::  [SEED] -> STATE" (id random-mtzig:init))) (p "Creates an initial seed array and returns the corresponding generator state vector. If the optional " (tt "SEED") " is not specified, the generator is initialized with a seed from " (tt "/dev/urandom") " or with the current time in seconds. If " (tt "SEED") " can be an integer or an " (tt "u32vector") "."))
(def (sig (procedure "random-mtzig:random! :: STATE -> INTEGER" (id random-mtzig:random!))) (p "Returns a random integer value between 0 and the largest machine-representable unsigned integer on the current platform."))
(def (sig (procedure "random-mtzig:randu! :: STATE -> NUMBER" (id random-mtzig:randu!))) (p "Returns a random value from a uniform distribution on the interval " (tt "(0, 1)") "."))
(def (sig (procedure "random-mtzig:randn! :: STATE -> NUMBER" (id random-mtzig:randn!))) (p "Returns a random value from a normal (Gaussian) distribution, using Marsaglia and Tsang's Ziggurat algorithm to transform a uniform distribution into a normal one."))
(def (sig (procedure "random-mtzig:rande! :: STATE -> NUMBER" (id random-mtzig:rande!))) (p "Returns a random value from an exponential distribution, using Marsaglia and Tsang's Ziggurat algorithm to transform a uniform distribution into an exponential one."))
(def (sig (procedure "random-mtzig:randb! :: N * P * STATE -> NUMBER" (id random-mtzig:randb!))) (p "Returns a random value from a binomial distribution with " (tt "N") " experiments and probability " (tt "P") "."))
(def (sig (procedure "random-mtzig:f64vector-randu! :: N * STATE -> F64VECTOR" (id random-mtzig:f64vector-randu!))) (p "Returns an SRFI-4 " (tt "f64") " vector of random values from a uniform distribution on the interval " (tt "(0, 1)") "."))
(def (sig (procedure "random-mtzig:f64vector-randn! :: N * STATE -> F64VECTOR" (id random-mtzig:f64vector-randn!))) (p "Returns an SRFI-4 " (tt "f64") " vector of random values from a normal (Gaussian) distribution, using Marsaglia and Tsang's Ziggurat algorithm to transform a uniform distribution into a normal one."))
(def (sig (procedure "random-mtzig:f64vector-rande! :: N * STATE -> F64VECTOR" (id random-mtzig:f64vector-rande!))) (p "Returns an SRFI-4 " (tt "f64") " vector of random values from am exponential distribution, using Marsaglia and Tsang's Ziggurat algorithm to transform a uniform distribution into an exponential one."))
(def (sig (procedure "random-mtzig:f64vector-randb! :: N * P * XN * STATE -> F64VECTOR" (id random-mtzig:f64vector-randb!))) (p "Returns an SRFI-4 " (tt "f64") " vector of random values from a binomial distribution with " (tt "N") " experiments and probability " (tt "P") "."))
(def (sig (procedure "random-mtzig:f32vector-randu! :: N * STATE -> F64VECTOR" (id random-mtzig:f32vector-randu!))) (p "Returns an SRFI-4 " (tt "f32") " vector of random values from a uniform distribution on the interval " (tt "(0, 1)") "."))
(def (sig (procedure "random-mtzig:f32vector-randn! :: N * STATE -> F64VECTOR" (id random-mtzig:f32vector-randn!))) (p "Returns an SRFI-4 " (tt "f32") " vector of random values from a normal (Gaussian) distribution, using Marsaglia and Tsang's Ziggurat algorithm to transform a uniform distribution into a normal one."))
(def (sig (procedure "random-mtzig:f32vector-rande! :: N * STATE -> F64VECTOR" (id random-mtzig:f32vector-rande!))) (p "Returns an SRFI-4 " (tt "f32") " vector of random values from am exponential distribution, using Marsaglia and Tsang's Ziggurat algorithm to transform a uniform distribution into an exponential one."))
(def (sig (procedure "random-mtzig:f32vector-randb! :: N * P * XN * STATE -> F64VECTOR" (id random-mtzig:f32vector-randb!))) (p "Returns an SRFI-4 " (tt "f32") " vector of random values from a binomial distribution with " (tt "N") " experiments and probability " (tt "P") "."))

((tags "egg") (section 2 "protobj" (toc) (section 3 "Description" (p "Prototype-Delegation Object Model in Scheme")) (section 3 "Author" (p "Neil van Dyke")) (section 3 "Documentation" (p "To use the definitions described in this document import its bindings by evaluating the " (tt "(import protobj)") " form in the current scope.") (p "Protobj is a Scheme library that implements a simple prototype-delegation object model, somewhat similar to that of [Self], and also related to [SLIB-Object] and [OScheme].  Protobj was written mainly as a " (tt "syntax-rules") " learning exercise, but also because people ask about prototype object models for Scheme from time to time.  Like most object systems, it should be regarded as an amusement.  The Protobj library defines both a verbose set of procedures, and terse special syntax.") (p "Protobj is based on objects with named slots that can contain arbitrary values.  Object have immediate slots, and single parent objects from which additional slots are inherited.  When setting in a child object a slot inherited from the parent, a new immediate slot is created in the child so that the parent is unaffected and the slot is no longer inherited.") (p "Methods are simply closures stored in slots.  When a method is applied, the first term of the closure is the receiver object.  Unlike Self, getting the contents of the slot is distinguished from invoking a method contained in the slot.  This distinction was made due to the way first-class closures are often used in Scheme.") (p "An object is cloned by invoking the " (tt "clone") " method.  The default root object's " (tt "clone") " method creates a new child object without any immediate slots, rather than copying any slots.  This behavior can be overridden to always copy certain slots, to copy immediate slots, or to copy all inherited slots.  An overriding " (tt "clone") " method can be implemented to apply its parent's " (tt "clone") " method to itself and then set certain slots in the new child appropriately.") (p "The following is a quick tour of Protobj using the terse special syntax.") (p "Bind " (tt "a") " to the new object that is created by cloning the default root object (" (tt "%") " is special syntax for invoking the " (tt "clone") " method):") (pre " (define a (%))") (p "Verify that " (tt "a") " is an object and that " (tt "a") "'s parent is the default root object:") (pre " (object? a) => #t\n (eq? (^ a) (current-root-object)) => #t") (p "Add to " (tt "a") " a slot named " (tt "x") " with value " (tt "1") ":") (pre " (! a x 1)") (p "Get " (tt "a") "'s slot " (tt "x") "'s value:") (pre " (? a x) => 1") (p "Bind " (tt "b") " to a clone of " (tt "a") ":") (pre " (define b (% a))") (p "Get " (tt "b") "'s slot " (tt "x") "'s value, which is inherited from " (tt "a") ":") (pre " (? b x) => 1") (p "Set " (tt "a") "'s slot " (tt "x") "'s value to " (tt "42") ", and observe that " (tt "b") " inherits the new value:") (pre " (! a x 42)\n (? a x) => 42\n (? b x) => 42") (p "Set " (tt "b") "'s slot " (tt "x") "'s value to " (tt "69") ", and observe that " (tt "a") " retains its own " (tt "x") " value although " (tt "b") "'s " (tt "x") " value has been changed:") (pre " (! b x 69)\n (? a x) => 42\n (? b x) => 69") (p "Add to " (tt "a") " an " (tt "xplus") " slot containing a closure that implements a method of the object:") (pre " (! a xplus (lambda (self n) (+ (? self x) n)))") (p "Apply the method to the " (tt "a") " and " (tt "b") " objects (" (tt "b") " inherits any new slots added to " (tt "a") "):") (pre " (@ a xplus 7) => 49\n (@ b xplus 7) => 76") (p "Observe the shorthand syntax for applying methods to an object multiple times, with the syntax having the value of the lastmost application:") (pre " (@ a (xplus 1000) (xplus 7)) => 49") (p "Bind to " (tt "c") " an object that clones " (tt "a") " and adds slot " (tt "y") " with value " (tt "101") ":") (pre " (define c (% a (y 101)))") (p "Get the values of both the " (tt "x") " and " (tt "y") " slots of " (tt "c") ":") (pre " (? c x y) =&gt; 42 101") (p "Finally, bind " (tt "d") " to a clone of " (tt "a") " that overrides " (tt "a") "'s " (tt "x") " slot:") (pre " (define d (% a (x 1) (y 2) (z 3)))\n (? d x y z) => 1 2 3") (p "The basic interface of Protobj is a set of procedures.") (def (sig (procedure "(object? x)" (id object?))) (p "Predicate for whether or not " (tt "x") " is a Protobj object.")) (def (sig (procedure "(object-parent obj)" (id object-parent))) (p "Yields the parent object of object " (tt "obj") ".")) (def (sig (procedure "(object-set! obj slot-symbol val)" (id object-set!))) (p "Sets the slot identified by symbol " (tt "slot-symbol") " in object " (tt "obj") " to value " (tt "val") ".")) (def (sig (procedure "(object-get obj slot-symbol)" (id object-get))) (p "Yields the value of slot named by symbol " (tt "slot-symbol") " in object " (tt "obj") " (immediate or inherited).  If no slot of that name exists, an error is signaled.")) (def (sig (procedure "(object-get obj slot-symbol noslot-thunk)" (id object-get))) (p "Yields the value of slot named by symbol " (tt "slot-symbol") " in object " (tt "obj") " (immediate or inherited), if any such slot exists.  If no slot of that name exists, then yields the value of applying closure " (tt "noslot-thunk") ".") (p "<procedure>(object-apply obj slot-symbol { arg }*)") (p "Applies the method (closure) in the slot named by " (tt "slot-symbol") " of object " (tt "obj") ".  The first term of the method is " (tt "obj") ", and one or more " (tt "arg") " are the remaining terms.  If no such slot exists, an error is signaled.")) (def (sig (procedure "(object-apply/noslot-thunk obj noslot-thunk slot-symbol { arg }*)" (id object-apply/noslot-thunk))) (p "Like " (tt "object-apply") ", except that, if the slot does not exist, instead of signalling an error, the value is the result of applying " (tt "noslot-thunk") ".")) (def (sig (procedure "(object-raw-clone/no-slots-copy obj)" (id object-raw-clone/no-slots-copy)) (procedure "(object-raw-clone/copy-immed-slots obj)" (id object-raw-clone/copy-immed-slots)) (procedure "(object-raw-clone/copy-all-slots obj)" (id object-raw-clone/copy-all-slots))) (p "These procedures implement different ways of cloning an object, and are generally bound as " (tt "clone") " methods in root objects. " (tt "/no-slots-copy") " does not copy any slots, " (tt "/copy-immed-slots") " copes immediate slots, and " (tt "/copy-all-slots") " copies all slots including inherited ones.")) (def (sig (parameter "(current-root-object)" (id current-root-object))) (p "Parameter for the default root object.  The initial value is a root object that has " (tt "object-raw-clone/no-slots-copy") " in its " (tt "clone") " slot.") (p "Since Protobj's raison d'etre was to play with syntax, here it is. Note that slot names are never quoted.")) (def (sig (syntax "(^ obj)" (id ^))) (p "Parent of " (tt "obj") ".")) (def (sig (syntax "(! obj slot val)" (id !)) (syntax "(! obj)" (id !))) (p "Sets object " (tt "obj") "'s slot " (tt "slot") "'s value to " (tt "val") ".  In the second form of this syntax, multiple slots of " (tt "obj") " may be set at once, and are set in the order given.")) (def (sig (syntax "(? obj { slot }+)" (id ?))) (p "Yields the values of the given " (tt "slot") "s of " (tt "obj") ".  If more than one " (tt "slot") " is given, a multiple-value return is used.")) (def (sig (syntax "(@ obj slot { arg }*)" (id @)) (syntax "(@ obj { (slot { arg }* ) }+)" (id @))) (p "Applies " (tt "obj") "'s " (tt "slot") " method, with " (tt "obj") " as the first term and " (tt "arg") "s as the remaining terms.  In the second form of this syntax, multiple methods may be applied, and the value is the value of the last method application.")) (def (sig (syntax "(% [ obj { (slot val) }* ])" (id %))) (p "Clones object " (tt "obj") ", binding any given " (tt "slot") "s to respective given " (tt "val") "s.") (p "You can override the method " (tt "print") " to customize printing ogf objects:") (highlight scheme "(define x (%))\n(! x print\n   (lambda (self #!optional (port (current-output-port)))\n     (fprintf port \"#<my object>\")))")) (section 4 "References" (dl (dt "[LGPL]") (dd "Free Software Foundation, \"GNU Lesser General Public License,\" Version")) (p "2.1, February 1999, 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA. " (link "http://www.gnu.org/copyleft/lesser.html")) (dl (dt "[OScheme]") (dd "Anselm Baird-Smith, \"OScheme.\" " (link "http://koala.ilog.fr/abaird/oscheme/om.html")) (dt "[Self]") (dd "David Ungar and Randall B. Smith, \"Self: The Power of Simplicity,\" " (i "Lisp and Symbolic Computation") ", 4, 3, 1991.")) (p (link "http://research.sun.com/self/papers/self-power.html")) (dl (dt "[SLIB-Object]") (dd "Wade Humeniuk, \"Macroless Object System,\" SLIB " (tt "object") ".")) (p (link "http://swissnet.ai.mit.edu/~jaffer/slib_7.html#SEC180")) (dl (dt "[SRFI-9]") (dd "Richard Kelsey, \"Defining Record Types,\" SRFI 9, 9 September 1999.")) (p (link "http://srfi.schemers.org/srfi-9/srfi-9.html")) (dl (dt "[SRFI-23]") (dd "Stephan Houben, \"Error reporting mechanism,\" SRFI 23, 26 April 2001.")) (p (link "http://srfi.schemers.org/srfi-23/srfi-23.html")) (dl (dt "[SRFI-39]") (dd "Marc Feeley, \"Parameter objects,\" SRFI 39, 30 June 2003.")) (p (link "http://srfi.schemers.org/srfi-39/srfi-39.html")) (dl (dt "[Testeez]") (dd "Neil W. Van Dyke, \"Testeez: Simple Test Mechanism for Scheme,\" Version 0.1.")) (p (link "http://www.neilvandyke.org/testeez/")))) (section 3 "Changelog" (ul (li "0.3 Added " (tt "print") " method") (li "0.2 Bugfix, " (tt "$") " changed to " (tt "?")) (li "0.1 Initial release"))) (section 3 "License" (pre " Copyright (c) 2005 Neil W. Van Dyke.  This program is Free\n Software; you can redistribute it and/or modify it under the terms of the\n GNU Lesser General Public License as published by the Free Software\n Foundation; either version 2.1 of the License, or (at your option) any\n later version.  This program is distributed in the hope that it will be\n useful, but without any warranty; without even the implied warranty of\n merchantability or fitness for a particular purpose.  See the GNU Lesser\n General Public License [LGPL] for details.  For other license options and\n commercial consulting, contact the author. "))))
(index ("scbib-find" 0) ("scbib-values" 400) ("scbib-value" 690) ("scbib-load-db" 975) ("scbib-load-db" 1533) ("scbib-load-db-all" 2098) ("scbib-load-path" 2731) ("scbib-get-authors" 2897) ("scbib-get-abbrev" 3047) ("scbib-add-to-db!" 3460))
(def (sig (procedure "scbib-find:: QUERY * DB -> ITEM" (id scbib-find))) (p "Locates an item in a database. This procedure applies the given query procedure to each element in the database and returns the first result where the query procedure returns a true value. " (tt "QUERY") " must be a procedure of one argument. " (tt "DB") " must be one of the database parameters defined by the library."))
(def (sig (procedure "scbib-values:: ITEM * NAME -> LIST" (id scbib-values))) (p "Returns the values associated with a certain field in the given bibliographic item. This procedure takes a bibliographic item and a field name and returns a list of values associated with the given field."))
(def (sig (procedure "scbib-value:: ITEM * NAME -> ITEM" (id scbib-value))) (p "Returns a single value associated with a certain field in the given bibliographic item. This procedure takes a bibliographic item and a field name and returns the value associated with the given field."))
(def (sig (procedure "scbib-load-db:: FILE-NAME -> UNDEFINED" (id scbib-load-db))) (p "Loads bibliographic entries from a file. This procedure takes a file name, reads all entries from the given file and puts them in the appropriate database(s). The file must contain entries in s-expression format of the format " (tt "(TYPE ITEM)") ", where " (tt "TYPE") " is one of " (tt "PERSON") ", " (tt "JOURNAL") ", " (tt "PUBLISHER") ", " (tt "BIB") ", and " (tt "ITEM") " is in the format appropriate for this type of item (see the beginning of this document)."))
(def (sig (procedure "scbib-load-db:: FILE-PORT -> UNDEFINED" (id scbib-load-db))) (p "Loads bibliographic entries from a file. This procedure takes an input file port, reads all entries from the given file and puts them in the appropriate database(s). The file must contain entries in s-expression format of the format " (tt "(TYPE ITEM)") ", where " (tt "TYPE") " is one of " (tt "PERSON") ", " (tt "JOURNAL") ", " (tt "PUBLISHER") ", " (tt "BIB") ", and " (tt "ITEM") " is in the format appropriate for this type of item (see the beginning of this document)."))
(def (sig (procedure "scbib-load-db-all:: UNDEFINED -> UNDEFINED" (id scbib-load-db-all))) (p "Loads bibliographic entries from all files in the load path. This procedure locates and reads all files with suffix .db in the scbib load path, loads all entries from those files and puts them in the appropriate database(s). The files must contain entries in s-expression format of the format " (tt "(TYPE ITEM)") ", where " (tt "TYPE") " is one of " (tt "PERSON") ", " (tt "JOURNAL") ", " (tt "PUBLISHER") ", " (tt "BIB") ", and " (tt "ITEM") " is in the format appropriate for this type of item (see the beginning of this document)."))
(def (sig (procedure "scbib-load-path:: [PATH] -> PATH" (id scbib-load-path))) (p "Parameter procedure that contains the current bibliographic database load path."))
(def (sig (procedure "scbib-get-authors:: ITEM -> LIST" (id scbib-get-authors))) (p "Returns the list of authors for the given bibliographic item."))
(def (sig (procedure "scbib-get-abbrev:: ITEM [* KEY-STYLE] -> STRING" (id scbib-get-abbrev))) (p "Returns the abbreviation string for the given item. If " (tt "KEY-STYLE") " is not given, the abbreviation format is the family name of the first author, followed by a colon, followed by the publication year. If " (tt "KEY-STYLE") " is given, it is expected to be a procedure of two arguments, author and year."))
(def (sig (procedure "scbib-add-to-db!:: ITEM -> UNDEFINED" (id scbib-add-to-db!))) (p "Adds the given entry to the appropriate database. The entry must be an s-expression of the form " (tt "(TYPE CONTENTS)") ", where " (tt "TYPE") " is one of " (tt "PERSON") ", " (tt "JOURNAL") ", " (tt "PUBLISHER") ", " (tt "BIB") ", and " (tt "CONTENTS") " is in the format appropriate for this type of item (see the beginning of this document)."))

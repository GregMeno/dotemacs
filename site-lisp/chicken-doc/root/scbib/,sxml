((tags "egg") (section 2 "scbib" (p "A bibliography management system.") (toc)) (section 2 "Documentation" (p "The scbib library manages bibliographic data described as S-expressions and is capable of generating BiBTeX entries from a bibliographic database.") (p "scbib maintains four databases: persons, journals, publishers and bibliographic entries:") (dl (dt (tt "(scbib-db-person)")) (dd (tt "( (KEY-SYMBOL (name STRING)) ... )")) (dt (tt "(scbib-db-publisher)")) (dd (tt "( (KEY-SYMBOL (name STRING) (web STRING) (address STRING)) ... )")) (dt (tt "(scbib-db-journal)")) (dd (tt "( (KEY-SYMBOL (name STRING) (web STRING) ) ... )")) (dt (tt "(scbib-db-bib)")) (dd (tt "(bibtype SYMBOL)") (tt "(title STRING)") (tt "(booktitle STRING)") (tt "(author STRING-OR-KEY)") (tt "(editor STRING-OR-KEY)") (tt "(series STRING)") (tt "(publisher STRING-OR-KEY)") (tt "(journal STRING-OR-KEY)") (tt "(volume STRING)") (tt "(pages STRING)") (tt "(abbrev STRING)"))) (p "The person, journal and publisher databases can provide abbreviations to be used in the bibliographic database. Each " (tt "KEY-SYMBOL") " defined in the first three databases can be used in the respective fields in the bibliographic database. The entries in the bibliographic database can of type: " (tt "article") ", " (tt "book") ", " (tt "web") ", " (tt "web") ", " (tt "techreport") " or " (tt "inproceedings") ".") (p "Each database is defined as a parameter, i.e. procedures of zero or one arguments. To retrieve the value of a database call the corresponding parameter-procedure with zero arguments. To change the contents of a parameter, call the parameter-procedure with the new value as argument:") (pre "\t   ;; appends a new item to the bibliographic database\n\t   (scbib-db-person (cons item (scbib-db-person))) ") (section 3 "Procedures" (def (sig (procedure "scbib-find:: QUERY * DB -> ITEM" (id scbib-find))) (p "Locates an item in a database. This procedure applies the given query procedure to each element in the database and returns the first result where the query procedure returns a true value. " (tt "QUERY") " must be a procedure of one argument. " (tt "DB") " must be one of the database parameters defined by the library.")) (def (sig (procedure "scbib-values:: ITEM * NAME -> LIST" (id scbib-values))) (p "Returns the values associated with a certain field in the given bibliographic item. This procedure takes a bibliographic item and a field name and returns a list of values associated with the given field.")) (def (sig (procedure "scbib-value:: ITEM * NAME -> ITEM" (id scbib-value))) (p "Returns a single value associated with a certain field in the given bibliographic item. This procedure takes a bibliographic item and a field name and returns the value associated with the given field.")) (def (sig (procedure "scbib-load-db:: FILE-NAME -> UNDEFINED" (id scbib-load-db))) (p "Loads bibliographic entries from a file. This procedure takes a file name, reads all entries from the given file and puts them in the appropriate database(s). The file must contain entries in s-expression format of the format " (tt "(TYPE ITEM)") ", where " (tt "TYPE") " is one of " (tt "PERSON") ", " (tt "JOURNAL") ", " (tt "PUBLISHER") ", " (tt "BIB") ", and " (tt "ITEM") " is in the format appropriate for this type of item (see the beginning of this document).")) (def (sig (procedure "scbib-load-db:: FILE-PORT -> UNDEFINED" (id scbib-load-db))) (p "Loads bibliographic entries from a file. This procedure takes an input file port, reads all entries from the given file and puts them in the appropriate database(s). The file must contain entries in s-expression format of the format " (tt "(TYPE ITEM)") ", where " (tt "TYPE") " is one of " (tt "PERSON") ", " (tt "JOURNAL") ", " (tt "PUBLISHER") ", " (tt "BIB") ", and " (tt "ITEM") " is in the format appropriate for this type of item (see the beginning of this document).")) (def (sig (procedure "scbib-load-db-all:: UNDEFINED -> UNDEFINED" (id scbib-load-db-all))) (p "Loads bibliographic entries from all files in the load path. This procedure locates and reads all files with suffix .db in the scbib load path, loads all entries from those files and puts them in the appropriate database(s). The files must contain entries in s-expression format of the format " (tt "(TYPE ITEM)") ", where " (tt "TYPE") " is one of " (tt "PERSON") ", " (tt "JOURNAL") ", " (tt "PUBLISHER") ", " (tt "BIB") ", and " (tt "ITEM") " is in the format appropriate for this type of item (see the beginning of this document).")) (def (sig (procedure "scbib-load-path:: [PATH] -> PATH" (id scbib-load-path))) (p "Parameter procedure that contains the current bibliographic database load path.")) (def (sig (procedure "scbib-get-authors:: ITEM -> LIST" (id scbib-get-authors))) (p "Returns the list of authors for the given bibliographic item.")) (def (sig (procedure "scbib-get-abbrev:: ITEM [* KEY-STYLE] -> STRING" (id scbib-get-abbrev))) (p "Returns the abbreviation string for the given item. If " (tt "KEY-STYLE") " is not given, the abbreviation format is the family name of the first author, followed by a colon, followed by the publication year. If " (tt "KEY-STYLE") " is given, it is expected to be a procedure of two arguments, author and year.")) (def (sig (procedure "scbib-add-to-db!:: ITEM -> UNDEFINED" (id scbib-add-to-db!))) (p "Adds the given entry to the appropriate database. The entry must be an s-expression of the form " (tt "(TYPE CONTENTS)") ", where " (tt "TYPE") " is one of " (tt "PERSON") ", " (tt "JOURNAL") ", " (tt "PUBLISHER") ", " (tt "BIB") ", and " (tt "CONTENTS") " is in the format appropriate for this type of item (see the beginning of this document).")))) (section 2 "Examples" (pre "(use scbib scbib-bibtex)\n\n(define bibliography\n  `((bib \n     (title   \"Executable cell biology\")\n     (author  \"Fisher, J\" \"Henzinger, T\")\n     (journal \"Nature Biotechnology\" )\n     (number  \"25\") \n     (pages   \"1239-1249\")\n     (year    \"2007\")\n     (bibtype \"article\")\n     (web     \"http://www.nature.com/nbt/journal/v25/n11/abs/nbt1356.html\"))\n\n    (bib\n     (title   \"A computer architecture for highly parallel signal processing\")\n     (author  \"Dennis, J\" \"Misunas, D\")\n     (journal \"Proc. of the ACM Annual Conference\")\n     (pages   \"402-409\")\n     (year    \"1974\")\n     (bibtype \"article\")\n     (web     \"http://csg.csail.mit.edu/pubs/memos/Memo-108/Memo-108.pdf\"))\n\n    \n    (bib\n     (title    \"The semantics of a simple language for parallel programming\")\n     (author   \"Kahn, G\")\n     (journal  \"Information Processing\")\n     (pages    \"471-475\")\n     (year     \"1974\")\n     (bibtype  \"article\")\n     (web      \"http://www1.cs.columbia.edu/~sedwards/papers/kahn1974semantics.pdf\"))\n  \n    ))\n\n(define (make-bib-db lst)\n  (for-each (lambda (item) (scbib-add-to-db! item)) lst))\n\n(define (generate-BiBTeX Content)\n  (let ((key-style (lambda (author year) (format #f \"~a:~a\" author (substring year 2 4)))))\n    (make-bib-db Content)\n    (for-each (lambda (x) (scbib-bibtex-print-item x key-style)) (scbib-db-bib))))\n\n(generate-BiBTeX bibliography)")) (section 2 "About this egg" (section 3 "Author" (p (int-link "/users/ivan-raikov" "Ivan Raikov"))) (section 3 "Version history" (dl (dt "1.5") (dd "Added support for eid and doi fields in the bibtex module") (dt "1.4") (dd "Added regex as a dependency") (dt "1.3") (dd "Change allowing fields of bibliographic entries to be lists or strings") (dt "1.1") (dd "Documentation converted to wiki format") (dt "1.0") (dd "Initial release"))) (section 3 "License" (pre "Copyright (C) 2004 Satoru Takabayashi <satoru@namazu.org>.\n\nPorted to Chicken Scheme and modified by Ivan Raikov. Portions\nCopyright 2009-2010 Ivan Raikov.\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or (at\nyour option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nGeneral Public License for more details.\n\nA full copy of the GPL license can be found at\n<http://www.gnu.org/licenses/>."))))
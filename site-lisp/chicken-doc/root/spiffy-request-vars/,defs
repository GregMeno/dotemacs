(index ("request-vars" 0) ("as-number" 1209) ("as-boolean" 1387) ("as-list" 1743) ("as-alist" 2074) ("as-hash-table" 2776) ("as-vector" 2955) ("true-boolean-values" 3747) ("with-request-vars" 4091) ("with-request-vars*" 4796))
(def (sig (procedure "(request-vars #!key (source 'both) max-content-length)" (id request-vars))) (p (tt "request-vars") " returns a procedure which can be used to access variables from the HTTP request.  The returned procedure takes the name of the variable (either a symbol or a string) as argument. You can (optionally) also pass a converter procedure to be used as a type converter for the variable value (see Converter procedures) or a default value.") (p (tt "request-vars") " accepts some keyword arguments:") (dl (dt (tt "source")) (dd (tt "'query-string") " tells " (tt "request-vars") " to parse the query string only (for GET variables). " (tt "'request-body") " tells " (tt "request-vars") " to parse the request body only (e.g., for POST variables). " (tt "'both") " tells " (tt "request-vars") " to parse both the request body and the query string. The default value for " (tt "source") " is " (tt "'both") ". Notice that when " (tt "'both") " is used, variables from the request body have precedence over the ones from the query string.") (dt (tt "max-content-length")) (dd "the maximum content length (in characters) to be read from the request body.  Default is " (tt "#f") " (no limit).")))
(def (sig (procedure "(as-number variable variables/values)" (id as-number))) (p "If the given variable is set, convert its value to a number using " (tt "string->number") "."))
(def (sig (procedure "(as-boolean variable variables/values)" (id as-boolean))) (p "If the variable is set and its value is one of the values yield by the " (tt "true-boolean-values") " parameter, return " (tt "#t") ", otherwise return " (tt "#f") ". It also returns " (tt "#t") " if the variable is passed in the request but is not bound to any value."))
(def (sig (procedure "(as-list variable variables/values)" (id as-list))) (p "If the variable is set once, returns a list with a single element (the value for the given variable).  If the variable is set multiple times, return a list with the multiple values for the variable.  If the variable is not set, return " (tt "#f") "."))
(def (sig (procedure "(as-alist variable variables/values)" (id as-alist))) (p "Returns an alist represented by the request variables/values for the given variable.  The request representation for alists is " (tt "variable.key=value") ".  Example: " (tt "foo.a=1") " would result in " (tt "'((a . \"1\"))") " for the " (tt "foo") " variable.") (p "Example:") (highlight scheme ";; considering a http://server:port/path?foo.a=0&foo.b=1 request\n\n(let (($ (request-vars)))\n  ($ 'foo as-alist))   ;; => ((a . \"0\") (b . \"1\"))") (p (tt "as-alist") " returns " (tt "#f") " when the wanted variable is not sent in the request or it is sent not in the " (i "dot") " notation (e.g., " (tt "foo=0") ")."))
(def (sig (procedure "(as-hash-table variable variables/values)" (id as-hash-table))) (p "The same as " (tt "as-alist") ", but returns a hash-table object instead of an alist."))
(def (sig (procedure "(as-vector variable variables/values)" (id as-vector))) (p "Returns a vectir represented by the request variables/values for the given variable.  The request representation for vectors is " (tt "variable.numeric-index=value") ".  Example: " (tt "foo.0=1") " would result in " (tt "#(\"1\")") " for the " (tt "foo") " variable.") (p "Example:") (highlight scheme ";; considering a http://server:port/path?foo.0=a&foo.1=b\n\n(let (($ (request-vars)))\n  ($ 'foo as-vector))   ;; => #(\"a\" \"b\")") (p (tt "as-vector") " returns " (tt "#f") " when the wanted variable is not sent in the request or it is sent not in the " (i "dot") " notation (e.g., " (tt "foo=0") ").") (p "If the vector represented by the request is sparse, the missing items are unspecified values."))
(def (sig (parameter "(true-boolean-values)" (id true-boolean-values))) (p "A list of values (strings) to be considered as " (tt "#t") " for request variables when " (tt "as-boolean") " is used as converter.") (p "The default value is " (tt "'(\"y\" \"yes\" \"1\" \"on\" \"true\")") ".  The values are compared using " (tt "string-ci=?") "."))
(def (sig (syntax "(with-request-vars [getter] (var1 var2 ... varN) expr1 expr2 ... exprN)" (id with-request-vars))) (p "Bind the given identifiers to the corresponding query string and request body variable values and evaluate the expressions.  The optional " (tt "getter") " argument (the return value of " (tt "request-vars") ") may be used in situations when you already have the getter and don't want to reparse the query string and request body.  With " (tt "with-request-vars*") ", the given getter will be used and no reparsing will be performed.  When the syntax is ambiguous (e.g., " (tt "(with-request-vars (request-vars) (var1 var2) (body))") ", " (tt "with-request-vars*") " can be used)."))
(def (sig (syntax "(with-request-vars* getter (var1 var2 ... varN) expr1 expr2 ... exprN)" (id with-request-vars*))) (p "The same as " (tt "with-request-vars") ", but the getter is mandatory."))

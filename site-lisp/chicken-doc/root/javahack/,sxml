((tags "egg") (section 2 "javahack" (p "A simple interface to Java(tm)") (toc)) (section 2 "Documentation" (p "This library provides a simple and convenient interface to Java. By running java as a sub-process and reading/writing s-expressions, no JNI and OS-specific hacks are needed which makes this approach more portable and robust.") (p "On the Java side " (link "http://jscheme.sourceforge.net" "jscheme") " is used to parse expressions passed from CHICKEN and to convert results back into a Scheme-friendly format.") (p "(" (tt "jscheme.jar") " version 6.1 is included in this egg)") (def (sig (syntax "(java SYMBOL)" (id java))) (p "Returns the value represented by " (tt "SYMBOL") " which should designate a Java class, field, or method, using `Java Dot' notation:") (table (tr (td "Syntax") (td "Type of Member") (td "Example")) "\n" (tr (td "\".\" at the end") (td "constructor") (td (tt "((java Font.) NAME STYLE SIZE)"))) "\n" (tr (td "\".\" at the beginning") (td "instance member") (td (tt "((java .setFont) COMP FONT)"))) "\n" (tr (td "\".\" at beginning and \"$\" at the end") (td "instance field") (td (tt "(define (mycar x) ((java .first$) x))") "\n" (tt "(define (myset-car! x y) ((java .first$) x y))"))) "\n" (tr (td "\".\" only in the middle") (td "static member") (td (tt "((java Math.round) 123.456)"))) "\n" (tr (td "\".class\" suffix") (td "Java class") (td (tt "(java Font.class)"))) "\n" (tr (td "\"$\" at the end") (td "static field") (td (tt "(java Font.BOLD$)") "\n" (tt "(set! (java \"U.useJavaSyntax$\") #t)"))) "\n" (tr (td "\"$\" in the middle") (td "inner class") (td (tt "(java java.awt.geom.Point2D$Double.class)"))) "\n" (tr (td "\"$\" at the beginning") (td "packageless class") (td (tt "(java $ParseDemo.class)"))) "\n" (tr (td "\"#\" at the end") (td "allow private access") (td (tt "((java .name$#) ((java Symbol.#) \"abc\"))")))) (p "Notes:") (p "* Each evaluation of the " (tt "java") " macro sends an expression to the java process and receives a result expression. Since most of the results will stay constant throughout the lifetime of the session (as they refer to classes, fields and methods), they are cached and subsequent evaluation of the same " (tt "(java ...)") " expression will refer to the cached value instead. You can disable this caching (in case you are doing rather funky things) with the help of the " (tt "java-enable-cache") " form (see below).") (p "* Java objects which are returned from the Java-side can be safely used and are only garbage collected when no more references exist.")) (def (sig (syntax "(java-enable-cache FLAG)" (id java-enable-cache))) (p "Enables or disables caching of results returned by the " (tt "java") " macro. " (tt "FLAG") " should be either the symbol " (tt "on") " or " (tt "off") ". Caching is enabled by default.")) (def (sig (procedure "(java-run #!key java jar debug options classpath)" (id java-run))) (p "Starts the java-VM as a subprocess, with any additional arguments customizing the JVM invocation. " (tt "java") " specifies the jvm executable and defaults to " (tt "java") ". " (tt "jar") " gives the location of the jscheme jar file, " (tt "options") " and " (tt "classpath") " can be used to customize where the JVM should search for support classes and libraries, together with JVM specific options.") (p "Passing " (tt "#t") " for the " (tt "debug") " parameter will print information about the message flow between CHICKEN and jscheme.")) (def (sig (procedure "(java-stop)" (id java-stop))) (p "Terminates the java process.")) (def (sig (procedure "(java-send EXPR)" (id java-send))) (p "Send an expression to Java and returns whatever result is passed back.")) (def (sig (procedure "(java-import STRING ...)" (id java-import))) (p "Imports Java packages. " (tt "STRING") " should be a qualified package identifier, like " (tt "\"java.lang.*\"") ".")) (def (sig (procedure "(java-ref NAME)" (id java-ref))) (p "References or sets a static field. Setting static fields is supported through a " (link "http://srfi.schemers.org/srfi-17/srfi-17.html" "SRFI-17") " setter, as in the example above. Since the field-name is evaluated before being sent to the java-process, pass the field as a string.")) (def (sig (procedure "(java-object? X)" (id java-object?))) (p "Returns " (tt "#t") " if " (tt "X") " is a raw Java object (that can not be meaningfully converted into a Scheme value)."))) (section 2 "Examples" (pre "(use javahack)\n\n(java-run debug: #t)\n\n(define s (java String.class))\n(pp s)\n(define s1 ((java String.) \"hello!\"))\n(pp s1)\n(do ((n 2 (sub1 n))) ((zero? n))\n  (pp ((java .hashCode) s1)) )\n(set! s #f)\n(set! s1 #f)") (p "Another example, a minimal SWT application. It assumes " (tt "swt.jar") " and all necessary native libraries are in the path, or in the current directory:") (pre "(use javahack)\n\n(java-run debug: #t options: '(\"-Djava.library.path=.\") classpath: \"swt.jar\")\n\n(java-import \"org.eclipse.swt.*\")\n(java-import \"org.eclipse.swt.widgets.*\")\n(java-import \"org.eclipse.swt.graphics.*\")\n(java-import \"org.eclipse.swt.layout.*\")\n\n((java Display.setAppName) \"Hello\")\n\n(define disp ((java Display.)))\n(define shell ((java Shell.) disp))\n\n((java .setLayout) shell ((java FillLayout.) (java SWT.VERTICAL$)))\n((java .setText) shell \"Hello, world!\")\n\n(define label ((java Label.) shell (java SWT.CENTER$)))\n\n((java .setText) label \"Hello, world\")\n((java .setSize) shell 300 300)\n((java .open) shell)\n\n(do () (((java .isDisposed) shell))\n  (unless ((java .readAndDispatch) disp) ((java .sleep) disp)) )\n\n((java .dispose) disp)") (p "Yet another example that performs a callback. The Java code performing the callback could look like this:") (pre "public class Callback\n{\n    public static Object invoke(jsint.Procedure proc, Object x) {\n\treturn proc.apply(new jsint.Pair(x, jsint.Pair.EMPTY));\n    }\n}") (p "If you compile it with " (tt "javac -classpath `chicken-setup -repository`/jscheme.jar Callback.java") " you will have a classfile in the current directory that in combination with the following example code will call back to the CHICKEN side:") (pre "(use javahack)\n\n(java-run debug: #t classpath: \".\")\n\n(write\n  ((java Callback.invoke)\n    (lambda (x) \n      (print \"ok: \" x) \n      42) \n    \"something\") )")) (section 2 "About this egg" (section 3 "Author" (p (int-link "/users/felix-winkelmann" "felix winkelmann"))) (section 3 "Version history" (dl (dt "0.5") (dd "fixed bug in setup script (thanks to Peter Lane)") (dt "0.3") (dd "Initial release")))))
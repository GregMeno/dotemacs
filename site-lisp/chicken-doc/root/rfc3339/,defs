(index ("make-rfc3339" 0) ("rfc3339?" 0) ("rfc3339-year" 0) ("rfc3339-month" 0) ("rfc3339-day" 0) ("rfc3339-hours" 0) ("rfc3339-minutes" 0) ("rfc3339-seconds" 0) ("rfc3339-fractions" 0) ("rfc3339-offset" 0) ("string->rfc3339" 1156) ("rfc3339->string" 1846) ("rfc3339->seconds" 2310) ("time->rfc3339" 2560) ("rfc3339->vector" 2990) ("vector->rfc3339" 2990) ("rfc3339" 3247) ("seconds->rfc3339" 3477) ("rfc3339->utc-time" 3735) ("rfc3339->local-time" 3735) ("utc-time->rfc3339" 4059))
(def (sig (procedure "(make-rfc3339 year month day hours minutes seconds fractions offset)" (id make-rfc3339)) (procedure "(rfc3339? R)" (id rfc3339?)) (procedure "(rfc3339-year R)" (id rfc3339-year)) (procedure "(rfc3339-month R)" (id rfc3339-month)) (procedure "(rfc3339-day R)" (id rfc3339-day)) (procedure "(rfc3339-hours R)" (id rfc3339-hours)) (procedure "(rfc3339-minutes R)" (id rfc3339-minutes)) (procedure "(rfc3339-seconds R)" (id rfc3339-seconds)) (procedure "(rfc3339-fractions R)" (id rfc3339-fractions)) (procedure "(rfc3339-offset R)" (id rfc3339-offset))) (p "A record representing an RFC3339 datetime.  The record fields are:") (table (tr (td "year") (td "the year AD 1-9999, e.g. 2010")) "\n" (tr (td "month") (td "the month 1-12, where January = 1")) "\n" (tr (td "day") (td "the day 1-31")) "\n" (tr (td "hours") (td "the hour 0-23")) "\n" (tr (td "minutes") (td "the minutes 0-59")) "\n" (tr (td "seconds") (td "the seconds 0-59")) "\n" (tr (td "fractions") (td "fractions of a second, 0 <= x < 1")) "\n" (tr (td "offset") (td "seconds west of UTC"))) (p "Record field values may be out of range; no checking is done for validity."))
(def (sig (procedure "(string->rfc3339 str)" (id string->rfc3339))) (p "Parses an RFC3339 format date like " (tt "yyyy-mm-ddThh:mm:ss(.sss...)(Z|[+-]hh:mm)") " and returns an rfc3339 record or " (tt "#f") " if the parse failed.  All fields except the fractional second part are required; if omitted, " (tt "fractions") " is set to zero.  The parser permits \"T\" and \"Z\" to be lowercase.") (p "The parser does not reject numbers that are out of range, as long as the date is formatted correctly; in other words, two-digit fields may range from 0-99.  The resulting record is not normalized.  However, values will be normalized when converted into seconds since epoch or a time vector."))
(def (sig (procedure "(rfc3339->string R)" (id rfc3339->string))) (p "Convert rfc3339 record to a RFC3339 string.  The \"T\" and \"Z\" characters in the result string are always uppercase.  All fields are, by definition, present except for fractional seconds, which are omitted if zero.") (p "RFC3339 record values are not normalized before conversion, so some values could be out of range; however values /are/ clamped to the range 0-99 (or 0-9999 for years)."))
(def (sig (procedure "(rfc3339->seconds R)" (id rfc3339->seconds))) (p "Converts an rfc3339 record into seconds since the UNIX epoch (1970-01-01 00:00:00 UTC).  Out of range values are allowed on input; the record is normalized during conversion."))
(def (sig (procedure "(time->rfc3339 tm)" (id time->rfc3339))) (p "Converts a 10-element time vector TM, such as that returned by " (tt "seconds->utc-time") " or " (tt "seconds->local-time") ", to an rfc3339 record.  The timezone offset field is honored. Values are not range-checked.") (p "See " (int-link "#Convenience functions" "utc-time->rfc3339") " if you notice that the records have a non-zero timezone offset for UTC."))
(def (sig (procedure "(rfc3339->vector R)" (id rfc3339->vector)) (procedure "(vector->rfc3339 V)" (id vector->rfc3339))) (p "Convert an RFC3339 record to and from an 8-element vector, " (tt "'#(year month day hours minutes seconds fractions offset)") "."))
(def (sig (procedure "(rfc3339 obj)" (id rfc3339))) (p "Construct an rfc3339 record based on the type of the argument.  If a string, it will use " (tt "string->rfc3339") ".  If a vector, it will use " (tt "vector->rfc3339") "."))
(def (sig (procedure "(seconds->rfc3339 sec)" (id seconds->rfc3339))) (p "Convert integer number of seconds since UNIX epoch into an rfc3339 record which is represented as UTC time.  In other words, " (tt "(utc-time->rfc3339 (seconds->utc-time sec))") "."))
(def (sig (procedure "(rfc3339->utc-time R)" (id rfc3339->utc-time)) (procedure "(rfc3339->local-time R)" (id rfc3339->local-time))) (p "Convert an RFC3339 record into a 10-element time vector. In other words, " (tt "(seconds->utc-time (rfc3339->seconds R))") " and " (tt "(seconds->local-time (rfc3339->seconds R))") "."))
(def (sig (procedure "(utc-time->rfc3339 R)" (id utc-time->rfc3339))) (p "Workaround for an issue with " (tt "time->rfc3339") ".  Prior to Chicken 4.6, " (tt "seconds->utc-time") " may not return a zero timezone offset, which will cause the RFC3339 string timezone offset to be that of the local timezone -- even though the time itself is relative to UTC.  This function will force the timezone offset to UTC.") (p "This case can be tested for by running the egg tests during installation time."))

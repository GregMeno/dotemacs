((tags "egg") (section 2 "ssax" (p "Oleg Kiselyov's XML parser.") (toc) (section 3 "Documentation" (p "See the official " (link "http://ssax.sourceforge.net" "SSAX homepage") " for comprehensive documentation.") (section 4 "ssax:xml->sxml" (def (sig (procedure "(ssax:xml->sxml PORT NAMESPACE-PREFIX-ASSIG)" (id ssax:xml->sxml))) (p "This procedure reads XML data from " (tt "PORT") " and returns an SXML representation. " (tt "NAMESPACE-PREFIX-ASSIG") " is an alist that maps user prefixes (symbols) to namespaces (URI strings)."))) (section 4 "ssax:make-parser" (def (sig (syntax "(ssax:make-parser TAG1 VAL1 [TAG2 VAL2 ...])" (id ssax:make-parser))) (p "Create a custom XML parseran instance of the XML parsing framework. This will be a SAX, a DOM or a specialized parser depending on the supplied user-handlers.") (p "The arguments to " (tt "ssax::make-parser") " are symbol-value pairs, interleaved in the argument list. In other words, " (tt "TAG1") ", " (tt "TAG2") " etc are " (b "unquoted") "(!) symbols that identify the type of value that follows the tagsee below for the list of allowed tags.") (p "The output of this macro is a procedure that represents a parser which accepts two arguments, " (tt "PORT") " and " (tt "SEED") ". " (tt "PORT") " is the port from which to read the XML data and " (tt "SEED") " is the initial value of an accumulator that will be passed into the first procedure, where it can be appended to and returned. Then this value will be passed on to the next procedure and so on to eventually obtain a result, in a " (tt "FOLD") "-like fashion.") (p "Given below are tags and signatures of the corresponding values. Not all tags have to be specified. If some are omitted, reasonable defaults will apply. " (tt "SEED") " always represents the current value of the accumulator that will eventually be returned by the parser.") (p (tt "DOCTYPE")) (pre "     procedure PORT DOCNAME SYSTEMID INTERNAL-SUBSET? SEED") (p "If " (tt "INTERNAL-SUBSET?") " is " (tt "#t") ", the current position in the port is right after we have read " (tt "#\\[") " that begins the internal DTD subset. We must finish reading of this subset before we return (or must call " (tt "ssax:skip-internal-dtd") " if we aren't interested in reading it).") (p "The port at exit must be at the first symbol after the whole DOCTYPE declaration. The handler-procedure must generate four values:") (pre "     ELEMS ENTITIES NAMESPACES SEED") (p "See " (tt "xml-decl::elems") " for " (tt "ELEMS") ". It may be " (tt "#f") " to switch off the validation. " (tt "NAMESPACES") " will typically contain user prefixes for selected URI symbols. The default handler-procedure skips the internal subset, if any, and returns " (tt "(values #f '() '() SEED)") ".") (p (tt "UNDECL-ROOT")) (pre "     procedure ELEM-GI SEED") (p "where " (tt "ELEM-GI") " is an " (tt "UNRES-NAME") " of the root element. This procedure is called when an XML document under parsing contains " (i "no") " " (tt "DOCTYPE") " declaration. The handler-procedure, as a DOCTYPE handler procedure above, must generate four values:") (pre "      ELEMS ENTITIES NAMESPACES SEED") (p "The default handler-procedure returns " (tt "(values #f '() '() seed)")) (p (tt "NEW-LEVEL-SEED")) (pre "     procedure ELEM-GI ATTRIBUTES NAMESPACES EXPECTED-CONTENT SEED") (p "where " (tt "ELEM-GI") " is a " (tt "RES-NAME") " of the element about to be processed. This procedure is to generate the seed to be passed to handlers that process the content of the element.") (p (tt "FINISH-ELEMENT")) (pre "     procedure ELEM-GI ATTRIBUTES NAMESPACES PARENT-SEED SEED") (p "This procedure is called when parsing of " (tt "ELEM-GI") " is finished. The " (tt "SEED") " is the result from the last content parser (or from " (tt "new-level-seed") " if the element has the empty content). " (tt "PARENT-SEED") " is the same seed as was passed to " (tt "new-level-seed") ". The procedure is to generate a seed that will be the result of the element parser.") (p (tt "CHAR-DATA-HANDLER")) (pre "     procedure STRING1 STRING2 SEED") (p "The procedure is supposed to handle a chunk of character data " (tt "STRING1") " followed by a chunk of character data " (tt "STRING2") ". " (tt "STRING2") " is a short string, often \"\\n\" and even \"\" Returns a new " (tt "SEED") ".") (p (tt "PI")) (pre "     association-list ((PI-TAG . PI-HANDLER) ...)") (p "where " (tt "PI-TAG") " is the name of the processing instruction and " (tt "PI-HANDLER") " is a procedure " (tt "PORT PI-TAG SEED") ".") (p "The handler should read the rest of the PI from " (tt "PORT") ", up to and including the combination \"" (tt "?>") "\" that terminates the PI. The handler should return a new seed.") (p "One of the " (tt "PI-TAG") "s may be the symbol " (tt "*DEFAULT*") ". The corresponding handler will handle PIs that no other handler will. If the " (tt "*DEFAULT*") " " (tt "PI-TAG") " is not specified, " (tt "ssax:make-pi-parser") " will assume the default handler that skips the body of the PI."))) (section 4 "xml-token-kind" (def (sig (syntax "(xml-token-kind TOKEN)" (id xml-token-kind))) (p "Returns the " (tt "TAG-KIND") " of the supplied " (tt "TOKEN") ".") (ul (li (tt "TAG-KIND") " A symbol " (tt "'START") ", " (tt "'END") ", " (tt "'PI") ", " (tt "'DECL") ", " (tt "'COMMENT") ", " (tt "'CDSECT") " or " (tt "'ENTITY-REF") " that identifies a markup token.")))) (section 4 "xml-token-head" (def (sig (syntax "(xml-token-head TOKEN) => " (id xml-token-head))) (p "Returns the " (tt "UNRES-NAME") " of the supplied " (tt "TOKEN") ". For xml-tokens of kinds " (tt "'COMMENT") " and " (tt "'CDSECT") ", the head is " (tt "#f") ".") (ul (li (tt "UNRES-NAME") " A name (called GI in the XML Recommendation) as given in an xml document for a markup token: start-tag, PI target, attribute name. If a GI is an NCName, " (tt "UNRES-NAME") " is this NCName converted into a Scheme symbol. If a GI is a QName, " (tt "UNRES-NAME") " is a pair of symbols: " (tt "(PREFIX . LOCALPART)") ".")))) (section 4 "Data Types" (ul (li "TAG-KIND")) (p "A symbol " (tt "'START") ", " (tt "'END") ", " (tt "'PI") ", " (tt "'DECL") ", " (tt "'COMMENT") ", " (tt "'CDSECT") " or " (tt "'ENTITY-REF") " that identifies a markup token") (ul (li "UNRES-NAME")) (p "A name (called GI in the XML Recommendation) as given in an xml document for a markup token: start-tag, PI target, attribute name. If a GI is an NCName, UNRES-NAME is this NCName converted into a Scheme symbol. If a GI is a QName, UNRES-NAME is a pair of symbols: (PREFIX . LOCALPART)") (ul (li "RES-NAME")) (p "An expanded name, a resolved version of an UNRES-NAME. For an element or an attribute name with a non-empty namespace URI, RES-NAME is a pair of symbols, (URI-SYMB . LOCALPART). Otherwise, it's a single symbol.") (ul (li "ELEM-CONTENT-MODEL")) (p "A symbol:") (p (tt "ANY") "\t  - anything goes, expect an END tag. " (tt "EMPTY-TAG") " - no content, and no END-tag is coming " (tt "EMPTY") "\t  - no content, expect the END-tag as the next token " (tt "PCDATA") "    - expect character data only, and no children elements " (tt "MIXED") " " (tt "ELEM-CONTENT")) (ul (li "URI-SYMB")) (p "A symbol representing a namespace URI -- or other symbol chosen by the user to represent URI. In the former case, URI-SYMB is created by %-quoting of bad URI characters and converting the resulting string into a symbol.") (ul (li "NAMESPACES")) (p "A list representing namespaces in effect. An element of the list has one of the following forms:") (p (tt "(PREFIX URI-SYMB . URI-SYMB)") " or " (tt "(PREFIX USER-PREFIX . URI-SYMB)") " where " (tt "USER-PREFIX") " is a symbol chosen by the user to represent the URI.") (p (tt "(#f USER-PREFIX . URI-SYMB)") " Specification of the user-chosen prefix and a URI-SYMBOL.") (p (tt "(*DEFAULT* USER-PREFIX . URI-SYMB)") " Declaration of the default namespace") (p (tt "(*DEFAULT* #f . #f)") " Un-declaration of the default namespace. This notation represents overriding of the previous declaration") (p "A NAMESPACES list may contain several elements for the same PREFIX. The one closest to the beginning of the list takes effect.") (ul (li "ATTLIST")) (p "An ordered collection of " (tt "(NAME . VALUE)") " pairs, where " (tt "NAME") " is a " (tt "RES-NAME") " or an " (tt "UNRES-NAME") ". The collection is an ADT.") (ul (li "STR-HANDLER")) (p "A procedure of three arguments, " (tt "STRING1 STRING2 SEED") ", returning a new " (tt "SEED") ". The procedure is supposed to handle a chunk of character data STRING1 followed by a chunk of character data STRING2. STRING2 is a short string, often \"\\n\" and even \"\"") (ul (li "ENTITIES")) (p "An assoc list of pairs:") (pre "  (named-entity-name . named-entity-body)") (p "where named-entity-name is a symbol under which the entity was declared, named-entity-body is either a string, or (for an external entity) a thunk that will return an input port (from which the entity can be read). named-entity-body may also be #f. This is an indication that a named-entity-name is currently being expanded. A reference to this named-entity-name will be an error: violation of the WFC nonrecursion."))) (section 3 "Unicode Compatibility" (p (tt "ssax:xml->sxml") " will convert numeric entities to UTF-8 byte sequences. It does not depend on the " (int-link "utf8") " egg for this.") (p "Otherwise, UTF-8 operation is not well tested.")) (section 3 "Requirements" (p (int-link "input-parse"))) (section 3 "Author" (p "Oleg Kiselyov, with some Chicken-specific modifications by Kirill Lisovsky. Minor changes by " (int-link "/users/felix winkelmann" "felix winkelmann") " to make the code suitable as an extension library.")) (section 3 "Changelog" (ul (li "5.0.0 Port to Chicken 4fresh import of the clean upstream CVS tree (which now has downcased names)") (li "4.9.8 Convert numeric entities > 255 to UTF-8 [Jim Ursetto]") (li "4.9.7 Using ##sys#read/peek-char instead of read/peek-char [Daishi Kato]") (li "4.9.6 parser-error now raises a condition [Daishi Kato]") (li "4.9.5 Fixed bug in error-reporting function") (li "4.9.4 Replaced " (tt "(apply string-append ...)") " calls with " (tt "string-concatenate")) (li "4.9.3 Adapted to new setup scheme. Fixed a reentrancy-bug [Thanks to Bruce Butterfield]") (li "4.9.2 " (tt "SSAX:warn") " adds newline [Thanks to Sunnan]") (li "4.9.1 Fixed exports for case-sensitivity."))) (section 3 "License" (p "Public Domain"))))
((tags "egg") (section 2 "variable-item" (toc)) (section 2 "Documentation" (p "Various useful forms.") (section 4 "make-variable" (def (sig (procedure "(make-variable INIT [GUARD]) => (procedure _ *)" (id make-variable))) (p "Returns a " (tt "procedure") " whose behavior is that of a " (tt "parameter") ", except for the fact that it is " (b "not") " a " (tt "parameter") ". The closed-over value is not thread-local.") (p (tt "INIT") " is some Scheme " (tt "object") " that meets the constraint enforced by the " (tt "GUARD") ".") (p (tt "GUARD") " is a " (tt "(procedure (*) *)") " returning an acceptable value for the variable. Default is " (tt "identity") ".") (p "Supports SRFI 17."))) (section 4 "warning-guard" (def (sig (syntax "(warning-guard GETTER-NAME TYPENAME [BODY...])" (id warning-guard))) (p "Constructs a variable or parameter guard procedure that generates a warning and returns the current value when the type predicate fails, otherwise the submitted value is returned.") (p (tt "TYPENAME") " is an " (tt "identifier") " and " (tt "TYPENAME?") " is a " (tt "(procedure (*) boolean)") ".") (p (tt "GETTER-NAME") " is an " (tt "identifier") " and the name of a " (tt "procedure _ *") ".") (p (tt "BODY") " is zero or more expressions that are performed after a successful typecheck. " (i "Note") " that since the guard is invoked by a " (tt "variable") " or " (tt "parameter") " during initialization, so will be the body code.") (highlight scheme "(use variable-item)\n\n(warning-guard some-var integer)"))) (section 4 "checked-guard" (def (sig (syntax "(checked-guard GETTER-NAME TYPENAME [BODY...])" (id checked-guard))) (p "Constructs a variable or parameter guard procedure that uses a type check procedure to verify the submitted value is returned.") (p (tt "TYPENAME") " is an " (tt "identifier") " and " (tt "check-TYPENAME") " is a " (tt "(procedure ((or #f symbol) * #!optional (or symbol string)) *)") ". See " (int-link "check-errors") " for a suite of these procedures.") (p (tt "GETTER-NAME") " is an " (tt "identifier") " and the name of a " (tt "procedure _ *") ".") (p (tt "BODY") " is zero or more expressions that are performed after a successful typecheck. " (i "Note") " that since the guard is invoked by a " (tt "variable") " or " (tt "parameter") " during initialization, so will be the body code.") (highlight scheme "(use variable-item type-checks)\n\n(checked-guard some-var integer)"))) (section 4 "define-variable" (def (sig (syntax "(define-variable NAME INIT [GUARD])" (id define-variable))) (p "Wrapper around " (tt "make-variable") " that defines the variable " (tt "NAME") " to the " (i "variable") ".") (p (tt "NAME") " is an " (tt "identifier") ".") (p (tt "INIT") " and " (tt "GUARD") " as for " (tt "make-variable") ".") (highlight scheme "(use variable-item)\n\n(define-variable scale * (warning-guard scale procedure))\n(scale) ;=> #<procedure ...>\n(scale /)"))) (section 4 "define-warning-variable" (def (sig (syntax "(define-warning-variable NAME INIT TYPENAME [BODY...])" (id define-warning-variable))) (p "Wrapper around " (tt "make-variable") " and " (tt "warning-guard") " that defines the variable " (tt "NAME") " to the " (i "variable") ".") (p (tt "NAME") " is an " (tt "identifier") ".") (p (tt "INIT") " is some Scheme " (tt "object") ".") (p (tt "TYPENAME") " is an " (tt "identifier") ". The basename of a type predicate; see " (int-link "#warning-guard" "warning-guard") ".") (p (tt "BODY...") " as for " (tt "warning-guard") ".") (highlight scheme "(use variable-item)\n\n(define-warning-variable scale * procedure)\n(scale 23) ;=> Warning: (foo) \"bad argument type - not a procedure\" 23"))) (section 4 "define-checked-variable" (def (sig (syntax "(define-checked-variable NAME INIT TYPENAME [BODY...])" (id define-checked-variable))) (p "Wrapper around " (tt "make-variable") " and " (tt "checked-guard") " that defines the variable " (tt "NAME") " to the " (i "variable") ".") (p (tt "NAME") " is an " (tt "identifier") ".") (p (tt "INIT") " is some Scheme " (tt "object") ".") (p (tt "TYPENAME") " is an " (tt "identifier") ". The basename of a type predicate; see " (int-link "#checked-guard" "checked-guard") ".") (p (tt "BODY...") " as for " (tt "checked-guard") ".") (highlight scheme "(use variable-item)\n\n(define-checked-variable scale * procedure)\n(scale 23) ;=> Error: (foo) \"bad argument type - not a procedure\" 23"))) (section 4 "define-parameter" (def (sig (syntax "(define-parameter NAME INIT [GUARD])" (id define-parameter))) (p "Wrapper around " (tt "make-parameter") " that defines the parameter " (tt "NAME") " to the " (i "parameter") ".") (p (tt "NAME") " is an " (tt "identifier") ".") (p (tt "INIT") " and " (tt "GUARD") " as for " (tt "make-parameter") ".") (p "Duplicate of macro found in the " (tt "miscmacros") " extension."))) (section 4 "define-warning-parameter" (def (sig (syntax "(define-warning-parameter NAME INIT TYPENAME [BODY...])" (id define-warning-parameter))) (p "Wrapper around " (tt "make-parameter") " and " (tt "warning-guard") " that defines the parameter " (tt "NAME") " to the " (i "parameter") ".") (p (tt "NAME") " is an " (tt "identifier") ".") (p (tt "INIT") " is some Scheme " (tt "object") ".") (p (tt "TYPENAME") " is an " (tt "identifier") ". The basename of a type predicate; see " (int-link "#warning-guard" "warning-guard") ".") (p (tt "BODY...") " as for " (tt "warning-guard") ".") (highlight scheme "(use parameter-item)\n\n(define-warning-variable scale * procedure)\n(scale 23) ;=> Warning: (foo) \"bad argument type - not a procedure\" 23"))) (section 4 "define-checked-parameter" (def (sig (syntax "(define-checked-parameter NAME INIT TYPENAME [BODY...])" (id define-checked-parameter))) (p "Wrapper around " (tt "make-parameter") " and " (tt "checked-guard") " that defines the variable " (tt "NAME") " to the " (i "parameter") ".") (p (tt "NAME") " is an " (tt "identifier") ".") (p (tt "INIT") " is some Scheme " (tt "object") ".") (p (tt "TYPENAME") " is an " (tt "identifier") ". The basename of a type predicate; see " (int-link "#checked-guard" "checked-guard") ".") (p (tt "BODY...") " as for " (tt "checked-guard") ".") (highlight scheme "(use parameter-item)\n\n(define-checked-parameter scale * procedure)\n(scale 23) ;=> Error: (foo) \"bad argument type - not a procedure\" 23"))) (section 4 "Usage" (highlight scheme "(require-extension variable-item)"))) (section 2 "Requirements" (p (int-link "check-errors"))) (section 2 "Author" (p (int-link "/users/kon-lovett" "Kon Lovett"))) (section 2 "Version history" (dl (dt "1.3.0") (dd "Moved from " (tt "moremacros") " extension. Added " (tt "parameter") " macros."))) (section 2 "License" (p "Copyright (C) 2010 Kon Lovett.  All rights reserved.") (p "Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the Software), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:") (p "The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.") (p "THE SOFTWARE IS PROVIDED ASIS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.")))
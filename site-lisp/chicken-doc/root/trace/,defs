(index ("trace" 0) ("untrace" 344) ("trace/untrace" 622) ("break" 752) ("unbreak" 1364) ("continue" 1523) ("c" 1523) ("trace-output-port" 1772) ("trace-verbose" 1983))
(def (sig (procedure "(trace [PROCEDURE ...])" (id trace))) (p "Modifies the given procedures by printing some information on entry and exit. When given no arguments, " (tt "(trace)") " lists all currently traced procedures.") (p "Note that " (tt "PROCEDURE") " may be any procedure and doesn't necessarily have to be a toplevel definition."))
(def (sig (procedure "(untrace [PROCEDURE ...])" (id untrace))) (p "Removes tracing from " (tt "PROCEDURE ...") ", which should previously have been traced with " (tt "trace") ". When given no arguments, " (tt "(untrace)") " removes untraces all currently traced procedures."))
(def (sig (procedure "(trace/untrace PROCEDURE ...)" (id trace/untrace))) (p "Toggles tracing on/off for the given procedures."))
(def (sig (procedure "(break [PROCEDURE ...])" (id break))) (p "Modifies the given procedures to signal a condition on entry. The condition is of the kinds " (tt "exn") " and " (tt "breakpoint") " and will terminate execution unless caught. In the interpreter, the condition is accessible on the toplevel using the " (tt ",exn") " command. Use " (tt "(continue)") " to continue execution. If no arguments are given, " (tt "(break)") " lists all procedures that currently have breakpoints set.") (p "Note that " (tt "PROCEDURE") " may be any procedure and doesn't necessarily have to be a toplevel definition."))
(def (sig (procedure "(unbreak [PROCEDURE ...])" (id unbreak))) (p "Removes breakpoints from the given procedures (or from all, if no arguments are given)."))
(def (sig (procedure "(continue [CONDITION])" (id continue)) (procedure "(c [CONDITION])" (id c))) (p "Continues execution from the breakpoint that signalled " (tt "CONDITION") ", or from the last breakpoint if " (tt "CONDITION") " is not given."))
(def (sig (parameter "(trace-output-port [PORT])" (id trace-output-port))) (p "Specifies the port to which tracing information should be written and defaults to the value of " (tt "(current-output-port)") "."))
(def (sig (parameter "(trace-verbose [BOOL])" (id trace-verbose))) (p "If true (the default) show a message when enabling or disabling trace- or break-points for a procedure."))

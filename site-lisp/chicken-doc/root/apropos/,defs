(index ("apropos" 0) ("apropos-list" 1136) ("apropos-information-list" 1337))
(def (sig (procedure "(apropos PATTERN [ENVIRONMENT] [#:macros? MACROS?] [#:qualified? QUALIFIED?] [#:sort SORT])" (id apropos))) (p "Displays information about identifiers matching " (tt "PATTERN") " in the " (tt "ENVIRONMENT") " and, optionally, a " (tt "MACRO-ENVIRONMENT") ".") (dl (dt (tt "PATTERN")) (dd "A " (tt "symbol") ", " (tt "string") " or " (tt "regexp") ". When symbol or string substring matching is performed.") (dt (tt "ENVIRONMENT")) (dd "An " (tt "environment") ". The default is the " (tt "(interaction-environment)") ".") (dt (tt "MACROS?")) (dd "Either " (tt "#t") " to include macros, or " (tt "#f") " to skip them. Default is " (tt "#f") ".") (dt (tt "QUALIFIED?")) (dd "Either " (tt "#t") " to include qualified identifiers or " (tt "#f") " to skip them. Default is " (tt "#f") ".") (dt (tt "SORT")) (dd "Either " (tt "#:name") " for an identifier sort, or " (tt "#:type") " for a type+indentifier sort, or " (tt "#f") " for unsorted. The default is " (tt "#:type") ".")) (p "Should " (tt "PATTERN") " be a namespace qualified symbol the namespace will be dropped before conversion to a regular-expression."))
(def (sig (procedure "(apropos-list PATTERN [ENVIRONMENT] [#:macros? MACROS?] [#:qualified? QUALIFIED?])" (id apropos-list))) (p "Like " (tt "apropos") " but returns a list of matching identifiers."))
(def (sig (procedure "(apropos-information-list PATTERN [ENVIRONMENT] [#:macros? MACROS?] [#:qualified? QUALIFIED?] [#:sort? SORT?])" (id apropos-information-list))) (p "Like " (tt "apropos") " but returns an association list keyed by symbol. The associated information is either " (tt "'macro") ", " (tt "'keyword") ", " (tt "'variable") ", " (tt "'procedure") ", " (tt "'(procedure . <lambda-list-specification>)") " or " (tt "'(procedure . <core procedure name>)") "."))

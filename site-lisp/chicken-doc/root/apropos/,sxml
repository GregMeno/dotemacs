((tags "egg") (section 2 "apropos" (toc)) (section 2 "Documentation" (p "An " (i "apropos") " facility for Chicken Scheme.") (p "When loaded by the interpreter " (tt "csi") " " (tt "apropos") " provides the interpreter command " (tt "a") ".") (section 3 "Apropos API" (section 4 "apropos" (def (sig (procedure "(apropos PATTERN [ENVIRONMENT] [#:macros? MACROS?] [#:qualified? QUALIFIED?] [#:sort SORT])" (id apropos))) (p "Displays information about identifiers matching " (tt "PATTERN") " in the " (tt "ENVIRONMENT") " and, optionally, a " (tt "MACRO-ENVIRONMENT") ".") (dl (dt (tt "PATTERN")) (dd "A " (tt "symbol") ", " (tt "string") " or " (tt "regexp") ". When symbol or string substring matching is performed.") (dt (tt "ENVIRONMENT")) (dd "An " (tt "environment") ". The default is the " (tt "(interaction-environment)") ".") (dt (tt "MACROS?")) (dd "Either " (tt "#t") " to include macros, or " (tt "#f") " to skip them. Default is " (tt "#f") ".") (dt (tt "QUALIFIED?")) (dd "Either " (tt "#t") " to include qualified identifiers or " (tt "#f") " to skip them. Default is " (tt "#f") ".") (dt (tt "SORT")) (dd "Either " (tt "#:name") " for an identifier sort, or " (tt "#:type") " for a type+indentifier sort, or " (tt "#f") " for unsorted. The default is " (tt "#:type") ".")) (p "Should " (tt "PATTERN") " be a namespace qualified symbol the namespace will be dropped before conversion to a regular-expression."))) (section 4 "apropos-list" (def (sig (procedure "(apropos-list PATTERN [ENVIRONMENT] [#:macros? MACROS?] [#:qualified? QUALIFIED?])" (id apropos-list))) (p "Like " (tt "apropos") " but returns a list of matching identifiers."))) (section 4 "apropos-information-list" (def (sig (procedure "(apropos-information-list PATTERN [ENVIRONMENT] [#:macros? MACROS?] [#:qualified? QUALIFIED?] [#:sort? SORT?])" (id apropos-information-list))) (p "Like " (tt "apropos") " but returns an association list keyed by symbol. The associated information is either " (tt "'macro") ", " (tt "'keyword") ", " (tt "'variable") ", " (tt "'procedure") ", " (tt "'(procedure . <lambda-list-specification>)") " or " (tt "'(procedure . <core procedure name>)") ".")))) (section 3 "Interpreter Usage" (p "A " (tt "csi") " toplevel-command is added when the " (tt "apropos") " extension is loaded: " (tt ",a") ".") (p "Example:") (highlight scheme "#;1> ,a print qualified macros sort name ;default sort type\nchar-set:printing                         variable\ndefine-record-printer                     macro\nexpand-full#pretty-print-expand*          procedure (form32 . tmp3133)\n    ...\n#sys#repl-print-length-limit              variable\n##sys#user-print-hook                     procedure (x3171 readable3172 port3173)\n##sys#with-print-length-limit             procedure (limit3205 thunk3206)"))) (section 2 "Usage" (highlight scheme "(require-extension apropos)")) (section 2 "Examples" (ul (li "YMMV")) (highlight scheme "> (apropos 'print)\nexpand-full#pretty-print-expand*  procedure (form32 . tmp3133)\nflonum-print-precision            procedure tmp11801181\nfprintf                           procedure (port742 fstr743 . args744)\npretty-print                      procedure (obj681 . opt682)\npretty-print-width                procedure arg2051\nprint                             procedure args2753\nprint*                            procedure args2782\nprint-call-chain                  procedure tmp34643465\nprint-error-message               procedure (ex4314 . args4315)\nprintf                            procedure (fstr746 . args747)\nsprintf                           procedure (fstr749 . args750)\nchar-set:printing                 variable") (highlight scheme "(apropos-list 'print)\n(char-set:printing print flonum-print-precision pretty-print pretty-print-width sprintf printf print* print-error-message expand-full#pretty-print-expand* print-call-chain fprintf)") (highlight scheme "> (apropos 'print #:qualified? #t)\nprinter:                          keyword\nexpand-full#pretty-print-expand*  procedure (form32 . tmp3133)\nflonum-print-precision            procedure tmp11801181\nfprintf                           procedure (port742 fstr743 . args744)\npretty-print                      procedure (obj681 . opt682)\npretty-print-width                procedure arg2051\nprint                             procedure args2753\nprint*                            procedure args2782\nprint-call-chain                  procedure tmp34643465\nprint-error-message               procedure (ex4314 . args4315)\nprintf                            procedure (fstr746 . args747)\nsprintf                           procedure (fstr749 . args750)\n##csi#print-banner                procedure\n##csi#print-usage                 procedure\n##sys#print                       procedure (x2819 readable2820 port2821)\n##sys#print-to-string             procedure (xs3218)\n##sys#really-print-call-chain     procedure (port3428 chain3429 header3430)\n##sys#register-record-printer     procedure (type3024 proc3025)\n##sys#repl-print-hook             procedure (x2218 port2219)\n##sys#user-print-hook             procedure (x3029 readable3030 port3031)\n##sys#with-print-length-limit     procedure (limit3063 thunk3064)\nchar-set:printing                 variable\n##sys#record-printers             variable\n##sys#repl-print-length-limit     variable")) (section 2 "Requirements" (p (int-link "regex") " " (int-link "check-errors") " " (int-link "miscmacros") " " (int-link "symbol-utils") " " (int-link "string-utils"))) (section 2 "Bugs and Limitations" (ul (li "Doesn't show something similar to procedure-information for macros.")) (p "Requires meta-information beyond that supplied by the transformer procedure.") (ul (li "The support for macros is " (b "brittle") " due to subtle details of the core macro machinary assumed by this extension. Submit a bug report if it breaks.") (li "Module qualified symbols are displayed whether the module is \"imported\" or not. So the exported, and imported, symbol " (tt "sym") " of module " (tt "mod") " is " (tt "mod#sym") " and not " (tt "sym") " when viewed thru the lens of " (tt "apropos") "."))) (section 2 "Author" (p (int-link "/users/kon-lovett" "Kon Lovett"))) (section 2 "Version history" (dl (dt "1.4.3") (dd "Explicit " (tt "regex") " dependency.") (dt "1.4.2") (dd "Using utility libraries, rather than own routines.") (dt "1.4.1") (dd "Bugfix for sorting symbols by printname. " (tt "kind:") " is now " (tt "type:") ".") (dt "1.4.0") (dd "Macros are back but " (b "brittle")) (dt "1.3.0") (dt "1.1.2") (dt "1.1.1") (dt "1.1.0") (dd "Needs \"check-errors\" extension.") (dt "1.0.0") (dd "Chicken 4 release."))) (section 2 "License" (p "Copyright (C) 2009-2010 Kon Lovett.  All rights reserved.") (p "Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the Software), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:") (p "The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.") (p "THE SOFTWARE IS PROVIDED ASIS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.")))
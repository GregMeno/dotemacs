((tags "eggs") (toc) (section 2 "internet-message" (section 3 "Description" (p (tt "internet-message") " is a collection of parser combinators for the grammar defined in " (link "http://www.ietf.org/rfc/rfc5322.txt" "RFC 5322") " (Internet Message Format).")) (section 3 "Library Procedures" (p "The combinator procedures in this library are based on the interface provided by the " (int-link "abnf") " library.") (p "These procedures are provided as fields of the " (tt "<InetMessage>") " typeclass. Please see the " (int-link "typeclass") " library for information on type classes.") (p "The " (tt "<InetMessage>") " typeclass is intended to provide abstraction over different kinds of input sequences, e.g. character lists, strings, streams, etc. " (tt "<InetMessage>") " inherits from " (tt "<CoreABNF>") ", which provides the core parsing primitives used to build the CSV grammar parser (see the " (int-link "abnf") " library for more information).") (p "The following example illustrates the creation of an instance of " (tt "<InetMessage>") " specialized for character lists.") (highlight scheme "(use typeclass internet-message abnf)\n\n(define char-list-<Input>\n  (make-<Input> null? car cdr))\n\n(define char-list-<Token>\n  (Input->Token char-list-<Input>))\n\n(define char-list-<CharLex>\n  (Token->CharLex char-list-<Token>))\n\n(define char-list-<CoreABNF>\n  (Token.CharLex->CoreABNF char-list-<Token> \n\t\t\t   char-list-<CharLex>))\n\n(define char-list-<InetMessage>\n  (CoreABNF->InetMessage char-list-<CoreABNF> ))\n\n(import-instance (<InetMessage> char-list-<InetMessage>))") (def (sig (procedure "fields" (id fields))) (p "This parser will parse an arbitrary number of header fields as defined in the RFC. For each field, an appropriate alist is created. The following fields are recognized:") (ul (li (tt "from")) (li (tt "sender")) (li (tt "return-path")) (li (tt "reply-to")) (li (tt "to")) (li (tt "cc")) (li (tt "bcc")) (li (tt "message-id")) (li (tt "in-reply-to")) (li (tt "references")) (li (tt "subject")) (li (tt "comments")) (li (tt "keywords")) (li (tt "orig-date")) (li (tt "resent-date")) (li (tt "resent-from")) (li (tt "resent-sender")) (li (tt "resent-to")) (li (tt "resent-cc")) (li (tt "resent-bcc")) (li (tt "resent-msg-id")) (li (tt "resent-reply-to")) (li (tt "received")) (li (tt "optional-field")))) (def (sig (procedure "body" (id body))) (p "This parser will parse a message body as specified by the RFC; that is, any number of text characters, which may be divided into separate lines by " (tt "CRLF") ".")) (def (sig (procedure "message" (id message))) (p "This parser will parse a complete message as defined by the RFC and it broken down into the separate header fields and the message body.")) (def (sig (procedure "comment" (id comment))) (p "This parser parses comment text, as defined by the RFC. Comments may nest."))) (section 3 "Requires" (ul (li (int-link "abnf")))) (section 3 "Version History" (ul (li "4.1-4.2 Typeclass interface fixes") (li "4.0 Implemented typeclass interface") (li "3.1 Additional parsing combinators exported") (li "3.0 Changes to the interface of the fields parser") (li "2.0 Extensions to the header function and many bugfixes") (li "1.3 Update to reflect changes in lexgen") (li "1.1 Fix in date parsing") (li "1.0 Initial release"))) (section 3 "License" (p "Based on the Haskell Rfc2822 module by Peter Simons.") (pre " Copyright 2009-2010 Ivan Raikov and the Okinawa Institute of Science and Technology.") (pre " This program is free software: you can redistribute it and/or\n modify it under the terms of the GNU General Public License as\n published by the Free Software Foundation, either version 3 of the\n License, or (at your option) any later version.") (pre " This program is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n General Public License for more details.") (pre " A full copy of the GPL license can be found at\n <http://www.gnu.org/licenses/>."))))
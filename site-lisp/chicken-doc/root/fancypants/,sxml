((tags "egg") (section 2 "fancypants" (toc) (section 3 "Description") (section 3 "Author" (p (int-link "Peter Bex"))) (section 3 "Requirements" (p "This egg has no dependencies, but in order to use it you will need " (int-link "sxml-transforms") ".")) (section 3 "Documentation" (p "Fancypants is a fairly simple set of functions plus an SXSLT ruleset to automagically convert SXML with plain-ASCII strings to typographically enhanced Unicode strings.  Ligatures are added and quotes are " (i "educated") " ie, opening quotes are curled to the left while closing quotes are curled the other way.  An example piece of SXML:") (highlight scheme "(sxml-apply-rules\n  '(blockquote \"\\\"The affable Estonian wasn't fired\\\",\"\n\t       \" said the --- strangely afflicted ---\"\n\t       \" flying monkey at the office.\")\n  (make-fancy-rules)\n  (make-smart-quote-rules))") (p "When rendered, looks like the following:") ((blockquote " " "“" "The a" "ﬀ" "able Estonian wasn" "’" "t " "ﬁ" "red" "”" ", said the " "&mdash;" " strangely a" "ﬄ" "icted " "&mdash;" " " "ﬂ" "ying monkey at the o" "ﬃ" "ce.")) (p "Which looks like this without using fancypants:") ((blockquote "\"The affable Estonian wasn't fired\", said the --- strangely afflicted --- flying monkey at the office.")) (p "As you can see, the quotes are curled correctly, the three minuses are converted to real " (i "emdashes") " and the 'fi', 'ffl', 'fl' and 'ff' characters are replaced by ligatures that merge the characters in a nice way.") (p (b "A word of warning") ": How the ligatures are displayed depends heavily on the particular font being used and the implementation of the fonts.  For example, on a Mac, most " (link "http://en.wikipedia.org/wiki/Core_fonts_for_the_Web" "MS Corefonts") " are apparently modified by Apple to support all ligatures, while the basic Corefonts by Microsoft (as found under Windows and many Unix installations) are lacking ligatures in most fonts.  Consider this before using Fancypants' ligature capability (the fi and ff ligatures are reasonably safe to use in most cases, though).  Testing on a number of platforms is, unfortunately, still a good idea while doing webdevelopment.") (p "Fancypants was inspired by " (link "http://daringfireball.net/projects/smartypants/" "SmartyPants") " and, more specifically, " (link "http://www.cs.wisc.edu/~wolfson/ligatures.html" "Mikhail Wolfson's ligatures hack for SmartyPants") ".") (section 4 "Rulesets" (p "There are two rulesets: one for auto-conversion of ligatures and other types of character combinations to Unicode and one for smartening quotes.  Both rulesets are generated by functions.") (def (sig (procedure "(make-fancy-rules [exceptions] [character-map])" (id make-fancy-rules))) (p "Create a ruleset that performs ASCII->Unicode mappings for all entries in the " (tt "character-map") " argument.  " (tt "character-map") " defaults to " (tt "default-map") " (see below).") (p "Please note that the order matters because the replacement algorithm employes a nongreedy search.  Place prefixes of other matches after them and there is no problem.  The symbols in " (tt "exceptions") " are the tags to leave alone (ie, nothing below these is fancified) and defaults to " (tt "default-exceptions") " (see below).")) (def (sig (procedure "(make-smart-quote-rules [exceptions] [quotes])" (id make-smart-quote-rules))) (p "Create a ruleset that educates quotes.  " (tt "quotes") " defines the strategy of how to translate quotes to smart quotes.  See the documentation for " (tt "all-quotes") " for more info on the structure of this argument.  Please note that here, the order doesn't matter because the replacement algorithm uses simple regexes.  The symbols in " (tt "exceptions") " are the tags to leave alone. (ie, under these nothing has its quotes changes)") (p (tt "exceptions") " defaults to " (tt "default-exceptions") " and " (tt "quotes") " defaults to " (tt "all-quotes") " (see below)."))) (section 4 "Constants" (def (sig (constant "default-exceptions" (id default-exceptions))) (p "This constant is a list of all the tags (symbols) that are ignored by default.") (pre "") (p "These are: " (tt "(head script pre code kbd samp @)") ".")) (def (sig (constant "default-ligature-map" (id default-ligature-map))) (p "An alist of default ASCII sequences that are translated to ligatures by " (tt "make-fancy-rules") ".") (p "Contains mappings for 'ffi', 'ffl', 'ff', 'fi', 'fl' and 'ft'.  The mapping for 'st' is intentionally left out because this ligature is too elaborate to use in body copy.  You could easily define a ruleset for eg headings that does include the 'st' ligature (it's Unicode character fb06).")) (def (sig (constant "default-punctuation-map" (id default-punctuation-map))) (p "An alist of default ASCII punctuation sequences to translate to 'fancy' Unicode versions.  Contains mappings for '" "..." "' => '" "…" "', '" ".." "' => '" "‥" "', '" ". . ." "' => '" "…" "', '" "---" "' => '" "&mdash;" "' and '" "--" "' => '" "&ndash;" "'.")) (def (sig (constant "default-arrow-map" (id default-arrow-map))) (p "An alist of default ASCII sequences to translate to 'fancy' Unicode versions.  This contains several types of arrows.  Useful mostly for mathematical texts and 'evaluates to' examples.")) (def (sig (constant "default-map" (id default-map))) (p "The default map to use for fancifying text.  This is simply a concatenation of " (tt "default-ligature-map") ", " (tt "default-punctuation-map") " and " (tt "default-arrow-map") ".")) (def (sig (constant "all-quotes" (id all-quotes))) (p "The quote characters in here to be translated by " (tt "make-smart-quotes") ".  Remove any you don't want to have handled.") (pre "") (p "The structure of an entry in this list is:") (pre " (pre match post how counts?)") (p (tt "pre") " is the part of the string that's before the quote to match, " (tt "post") " is the string that is after the match.  These are all irregex literals.") (p (tt "how") " is one of the following symbols: " (tt "single") ", " (tt "double") ", " (tt "single-open") ", " (tt "double-open") ", " (tt "single-close") " or " (tt "double-close") ".") (p (tt "counts?") " is a boolean describing whether the quote should influence the nesting of subsequent quotes or not.  (ie, \"isn't\" => #f, since the ' is not a quote which matches a preceding quote or which is matched by a subsequent quote)."))) (section 4 "Helper procedures" (p "These procedures are used internally by Fancypants, but they are probably useful enough to export, so here they are.") (def (sig (procedure "(fancify string character-map)" (id fancify))) (p "Perform simple substitution of all ASCII character strings in the " (tt "character-map") " alist to their Unicode character within " (tt "string") ".")) (def (sig (procedure "(smarten-quotes sxml quotes exceptions)" (id smarten-quotes))) (p "Smarten the " (tt "sxml") ".  Translates only the strings in the " (tt "quotes") " argument, and skips all tag names in the " (tt "exceptions") " list")))) (section 3 "Changelog" (ul (li "0.4 Updated to strict use irregex API procedures so it works with Chicken 4.6.2+") (li "0.3 Ported to Chicken 4 and use irregex's SRE syntax so regexes can be composed") (li "0.2 Added testsuite, removed useless syntax-case dependency") (li "0.1 initial release."))) (section 3 "License" (pre " Copyright (c) 2006-2009, Peter Bex (peter.bex@xs4all.nl)\n All rights reserved.\n \n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions\n are met:\n 1. Redistributions of source code must retain the above copyright\n    notice, this list of conditions and the following disclaimer.\n 2. Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in the\n    documentation and/or other materials provided with the distribution.\n 3. Neither the name of author nor the names of any contributors may\n    be used to endorse or promote products derived from this software\n    without specific prior written permission.\n \n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."))))
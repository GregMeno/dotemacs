(index ("%reset" 0) ("%shift" 330) ("reset" 647) ("shift" 856) ("%reset-values" 1170) ("%shift-values" 1509) ("reset-values" 1745) ("shift-values" 1957) ("%breset" 2190) ("%bshift" 2566) ("breset" 2900) ("bshift" 3150) ("%breset-values" 3481) ("%bshift-values" 3838) ("breset-values" 4084) ("bshift-values" 4314) ("range" 4557) ("range" 5164) ("%range" 5449) ("%range" 5599) ("define-unit" 5744) ("define-bind" 5875) ("reflect" 6013) ("reflect-values" 6145) ("%reflect" 6291) ("reify" 6425) ("reify-values" 6540) ("%reify" 6669) ("greset" 6786) ("gshift" 6901) ("hr-stop" 7018) ("hs-stop" 7089) ("hr-prop" 7159) ("hs-prop" 7235) ("h-compose" 7311) ("h-value" 7460) ("h-datatype?" 7580) ("h-cases" 7697))
(def (sig (syntax "(%reset EXPRESSION ...)" (id %reset))) (p "Evaluate the body " (tt "EXPRESSION ...") " with a delimited continuation. The body will contain one or more instances of {{(%shift ...))") (p "Any use of " (tt "(dynamic-wind ...)") " within the dynamic scope of the partial continuation will be " (b "ignored") "!"))
(def (sig (syntax "(%shift PC-TAG EXPRESSION)" (id %shift))) (p "Within the scope of " (tt "EXPRESSION") " " (tt "PC-TAG") " is bound to the reified partial continuation delimited by the enclosing " (tt "(%reset ...)") ". Provide a value to the partial continuation using the form " (tt "(PC-TAG <something>)") "."))
(def (sig (syntax "(reset EXPRESSION ...)" (id reset))) (p "Evaluate the body " (tt "EXPRESSION ...") " with a delimited continuation. The body will contain one or more instances of " (tt "(shift ...)") "."))
(def (sig (syntax "(shift PC-TAG EXPRESSION)" (id shift))) (p "Within the scope of " (tt "EXPRESSION") " " (tt "PC-TAG") " is bound to the reified partial continuation delimited by the enclosing " (tt "(reset ...)") ". Provide a value to the partial continuation using the form " (tt "(PC-TAG <something>)") "."))
(def (sig (syntax "(%reset-values EXPRESSION ...)" (id %reset-values))) (p "Multiple value return version of " (tt "(%reset ...)") ". The body will contain one or more instances of " (tt "(%shift-values ...)")) (p "Any use of " (tt "(dynamic-wind ...)") " within the dynamic scope of the partial continuation will be " (b "ignored") "!"))
(def (sig (syntax "(%shift-values PC-TAG EXPRESSION)" (id %shift-values))) (p "Multiple value return version of " (tt "(%shift ...)") ". Provide a value to the partial continuation using the form " (tt "(PC-TAG <something> ...)") "."))
(def (sig (syntax "(reset-values EXPRESSION ...)" (id reset-values))) (p "Multiple value return version of " (tt "(reset ...)") ". The body will contain one or more instances of " (tt "(shift-values ...)") "."))
(def (sig (syntax "(shift-values PC-TAG EXPRESSION)" (id shift-values))) (p "Multiple value return version of " (tt "(shift ...)") ". Provide a value to the partial continuation using the form " (tt "(PC-TAG <something> ...)") "."))
(def (sig (syntax "(%breset RC-TAG EXPRESSION ...)" (id %breset))) (p "Evaluate the body " (tt "EXPRESSION ...") " with a delimited continuation named " (tt "RC-TAG") ". The body will contain one or more instances of " (tt "(%bshift RC-TAG ...)")) (p "Any use of " (tt "(dynamic-wind ...)") " within the dynamic scope of the partial continuation will be " (b "ignored") "!"))
(def (sig (syntax "(%bshift RC-TAG PC-TAG EXPRESSION)" (id %bshift))) (p "Within the scope of " (tt "EXPRESSION") " " (tt "PC-TAG") " is bound to the reified partial continuation delimited by the enclosing " (tt "(%breset RC-TAG ...)") ". Provide a value to the partial continuation using the form " (tt "(PC-TAG <something>)") "."))
(def (sig (syntax "(breset RC-TAG EXPRESSION ...)" (id breset))) (p "Evaluate the body " (tt "EXPRESSION ...") " with a delimited continuation named " (tt "RC-TAG") ". The body will contain one or more instances of " (tt "(bshift RC-TAG ...)") "."))
(def (sig (syntax "(bshift RC-TAG PC-TAG EXPRESSION)" (id bshift))) (p "Within the scope of " (tt "EXPRESSION") " " (tt "PC-TAG") " is bound to the reified partial continuation delimited by the enclosing " (tt "(breset RC-TAG ...)") ". Provide a value to the partial continuation using the form " (tt "(PC-TAG <something>)") "."))
(def (sig (syntax "(%breset-values RC-TAG EXPRESSION ...)" (id %breset-values))) (p "Multiple value return version of " (tt "(%breset ...)") ". The body will contain one or more instances of " (tt "(%bshift-values RC-TAG ...)")) (p "Any use of " (tt "(dynamic-wind ...)") " within the dynamic scope of the partial continuation will be " (b "ignored") "!"))
(def (sig (syntax "(%bshift-values RC-TAG PC-TAG EXPRESSION)" (id %bshift-values))) (p "Multiple value return version of " (tt "(%bshift ...)") ". Provide a value to the partial continuation using the form " (tt "(PC-TAG <something> ...)") "."))
(def (sig (syntax "(breset-values RC-TAG EXPRESSION ...)" (id breset-values))) (p "Multiple value return version of " (tt "(breset ...)") ". The body will contain one or more instances of " (tt "(bshift-values RC-TAG ...)") "."))
(def (sig (syntax "(bshift-values RC-TAG PC-TAG EXPRESSION)" (id bshift-values))) (p "Multiple value return version of " (tt "(bshift ...)") ". Provide a value to the partial continuation using the form " (tt "(PC-TAG <something> ...)") "."))
(def (sig (syntax "(range RC-TAG FROM VALUE STEP TO?)" (id range))) (p "The value of the delimited continuation " (tt "RC-TAG") " ranges over the set of values specified by the state generation procedure suite. For use with " (tt "(breset ...)")) (dl (dt "FROM") (dd "Zero argument procedure, returning the initial state") (dt "VALUE") (dd "Single argument procedure, of the state, returning the value of the state") (dt "STEP") (dd "Single argument procedure, of the state, returning the next state") (dt "TO?") (dd "Single argument procedure, of the state, returning {{#t)  when the range is complete")))
(def (sig (syntax "(range RC-TAG FROM [STEP] TO)" (id range))) (p "The value of the delimited continuation " (tt "RC-TAG") " ranges over the number interval [" (tt "FROM") " " (tt "TO") "], by " (tt "STEP") ". The increment is 1 when missing. For use with  " (tt "(breset ...)") "."))
(def (sig (syntax "(%range RC-TAG FROM VALUE STEP TO?)" (id %range))) (p "Version of " (tt "(range ...)") " for use with " (tt "(%breset ...)") "."))
(def (sig (syntax "(%range RC-TAG FROM [STEP] TO)" (id %range))) (p "Version of " (tt "(range ...)") " for use with " (tt "(%breset ...)") "."))
(def (sig (syntax "(define-unit KIND BODY ...)" (id define-unit))) (p "Expands to " (tt "(define (KIND-unit obj) BODY ...)") "."))
(def (sig (syntax "(define-bind KIND BODY ...)" (id define-bind))) (p "Expands to " (tt "(define (KIND-bind monad func) BODY ...)") "."))
(def (sig (syntax "(reflect KIND MONAD)" (id reflect))) (p "Extract value from " (tt "MONAD") ". Plays the role of Haskell '<-'."))
(def (sig (syntax "(reflect-values KIND MONAD)" (id reflect-values))) (p "Extract value from " (tt "MONAD") ". Plays the role of Haskell '<-'."))
(def (sig (syntax "(%reflect KIND MONAD)" (id %reflect))) (p "Extract value from " (tt "MONAD") ". Plays the role of Haskell '<-'."))
(def (sig (syntax "(reify KIND EXPRESSION)" (id reify))) (p "Return result of " (tt "EXPRESSION") " as a monad."))
(def (sig (syntax "(reify-values KIND EXPRESSION)" (id reify-values))) (p "Return result of " (tt "EXPRESSION") " as a monad."))
(def (sig (syntax "(%reify KIND EXPRESSION)" (id %reify))) (p "Return result of " (tt "EXPRESSION") " as a monad."))
(def (sig (syntax "(greset HR E)" (id greset))) (p "Reset parameterized by the H Reset procedure " (tt "HR") "."))
(def (sig (syntax "(gshift HS F E)" (id gshift))) (p "Shift parameterized by the H Shift procedure " (tt "HS") "."))
(def (sig (procedure "(hr-stop V)" (id hr-stop))) (p "H Reset Stop."))
(def (sig (procedure "(hs-stop V)" (id hs-stop))) (p "H Shift Stop"))
(def (sig (procedure "(hr-prop V)" (id hr-prop))) (p "H Reset Propagate."))
(def (sig (procedure "(hs-prop V)" (id hs-prop))) (p "H Shift Propagate."))
(def (sig (procedure "(h-compose F X)" (id h-compose))) (p "Returns the composition of " (tt "F") " and " (tt "X") " as an " (tt "h-datatype") "."))
(def (sig (procedure "(h-value V)" (id h-value))) (p "Returns the value of " (tt "V") " as an " (tt "h-datatype") "."))
(def (sig (procedure "(h-datatype? OBJECT)" (id h-datatype?))) (p "Is " (tt "OBJECT") " an " (tt "h-datatype") "?"))
(def (sig (syntax "(h-cases E ((F X) ON-h-EXPR) (V ON-V-EXPR))" (id h-cases))) (p "Deconstructs the " (tt "h-datatype") " " (tt "E") ", binding " (tt "F") " & " (tt "X") " for an evaluation of the " (tt "ON-h-EXPR") " and " (tt "V") " for an evaluation of the " (tt "ON-V-EXPR") "."))

(index ("synch" 0) ("synch-with" 187) ("call/synch" 465) ("call-with/synch" 739) ("apply/synch" 1052) ("apply-with/synch" 1328) ("synch/lock" 1644) ("synch/unlock" 1865) ("let/synch" 2209) ("set!/synch" 2605) ("object/synch" 2986) ("record/synch" 3358) ("record-synch/lock" 3892) ("record-synch/unlock" 4264) ("%call/synch" 4759) ("%call-with/synch" 4859) ("%apply/synch" 4969) ("%apply-with/synch" 5071) ("%synch" 5183) ("%synch-with" 5258) ("%synch/lock" 5352) ("%synch/unlock" 5437) ("%let/synch" 5526) ("%set!/synch" 5608) ("%object/synch" 5704) ("%record/synch" 5793) ("%record-synch/lock" 5900) ("%record-synch/unlock" 6017) ("make-object/synch" 6138) ("object?/synch" 6648) ("define-constructor/synch" 6966) ("define-predicate/synch" 7261) ("define-operation/synch" 7474))
(def (sig (syntax "(synch MUTEXFORM [BODY ...]) => OBJECT" (id synch))) (p "Execute " (tt "BODY ...") " while " (tt "MUTEX") " locked.") (p "Returns the result of " (tt "BODY ...") "."))
(def (sig (syntax "(synch-with MUTEXFORM VARIABLE [BODY ...]) => OBJECT" (id synch-with))) (p "Execute " (tt "BODY ...") " while " (tt "MUTEX") " locked and the mutex-specific of " (tt "MUTEX") " bound to " (tt "VARIABLE") ".") (p "Returns the result of " (tt "BODY ...") "."))
(def (sig (syntax "(call/synch MUTEXFORM PROCEDURE [ARGUMENTS ...]) => OBJECT" (id call/synch))) (p "Invoke " (tt "PROCEDURE") " on the argument list " (tt "ARGUMENTS ...") " while " (tt "MUTEX") " locked.") (p "Returns the result of the " (tt "PROCEDURE") " invocation."))
(def (sig (syntax "(call-with/synch MUTEXFORM PROCEDURE [ARGUMENTS ...]) => OBJECT" (id call-with/synch))) (p "Invoke " (tt "PROCEDURE") " on the mutex-specific of " (tt "MUTEX") " and the " (tt "ARGUMENTS ...") " while " (tt "MUTEX") " locked.") (p "Returns the result of the " (tt "PROCEDURE") " invocation."))
(def (sig (syntax "(apply/synch MUTEXFORM PROCEDURE [ARGUMENTS ...]) => OBJECT" (id apply/synch))) (p "Apply " (tt "PROCEDURE") " to the argument list " (tt "ARGUMENTS ...") " while " (tt "MUTEX") " locked.") (p "Returns the result of the " (tt "PROCEDURE") " application."))
(def (sig (syntax "(apply-with/synch MUTEXFORM PROCEDURE [ARGUMENTS ...]) => OBJECT" (id apply-with/synch))) (p "Apply " (tt "PROCEDURE") " to the mutex-specific of " (tt "MUTEX") ") and the " (tt "ARGUMENTS ...") " while " (tt "MUTEX") " locked.") (p "Returns the result of the " (tt "PROCEDURE") " application."))
(def (sig (syntax "(synch/lock MUTEXFORM [BODY ...]) => OBJECT" (id synch/lock))) (p "Execute " (tt "BODY ...") " while " (tt "MUTEX") " locked, and leave mutex locked.") (p "Returns the result of " (tt "BODY ...") "."))
(def (sig (syntax "(synch/unlock MUTEXFORM [BODY ...]) => OBJECT" (id synch/unlock))) (p "Execute " (tt "BODY ...") " while " (tt "MUTEX") " locked, and leave mutex unlocked.") (p "Returns the result of " (tt "BODY ...") ".") (p "Should the mutex be unlocked a warning is issued and the mutex is locked before executing the " (tt "BODY") "."))
(def (sig (syntax "(let/synch BINDINGS [BODY ...]) => OBJECT" (id let/synch))) (p (tt "BINDINGS") " is a list of " (tt "(VARIABLE MUTEXFORM)") ".") (p "Expands into a nested " (tt "(synch-with MUTEXFORM VARIABLE ...") " form, a " (b (tt "synch-with")) " for each binding pair in " (tt "BINDINGS") ". The leftmost binding pair is the outermost.") (p "Returns the result of " (tt "BODY ...") "."))
(def (sig (syntax "(set!/synch (VARIABLE MUTEXFORM) [BODY ...]) => OBJECT" (id set!/synch))) (p "While the " (tt "MUTEX") " is locked, evaluates " (tt "BODY ...") " with the " (tt "VARIABLE") " bound to the mutex-specific of " (tt "MUTEX") ". Sets the mutex-specific of " (tt "MUTEX") " to the result of the evaluation.") (p "Returns the new mutex-specific of " (tt "MUTEX") "."))
(def (sig (syntax "(object/synch MUTEXFORM [BODY ...]) => OBJECT" (id object/synch))) (p "Execute " (tt "BODY ...") " while " (tt "MUTEX") " locked.") (p "The top-level forms of " (tt "BODY ...") " are parsed for occurrences of " (tt "><") ". All such occurrences are replaced by the mutex-specific of " (tt "MUTEX") ".") (p "Returns the result of " (tt "BODY ...") "."))
(def (sig (syntax "(record/synch RECORD-SYMBOL RECORD-OBJECT [BODY ...]) => OBJECT" (id record/synch))) (p "Execute " (tt "BODY ...") " while the " (tt "RECORD-OBJECT") " mutex is locked. The mutex is a field of the record named " (tt "RECORD-SYMBOL-mutex") ".") (p "Returns the result of " (tt "BODY ...") ".") (highlight scheme "(define-record-type foo\n  (make-foo a b mtx)\n  foo?\n  (a foo-a)\n  (b foo-b)\n  (mtx foo-mutex) )\n\n(define f1 (make-foo 1 2 (make-mutex 'foo)))\n\n(record/synch foo f1 (+ (foo-a f1) (foo-b f1)))"))
(def (sig (syntax "(record-synch/lock RECORD-SYMBOL RECORD-OBJECT [BODY ...]) => OBJECT" (id record-synch/lock))) (p "Execute " (tt "BODY ...") " while the " (tt "RECORD-OBJECT") " mutex is locked, and leave the mutex locked.") (p "Returns the result of " (tt "BODY ...") ".") (p (tt "RECORD-SYMBOL") " and " (tt "RECORD-OBJECT") " are per " (b (tt "record/synch")) "."))
(def (sig (syntax "(record-synch/unlock RECORD-SYMBOL RECORD-OBJECT [BODY ...]) => OBJECT" (id record-synch/unlock))) (p "Execute " (tt "BODY ...") " while the " (tt "RECORD-OBJECT") " mutex is locked, and leave the mutex unlocked.") (p "Returns the result of " (tt "BODY ...") ".") (p (tt "RECORD-SYMBOL") " and " (tt "RECORD-OBJECT") " are per " (b (tt "record/synch")) ".") (p "Should the mutex be unlocked a warning is issued and the mutex is locked before executing the " (tt "BODY") "."))
(def (sig (syntax "(%call/synch MUTEXFORM PROCEDURE [ARGUMENTS ...]) => OBJECT" (id %call/synch))))
(def (sig (syntax "(%call-with/synch MUTEXFORM PROCEDURE [ARGUMENTS ...]) => OBJECT" (id %call-with/synch))))
(def (sig (syntax "(%apply/synch MUTEXFORM PROCEDURE [ARGUMENTS ...]) => OBJECT" (id %apply/synch))))
(def (sig (syntax "(%apply-with/synch MUTEXFORM PROCEDURE [ARGUMENTS ...]) => OBJECT" (id %apply-with/synch))))
(def (sig (syntax "(%synch MUTEXFORM [BODY ...]) => OBJECT" (id %synch))))
(def (sig (syntax "(%synch-with MUTEXFORM VARIABLE [BODY ...]) => OBJECT" (id %synch-with))))
(def (sig (syntax "(%synch/lock MUTEXFORM [BODY ...]) => OBJECT" (id %synch/lock))))
(def (sig (syntax "(%synch/unlock MUTEXFORM [BODY ...]) => OBJECT" (id %synch/unlock))))
(def (sig (syntax "(%let/synch BINDINGS [BODY ...]) => OBJECT" (id %let/synch))))
(def (sig (syntax "(%set!/synch (VARIABLE MUTEXFORM) [BODY ...]) => OBJECT" (id %set!/synch))))
(def (sig (syntax "(%object/synch MUTEXFORM [BODY ...]) => OBJECT" (id %object/synch))))
(def (sig (syntax "(%record/synch RECORD-SYMBOL RECORD-OBJECT [BODY ...]) => OBJECT" (id %record/synch))))
(def (sig (syntax "(%record-synch/lock RECORD-SYMBOL RECORD-OBJECT [BODY ...]) => OBJECT" (id %record-synch/lock))))
(def (sig (syntax "(%record-synch/unlock RECORD-SYMBOL RECORD-OBJECT [BODY ...]) => OBJECT" (id %record-synch/unlock))))
(def (sig (procedure "(make-object/synch OBJECT [NAME]) => MUTEX" (id make-object/synch))) (p "Returns a mutex with a mutex-specific value of " (tt "OBJECT") ", and optional mutex " (tt "NAME") ".") (p (tt "NAME") " is either a symbol or a one element list of symbol. When a list the first element is used as the basis for a generated symbol. When a symbol it is used literally as the mutex name.") (p "When " (tt "NAME") " is missing a generated symbol with the prefix " (b (tt "synchobj")) " is provided."))
(def (sig (procedure "(object?/synch OBJECT [PREDICATE]) => BOOLEAN" (id object?/synch))) (p "Is the " (tt "OBJECT") " a synchronized object - a mutex with a non-void mutex specific?") (p "The optional " (tt "PREDICATE") " is used to verify the type of the mutex-specific binding. Otherwise any object is accepted."))
(def (sig (syntax "(define-constructor/synch CTORNAME [ID])" (id define-constructor/synch))) (highlight scheme "(define-constructor/synch make-hash-table hash-table/synch:)\n;=>\n(define (make-hash-table/sync . args)\n  (make-object/synch (apply make-hash-table args) '(hash-table/synch:)) )"))
(def (sig (syntax "(define-predicate/synch PREDNAME)" (id define-predicate/synch))) (highlight scheme "(define-predicate/synch hash-table?)\n;=>\n(define (hash-table?/sync obj) (object?/synch obj hash-table?))"))
(def (sig (syntax "(define-operation/synch OPERNAME)" (id define-operation/synch))) (p "Note that the operand must be the first argument of " (tt "OPERNAME") ".") (highlight scheme "(define-operation/synch hash-table-set!)\n;=>\n(define (hash-table-set!/sync mtx+obj . args)\n  (let ((mtx (if (pair? mtx+obj) (car mtx+obj) mtx+obj)))\n    (check-mutex+object 'hash-table-set!/synch mtx 'object/synch)\n    (synch-with mtx+obj obj (apply hash-table-set! obj args)) ) )"))

((tags "egg") (section 2 "synch" (p "Simple critical region helpers.") (toc)) (section 2 "Documentation" (section 3 "Critical Regions" (p "Where " (tt "MUTEXFORM") " below the following forms are accepted:") (dl (dt (tt "MUTEX")) (dd "just a mutex") (dt (tt "(MUTEX [(LOCK-ARG ...) [(UNLOCK-ARG ...)]])")) (dd "mutx with optional lock and unlock arguments")) (section 4 "Synchronized Invocation - Continuation Safe" (p "These forms have the mutex lock/unlock wrapped in " (b (tt "dynamic-wind")) ".") (section 5 "synch" (def (sig (syntax "(synch MUTEXFORM [BODY ...]) => OBJECT" (id synch))) (p "Execute " (tt "BODY ...") " while " (tt "MUTEX") " locked.") (p "Returns the result of " (tt "BODY ...") "."))) (section 5 "synch-with" (def (sig (syntax "(synch-with MUTEXFORM VARIABLE [BODY ...]) => OBJECT" (id synch-with))) (p "Execute " (tt "BODY ...") " while " (tt "MUTEX") " locked and the mutex-specific of " (tt "MUTEX") " bound to " (tt "VARIABLE") ".") (p "Returns the result of " (tt "BODY ...") "."))) (section 5 "call/synch" (def (sig (syntax "(call/synch MUTEXFORM PROCEDURE [ARGUMENTS ...]) => OBJECT" (id call/synch))) (p "Invoke " (tt "PROCEDURE") " on the argument list " (tt "ARGUMENTS ...") " while " (tt "MUTEX") " locked.") (p "Returns the result of the " (tt "PROCEDURE") " invocation."))) (section 5 "call-with/synch" (def (sig (syntax "(call-with/synch MUTEXFORM PROCEDURE [ARGUMENTS ...]) => OBJECT" (id call-with/synch))) (p "Invoke " (tt "PROCEDURE") " on the mutex-specific of " (tt "MUTEX") " and the " (tt "ARGUMENTS ...") " while " (tt "MUTEX") " locked.") (p "Returns the result of the " (tt "PROCEDURE") " invocation."))) (section 5 "apply/synch" (def (sig (syntax "(apply/synch MUTEXFORM PROCEDURE [ARGUMENTS ...]) => OBJECT" (id apply/synch))) (p "Apply " (tt "PROCEDURE") " to the argument list " (tt "ARGUMENTS ...") " while " (tt "MUTEX") " locked.") (p "Returns the result of the " (tt "PROCEDURE") " application."))) (section 5 "apply-with/synch" (def (sig (syntax "(apply-with/synch MUTEXFORM PROCEDURE [ARGUMENTS ...]) => OBJECT" (id apply-with/synch))) (p "Apply " (tt "PROCEDURE") " to the mutex-specific of " (tt "MUTEX") ") and the " (tt "ARGUMENTS ...") " while " (tt "MUTEX") " locked.") (p "Returns the result of the " (tt "PROCEDURE") " application."))) (section 5 "synch/lock" (def (sig (syntax "(synch/lock MUTEXFORM [BODY ...]) => OBJECT" (id synch/lock))) (p "Execute " (tt "BODY ...") " while " (tt "MUTEX") " locked, and leave mutex locked.") (p "Returns the result of " (tt "BODY ...") "."))) (section 5 "synch/unlock" (def (sig (syntax "(synch/unlock MUTEXFORM [BODY ...]) => OBJECT" (id synch/unlock))) (p "Execute " (tt "BODY ...") " while " (tt "MUTEX") " locked, and leave mutex unlocked.") (p "Returns the result of " (tt "BODY ...") ".") (p "Should the mutex be unlocked a warning is issued and the mutex is locked before executing the " (tt "BODY") "."))) (section 5 "let/synch" (def (sig (syntax "(let/synch BINDINGS [BODY ...]) => OBJECT" (id let/synch))) (p (tt "BINDINGS") " is a list of " (tt "(VARIABLE MUTEXFORM)") ".") (p "Expands into a nested " (tt "(synch-with MUTEXFORM VARIABLE ...") " form, a " (b (tt "synch-with")) " for each binding pair in " (tt "BINDINGS") ". The leftmost binding pair is the outermost.") (p "Returns the result of " (tt "BODY ...") "."))) (section 5 "set!/synch" (def (sig (syntax "(set!/synch (VARIABLE MUTEXFORM) [BODY ...]) => OBJECT" (id set!/synch))) (p "While the " (tt "MUTEX") " is locked, evaluates " (tt "BODY ...") " with the " (tt "VARIABLE") " bound to the mutex-specific of " (tt "MUTEX") ". Sets the mutex-specific of " (tt "MUTEX") " to the result of the evaluation.") (p "Returns the new mutex-specific of " (tt "MUTEX") "."))) (section 5 "object/synch" (def (sig (syntax "(object/synch MUTEXFORM [BODY ...]) => OBJECT" (id object/synch))) (p "Execute " (tt "BODY ...") " while " (tt "MUTEX") " locked.") (p "The top-level forms of " (tt "BODY ...") " are parsed for occurrences of " (tt "><") ". All such occurrences are replaced by the mutex-specific of " (tt "MUTEX") ".") (p "Returns the result of " (tt "BODY ...") "."))) (section 5 "record/synch" (def (sig (syntax "(record/synch RECORD-SYMBOL RECORD-OBJECT [BODY ...]) => OBJECT" (id record/synch))) (p "Execute " (tt "BODY ...") " while the " (tt "RECORD-OBJECT") " mutex is locked. The mutex is a field of the record named " (tt "RECORD-SYMBOL-mutex") ".") (p "Returns the result of " (tt "BODY ...") ".") (highlight scheme "(define-record-type foo\n  (make-foo a b mtx)\n  foo?\n  (a foo-a)\n  (b foo-b)\n  (mtx foo-mutex) )\n\n(define f1 (make-foo 1 2 (make-mutex 'foo)))\n\n(record/synch foo f1 (+ (foo-a f1) (foo-b f1)))"))) (section 5 "record-synch/lock" (def (sig (syntax "(record-synch/lock RECORD-SYMBOL RECORD-OBJECT [BODY ...]) => OBJECT" (id record-synch/lock))) (p "Execute " (tt "BODY ...") " while the " (tt "RECORD-OBJECT") " mutex is locked, and leave the mutex locked.") (p "Returns the result of " (tt "BODY ...") ".") (p (tt "RECORD-SYMBOL") " and " (tt "RECORD-OBJECT") " are per " (b (tt "record/synch")) "."))) (section 5 "record-synch/unlock" (def (sig (syntax "(record-synch/unlock RECORD-SYMBOL RECORD-OBJECT [BODY ...]) => OBJECT" (id record-synch/unlock))) (p "Execute " (tt "BODY ...") " while the " (tt "RECORD-OBJECT") " mutex is locked, and leave the mutex unlocked.") (p "Returns the result of " (tt "BODY ...") ".") (p (tt "RECORD-SYMBOL") " and " (tt "RECORD-OBJECT") " are per " (b (tt "record/synch")) ".") (p "Should the mutex be unlocked a warning is issued and the mutex is locked before executing the " (tt "BODY") ".")))) (section 4 "Synchronized Invocation - Continuation Unsafe" (p "These forms do not have the mutex lock/unlock wrapped in " (b (tt "dynamic-wind")) ", otherwise the same behavior.") (section 5 "%call/synch" (def (sig (syntax "(%call/synch MUTEXFORM PROCEDURE [ARGUMENTS ...]) => OBJECT" (id %call/synch))))) (section 5 "%call-with/synch" (def (sig (syntax "(%call-with/synch MUTEXFORM PROCEDURE [ARGUMENTS ...]) => OBJECT" (id %call-with/synch))))) (section 5 "%apply/synch" (def (sig (syntax "(%apply/synch MUTEXFORM PROCEDURE [ARGUMENTS ...]) => OBJECT" (id %apply/synch))))) (section 5 "%apply-with/synch" (def (sig (syntax "(%apply-with/synch MUTEXFORM PROCEDURE [ARGUMENTS ...]) => OBJECT" (id %apply-with/synch))))) (section 5 "%synch" (def (sig (syntax "(%synch MUTEXFORM [BODY ...]) => OBJECT" (id %synch))))) (section 5 "%synch-with" (def (sig (syntax "(%synch-with MUTEXFORM VARIABLE [BODY ...]) => OBJECT" (id %synch-with))))) (section 5 "%synch/lock" (def (sig (syntax "(%synch/lock MUTEXFORM [BODY ...]) => OBJECT" (id %synch/lock))))) (section 5 "%synch/unlock" (def (sig (syntax "(%synch/unlock MUTEXFORM [BODY ...]) => OBJECT" (id %synch/unlock))))) (section 5 "%let/synch" (def (sig (syntax "(%let/synch BINDINGS [BODY ...]) => OBJECT" (id %let/synch))))) (section 5 "%set!/synch" (def (sig (syntax "(%set!/synch (VARIABLE MUTEXFORM) [BODY ...]) => OBJECT" (id %set!/synch))))) (section 5 "%object/synch" (def (sig (syntax "(%object/synch MUTEXFORM [BODY ...]) => OBJECT" (id %object/synch))))) (section 5 "%record/synch" (def (sig (syntax "(%record/synch RECORD-SYMBOL RECORD-OBJECT [BODY ...]) => OBJECT" (id %record/synch))))) (section 5 "%record-synch/lock" (def (sig (syntax "(%record-synch/lock RECORD-SYMBOL RECORD-OBJECT [BODY ...]) => OBJECT" (id %record-synch/lock))))) (section 5 "%record-synch/unlock" (def (sig (syntax "(%record-synch/unlock RECORD-SYMBOL RECORD-OBJECT [BODY ...]) => OBJECT" (id %record-synch/unlock))))))) (section 3 "Object Synchronization" (section 4 "make-object/synch" (def (sig (procedure "(make-object/synch OBJECT [NAME]) => MUTEX" (id make-object/synch))) (p "Returns a mutex with a mutex-specific value of " (tt "OBJECT") ", and optional mutex " (tt "NAME") ".") (p (tt "NAME") " is either a symbol or a one element list of symbol. When a list the first element is used as the basis for a generated symbol. When a symbol it is used literally as the mutex name.") (p "When " (tt "NAME") " is missing a generated symbol with the prefix " (b (tt "synchobj")) " is provided."))) (section 4 "object?/synch" (def (sig (procedure "(object?/synch OBJECT [PREDICATE]) => BOOLEAN" (id object?/synch))) (p "Is the " (tt "OBJECT") " a synchronized object - a mutex with a non-void mutex specific?") (p "The optional " (tt "PREDICATE") " is used to verify the type of the mutex-specific binding. Otherwise any object is accepted."))) (section 4 "define-constructor/synch" (def (sig (syntax "(define-constructor/synch CTORNAME [ID])" (id define-constructor/synch))) (highlight scheme "(define-constructor/synch make-hash-table hash-table/synch:)\n;=>\n(define (make-hash-table/sync . args)\n  (make-object/synch (apply make-hash-table args) '(hash-table/synch:)) )"))) (section 4 "define-predicate/synch" (def (sig (syntax "(define-predicate/synch PREDNAME)" (id define-predicate/synch))) (highlight scheme "(define-predicate/synch hash-table?)\n;=>\n(define (hash-table?/sync obj) (object?/synch obj hash-table?))"))) (section 4 "define-operation/synch" (def (sig (syntax "(define-operation/synch OPERNAME)" (id define-operation/synch))) (p "Note that the operand must be the first argument of " (tt "OPERNAME") ".") (highlight scheme "(define-operation/synch hash-table-set!)\n;=>\n(define (hash-table-set!/sync mtx+obj . args)\n  (let ((mtx (if (pair? mtx+obj) (car mtx+obj) mtx+obj)))\n    (check-mutex+object 'hash-table-set!/synch mtx 'object/synch)\n    (synch-with mtx+obj obj (apply hash-table-set! obj args)) ) )"))))) (section 2 "Usage" (highlight scheme "(require-extension synch)") (p "or") (highlight scheme "(require-library synch)\n...\n(import synch)")) (section 2 "Examples") (section 2 "Notes" (p "Inspired by Thomas Chust.")) (section 2 "Bugs and Limitations") (section 2 "Author" (p (int-link "/users/kon-lovett" "Kon Lovett"))) (section 2 "Requirements" (p (int-link "/man/4/Unit srfi-18" "Unit srfi-18") " " (int-link "/man/4/check-errors" "check-errors"))) (section 2 "Version history" (dl (dt "2.1.0") (dd "Support for mutex lock/unlock arguments. Operation wrapper macros.") (dt "2.0.0") (dd "Port to hygienic Chicken. Removed 'set-object!/synch'."))) (section 2 "License" (p "Copyright (C) 2009 Kon Lovett.  All rights reserved.") (p "Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the Software), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:") (p "The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.") (p "THE SOFTWARE IS PROVIDED ASIS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.")))
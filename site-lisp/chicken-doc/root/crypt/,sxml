((section 2 "crypt" (p "This egg provides functions for generating secure password hashes.") (p "This is done by providing Chicken bindings for the Unix crypt() function. It will attempt to use the system's crypt() for all available types, and supplies fallbacks when the native crypt does not implement a common scheme like Niels Provos' bcrypt() or Ulrich Drepper's SHA-2 based crypt().") (section 3 "Basic usage" (p "Basic usage is extremely simple (just like Unix crypt()):") (section 4 "Generating a new password hash" (highlight scheme "(use crypt)\n\n(crypt \"password\") => \"$2a$12$eeOD.RHX7kex47wGOu3ZVu2JhRyQBBOyORhd/mTWjQghMWbrxGNCy\"") (p "This will automatically use the hashing mechanism currently deemed most secure. At the moment that is the Blowfish hashing scheme with 2^12 rounds. A new random salt is automatically generated each time this procedure is invoked with only one argument.")) (section 4 "Checking whether a password matches a hash" (p "This is done just like Unix crypt() by checking whether the generated hash matches the input hash:") (highlight scheme "(use crypt)\n\n(define h \"$2a$12$eeOD.RHX7kex47wGOu3ZVu2JhRyQBBOyORhd/mTWjQghMWbrxGNCy\")\n\n(string=? (crypt \"password\" h) h) => #t\n(string=? (crypt \"wrong\" h) h) => #f"))) (section 3 "Why use crypt()?" (p "The advantage of Unix crypt() over other password hashing schemes is that crypt() provides a way to upgrade the hashing mechanism to a more secure one without having to rehash all passwords; hashes are stored with a prefix code which indicates the hashing mechanism used to generate that hash, so they continue to work using the old algorithm while newly generated hashes are hashed using the stronger algorithm.") (p "Other languages might include " (link "http://codahale.com/how-to-safely-store-a-password/" "just a library specifically for bcrypt()") ", but this egg's author thinks it is silly to provide a separate library with a dedicated API, precisely because crypt() is " (i "designed") " to transparently upgrade to stronger algorithms as time progresses. bcrypt(), because it is " (link "http://www.usenix.org/events/usenix99/provos.html" "adaptive for CPU speed improvements") ", will provide good security for the foreseeable future " (i "as long as no weaknesses are discovered in the algorithm itself") ". Once that happens (or a substantially better scheme is developed, etc) you would need to replace all calls to that library with a new one (or change bcrypt() to include whatevercrypt() code).") (section 4 "Background info" (p "Crypt hashes come in three basic flavors:") (section 5 "Raw DES" (pre "rEK1ecacw.7.c   (salt: rE)") (p "This is just a raw base64-encoded DES password hash. The first two characters encode the salt, the rest is the hashed password.")) (section 5 "Extended DES" (p "Extended DES uses a variable number of encryption rounds and 24 bits of salt rather than 12 bits.") (pre " _J9..K0AyUubDrfOgO4s     (prefix: _J9..  salt: K0Ay)") (p "The leading underscore indicates we're using the extended DES scheme here. The first four characters after the underscore indicate the number of iterations to run the encryption algorithm, the next four represent the salt and the final eleven are the hashed password.")) (section 5 "Modern, modular format" (p "This looks like the following:") (pre "$ALG$ALGSPECIFIC") (p "For example:") (pre "$1$O3JMY.Tw$AdLnLjQ/5jXF9.MTp3gHv/   (prefix: $1$  salt: O3JMY.Tw)") (p "For more examples of hashes, see the " (link "http://openwall.info/wiki/john/sample-hashes" "OpenWall/John the Ripper community wiki page with sample hashes")) (p "The ALG encodes the algorithm used for generating the hash, the ALGSPECIFIC is usually the salt followed by the hash. Some schemes store some additional settings before the salt, and some separate the salt from the hash with a dollar sign.") (p "Currently, the following values for " (tt "ALG") " are standardized:") (dl (dt (tt "$1$")) (dd "Paul Hennig-Kamp's MD5 scheme. This is a very baroque system, introduced in FreeBSD, which runs MD5 for a large but " (i "fixed") " number of iterations on the password.") (dt (tt "$2a$")) (dd "Niels Provos' Blowfish scheme. This is an adaptable scheme introduced in OpenBSD, which allows the system administrator to determine the number of rounds to run the algorithm. As hardware speed improves, this number can be increased to compensate.") (dt (tt "$5$")) (dd "Ulrich Drepper's SHA-256 scheme. This is also an adaptable scheme, introduced in glibc.") (dt (tt "$6$")) (dd "Ulrich Drepper's SHA-512 scheme. Same as the above, except with hashes of double the size :)")) (p "There are also some less common values:") (dl (dt (tt "$apr1$")) (dd "Identical to " (tt "$1$") ". This prefix is generated by the Apache Portable Runtime library (used by " (tt "htpasswd") ", for example)") (dt "{SHA}") (dd "SHA-1 hash, also used by the Apache Portable Runtime library. (yes, this is not compatible with the standard dollar-sign prefix. Apparently these guys " (b "like") " being completely incompatible to the rest of the world)") (dt (tt "$P$")) (dd "MD5-based hash used by " (link "http://www.openwall.com/phpass/" "PHPass - the Portable PHP password hashing framework")) (dt (tt "$H$")) (dd "Same as above, but used by " (link "http://area51.phpbb.com/docs/code/phpBB3/_includes---functions.php.html#functionphpbb_hash" "PHPbb") " because, well, they're PHP developers. (I wonder if these developers are somehow related to the people working on APR...)"))))) (section 3 "License" (pre " All code in this egg is explicitly placed in the public domain. You may do whatever you want with it.") (p "This egg contains code written by the following people:") (ul (li "Peter Bex (Chicken glue code, MD5 and DES crypt implementation)") (li "Colin Plumb (MD5 code)") (li (link "http://www.akkadia.org/drepper/sha-crypt.html" "Ulrich Drepper") " (SHA-2 implementation)") (li "\"" (link "http://www.openwall.org/crypt" "Solar Designer") "\" (Blowfish implementation, salt generation code)") (li (link "http://ka9q.net/code/des/" "Phil Karn") " (DES code)"))) (section 3 "References" (ul (li "Shiro Kawai, \"" (link "http://blog.practical-scheme.net/gauche/20100427-crypt-bcrypt" "Blowfish password hashing") "\"") (li "Thomas Ptacek, \"" (link "http://chargen.matasano.com/chargen/2007/9/7/enough-with-the-rainbow-tables-what-you-need-to-know-about-s.html" "Enough With The Rainbow Tables: What You Need To Know About Secure Password Schemes") "\"") (li "Coda Hale, \"" (link "http://codahale.com/how-to-safely-store-a-password/" "How to safely store a password") "\"") (li "Niels Provos and David Mazi√®res, \"" (link "http://www.usenix.org/events/usenix99/provos.html" "A Future-Adaptable Password Scheme") "\"") (li "Philip Leong and Chris Tham, \"" (link "http://members.value.com.au/christie/usenix91.htm" "Unix Password Encryption Considered Insecure") "\"") (li "J. Orlin Grabbe, \"" (link "http://orlingrabbe.com/des.htm" "The DES Algorithm Illustrated") "\"")))))
(index ("machine-name" 0) ("short-user-name" 165) ("long-user-name" 309) ("machine-location" 450) ("metric?" 879) ("computer-name" 970) ("console-user" 1100) ("local-host-name" 1378) ("location-name" 1567) ("session-info" 1666) ("main-bundle-path" 2294) ("tick-count" 2460) ("delay" 2665) ("gestalt" 2867) ("osstatus-condition?" 3324) ("oserr-condition?" 3415) ("open-url" 3500) ("osstatus-condition?" 3648))
(def (sig (procedure "(machine-name) => STRING" (id machine-name))) (p "The machine name from core services. Probably not the same as " (tt "(get-host-name)") "."))
(def (sig (procedure "(short-user-name) => STRING" (id short-user-name))) (p "The short name for the user. Based on the current process uid."))
(def (sig (procedure "(long-user-name) => STRING" (id long-user-name))) (p "The long name for the user. Based on the current process uid."))
(def (sig (procedure "(machine-location) => VECTOR/4" (id machine-location))) (p "Returns a 4 element vector:") (dl (dt "LATITUDE") (dd "Latitude in degrees north to 2 decimal places.") (dt "LONGITUDE") (dd "Longitude in degrees east to 2 decimal places.") (dt "DLS-OFFSET") (dd "Number of seconds to add for daylight saving time.") (dt "GMT-OFFSET") (dd "Number of seconds east of GMT, includes daylight saving time status.")))
(def (sig (procedure "(metric?) => BOOLEAN" (id metric?))) (p "Using the metric system?"))
(def (sig (procedure "(computer-name [STORE]) => STRING" (id computer-name))) (p "The computer name from system configuration."))
(def (sig (procedure "(console-user [STORE]) => VECTOR/3" (id console-user))) (p "Returns a 3 element vector:") (dl (dt "NAME") (dd "The (short) name of the console user.") (dt "UID") (dd "The user id of the console user.") (dt "GID") (dd "The group id of the console user.")))
(def (sig (procedure "(local-host-name [STORE]) => STRING" (id local-host-name))) (p "The local host name from system configuration. Probably not the same as " (tt "(get-host-name)") "."))
(def (sig (procedure "(location-name [STORE]) => STRING" (id location-name))) (p "The location."))
(def (sig (procedure "(session-info) => VECTOR/10" (id session-info))) (p "Returns a 10 element vector:") (dl (dt "SESSION-ID") (dd "The security session identifier number.") (dt "IS-ROOT") (dd "A root session?") (dt "HAS-GRAPHICS") (dd "Has graphics access?") (dt "HAS-TTY") (dd "Has tty?") (dt "IS-REMOTE") (dd "Is a remote session?") (dt "WAS-INITIALIZED") (dd "Initialized?") (dt "SHORT-USER-NAME") (dd "Short user name.") (dt "USER-ID") (dd "User identification number.") (dt "CONSOLE-SET") (dd "Console hardware number.") (dt "LOGIN-COMPLETED") (dd "Login operations complete?") (dt "IS-USER-ACTIVE") (dd "On console?")))
(def (sig (procedure "(main-bundle-path) => STRING" (id main-bundle-path))) (p "The full pathname of the currently running executable, including the program name."))
(def (sig (procedure "(tick-count) => INTEGER" (id tick-count))) (p "Returns an unsigned 32-bit integer that indicates the current number of ticks (1/60th of a second) since the system last started up."))
(def (sig (procedure "(delay TICKS) => INTEGER" (id delay))) (p "Suspend execution for the specified number of " (tt "TICKS") ". Returns an unsigned integer that indicates the ticks after the delay."))
(def (sig (procedure "(gestalt SELECTOR) => INTEGER" (id gestalt))) (p "Calls the Gestalt Manager with specified " (tt "SELECTOR") " and returns an unsigned 32-bit integer.") (p "The " (tt "SELECTOR") " can be a string, symbol, or an unsigned integer. When a string or symbol it is converted to a Macintosh 4-byte character value - an unsigned 32-bit integer. The string length may not be greater than 4 but can be less; space padding will be performed."))
(def (sig (procedure "(osstatus-condition? OBJECT) => boolean" (id osstatus-condition?))))
(def (sig (procedure "(oserr-condition? OBJECT) => boolean" (id oserr-condition?))))
(def (sig (procedure "(open-url URL-STRING)" (id open-url))) (p "Opens the " (tt "URL-STRING") " using the system-dependent default application."))
(def (sig (procedure "(osstatus-condition? OBJECT) => boolean" (id osstatus-condition?))))

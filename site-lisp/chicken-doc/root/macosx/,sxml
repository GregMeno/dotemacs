((tags "egg") (section 2 "macosx" (toc)) (section 2 "Documentation" (p "Very incomplete MacOS X Core API.") (section 3 "Environment Query" (section 4 "Usage" (highlight scheme "(require-extension macosx-env)")) (section 4 "machine-name" (def (sig (procedure "(machine-name) => STRING" (id machine-name))) (p "The machine name from core services. Probably not the same as " (tt "(get-host-name)") "."))) (section 4 "short-user-name" (def (sig (procedure "(short-user-name) => STRING" (id short-user-name))) (p "The short name for the user. Based on the current process uid."))) (section 4 "long-user-name" (def (sig (procedure "(long-user-name) => STRING" (id long-user-name))) (p "The long name for the user. Based on the current process uid."))) (section 4 "machine-location" (def (sig (procedure "(machine-location) => VECTOR/4" (id machine-location))) (p "Returns a 4 element vector:") (dl (dt "LATITUDE") (dd "Latitude in degrees north to 2 decimal places.") (dt "LONGITUDE") (dd "Longitude in degrees east to 2 decimal places.") (dt "DLS-OFFSET") (dd "Number of seconds to add for daylight saving time.") (dt "GMT-OFFSET") (dd "Number of seconds east of GMT, includes daylight saving time status.")))) (section 4 "metric?" (def (sig (procedure "(metric?) => BOOLEAN" (id metric?))) (p "Using the metric system?"))) (section 4 "computer-name" (def (sig (procedure "(computer-name [STORE]) => STRING" (id computer-name))) (p "The computer name from system configuration."))) (section 4 "console-user" (def (sig (procedure "(console-user [STORE]) => VECTOR/3" (id console-user))) (p "Returns a 3 element vector:") (dl (dt "NAME") (dd "The (short) name of the console user.") (dt "UID") (dd "The user id of the console user.") (dt "GID") (dd "The group id of the console user.")))) (section 4 "local-host-name" (def (sig (procedure "(local-host-name [STORE]) => STRING" (id local-host-name))) (p "The local host name from system configuration. Probably not the same as " (tt "(get-host-name)") "."))) (section 4 "location-name" (def (sig (procedure "(location-name [STORE]) => STRING" (id location-name))) (p "The location."))) (section 4 "session-info" (def (sig (procedure "(session-info) => VECTOR/10" (id session-info))) (p "Returns a 10 element vector:") (dl (dt "SESSION-ID") (dd "The security session identifier number.") (dt "IS-ROOT") (dd "A root session?") (dt "HAS-GRAPHICS") (dd "Has graphics access?") (dt "HAS-TTY") (dd "Has tty?") (dt "IS-REMOTE") (dd "Is a remote session?") (dt "WAS-INITIALIZED") (dd "Initialized?") (dt "SHORT-USER-NAME") (dd "Short user name.") (dt "USER-ID") (dd "User identification number.") (dt "CONSOLE-SET") (dd "Console hardware number.") (dt "LOGIN-COMPLETED") (dd "Login operations complete?") (dt "IS-USER-ACTIVE") (dd "On console?")))) (section 4 "main-bundle-path" (def (sig (procedure "(main-bundle-path) => STRING" (id main-bundle-path))) (p "The full pathname of the currently running executable, including the program name."))) (section 4 "tick-count" (def (sig (procedure "(tick-count) => INTEGER" (id tick-count))) (p "Returns an unsigned 32-bit integer that indicates the current number of ticks (1/60th of a second) since the system last started up."))) (section 4 "delay" (def (sig (procedure "(delay TICKS) => INTEGER" (id delay))) (p "Suspend execution for the specified number of " (tt "TICKS") ". Returns an unsigned integer that indicates the ticks after the delay."))) (section 4 "gestalt" (def (sig (procedure "(gestalt SELECTOR) => INTEGER" (id gestalt))) (p "Calls the Gestalt Manager with specified " (tt "SELECTOR") " and returns an unsigned 32-bit integer.") (p "The " (tt "SELECTOR") " can be a string, symbol, or an unsigned integer. When a string or symbol it is converted to a Macintosh 4-byte character value - an unsigned 32-bit integer. The string length may not be greater than 4 but can be less; space padding will be performed."))) (section 4 "osstatus-condition?" (def (sig (procedure "(osstatus-condition? OBJECT) => boolean" (id osstatus-condition?))))) (section 4 "oserr-condition?" (def (sig (procedure "(oserr-condition? OBJECT) => boolean" (id oserr-condition?)))))) (section 3 "URL Support" (section 4 "Usage" (highlight scheme "(require-extension macosx-url)")) (section 4 "open-url" (def (sig (procedure "(open-url URL-STRING)" (id open-url))) (p "Opens the " (tt "URL-STRING") " using the system-dependent default application."))) (section 4 "osstatus-condition?" (def (sig (procedure "(osstatus-condition? OBJECT) => boolean" (id osstatus-condition?))))))) (section 2 "Requirements" (p (int-link "dollar") " " (int-link "check-errors") " " (int-link "condition-utils"))) (section 2 "Author" (p (int-link "/users/kon-lovett" "Kon Lovett"))) (section 2 "Version history" (dl (dt "2.1.2") (dd "Uses " (int-link "condition-utils") ".")) (p ": 2.1.1 :") (dl (dt "2.1.0") (dd "Needs \"check-errors\" extension.") (dt "2.0.0") (dd "Chicken 4 release."))) (section 2 "License" (p "Copyright (C) 2009 Kon Lovett.  All rights reserved.") (p "Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the Software), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:") (p "The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.") (p "THE SOFTWARE IS PROVIDED ASIS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.")))
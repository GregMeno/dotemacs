((tags "egg") (toc) (section 2 "3viewer" (section 3 "Introduction" (p (tt "3viewer") " is a simple 3D viewer application for OpenGL graphics.")) (section 3 "Usage" (highlight scheme "(require-extension 3viewer)")) (section 3 "Requirements" (p (int-link "opengl")) (p (int-link "glut")) (p (int-link "defstruct")) (p (int-link "matchable"))) (section 3 "Documentation" (section 4 "General" (section 5 "start-viewer" (def (sig (procedure "(start-viewer #!key w h title init)" (id start-viewer))) (p "Starts the viewer by opening a window with the given size and title. If given, then " (tt "init") " keyword parameter should hold a thunk that will be executed after the viewer has been initialized. " (tt "start-viewer") " never returns.")))) (section 4 "View manipulation" (p "The view is centered around 0/0/0, and the camera position is initially set up at 0/0/<radius>. The radius and the rotation of the camera relative to the current view-transformation can be manipulated using " (tt "current-radius") " and " (tt "rotate-view") ". You can rotate with the mouse by holding the middle button and moving the pointer, and zoom by holding the right button and moving the pointer up or down. Clicking the left button over an object will select it.") (section 5 "current-radius" (def (sig (parameter "current-radius" (id current-radius))) (p "Gets or sets the radius of the camera-position, centered around the " (tt "0/0/0") " coordinate."))) (section 5 "rotate-view" (def (sig (procedure "(rotate-view xd yd)" (id rotate-view))) (p "Rotates the camera by xd/yd degres around the X and Y axis, respectively."))) (section 5 "current-refresh-delay" (def (sig (parameter "current-refresh-delay" (id current-refresh-delay))) (p "The time the current thread will sleep when the display is \"idle\". Defaults to 0.01 seconds."))) (section 5 "resize-window" (def (sig (procedure "(resize-window W H)" (id resize-window))) (p "Resizes the display window to the given size.")))) (section 4 "The Table" (p "The " (i "table") " is a list of text shown on the right side of the viewing window.") (section 5 "current-table" (def (sig (parameter "current-table" (id current-table))) (p "Holds a list of table entries, where each table entry is either " (tt "#f") " (which means an empty line) or a pair containing a title and a value to be shown in the respective line of the table. Setting this parameter to " (tt "#f") " disables the table.")))) (section 4 "User Messages" (section 5 "message" (def (sig (procedure "(message text)" (id message))) (p "Shows a message centered on the screen.")))) (section 4 "Effects" (p "Effects are code that is executed before every redraw operation and if the system is idle.") (section 5 "add-effect" (def (sig (procedure "(add-effect thunk #!optional name)" (id add-effect))) (p (tt "thunk") " will be executed repeatedly and should return a boolean indicating true if the effect should remain active or false if the effect should be removed. " (tt "name") " gives the effect a name for later retrieval. If " (tt "name") " is given and an effect is already registered under this name, then the previously existing effect is removed."))) (section 5 "remove-effect" (def (sig (procedure "(remove-effect name)" (id remove-effect))) (p "Removes the effect with the given name."))) (section 5 "remove-all-effects" (def (sig (procedure "(remove-all-effects)" (id remove-all-effects))) (p "Disables all existing effects."))) (section 5 "animation" (def (sig (parameter "animation" (id animation))) (p "The default animation of the view. By default no animation is active. Suitable values are " (tt "#f") " (off) or " (tt "'spin") " (spin view around Y axis).")))) (section 4 "Keymaps" (p (i "Keymaps") " map keyboard input to actions.") (section 5 "make-keymap" (def (sig (procedure "(make-keymap [KEY1 PROC1 ... [DEFAULTHANDLER]])" (id make-keymap))) (p "Creates and returns a keymap and fills it with the given key/keyhandler items. A key should be a character, a symbol indicating a special key or a list of the form " (tt "([alt] [control] [shift] CHAR)]]") ". A key-handler is a procedure that takes the key as its sole argument.") (p "If " (tt "DEFAULTHANDLER") " is given, it should be a procedure of one argument (the key value) that is invoked for all key-presses for which no item exists in the keymap. If the default-handler returns false, then any joined keymap (see below) will be tried.") (p "Special keys are mapped to symbols like this:") (table (tr (td "F1 - F12") (td (tt "f1") " - " (tt "f12"))) "\n" (tr (td "left") (td (tt "left"))) "\n" (tr (td "up") (td (tt "up"))) "\n" (tr (td "right") (td (tt "right"))) "\n" (tr (td "down") (td (tt "down"))) "\n" (tr (td "Page up") (td (tt "page-up"))) "\n" (tr (td "Page down") (td (tt "page-down"))) "\n" (tr (td "Home") (td (tt "home"))) "\n" (tr (td "End") (td (tt "end"))) "\n" (tr (td "Insert") (td (tt "insert")))))) (section 5 "default-keymap" (def (sig (constant "default-keymap" (id default-keymap))) (p "The default keymap, which defines some basic viewer operations:") (dl (dt (tt "#\\esc")) (dd "terminate process") (dt (tt "#\\t")) (dd "toggle table") (dt (tt "up")) (dd "rotate upwards") (dt (tt "down")) (dd "rotate downwards") (dt (tt "left")) (dd "rotate left") (dt (tt "right")) (dd "rotate right") (dt (tt "page-up")) (dd "zoom in") (dt (tt "page-down")) (dd "zoom out") (dt (tt "#\\space")) (dd "toggle animation")))) (section 5 "join-keymaps" (def (sig (procedure "(join-keymaps KEYMAP1 ...)" (id join-keymaps))) (p "Combines several keymaps and returns a new keymap that passes unhandled input to the next keymap in the list."))) (section 5 "keymap-ref" (def (sig (procedure "(keymap-ref KEYMAP KEY)" (id keymap-ref))) (p "Returns the key-handler procedure for " (tt "KEY") " in " (tt "KEYMAP") " or " (tt "#f") " if no entry exists for the given key."))) (section 5 "keymap-set!" (def (sig (procedure "(keymap-set! KEYMAP KEY HANDLER)" (id keymap-set!))) (p "Assigns a new or existing key-handler to a given key."))) (section 5 "current-keymap" (def (sig (parameter "current-keymap" (id current-keymap))) (p "Sets or returns the currently active keymap.")))) (section 4 "Objects" (p (i "Objects") " represent visual entities in the display and manage redisplaying and selection. Objects are addressed by their " (i "ID") ", an exact integer.") (section 5 "add-object" (def (sig (procedure "(add-object RENDER #!key name select animate)" (id add-object))) (p "Creates a new object and returns its ID. " (tt "name") " is an optional name for ther object. " (tt "RENDER") " is a procedure taking an object ID and performs the necessary graphical operations to render the object into the OpenGL buffer. " (tt "select") " is a procedure taking an object ID and is invoked when the user clicks on the rendered object in the viewer window. " (tt "animate") " is a procedure taking an object ID and defines an animation to be executed on each \"tick\" (redraw or when the system is idle). If the animation procedure returns true, then the object will be re-rendered."))) (section 5 "remove-object" (def (sig (procedure "(remove-object id)" (id remove-object))) (p "Removes the object with the given ID."))) (section 5 "object-property" (def (sig (procedure "(object-property ID PROPERTY)" (id object-property))) (p "Returns the named property of the given object. You can use") (pre " (set! (object-property ID PROPERTY) VALUE)") (p "to assign a value to a n object-property."))) (section 5 "object-highlighted?" (def (sig (procedure "(object-highlighted? ID)" (id object-highlighted?))) (p "Returns true, if the object with the given ID is currently under the mouse pointer."))) (section 5 "all-objects" (def (sig (procedure "(all-objects)" (id all-objects))) (p "Returns a list of the IDs of all existing objects."))) (section 5 "number-of-objects" (def (sig (procedure "(number-of-objects)" (id number-of-objects))) (p "Returns the number of existing objects."))) (section 5 "remove-all-objects" (def (sig (procedure "(remove-all-objects)" (id remove-all-objects))) (p "Removes all existing objects."))) (section 5 "update-object" (def (sig (procedure "(update-object id)" (id update-object))) (p "Marks the object with the given ID as \"dirty\" and as requiring re-rendering."))) (section 5 "update-all-objects" (def (sig (procedure "(update-all-objects)" (id update-all-objects))) (p "Marks all objects as \"dirty\".")))) (section 4 "Transformations" (section 5 "current-world-transformation" (def (sig (parameter "current-world-transformation" (id current-world-transformation))) (p "Should hold a thunk that sets the current world-transformation."))) (section 5 "current-view-transformation" (def (sig (parameter "current-view-transformation" (id current-view-transformation))) (p "A 16-element " (tt "f64vector") " that specifies the view-transformation as a 4x4 matrix in column major order.")))) (section 4 "OpenGL State for Rendering Procedures" (p "The initial OpenGL state is roughly as follows:") (highlight scheme "(glut:InitDisplayMode (bitwise-ior glut:DOUBLE glut:RGBA glut:DEPTH))\n\n(glut:DisplayFunc <internal redrawing >)\n(glut:VisibilityFunc <visible)\n(gl:Enable gl:DEPTH_TEST)\n(gl:Enable gl:CULL_FACE)\n(gl:Enable gl:LINE_SMOOTH)\n(gl:Enable gl:BLEND)\n(gl:BlendFunc gl:SRC_ALPHA gl:ONE_MINUS_SRC_ALPHA)\n(gl:LineWidth 1.0)") (p "A select buffer is created internally.") (p "GLUT callbacks are defined as with") (pre " glut:DisplayFunc\n glut:VisibilityFunc\n glut:KeyboardFunc\n glut:SpecialFunc\n glut:MouseFunc\n glut:MotionFunc\n glut:PassiveMotionFunc\n glut:ReshapeFunc"))) (section 3 "Examples" (highlight scheme ";;; shows a spinning red cube\n\n(use gl glut 3viewer)\n\n(define a 0)\n\n(define (spin id)\n  (set! a (modulo (+ a 0.25) 360)))\n\n(define (colorize id col)\n  (gl:Materialfv \n   gl:FRONT_AND_BACK gl:AMBIENT_AND_DIFFUSE\n   (if (object-highlighted? id)\n       '#f32(1 1 0 1)\n       col)))\n\n(define (draw-cube id)\n  (colorize id '#f32(1 0 0 1))\n  (gl:Rotatef a 1 0 0)\n  (gl:Rotatef a 0 1 0)\n  (gl:Rotatef (- a) 0 0 1)\n  (glut:SolidCube 1))\n\n(add-object draw-cube animate: spin select: (lambda _ (print \"oink!\")))\n(start-viewer)")) (section 3 "Author" (p (int-link "/users/felix winkelmann" "felix winkelmann"))) (section 3 "License" (pre "Copyright (c) 2010, Felix L. Winkelmann\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n3. The name of the authors may not be used to endorse or promote products\n   derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR\nIMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\nOF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,\nINCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\nNOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n ")) (section 3 "Version History" (dl (dt "0.2") (dd "fixed missing dependencies (thanks to Mario)") (dt "0.1") (dd "initial release")))))
((tags "egg") (section 2 "Hyde" (toc) (section 3 "Description" (p "A static website compiler")) (section 3 "Author" (p (int-link "/users/moritz-heidkamp" "Moritz Heidkamp"))) (section 3 "Requirements" (p "Requires the " (int-link "environments") ", " (int-link "sxml-transforms") ", " (int-link "matchable") ", " (int-link "scss") ", " (int-link "filepath") ", " (int-link "spiffy") ", " (int-link "doctype") ", " (int-link "colorize") ", " (int-link "multidoc") ", " (int-link "defstruct") ", " (int-link "atom") " and " (int-link "rfc3339") " extensions.") (p "Since there is no native " (link "http://daringfireball.net/projects/markdown/" "Markdown") " parser available in Chicken at the moment, you'll also have to have a " (tt "markdown") " program available in your " (tt "PATH") " to use Markdown in your pages.")) (section 3 "Documentation" (p "Hyde is a program for compiling static websites from a variety of input files. It is basically a Schemey clone of programs such as " (link "http://webby.rubyforge.org/" "Webby") " and, particularly name-wise, " (link "http://jekyllrb.com/" "Jekyll") ". Note that there is " (link "http://ringce.com/hyde" "another project named Hyde") " which is similar in purpose but written in Python.") (p "Hyde can be run through the " (tt "hyde") " executable contained in this egg.") (p "A website is, in Hyde's sense, a directory containing at least a " (tt "hyde.scm") " file. This file is evaluated before any command and can be used to set parameters or define helper functions. It should also contain a directory of source files (unless the " (tt "(source-dir)") " parameter points somewhere outside the current directory). Invoking the compilation process will recursively traverse " (tt "(source-dir)") " and do one of the following things for each file it finds:") (ul (li "If the file's extension is unknown to Hyde, copy the file to the same relative path within " (tt "(output-dir)") " unchanged.") (li "If the file's extension is known to Hyde, translate its contents, possibly wrap the result in one or more layouts and write it to the same relative path within " (tt "(output-dir)") ", possibly changing its extension.")) (p "In the latter case, the translator used is determined by the source file's extension (see " (int-link "#translators" "translators") " for a list of available translators). Before translation, the file is " (tt "(read)") ", i.e. the first s-expression in the file is read from it. This s-expression must be an alist (or a null list) holding arbitrary page-vars which are made available within the page's as well as the layouts' evaluation environment. This can be used to set a page title, for example. The rest of the file is considered the page's body and is left to be translated by the translator.")) (section 3 "Example" (p "Hyde's functionality is probably best understood by an example session. Let's start by initializing a site:") (pre "   $ mkdir cool-site\n   $ cd cool-site \n   $ hyde init\n   creating layouts\n   creating src\n   creating out\n   creating hyde.scm\n   creating layouts/default.sxml\n   ") (p "We now have a basic site structure. The next step would probably be to add some pages, so let's start by creating an index page in wiki (i.e. svnwiki) format:") (pre "   $ hyde new wiki index\n   src/index.wiki\n   $ cat src/index.wiki\n   ((title . \"index\"))\n   ") (p "As you can see, Hyde created the source file and inserted the file name as a page-var called " (tt "title") ", too (actually it's the other way around: the argument for " (tt "hyde new") " is the title and Hyde transforms this into a suitable file name, i.e. it removes special chars and substitutes spaces with dashes). This is handy as the default layout uses this to fill the " (tt "<title>") " tag in the resulting HTML document:") (pre "   $ cat layouts/default.sxml \n   ()\n   `((xhtml-1.0-strict)\n     (html\n      (head\n       (title ,($ 'title)))\n      (body\n       (h1 ,($ 'title))\n       (inject ,contents))))") (p "As we learn from that example, page-vars can be referred to through the " (tt "$") " function which is made available by Hyde in the environment which SXML (as well as SCSS and Atom) pages are evaluated in. Also note the " (tt "inject") " transformation rule which allows injection of unescaped HTML into the document. Finally, the variable " (tt "contents") " contains the translated page contents (see " (int-link "#available-bindings-during-page-evaluation" "Available Bindings During Page Evaluation") ").") (p "Let's add a little content to our page and compile the site:") (pre "   $ echo 'Hey, welcome to my cool site!' >> src/index.wiki\n   $ hyde\n   cleaning output directory\n   preparing compilation\n   compiling pages\n   * index.wiki -> index.html") (pre "   $ cat out/index.html \n   <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n   <html>\n   <head>\n   <title>index</title></head>\n   <body>\n   <h1>index</h1>\n   <p>Hey, welcome to my cool site!</p>\n   </body></html>") (p "As you can see, Hyde renamed " (tt "index.wiki") " to " (tt "index.html") ". This can be changed through the " (tt "default-extension") " parameter or by adding a page-var " (tt "ext") " to the page:") (pre "   $ cat src/index.wiki\n   ((title . \"index\")\n    (ext   . \"xml\"))\n   Hey, welcome to my cool site!") (pre "   $ hyde            \n   cleaning output directory\n   preparing compilation\n   compiling pages\n   * index.wiki -> index.xml")) (section 3 "Available Options" (p "The " (tt "hyde") " executable understands the following options:") (dl (dt (tt "-e HYDE_ENV_NAME")) (dd "Sets the hyde environment to execute the command in (see " (int-link "#available-commands" "Available Commands") " for which commands respect this option and " (int-link "#define-hyde-environment" "define-hyde-environment") " on how to define environments)."))) (section 3 "Available Commands" (p "The " (tt "hyde") " executable understands the following commands:") (dl (dt (tt "hyde init")) (dd "Initializes a site in the current directory.") (dt (tt "hyde new <page-type> [<title> ...]")) (dd "Creates a new page with the given page type and title. The page's filename will be inferred from the given title by downcasing it and replacing spaces with dashes.") (dt (tt "hyde serve")) (dd "Serves the current site with " (int-link "spiffy") ", (re-)compiling the requested page on each request (useful for development). This command respects the " (tt "-e") " option.") (dt (tt "hyde")) (dd "Compiles the current site. This command respects the " (tt "-e") " option."))) (section 3 "Configuration Parameters" (p "The following parameters are available to configure Hyde's behavior. They are usually set in a site's " (tt "hyde.scm") ".") (def (sig (parameter "(source-dir [dir])" (id source-dir))) (p "The directory in which source pages are kept. Default: " (tt "\"src\""))) (def (sig (parameter "(layouts-dir [dir])" (id layouts-dir))) (p "The directory in which layouts are kept. Default: " (tt "\"layouts\""))) (def (sig (parameter "(output-dir [dir])" (id output-dir))) (p "The directory compilation results will be written to. Default: " (tt "\"out\""))) (def (sig (parameter "(default-layouts [layouts])" (id default-layouts))) (p "A list of default layouts which are applied when no other is specified. Default: " (tt "'(\"default.sxml\")"))) (def (sig (parameter "(clean-before-build [bool])" (id clean-before-build))) (p "Indicates whether to purge the " (tt "output-dir") " before compilation or not. Default: " (tt "#t"))) (def (sig (parameter "(excluded-paths [regexes])" (id excluded-paths))) (p "A list of regular expressions matching paths which are to be ignored when compiling. Default: " (tt "`(,(irregex (seq \"~\" eos)))"))) (def (sig (parameter "(default-extension [extension])" (id default-extension))) (p "The file extension to use for compiled pages which don't explicitly specify an extension. Default: " (tt "\"html\""))) (def (sig (parameter "(default-page-vars [page-vars])" (id default-page-vars))) (p "An alist which maps either (ir)regexps or procedures to page-vars. Each page has its " (tt "page-source-path") " matched against the (ir)regexps or is passed to the procedure. If it matches or returns non-" (tt "#f") ", the respective page-vars are appended to the page's local page-vars, i.e. local page-vars have precedence over them.  Default: " (tt "'()")) (p "Example:") (p "The following " (tt "default-page-vars") " would set the " (tt "layouts") " page-var to " (tt "(\"page.sxml\" \"default.sxml\")") " for all " (tt ".sxml") " pages with the relative path prefix " (tt "pages/") " and the page-vars " (tt "tags") " to " (tt "(awful)") " for all pages containing the word \"cool\":") (highlight scheme "(default-page-vars `(((seq bos \"pages/\" (+ any) \".sxml\" eos)\n                      (layouts \"page.sxml\" \"default.sxml\"))\n\n                     (,(lambda (page)\n                        (irregex-search \"cool\" (read-page page)))\n                      (tags awful))))")) (def (sig (parameter "(page-eval-env [env])" (id page-eval-env))) (p "The environment for evaluating SXML and SCSS files. Default: " (tt "(environment-copy (interaction-environment) #t)"))) (def (sig (parameter "(translators [translators-alist])" (id translators))) (p "An alist of source language translators indexed by file extensions. Default:") (pre "   `((\"sxml\" . ,hyde#translate/sxml) \n     (\"scss\" . ,hyde#translate/scss) \n     (\"md\"   . ,hyde#translate/markdown)\n     (\"wiki\" . ,hyde#translate/svnwiki)\n     (\"sw\"   . ,hyde#translate/svnwiki))") (p "Additionally, " (tt "(\"atom\" . ,hyde-atom#translate/atom)") " can be made available by loading the " (tt "hyde-atom") " extension from the site's " (tt "hyde.scm") ".")) (def (sig (parameter "(uri-path-prefix [path])" (id uri-path-prefix))) (p "A string that is prepended to all pages' " (tt "page-path") ". Default: " (tt "\"\"") ".")) (def (sig (parameter "(shortcut-links [shortcuts])" (id shortcut-links))) (p "An alist of shortcut names (symbols) mapping to URI templates containing " (tt "format") " placeholders. These shortcuts can be used with the following page translators:") (dl (dt "svnwiki") (dd "The " (tt "[[link]]") " syntax is extended to allow shortcuts to be used by prefixing the path with the shortcut name and a colon, for example: " (tt "[[foo:something]]") " will use the " (tt "foo") " shortcut and substitute the first placeholder with " (tt "\"something\"") ".") (dt "sxml") (dd "The transformation rule " (tt "shortcut") " can be used to expand a shortcut name into a URI, for example: " (tt "(a (@ (href (shortcut foo \"something\"))))") ".")) (p "This feature has been added in version 0.12."))) (section 3 "Helpers" (p "These procedures and macros are mainly intended for use in the " (tt "hyde.scm") " or in extension modules.") (def (sig (syntax "(define-hyde-environment name body ...)" (id define-hyde-environment))) (p "Defines an environment " (tt "name") ". The " (tt "body") " expressions are only evaluated when " (tt "hyde") " is executed with " (tt "-e [name]") ". This is useful to set different parameters for different scenarios or deployment locations. If no " (tt "-e") " option is set, the " (tt "default") " environment is used. Just " (tt "(define-hyde-environment default ...)") " to override it. See " (int-link "#available-commands" "Available Commands") " for which commands respect environments.")) (def (sig (syntax "(make-external-translator name)" (id make-external-translator))) (p "Creates a procedure that reads from " (tt "(current-input-port)") " and writes to the standard input of the program " (tt "name") " linewise. Afterwards, its standard output is read back and written to " (tt "(current-output-port)") ", also linewise. It can be used to create page translators for external programs, e.g. the markdown translator included in Hyde is defined like this:") (highlight scheme "(define translate/markdown (make-external-translator (markdown-program)))\n(translators (cons (list \"md\" translate/markdown) (translators)))"))) (section 3 "Available Bindings During Page Evaluation" (p "In pages which are evaluated as Scheme (currently SXML, SCSS and Atom pages), the following bindings are available:") (def (sig (procedure "($ page-var #!optional page)" (id $))) (p "Returns the value of " (tt "page-var") " (a symbol identifiying the page-var) or " (tt "#f") " if no " (tt "page-var") " of that name exists. By giving the optional " (tt "page") " argument, refer to that page's page-vars instead of the current page's.")) (def (sig (parameter "pages" (id pages))) (p "An alist of all available pages indexed by their source file names relative to " (tt "(source-dir)") ". The values are " (tt "page") " records.") (p "This used to be a constant up until version 0.13.")) (def (sig (procedure "(current-page)" (id current-page))) (p "Returns the current page's record.")) (def (sig (procedure "(page-path #!optional (page (current-page)))" (id page-path))) (p "Returns the given " (tt "page") "'s absolute URI path.")) (def (sig (procedure "(page-source-path #!optional (page (current-page)))" (id page-source-path))) (p "Returns the given " (tt "page") "'s source path relative to " (tt "(source-dir)") ".")) (def (sig (procedure "(page-vars #!optional (page (current-page)))" (id page-vars))) (p "Returns the given " (tt "page") "'s page-vars as an alist.")) (def (sig (procedure "(page-type #!optional (page (current-page)))" (id page-type))) (p "Returns the given " (tt "page") "'s type which is one of the following symbols:") (dl (dt "dynamic") (dd "a page which is handled by one of Hyde's page translators") (dt "static") (dd "a page which is just copied to " (tt "(output-dir)")) (dt "directory") (dd "a directory"))) (def (sig (procedure "(read-page page #!rest layouts)" (id read-page))) (p "Returns the given " (tt "page") "'s contents, possibly wrapped in the given " (tt "layouts") ". " (tt "page") " may be either a " (tt "page") " record or a path relative to " (tt "(source-dir)") ". This procedure is useful to create aggregate pages. Note that it will translate the contents of dynamic " (tt "page") "s even if they have not been compiled, yet. In this case, they will neither be wrapped in page-specific nor the default layouts, only the ones given in " (tt "layouts") ".")) (def (sig (constant "contents" (id contents))) (p "The translated contents of the current page. Only available in layouts."))) (section 3 "Change Log" (dl (dt "0.13") (dd "Update to scss 0.3. Make " (tt "pages") " a parameter in " (tt "page-eval-env") ".") (dt "0.12") (dd "Add " (tt "link-shortcuts") ".") (dt "0.11") (dd "Change " (tt "default-page-vars") " irregex keys to match against " (tt "page-source-path") " instead of " (tt "page-path") ". Add environments. Add " (tt "uri-path-prefix") ".") (dt "0.10") (dd "Add colorize support to svnwiki pages. Implement more powerful " (tt "default-page-vars") ". Add " (tt "make-external-translator") " (thanks to Christian Kellermann for the patch). Only recompile requested pages instead of the whole site with " (tt "hyde serve") ".") (dt "0.9") (dd "Print usage for unknown commands (thanks to Christian Kellermann). Add current-page binding and make it the default argument for all page record field accessors.") (dt "0.8") (dd "Add svnwiki and atom page translators. Make pages a proper type. Allow creation of aggregate pages through " (tt "read-page") ". Drop " (tt "sxml-shortcuts") " from " (tt "sxml-conversion-rules") "."))) (section 3 "To Do" (ul (li "document layout nesting") (li "change default extension to be an alist mapping source extensions to target extensions"))) (section 3 "License" (pre " Copyright (c) 2010, Moritz Heidkamp\n All rights reserved.\n \n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are\n met:\n \n Redistributions of source code must retain the above copyright\n notice, this list of conditions and the following disclaimer.\n \n Redistributions in binary form must reproduce the above copyright\n notice, this list of conditions and the following disclaimer in the\n documentation and/or other materials provided with the distribution.\n \n Neither the name of the author nor the names of its contributors may\n be used to endorse or promote products derived from this software\n without specific prior written permission.\n \n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n OF THE POSSIBILITY OF SUCH DAMAGE."))))
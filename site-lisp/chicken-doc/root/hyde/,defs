(index ("source-dir" 0) ("layouts-dir" 138) ("output-dir" 277) ("default-layouts" 423) ("clean-before-build" 613) ("excluded-paths" 797) ("default-extension" 1008) ("default-page-vars" 1211) ("page-eval-env" 2289) ("translators" 2479) ("uri-path-prefix" 3034) ("shortcut-links" 3201) ("define-hyde-environment" 3990) ("make-external-translator" 4583) ("$" 5222) ("pages" 5543) ("current-page" 5792) ("page-path" 5892) ("page-source-path" 6039) ("page-vars" 6230) ("page-type" 6381) ("read-page" 6747) ("contents" 7315))
(def (sig (parameter "(source-dir [dir])" (id source-dir))) (p "The directory in which source pages are kept. Default: " (tt "\"src\"")))
(def (sig (parameter "(layouts-dir [dir])" (id layouts-dir))) (p "The directory in which layouts are kept. Default: " (tt "\"layouts\"")))
(def (sig (parameter "(output-dir [dir])" (id output-dir))) (p "The directory compilation results will be written to. Default: " (tt "\"out\"")))
(def (sig (parameter "(default-layouts [layouts])" (id default-layouts))) (p "A list of default layouts which are applied when no other is specified. Default: " (tt "'(\"default.sxml\")")))
(def (sig (parameter "(clean-before-build [bool])" (id clean-before-build))) (p "Indicates whether to purge the " (tt "output-dir") " before compilation or not. Default: " (tt "#t")))
(def (sig (parameter "(excluded-paths [regexes])" (id excluded-paths))) (p "A list of regular expressions matching paths which are to be ignored when compiling. Default: " (tt "`(,(irregex (seq \"~\" eos)))")))
(def (sig (parameter "(default-extension [extension])" (id default-extension))) (p "The file extension to use for compiled pages which don't explicitly specify an extension. Default: " (tt "\"html\"")))
(def (sig (parameter "(default-page-vars [page-vars])" (id default-page-vars))) (p "An alist which maps either (ir)regexps or procedures to page-vars. Each page has its " (tt "page-source-path") " matched against the (ir)regexps or is passed to the procedure. If it matches or returns non-" (tt "#f") ", the respective page-vars are appended to the page's local page-vars, i.e. local page-vars have precedence over them.  Default: " (tt "'()")) (p "Example:") (p "The following " (tt "default-page-vars") " would set the " (tt "layouts") " page-var to " (tt "(\"page.sxml\" \"default.sxml\")") " for all " (tt ".sxml") " pages with the relative path prefix " (tt "pages/") " and the page-vars " (tt "tags") " to " (tt "(awful)") " for all pages containing the word \"cool\":") (highlight scheme "(default-page-vars `(((seq bos \"pages/\" (+ any) \".sxml\" eos)\n                      (layouts \"page.sxml\" \"default.sxml\"))\n\n                     (,(lambda (page)\n                        (irregex-search \"cool\" (read-page page)))\n                      (tags awful))))"))
(def (sig (parameter "(page-eval-env [env])" (id page-eval-env))) (p "The environment for evaluating SXML and SCSS files. Default: " (tt "(environment-copy (interaction-environment) #t)")))
(def (sig (parameter "(translators [translators-alist])" (id translators))) (p "An alist of source language translators indexed by file extensions. Default:") (pre "   `((\"sxml\" . ,hyde#translate/sxml) \n     (\"scss\" . ,hyde#translate/scss) \n     (\"md\"   . ,hyde#translate/markdown)\n     (\"wiki\" . ,hyde#translate/svnwiki)\n     (\"sw\"   . ,hyde#translate/svnwiki))") (p "Additionally, " (tt "(\"atom\" . ,hyde-atom#translate/atom)") " can be made available by loading the " (tt "hyde-atom") " extension from the site's " (tt "hyde.scm") "."))
(def (sig (parameter "(uri-path-prefix [path])" (id uri-path-prefix))) (p "A string that is prepended to all pages' " (tt "page-path") ". Default: " (tt "\"\"") "."))
(def (sig (parameter "(shortcut-links [shortcuts])" (id shortcut-links))) (p "An alist of shortcut names (symbols) mapping to URI templates containing " (tt "format") " placeholders. These shortcuts can be used with the following page translators:") (dl (dt "svnwiki") (dd "The " (tt "[[link]]") " syntax is extended to allow shortcuts to be used by prefixing the path with the shortcut name and a colon, for example: " (tt "[[foo:something]]") " will use the " (tt "foo") " shortcut and substitute the first placeholder with " (tt "\"something\"") ".") (dt "sxml") (dd "The transformation rule " (tt "shortcut") " can be used to expand a shortcut name into a URI, for example: " (tt "(a (@ (href (shortcut foo \"something\"))))") ".")) (p "This feature has been added in version 0.12."))
(def (sig (syntax "(define-hyde-environment name body ...)" (id define-hyde-environment))) (p "Defines an environment " (tt "name") ". The " (tt "body") " expressions are only evaluated when " (tt "hyde") " is executed with " (tt "-e [name]") ". This is useful to set different parameters for different scenarios or deployment locations. If no " (tt "-e") " option is set, the " (tt "default") " environment is used. Just " (tt "(define-hyde-environment default ...)") " to override it. See " (int-link "#available-commands" "Available Commands") " for which commands respect environments."))
(def (sig (syntax "(make-external-translator name)" (id make-external-translator))) (p "Creates a procedure that reads from " (tt "(current-input-port)") " and writes to the standard input of the program " (tt "name") " linewise. Afterwards, its standard output is read back and written to " (tt "(current-output-port)") ", also linewise. It can be used to create page translators for external programs, e.g. the markdown translator included in Hyde is defined like this:") (highlight scheme "(define translate/markdown (make-external-translator (markdown-program)))\n(translators (cons (list \"md\" translate/markdown) (translators)))"))
(def (sig (procedure "($ page-var #!optional page)" (id $))) (p "Returns the value of " (tt "page-var") " (a symbol identifiying the page-var) or " (tt "#f") " if no " (tt "page-var") " of that name exists. By giving the optional " (tt "page") " argument, refer to that page's page-vars instead of the current page's."))
(def (sig (parameter "pages" (id pages))) (p "An alist of all available pages indexed by their source file names relative to " (tt "(source-dir)") ". The values are " (tt "page") " records.") (p "This used to be a constant up until version 0.13."))
(def (sig (procedure "(current-page)" (id current-page))) (p "Returns the current page's record."))
(def (sig (procedure "(page-path #!optional (page (current-page)))" (id page-path))) (p "Returns the given " (tt "page") "'s absolute URI path."))
(def (sig (procedure "(page-source-path #!optional (page (current-page)))" (id page-source-path))) (p "Returns the given " (tt "page") "'s source path relative to " (tt "(source-dir)") "."))
(def (sig (procedure "(page-vars #!optional (page (current-page)))" (id page-vars))) (p "Returns the given " (tt "page") "'s page-vars as an alist."))
(def (sig (procedure "(page-type #!optional (page (current-page)))" (id page-type))) (p "Returns the given " (tt "page") "'s type which is one of the following symbols:") (dl (dt "dynamic") (dd "a page which is handled by one of Hyde's page translators") (dt "static") (dd "a page which is just copied to " (tt "(output-dir)")) (dt "directory") (dd "a directory")))
(def (sig (procedure "(read-page page #!rest layouts)" (id read-page))) (p "Returns the given " (tt "page") "'s contents, possibly wrapped in the given " (tt "layouts") ". " (tt "page") " may be either a " (tt "page") " record or a path relative to " (tt "(source-dir)") ". This procedure is useful to create aggregate pages. Note that it will translate the contents of dynamic " (tt "page") "s even if they have not been compiled, yet. In this case, they will neither be wrapped in page-specific nor the default layouts, only the ones given in " (tt "layouts") "."))
(def (sig (constant "contents" (id contents))) (p "The translated contents of the current page. Only available in layouts."))

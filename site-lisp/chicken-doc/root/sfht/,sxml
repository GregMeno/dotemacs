((tags "egg") (section 2 "sfht" (p "A dictionary data structure based on counting Bloom filters.") (toc)) (section 2 "Usage" (p "(require-extension sfht)")) (section 2 "Documentation" (p "The sfht library is an implementation of the Shared-node Fast Hash Table (SFHT) data structure described by Song, et al., in") (pre " Fast Hash Table Lookup Using Extended Bloom Filter: An Aid to Network Processing. (SIGCOMM'05)") (p "This code defines an " (tt "sfht") " object that implements a dictionary mapping of keys to values. The object responds to messages for querying, insertion of new elements, and deletion of existing elements. The interface of the " (tt "sfht") " object is particularly suitable for situations where the keys are represented by bit vectors or vectors of fixnum values.") (p "A counting Bloom filter is a Bloom filter that has been extended so that each bit of the filter has a counter associated with it. Upon insertion or deletion of an element, the counter is incremented or decremented, respectively. In order to find an element efficiently, we need to compute the " (tt "k") " hash values, read the counters at the " (tt "k") " locations, determine the smallest bucket size, and perform a linear search of that bucket for the element.") (section 3 "SFHT procedures" (p "The sfht object is created by a make-sfht function, the only user-visible function defined in this egg:") (def (sig (procedure "make-sfht:: N P MAKE-RNG-STATE RANDOM! KEY->VECTOR KEY-VECTOR-REF KEY-VECTOR-LENGTH [KEY-EQUAL?] -> SELECTOR" (id make-sfht))) (p "where") (dl (dt (tt "MAKE-RNG-STATE")) (dd "is a user-supplied function that takes in an integer argument and returns an RNG state value. ") (dt (tt "RANDOM!")) (dd "is a user-supplied function that generates a random positive integer, given a state value, which is expected to be mutated. ") (dt (tt "KEY->VECTOR")) (dd "is a user-supplied function that takes a key value and returns a vector.") (dt (tt "KEY-VECTOR-REF")) (dd "is a user-supplied function that retrieves an element from the vector returned by " (tt "KEY-VECTOR") ". ") (dt (tt "KEY-VECTOR-LENGTH")) (dd "is a user-supplied function that returns the length of the key vector.") (dt (tt "KEY->EQUAL?")) (dd "is a user-supplied predicate that takes two keys and returns " (tt "#t") " if they are equal. The default function used is " (tt "equal?"))) (p "The returned selector procedure can take one of the following arguments:") (dl (dt (tt "'get")) (dd "returns a procedure " (tt "LAMBDA KEY . DEFAULT-CLAUSE") " which searches the hash table for an association with a given " (tt "KEY") ", and returns a (key . value) pair of the found association. If an association with " (tt "KEY") " cannot be located in the hash table, the PROC returns the result of evaluating the " (tt "DEFAULT-CLAUSE") ". If the default clause is omitted, an error is signaled. " (tt "KEY") " must be comparable to the keys in the hash table by the " (tt "KEY-EQUAL?") " predicate specified when the hash table was created)") (dt (tt "'empty?")) (dd "returns " (tt "#t") " if the hash table is empty") (dt (tt "'size")) (dd "returns the size (the number of associations) in the hash table") (dt (tt "'clear!")) (dd "removes all associations from the hash table (thus making it empty)") (dt (tt "'put!")) (dd "returns a procedure " (tt "LAMBDA KEY VALUE") " which, given a " (tt "KEY") " and a " (tt "VALUE") ", adds the corresponding association to the hash table. If an association with the same " (tt "KEY") " already exists, its value is replaced with the " (tt "VALUE") ". The return value is " (tt "#f") ".") (dt (tt "'delete!")) (dd "returns a procedure " (tt "LAMBDA KEY . DEFAULT-CLAUSE") " which searches the hash table for an association with a given " (tt "KEY") ", deletes it, and returns a (key . value) pair of the found and deleted association. If an association with the KEY cannot be located in the hash table, the " (tt "PROC") " returns the result of evaluating " (tt "DEFAULT-CLAUSE") ". If the default clause is omitted, an error is signaled. ") (dt (tt "'debugprint")) (dd "prints out all the contents the Bloom filter, for debug purposes"))))) (section 2 "Examples" (pre "(require-extension iset)\n(require-extension sfht)\n(require-extension random-swb)\n\n(define sfht (make-sfht 100000 0.0001 \n\t\t\t(lambda (i) (make-swb-random-state i (fx+ i 17)))\n\t\t\tswb:random!\n\t\t\tinteger->bit-vector \n\t\t\t(compose (lambda (x) (if x 1 0)) bit-vector-ref)\n\t\t\tbit-vector-length))\n\n((sfht 'put!) 1 'one)\n((sfht 'get))")) (section 2 "About this egg" (section 3 "Author" (p (int-link "/users/ivan-raikov" "Ivan Raikov"))) (section 3 "Version history" (dl (dt "2.5") (dd "Documentation converted to wiki format") (dt "2.4") (dd "Typo fix") (dt "2.3") (dd "Ported to Chicken 4") (dt "2.1") (dd "Build script updated for better cross-platform compatibility") (dt "2.0") (dd "Introduced an API that is independent of the RNG used") (dt "1.3") (dd "Documentation updates") (dt "1.2") (dd "License upgrade to GPL v3") (dt "1.1") (dd "Added random-swb to the list of dependencies") (dt "1.0") (dd "Initial release"))) (section 3 "License" (pre "Copyright 2007-2010 Ivan Raikov.\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\nat your option any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nGeneral Public License for more details.\n\nA full copy of the GPL license can be found at\n<http://www.gnu.org/licenses/>."))))